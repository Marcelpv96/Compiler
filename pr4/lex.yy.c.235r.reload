
;; Function yy_state_type yy_get_previous_state() (_ZL21yy_get_previous_statev, funcdef_no=87, decl_uid=4292, cgraph_uid=87, symbol_order=114) (unlikely executed)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) rm  (1) re {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) q  (1) qm {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) qm {zero_extendqidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) q  (1) qm {*movqi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) ?mr {*cmphi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) q  (1) qn {*movqi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rm {extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rm  (1) re {*cmpsi_1}
            0 Costly set: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=15,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) rm {extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rmWz {*zero_extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) q  (1) qm {*movqi_internal}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 116:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 16
   Insn 124: point = 0
   Insn 123: point = 0
  BB 15
   Insn 116: point = 2
  BB 14
   Insn 114: point = 4
   Insn 113: point = 4
  BB 13
   Insn 110: point = 6
  BB 12
   Insn 108: point = 8
   Insn 107: point = 8
  BB 3
   Insn 36: point = 10
   Insn 35: point = 10
  BB 11
   Insn 147: point = 11
   Insn 100: point = 11
   Insn 98: point = 11
   Insn 97: point = 13
  BB 8
   Insn 73: point = 16
   Insn 72: point = 16
   Insn 71: point = 17
   Insn 70: point = 19
   Insn 69: point = 20
   Insn 68: point = 22
   Insn 67: point = 23
   Insn 64: point = 24
  BB 10
   Insn 145: point = 26
   Insn 87: point = 26
   Insn 86: point = 28
  BB 9
   Insn 82: point = 31
   Insn 81: point = 31
   Insn 78: point = 31
  BB 7
   Insn 22: point = 34
   Insn 21: point = 35
   Insn 20: point = 36
   Insn 19: point = 37
  BB 6
   Insn 52: point = 39
   Insn 51: point = 39
   Insn 50: point = 40
  BB 5
   Insn 45: point = 42
   Insn 44: point = 44
  BB 4
   Insn 40: point = 47
   Insn 39: point = 47
   Insn 18: point = 47
   Insn 38: point = 48
  BB 2
   Insn 17: point = 50
   Insn 16: point = 51
   Insn 31: point = 52
   Insn 30: point = 53
   Insn 29: point = 54
   Insn 27: point = 55
   Insn 25: point = 56
Compressing live ranges: from 57 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 78
changing reg in insn 98
changing reg in insn 25
changing reg in insn 123
changing reg in insn 99
changing reg in insn 81
changing reg in insn 79
changing reg in insn 72
changing reg in insn 64
changing reg in insn 62
changing reg in insn 20
changing reg in insn 50
changing reg in insn 34
changing reg in insn 26
changing reg in insn 100
changing reg in insn 27
changing reg in insn 101
changing reg in insn 100
changing reg in insn 19
changing reg in insn 38
changing reg in insn 35
changing reg in insn 33
changing reg in insn 28
changing reg in insn 87
changing reg in insn 45
changing reg in insn 18
changing reg in insn 88
changing reg in insn 68
changing reg in insn 61
changing reg in insn 48
changing reg in insn 29
changing reg in insn 35
changing reg in insn 38
changing reg in insn 44
changing reg in insn 39
changing reg in insn 21
changing reg in insn 16
changing reg in insn 113
changing reg in insn 19
changing reg in insn 31
changing reg in insn 116
changing reg in insn 22
changing reg in insn 17
changing reg in insn 107
changing reg in insn 20
changing reg in insn 30
changing reg in insn 110
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 51
changing reg in insn 64
changing reg in insn 78
changing reg in insn 67
changing reg in insn 67
changing reg in insn 69
changing reg in insn 68
changing reg in insn 86
changing reg in insn 69
changing reg in insn 69
changing reg in insn 97
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 86
changing reg in insn 87
changing reg in insn 97
changing reg in insn 98


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 23 count 29 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 23 count 29 (  1.7)


yy_state_type yy_get_previous_state()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12]
;;  ref usage 	r0={5d,13u} r1={7d,8u} r2={3d,7u} r3={1d,1u} r4={3d,3u} r5={4d,4u} r6={1d,2u} r7={1d,16u} r17={9d,7u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={3d,1u} r38={3d,1u} r39={2d,1u} r40={2d,1u} r41={2d,2u} 
;;    total ref usage 121{54d,67u,0e} in 59{59 regular + 0 call} insns.
(note 14 0 23 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  kill	
(note 23 14 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 15 23 25 2 NOTE_INSN_FUNCTION_BEG)
(insn 25 15 26 2 (set (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:1413 90 {*movsi_internal}
     (nil))
(debug_insn 26 25 27 2 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1413 -1
     (nil))
(insn 27 26 28 2 (set (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1415 89 {*movdi_internal}
     (nil))
(debug_insn 28 27 29 2 (var_location:DI yy_cp (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) lex.yy.c:1415 -1
     (nil))
(insn 29 28 30 2 (set (reg/f:DI 3 bx [orig:103 D.6587 ] [103])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1415 89 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 39 r10 [orig:123 yy_last_accepting_state_lsm.160 ] [123])
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 31 30 16 2 (set (reg/f:DI 37 r8 [orig:121 yy_last_accepting_cpos_lsm.162 ] [121])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 16 31 17 2 (set (reg:QI 38 r9 [orig:120 yy_last_accepting_cpos_lsm.163 ] [120])
        (const_int 0 [0])) lex.yy.c:1415 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 17 16 102 2 (set (reg:QI 40 r11 [orig:122 yy_last_accepting_state_lsm.161 ] [122])
        (const_int 0 [0])) lex.yy.c:1415 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 3, loop depth 0, count 0, freq 989, probably never executed
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              11 [100.0%]  (DFS_BACK)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 102 17 32 3 8 "" [1 uses])
(note 32 102 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 33 32 34 3 (var_location:DI yy_cp (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) -1
     (nil))
(debug_insn 34 33 35 3 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) -1
     (nil))
(insn 35 34 36 3 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
            (reg/f:DI 3 bx [orig:103 D.6587 ] [103]))) lex.yy.c:1415 8 {*cmpdi_1}
     (nil))
(jump_insn 36 35 37 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 105)
            (pc))) lex.yy.c:1415 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 105)
;;  succ:       12 [9.0%]  (LOOP_EXIT)
;;              4 [91.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 4, loop depth 0, count 0, freq 900, probably never executed
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [91.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 5 [di] 17 [flags]
;; live  kill	
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 18 4 (set (reg:QI 1 dx [orig:104 D.6588 ] [104])
        (mem:QI (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101]) [0 MEM[base: yy_cp_3, offset: 0B]+0 S1 A8])) lex.yy.c:1417 93 {*movqi_internal}
     (nil))
(insn 18 38 39 4 (set (reg/v:QI 5 di [orig:102 yy_c ] [102])
        (const_int 1 [0x1])) lex.yy.c:1417 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 39 18 40 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:104 D.6588 ] [104])
            (const_int 0 [0]))) lex.yy.c:1417 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 40 39 41 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 46)
            (pc))) lex.yy.c:1417 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 46)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 5, loop depth 0, count 0, freq 450, probably never executed
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 5 [di]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
(note 41 40 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 43 41 44 5 NOTE_INSN_DELETED)
(insn 44 43 45 5 (set (reg:DI 1 dx [orig:127 D.6590 ] [127])
        (zero_extend:DI (reg:QI 1 dx [orig:104 D.6588 ] [104]))) lex.yy.c:1417 134 {zero_extendqidi2}
     (nil))
(insn 45 44 46 5 (set (reg/v:QI 5 di [orig:102 yy_c ] [102])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [orig:127 D.6590 ] [127])
                (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) [0 yy_ec S1 A8])) lex.yy.c:1417 93 {*movqi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 6, loop depth 0, count 0, freq 900, probably never executed
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 46 45 47 6 3 "" [1 uses])
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 48 47 50 6 (var_location:QI yy_c (reg/v:QI 5 di [orig:102 yy_c ] [102])) lex.yy.c:1417 -1
     (nil))
(insn 50 48 51 6 (set (reg:DI 1 dx [orig:129 yy_current_state ] [129])
        (sign_extend:DI (reg/v:SI 0 ax [orig:100 yy_current_state ] [100]))) lex.yy.c:1418 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:129 yy_current_state ] [129])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])
            (const_int 0 [0]))) lex.yy.c:1418 2 {*cmphi_ccno_1}
     (nil))
(jump_insn 52 51 53 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) lex.yy.c:1418 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 59)
;;  succ:       7 [50.0%]  (FALLTHRU)
;;              8 [50.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 7, loop depth 0, count 0, freq 450, probably never executed
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [50.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  kill	
(note 53 52 19 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 19 53 20 7 (set (reg/f:DI 37 r8 [orig:121 yy_last_accepting_cpos_lsm.162 ] [121])
        (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) lex.yy.c:1418 89 {*movdi_internal}
     (nil))
(insn 20 19 21 7 (set (reg:SI 39 r10 [orig:123 yy_last_accepting_state_lsm.160 ] [123])
        (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1418 90 {*movsi_internal}
     (nil))
(insn 21 20 22 7 (set (reg:QI 38 r9 [orig:120 yy_last_accepting_cpos_lsm.163 ] [120])
        (const_int 1 [0x1])) lex.yy.c:1418 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 22 21 59 7 (set (reg:QI 40 r11 [orig:122 yy_last_accepting_state_lsm.161 ] [122])
        (const_int 1 [0x1])) lex.yy.c:1418 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 8, loop depth 0, count 0, freq 10000, probably never executed
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              9 [50.0%]  (DFS_BACK)
;;              6 [50.0%] 
;;              10 [100.0%]  (DFS_BACK)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(code_label 59 22 60 8 5 "" [3 uses])
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 61 60 62 8 (var_location:QI yy_c (reg/v:QI 5 di [orig:102 yy_c ] [102])) -1
     (nil))
(debug_insn 62 61 64 8 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) -1
     (nil))
(insn 64 62 65 8 (set (reg:DI 6 bp [orig:131 yy_current_state ] [131])
        (sign_extend:DI (reg/v:SI 0 ax [orig:100 yy_current_state ] [100]))) lex.yy.c:1423 142 {*extendsidi2_rex64}
     (nil))
(note 65 64 67 8 NOTE_INSN_DELETED)
(insn 67 65 68 8 (set (reg:SI 1 dx [orig:133 D.6593 ] [133])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 6 bp [orig:131 yy_current_state ] [131])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) lex.yy.c:1423 139 {*zero_extendhisi2}
     (nil))
(insn 68 67 69 8 (set (reg:SI 4 si [orig:134 D.6593 ] [134])
        (zero_extend:SI (reg/v:QI 5 di [orig:102 yy_c ] [102]))) lex.yy.c:1423 138 {*zero_extendqisi2}
     (nil))
(insn 69 68 70 8 (parallel [
            (set (reg:SI 1 dx [orig:135 D.6593 ] [135])
                (plus:SI (reg:SI 1 dx [orig:133 D.6593 ] [133])
                    (reg:SI 4 si [orig:134 D.6593 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1423 217 {*addsi_1}
     (nil))
(insn 70 69 71 8 (set (reg:DI 41 r12 [orig:136 D.6593 ] [136])
        (sign_extend:DI (reg:SI 1 dx [orig:135 D.6593 ] [135]))) lex.yy.c:1423 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 8 (set (reg:SI 41 r12 [orig:137 D.6593 ] [137])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 41 r12 [orig:136 D.6593 ] [136])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:1423 146 {extendhisi2}
     (nil))
(insn 72 71 73 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
            (reg:SI 41 r12 [orig:137 D.6593 ] [137]))) lex.yy.c:1423 7 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) lex.yy.c:1423 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 91)
;;  succ:       11 [9.0%]  (LOOP_EXIT)
;;              9 [91.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 9, loop depth 0, count 0, freq 9100, probably never executed
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 74 73 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(note 77 74 78 9 NOTE_INSN_DELETED)
(insn 78 77 79 9 (set (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 6 bp [orig:131 yy_current_state ] [131])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) lex.yy.c:1425 146 {extendhisi2}
     (nil))
(debug_insn 79 78 81 9 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1425 -1
     (nil))
(insn 81 79 82 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
            (const_int 101 [0x65]))) lex.yy.c:1426 7 {*cmpsi_1}
     (nil))
(jump_insn 82 81 83 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) lex.yy.c:1426 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 59)
;;  succ:       10 [50.0%]  (FALLTHRU)
;;              8 [50.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 10, loop depth 0, count 0, freq 4550, probably never executed
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [50.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 4 [si] 5 [di]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 4 [si] 5 [di]
;; live  kill	
(note 83 82 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 86 83 87 10 (set (reg:DI 4 si [orig:141 D.6590 ] [141])
        (zero_extend:DI (reg:SI 4 si [orig:134 D.6593 ] [134]))) lex.yy.c:1427 133 {*zero_extendsidi2}
     (nil))
(insn 87 86 88 10 (set (reg/v:QI 5 di [orig:102 yy_c ] [102])
        (mem/u/j:QI (plus:DI (reg:DI 4 si [orig:141 D.6590 ] [141])
                (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) [0 yy_meta S1 A8])) lex.yy.c:1427 93 {*movqi_internal}
     (nil))
(debug_insn 88 87 145 10 (var_location:QI yy_c (reg/v:QI 5 di [orig:102 yy_c ] [102])) lex.yy.c:1427 -1
     (nil))
(jump_insn 145 88 146 10 (set (pc)
        (label_ref 59)) 654 {jump}
     (nil)
 -> 59)
;;  succ:       8 [100.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

(barrier 146 145 91)
;; basic block 11, loop depth 0, count 0, freq 900, probably never executed
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (LOOP_EXIT)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
(code_label 91 146 92 11 6 "" [1 uses])
(note 92 91 97 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 97 92 98 11 (set (reg:DI 1 dx [orig:146 D.6590 ] [146])
        (zero_extend:DI (reg:SI 1 dx [orig:135 D.6593 ] [135]))) lex.yy.c:1429 133 {*zero_extendsidi2}
     (nil))
(insn 98 97 99 11 (set (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:146 D.6590 ] [146])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) [3 yy_nxt S2 A16]))) lex.yy.c:1429 139 {*zero_extendhisi2}
     (nil))
(debug_insn 99 98 100 11 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1429 -1
     (nil))
(insn 100 99 101 11 (parallel [
            (set (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
                (plus:DI (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1415 218 {*adddi_1}
     (nil))
(debug_insn 101 100 147 11 (var_location:DI yy_cp (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) lex.yy.c:1415 -1
     (nil))
(jump_insn 147 101 148 11 (set (pc)
        (label_ref 102)) lex.yy.c:1415 654 {jump}
     (nil)
 -> 102)
;;  succ:       3 [100.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

(barrier 148 147 105)
;; basic block 12, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [9.0%]  (LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp] 40 [r11]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 105 148 106 12 2 "" [1 uses])
(note 106 105 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 40 r11 [orig:122 yy_last_accepting_state_lsm.161 ] [122])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 108 107 109 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 111)
;;  succ:       14 [100.0%] 
;;              13 (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 13, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	
;; live  kill	
(note 109 108 110 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 13 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg:SI 39 r10 [orig:123 yy_last_accepting_state_lsm.160 ] [123])) 90 {*movsi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]

;; basic block 14, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 38 [r9]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 111 110 112 14 9 "" [1 uses])
(note 112 111 113 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 38 r9 [orig:120 yy_last_accepting_cpos_lsm.163 ] [120])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 114 113 115 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 117)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 117)
;;  succ:       16 [100.0%] 
;;              15 (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 7 [sp] 37 [r8]

;; basic block 15, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp] 37 [r8]
;; live  gen 	
;; live  kill	
(note 115 114 116 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 15 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/f:DI 37 r8 [orig:121 yy_last_accepting_cpos_lsm.162 ] [121])) 89 {*movdi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 15, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 117 116 118 16 10 "" [1 uses])
(note 118 117 123 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 123 118 124 16 (set (reg/i:SI 0 ax)
        (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1433 90 {*movsi_internal}
     (nil))
(insn 124 123 149 16 (use (reg/i:SI 0 ax)) lex.yy.c:1433 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 149 124 0 NOTE_INSN_DELETED)

;; Function void yy_fatal_error(const char*) (_ZL14yy_fatal_errorPKc, funcdef_no=104, decl_uid=4297, cgraph_uid=104, symbol_order=131) (executed once)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0
   Insn 16: point = 0
   Insn 13: point = 0
   Insn 12: point = 0
   Insn 11: point = 0
   Insn 10: point = 0
   Insn 9: point = 0
   Insn 8: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 8
deleting insn with uid = 8.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 1 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 1 count 3 (    1)


void yy_fatal_error(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={4d,1u} r1={4d,1u} r2={4d,1u} r4={4d,1u} r5={5d,3u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 177{166d,11u,0e} in 12{10 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 2 cx [orig:88 msg ] [88])
        (reg:DI 5 di [ msg ])) lex.yy.c:1941 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 6 3 7 2 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f88bc3c9ea0 stderr>) [1 stderr+0 S8 A64])) lex.yy.c:1942 -1
     (nil))
(debug_insn 7 6 9 2 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f88bbed7240 *.LC1>)) lex.yy.c:1942 -1
     (nil))
(insn 9 7 10 2 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f88bbed7240 *.LC1>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f88bc3c9ea0 stderr>) [1 stderr+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 93 {*movqi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f88bc333948 __fprintf_chk>) [0 __builtin___fprintf_chk S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f88bc333948 __fprintf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(debug_insn 14 13 15 2 (var_location:DI __stream (clobber (const_int 0 [0]))) lex.yy.c:1942 -1
     (nil))
(debug_insn 15 14 16 2 (var_location:DI __fmt (clobber (const_int 0 [0]))) lex.yy.c:1942 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 5 di)
        (const_int 2 [0x2])) lex.yy.c:1943 90 {*movsi_internal}
     (nil))
(call_insn 17 16 18 2 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f88bc31bca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) lex.yy.c:1943 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f88bc31bca8 exit>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 18 17 21)
(note 21 18 0 NOTE_INSN_DELETED)

;; Function void yyensure_buffer_stack() (_ZL21yyensure_buffer_stackv, funcdef_no=100, decl_uid=4265, cgraph_uid=100, symbol_order=127)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 32:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 39:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*cmpdi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 44:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) Ts {*leadi}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) r  (1) Z {*movdi_internal}
            3 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 68:  (0) =D  (1) =c  (2) a  (3) 0  (4) 1 {*rep_stosdi_rex64}
      Creating newreg=104 from oldreg=101, assigning class DIREG to r104
   68: {r103:DI=0;r104:DI=r103:DI<<0x3+r104:DI;[r104:DI]=0;use r102:DI;use r103:DI;}
      REG_DEAD r102:DI
      REG_DEAD r100:DI
      REG_UNUSED r103:DI
      REG_UNUSED r101:DI
    Inserting insn reload before:
   90: r104:DI=r100:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 4
   Insn 22: point = 0
   Insn 21: point = 0
  BB 9
  BB 5
   Insn 86: point = 0
   Insn 33: point = 0
   Insn 32: point = 0
  BB 3
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 1
   Insn 14: point = 1
   Insn 13: point = 2
   Insn 12: point = 2
   Insn 11: point = 2
  BB 8
   Insn 72: point = 2
   Insn 68: point = 3
   Insn 90: point = 5
	Hard reg 1 is preferable by r104 with profit 363
   Insn 88: point = 7
   Insn 67: point = 8
   Insn 64: point = 9
  BB 7
   Insn 58: point = 12
   Insn 57: point = 12
   Insn 55: point = 12
   Insn 52: point = 12
   Insn 51: point = 13
   Insn 50: point = 13
   Insn 49: point = 14
   Insn 46: point = 14
   Insn 44: point = 15
  BB 6
   Insn 41: point = 18
   Insn 40: point = 18
   Insn 39: point = 19
   Insn 38: point = 20
  BB 2
   Insn 7: point = 22
   Insn 6: point = 22
   Insn 5: point = 22
 r87: [13..22]
 r88: [10..12]
 r89: [16..20]
 r92: [2..15]
 r93: [10..14]
 r97: [0..1]
 r98: [18..19]
 r100: [6..9]
 r102: [4..7]
 r103: [3..8]
 r104: [3..5]
Compressing live ranges: from 23 to 12 - 52%
Ranges after the compression:
 r87: [8..11]
 r88: [6..7]
 r89: [10..11]
 r92: [2..9]
 r93: [6..9]
 r97: [0..1]
 r98: [10..11]
 r100: [4..5]
 r102: [2..5]
 r103: [2..5]
 r104: [2..3]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7 8
EBB 9

********** Pseudo live ranges #2: **********

  BB 4
   Insn 22: point = 0
   Insn 21: point = 0
  BB 9
  BB 5
   Insn 86: point = 0
   Insn 33: point = 0
   Insn 32: point = 0
  BB 3
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 1
   Insn 14: point = 1
   Insn 13: point = 2
   Insn 12: point = 2
   Insn 11: point = 2
  BB 8
   Insn 72: point = 2
   Insn 68: point = 3
   Insn 90: point = 5
	Hard reg 1 is preferable by r104 with profit 363
   Insn 88: point = 7
   Insn 67: point = 8
   Insn 64: point = 9
  BB 7
   Insn 58: point = 12
   Insn 57: point = 12
   Insn 55: point = 12
   Insn 52: point = 12
   Insn 51: point = 13
   Insn 50: point = 13
   Insn 49: point = 14
   Insn 46: point = 14
   Insn 44: point = 15
  BB 6
   Insn 41: point = 18
   Insn 40: point = 18
   Insn 39: point = 19
   Insn 38: point = 20
  BB 2
   Insn 7: point = 22
   Insn 6: point = 22
   Insn 5: point = 22
 r87: [13..22]
 r88: [10..12]
 r89: [16..20]
 r92: [2..15]
 r93: [10..14]
 r97: [0..1]
 r98: [18..19]
 r100: [6..9]
 r102: [4..7]
 r103: [3..8]
 r104: [3..5]
Compressing live ranges: from 23 to 12 - 52%
Ranges after the compression:
 r87: [8..11]
 r88: [6..7]
 r89: [10..11]
 r92: [2..9]
 r93: [6..9]
 r97: [0..1]
 r98: [10..11]
 r100: [4..5]
 r102: [2..5]
 r103: [2..5]
 r104: [2..3]

********** Assignment #1: **********

	 Assigning to 104 (cl=DIREG, orig=101, freq=726, tfirst=104, tfreq=726)...
	   Assign 5 to reload r104 (freq=726)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 5
changing reg in insn 50
changing reg in insn 47
changing reg in insn 6
changing reg in insn 52
changing reg in insn 64
changing reg in insn 60
changing reg in insn 57
changing reg in insn 55
changing reg in insn 38
changing reg in insn 44
changing reg in insn 39
changing reg in insn 44
changing reg in insn 72
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 64
changing reg in insn 60
changing reg in insn 49
changing reg in insn 48
changing reg in insn 14
changing reg in insn 18
changing reg in insn 17
changing reg in insn 39
changing reg in insn 40
changing reg in insn 64
changing reg in insn 88
changing reg in insn 68
changing reg in insn 68
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
deleting insn with uid = 14.
deleting insn with uid = 50.
deleting insn with uid = 52.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 51.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)


void yyensure_buffer_stack()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={6d,9u} r1={6d,2u} r2={6d,2u} r3={1d,3u} r4={6d,2u} r5={9d,7u} r6={1d,4u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={10d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 299{254d,45u,0e} in 49{46 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 5 di [orig:87 D.6619 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1811 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:87 D.6619 ] [87])
            (const_int 0 [0]))) lex.yy.c:1811 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) lex.yy.c:1811 612 {*jcc_1}
     (int_list:REG_BR_PROB 9328 (nil))
 -> 36)
;;  succ:       3 [6.7%]  (FALLTHRU)
;;              6 [93.3%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [6.7%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 9 8 10 3 (var_location:DI num_to_alloc (const_int 1 [0x1])) lex.yy.c:1817 -1
     (nil))
(debug_insn 10 9 11 3 (var_location:DI size (const_int 8 [0x8])) lex.yy.c:1819 -1
     (nil))
(insn 11 10 12 3 (set (reg:DI 4 si)
        (const_int 1 [0x1])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 5 di)
        (const_int 8 [0x8])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 13 12 16 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f88bc316438 __builtin_calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f88bc316438 __builtin_calloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(debug_insn 16 13 17 3 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1819 -1
     (nil))
(insn 17 16 18 3 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (reg/f:DI 0 ax [97])) lex.yy.c:1820 89 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [97])
            (const_int 0 [0]))) lex.yy.c:1821 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 56 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) lex.yy.c:1821 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 24)
;;  succ:       4 [0.0%]  (FALLTHRU)
;;              5 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 1
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [0.0%]  (FALLTHRU)
;;              7 [0.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 56 19 20 4 27 "" [1 uses])
(note 20 56 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f88bbee21b0 *.LC3>)) lex.yy.c:1822 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 4 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1822 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 23 22 24)
;; basic block 5, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 24 23 25 5 25 "" [1 uses])
(note 25 24 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 29 25 30 5 (var_location:DI __dest (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(debug_insn 30 29 31 5 (var_location:SI __ch (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(debug_insn 31 30 32 5 (var_location:DI __len (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(insn 32 31 33 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (const_int 1 [0x1])) lex.yy.c:1826 89 {*movdi_internal}
     (nil))
(insn 33 32 86 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1827 89 {*movdi_internal}
     (nil))
(jump_insn 86 33 87 5 (set (pc)
        (label_ref 75)) 654 {jump}
     (nil)
 -> 75)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 87 86 36)
;; basic block 6, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [93.3%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 36 87 37 6 24 "" [1 uses])
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:DI 0 ax [orig:89 D.6621 ] [89])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])) lex.yy.c:1831 89 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg:DI 1 dx [orig:98 D.6621 ] [98])
                (plus:DI (reg:DI 0 ax [orig:89 D.6621 ] [89])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1831 218 {*adddi_1}
     (nil))
(insn 40 39 41 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 1 dx [orig:98 D.6621 ] [98])
            (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64]))) lex.yy.c:1831 8 {*cmpdi_1}
     (nil))
(jump_insn 41 40 42 6 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 75)
            (pc))) lex.yy.c:1831 612 {*jcc_1}
     (int_list:REG_BR_PROB 6102 (nil))
 -> 75)
;;  succ:       7 [39.0%]  (FALLTHRU)
;;              9 [61.0%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 3636, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [39.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 43 42 44 7 (var_location:DI grow_size (const_int 8 [0x8])) lex.yy.c:1834 -1
     (nil))
(insn 44 43 45 7 (parallel [
            (set (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])
                (plus:DI (reg:DI 0 ax [orig:89 D.6621 ] [89])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1836 218 {*adddi_1}
     (nil))
(debug_insn 45 44 46 7 (var_location:DI num_to_alloc (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])) lex.yy.c:1836 -1
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:DI 6 bp [orig:93 D.6621 ] [93])
                (ashift:DI (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1838 512 {*ashldi3_1}
     (nil))
(debug_insn 47 46 48 7 (var_location:DI ptr (reg/f:DI 5 di [orig:87 D.6619 ] [87])) lex.yy.c:1838 -1
     (nil))
(debug_insn 48 47 49 7 (var_location:DI size (reg:DI 6 bp [orig:93 D.6621 ] [93])) lex.yy.c:1838 -1
     (nil))
(insn 49 48 51 7 (set (reg:DI 4 si)
        (reg:DI 6 bp [orig:93 D.6621 ] [93])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(call_insn 51 49 53 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(debug_insn 53 51 54 7 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1838 -1
     (nil))
(debug_insn 54 53 55 7 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1838 -1
     (nil))
(insn 55 54 57 7 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.6620 ] [88])) lex.yy.c:1840 89 {*movdi_internal}
     (nil))
(insn 57 55 58 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 D.6620 ] [88])
            (const_int 0 [0]))) lex.yy.c:1841 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 58 57 59 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) lex.yy.c:1841 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 56)
;;  succ:       4 [0.0%] 
;;              8 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 3635, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di]
;; live  kill	
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 60 59 61 8 (var_location:DI __dest (plus:DI (plus:DI (reg/f:DI 0 ax [orig:88 D.6620 ] [88])
            (reg:DI 6 bp [orig:93 D.6621 ] [93]))
        (const_int -64 [0xffffffffffffffc0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 61 60 62 8 (var_location:SI __ch (const_int 0 [0])) lex.yy.c:1845 -1
     (nil))
(debug_insn 62 61 63 8 (var_location:DI __len (const_int 64 [0x40])) lex.yy.c:1845 -1
     (nil))
(note 63 62 64 8 NOTE_INSN_DELETED)
(insn 64 63 67 8 (set (reg:DI 1 dx [orig:100 D.6619 ] [100])
        (plus:DI (plus:DI (reg/f:DI 0 ax [orig:88 D.6620 ] [88])
                (reg:DI 6 bp [orig:93 D.6621 ] [93]))
            (const_int -64 [0xffffffffffffffc0]))) /usr/include/x86_64-linux-gnu/bits/string3.h:90 214 {*leadi}
     (nil))
(insn 67 64 88 8 (set (reg:DI 2 cx [103])
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))
(insn 88 67 90 8 (set (reg:DI 0 ax [102])
        (const_int 0 [0])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 90 88 68 8 (set (reg/f:DI 5 di [orig:101 D.6619 ] [101])
        (reg:DI 1 dx [orig:100 D.6619 ] [100])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (nil))
(insn 68 90 69 8 (parallel [
            (set (reg:DI 2 cx [103])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [orig:101 D.6619 ] [101])
                (plus:DI (ashift:DI (reg:DI 2 cx [103])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [orig:101 D.6619 ] [101])))
            (set (mem:BLK (reg/f:DI 5 di [orig:101 D.6619 ] [101]) [0 MEM[(void *)_13]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [102]))
            (use (reg:DI 2 cx [103]))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:90 935 {*rep_stosdi_rex64}
     (nil))
(debug_insn 69 68 70 8 (var_location:DI __dest (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 70 69 71 8 (var_location:SI __ch (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 71 70 72 8 (var_location:DI __len (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(insn 72 71 75 8 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])) lex.yy.c:1846 89 {*movdi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              6 [61.0%] 
;;              5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 75 72 76 9 23 "" [2 uses])
(note 76 75 89 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 89 76 0 NOTE_INSN_DELETED)

;; Function void yy_switch_to_buffer(YY_BUFFER_STATE) (_Z19yy_switch_to_bufferP15yy_buffer_state, funcdef_no=92, decl_uid=4254, cgraph_uid=92, symbol_order=119)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 23:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 41:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) r {*cmpdi_ccno_1}
      Removing equiv init insn 51 (freq=134)
   51: r114:DI=[`_ZL19yy_buffer_stack_top']
      REG_EQUIV [`_ZL19yy_buffer_stack_top']
deleting insn with uid = 51.
Changing pseudo 114 in operand 1 of insn 52 on equiv [`_ZL19yy_buffer_stack_top']
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
      Creating newreg=115, assigning class INDEX_REGS to r115
   52: {r91:DI=r115:DI<<0x3;clobber flags:CC;}
      REG_DEAD r114:DI
      REG_UNUSED flags:CC
      REG_EQUAL [`_ZL19yy_buffer_stack_top']<<0x3
    Inserting insn reload before:
   75: r115:DI=[`_ZL19yy_buffer_stack_top']

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 9
  BB 6
   Insn 69: point = 0
   Insn 41: point = 0
   Insn 40: point = 1
   Insn 39: point = 3
   Insn 38: point = 4
   Insn 37: point = 6
   Insn 36: point = 8
   Insn 35: point = 8
   Insn 34: point = 8
   Insn 33: point = 10
   Insn 32: point = 11
   Insn 31: point = 12
  BB 8
   Insn 71: point = 13
   Insn 52: point = 13
   Insn 75: point = 15
  BB 5
   Insn 28: point = 17
   Insn 27: point = 18
   Insn 26: point = 19
   Insn 25: point = 20
   Insn 24: point = 21
   Insn 23: point = 22
   Insn 22: point = 23
   Insn 21: point = 24
  BB 4
   Insn 19: point = 26
   Insn 18: point = 26
  BB 3
   Insn 16: point = 28
   Insn 15: point = 28
   Insn 14: point = 28
   Insn 13: point = 29
   Insn 73: point = 31
  BB 7
   Insn 49: point = 33
   Insn 48: point = 33
  BB 2
   Insn 9: point = 34
   Insn 8: point = 34
   Insn 7: point = 34
   Insn 6: point = 35
   Insn 2: point = 35
 r88: [34..34] [30..32]
 r91: [17..29] [7..13]
 r92: [26..28]
 r93: [20..24]
 r95: [20..21]
 r99: [2..8]
 r104: [9..35]
 r106: [30..31]
 r107: [22..23]
 r108: [17..19]
 r109: [17..18]
 r110: [10..11]
 r111: [5..6]
 r112: [3..4]
 r113: [0..1]
 r115: [14..15]
Compressing live ranges: from 36 to 24 - 66%
Ranges after the compression:
 r88: [20..22]
 r91: [12..19] [6..9]
 r92: [18..19]
 r93: [14..17]
 r95: [14..15]
 r99: [2..7]
 r104: [8..23]
 r106: [20..21]
 r107: [16..17]
 r108: [12..13]
 r109: [12..13]
 r110: [8..9]
 r111: [4..5]
 r112: [2..3]
 r113: [0..1]
 r115: [10..11]

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6
EBB 7 8
EBB 9

********** Pseudo live ranges #2: **********

  BB 9
  BB 6
   Insn 69: point = 0
   Insn 41: point = 0
   Insn 40: point = 1
   Insn 39: point = 3
   Insn 38: point = 4
   Insn 37: point = 6
   Insn 36: point = 8
   Insn 35: point = 8
   Insn 34: point = 8
   Insn 33: point = 10
   Insn 32: point = 11
   Insn 31: point = 12
  BB 8
   Insn 71: point = 13
   Insn 52: point = 13
   Insn 75: point = 15
  BB 5
   Insn 28: point = 17
   Insn 27: point = 18
   Insn 26: point = 19
   Insn 25: point = 20
   Insn 24: point = 21
   Insn 23: point = 22
   Insn 22: point = 23
   Insn 21: point = 24
  BB 4
   Insn 19: point = 26
   Insn 18: point = 26
  BB 3
   Insn 16: point = 28
   Insn 15: point = 28
   Insn 14: point = 28
   Insn 13: point = 29
   Insn 73: point = 31
  BB 7
   Insn 49: point = 33
   Insn 48: point = 33
  BB 2
   Insn 9: point = 34
   Insn 8: point = 34
   Insn 7: point = 34
   Insn 6: point = 35
   Insn 2: point = 35
 r88: [34..34] [30..32]
 r91: [17..29] [7..13]
 r92: [26..28]
 r93: [20..24]
 r95: [20..21]
 r99: [2..8]
 r104: [9..35]
 r106: [30..31]
 r107: [22..23]
 r108: [17..19]
 r109: [17..18]
 r110: [10..11]
 r111: [5..6]
 r112: [3..4]
 r113: [0..1]
 r115: [14..15]
Compressing live ranges: from 36 to 24 - 66%
Ranges after the compression:
 r88: [20..22]
 r91: [12..19] [6..9]
 r92: [18..19]
 r93: [14..17]
 r95: [14..15]
 r99: [2..7]
 r104: [8..23]
 r106: [20..21]
 r107: [16..17]
 r108: [12..13]
 r109: [12..13]
 r110: [8..9]
 r111: [4..5]
 r112: [2..3]
 r113: [0..1]
 r115: [10..11]

********** Assignment #1: **********

	 Assigning to 115 (cl=INDEX_REGS, orig=115, freq=268, tfirst=115, tfreq=268)...
	   Assign 0 to reload r115 (freq=268)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 13
changing reg in insn 8
changing reg in insn 13
changing reg in insn 52
changing reg in insn 37
changing reg in insn 31
changing reg in insn 26
changing reg in insn 24
changing reg in insn 14
changing reg in insn 26
changing reg in insn 24
changing reg in insn 14
changing reg in insn 18
changing reg in insn 15
changing reg in insn 21
changing reg in insn 25
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 34
changing reg in insn 40
changing reg in insn 36
changing reg in insn 35
changing reg in insn 2
changing reg in insn 48
changing reg in insn 34
changing reg in insn 32
changing reg in insn 31
changing reg in insn 15
changing reg in insn 32
changing reg in insn 73
changing reg in insn 13
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)


void yy_switch_to_buffer(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={9d,11u,2e} r1={8d,10u} r2={5d,3u} r3={1d,5u,1e} r4={2d} r5={2d,1u} r7={1d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,4u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 157{110d,44u,3e} in 37{36 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
        (reg:DI 5 di [ new_buffer ])) lex.yy.c:1610 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1617 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:88 D.6626 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 D.6626 ] [88])
            (const_int 0 [0]))) lex.yy.c:1618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 46)
;;  succ:       3 [85.0%]  (FALLTHRU)
;;              7 [15.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [85.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 10 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 12 10 73 3 NOTE_INSN_DELETED)
(insn 73 12 13 3 (set (reg:DI 1 dx [orig:106 yy_buffer_stack_top ] [106])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 13 73 14 3 (set (reg/f:DI 0 ax [orig:91 D.6626 ] [91])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:106 yy_buffer_stack_top ] [106])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:88 D.6626 ] [88]))) lex.yy.c:1618 214 {*leadi}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 1 dx [orig:92 D.6627 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 1 dx [orig:92 D.6627 ] [92])
            (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104]))) lex.yy.c:1618 8 {*cmpdi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 55)
;;  succ:       9 [10.1%] 
;;              4 [89.9%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [89.9%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 1 dx [orig:92 D.6627 ] [92])
            (const_int 0 [0]))) lex.yy.c:1621 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 29)
            (pc))) lex.yy.c:1621 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 29)
;;  succ:       5 [85.0%]  (FALLTHRU)
;;              6 [15.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 6492, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [85.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 2 [cx]
;; live  kill	
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg/f:DI 1 dx [orig:93 D.6628 ] [93])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1624 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (nil)))
(insn 22 21 23 5 (set (reg:QI 2 cx [orig:107 yy_hold_char ] [107])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1624 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 23 22 24 5 (set (mem:QI (reg/f:DI 1 dx [orig:93 D.6628 ] [93]) [0 *_16+0 S1 A8])
        (reg:QI 2 cx [orig:107 yy_hold_char ] [107])) lex.yy.c:1624 93 {*movqi_internal}
     (nil))
(insn 24 23 25 5 (set (reg/f:DI 2 cx [orig:95 D.6630 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])) lex.yy.c:1625 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])
        (nil)))
(insn 25 24 26 5 (set (mem/f:DI (plus:DI (reg/f:DI 2 cx [orig:95 D.6630 ] [95])
                (const_int 16 [0x10])) [1 _19->yy_buf_pos+0 S8 A64])
        (reg/f:DI 1 dx [orig:93 D.6628 ] [93])) lex.yy.c:1625 89 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg/f:DI 1 dx [orig:108 *_9 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])) lex.yy.c:1626 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])
        (nil)))
(insn 27 26 28 5 (set (reg:SI 2 cx [orig:109 yy_n_chars ] [109])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1626 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (nil)))
(insn 28 27 29 5 (set (mem:SI (plus:DI (reg/f:DI 1 dx [orig:108 *_9 ] [108])
                (const_int 32 [0x20])) [2 _21->yy_n_chars+0 S4 A64])
        (reg:SI 2 cx [orig:109 yy_n_chars ] [109])) lex.yy.c:1626 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              4 [15.0%] 
;;              8 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 29 28 30 6 37 "" [2 uses])
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_29+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])) lex.yy.c:1629 89 {*movdi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:SI 1 dx [orig:110 new_buffer_11(D)->yy_n_chars ] [110])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
                (const_int 32 [0x20])) [2 new_buffer_11(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
                (const_int 32 [0x20])) [2 new_buffer_11(D)->yy_n_chars+0 S4 A64])
        (nil)))
(insn 33 32 34 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 1 dx [orig:110 new_buffer_11(D)->yy_n_chars ] [110])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg/f:DI 1 dx [orig:99 D.6628 ] [99])
        (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
                (const_int 16 [0x10])) [1 new_buffer_11(D)->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6628 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6628 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:DI 0 ax [orig:111 *_29 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_29+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 0 ax [orig:112 _32->yy_input_file ] [112])
        (mem/f:DI (reg/f:DI 0 ax [orig:111 *_29 ] [111]) [1 _32->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 39 38 40 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:112 _32->yy_input_file ] [112])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:QI 0 ax [orig:113 *_31 ] [113])
        (mem:QI (reg/f:DI 1 dx [orig:99 D.6628 ] [99]) [0 *_31+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 41 40 69 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:113 *_31 ] [113])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(jump_insn 69 41 70 6 (set (pc)
        (label_ref 55)) 654 {jump}
     (nil)
 -> 55)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 70 69 46)
;; basic block 7, loop depth 0, count 0, freq 1500, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [15.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 46 70 47 7 35 "" [1 uses])
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
            (const_int 0 [0]))) lex.yy.c:1618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 49 48 50 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 55)
;;  succ:       9 [10.1%] 
;;              8 [89.9%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [89.9%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 51 50 75 8 NOTE_INSN_DELETED)
(insn 75 51 52 8 (set (reg:DI 0 ax [115])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 52 75 71 8 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6626 ] [91])
                (ashift:DI (reg:DI 0 ax [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(jump_insn 71 52 72 8 (set (pc)
        (label_ref 29)) 654 {jump}
     (nil)
 -> 29)
;;  succ:       6 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 72 71 55)
;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [10.1%] 
;;              3 [10.1%] 
;;              6 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 55 72 56 9 34 "" [3 uses])
(note 56 55 74 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 74 56 0 NOTE_INSN_DELETED)

;; Function void yy_delete_buffer(YY_BUFFER_STATE) (_Z16yy_delete_bufferP15yy_buffer_state, funcdef_no=95, decl_uid=4259, cgraph_uid=95, symbol_order=122)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) Ts {*leadi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 9
  BB 8
   Insn 33: point = 0
   Insn 32: point = 0
  BB 7
   Insn 28: point = 2
   Insn 27: point = 2
   Insn 26: point = 3
  BB 6
   Insn 23: point = 5
   Insn 22: point = 5
   Insn 45: point = 5
  BB 5
   Insn 19: point = 8
  BB 4
   Insn 17: point = 10
   Insn 16: point = 10
   Insn 15: point = 10
   Insn 46: point = 12
  BB 3
   Insn 11: point = 14
   Insn 10: point = 14
   Insn 9: point = 14
  BB 2
   Insn 7: point = 16
   Insn 6: point = 16
   Insn 2: point = 16
Compressing live ranges: from 17 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 9
changing reg in insn 15
changing reg in insn 10
changing reg in insn 15
changing reg in insn 19
changing reg in insn 16
changing reg in insn 2
changing reg in insn 45
changing reg in insn 16
changing reg in insn 6
changing reg in insn 46
changing reg in insn 15
changing reg in insn 26
changing reg in insn 27
changing reg in insn 45
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 32
changing reg in insn 26
deleting insn with uid = 2.
deleting insn with uid = 27.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)


void yy_delete_buffer(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={5d,4u} r1={4d,1u} r2={3d} r3={1d,5u,1e} r4={3d} r5={5d,5u} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={6d,4u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 201{170d,30u,1e} in 19{17 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:94 b ] [94])
            (const_int 0 [0]))) lex.yy.c:1685 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 37)
            (pc))) lex.yy.c:1685 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 37)
;;  succ:       9 [10.1%] 
;;              3 [89.9%]  (FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:DI 0 ax [orig:87 D.6635 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1688 89 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 D.6635 ] [87])
            (const_int 0 [0]))) lex.yy.c:1688 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 20)
            (pc))) lex.yy.c:1688 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 20)
;;  succ:       4 [85.0%]  (FALLTHRU)
;;              6 [15.0%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [85.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 12 11 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 14 12 46 4 NOTE_INSN_DELETED)
(insn 46 14 15 4 (set (reg:DI 1 dx [orig:96 yy_buffer_stack_top ] [96])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1688 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 15 46 16 4 (set (reg/f:DI 0 ax [orig:90 D.6635 ] [90])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:96 yy_buffer_stack_top ] [96])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:87 D.6635 ] [87]))) lex.yy.c:1688 214 {*leadi}
     (nil))
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:94 b ] [94])
            (mem/f:DI (reg/f:DI 0 ax [orig:90 D.6635 ] [90]) [1 *_10+0 S8 A64]))) lex.yy.c:1688 8 {*cmpdi_1}
     (nil))
(jump_insn 17 16 18 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) lex.yy.c:1688 612 {*jcc_1}
     (int_list:REG_BR_PROB 8235 (nil))
 -> 20)
;;  succ:       5 [17.6%]  (FALLTHRU)
;;              6 [82.3%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [17.6%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (mem/f:DI (reg/f:DI 0 ax [orig:90 D.6635 ] [90]) [1 *_10+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1689 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [82.3%] 
;;              5 [100.0%]  (FALLTHRU)
;;              3 [15.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	
(code_label 20 19 21 6 47 "" [2 uses])
(note 21 20 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 21 22 6 (set (reg/v/f:DI 3 bx [orig:94 b ] [94])
        (reg/v/f:DI 5 di [orig:94 b ] [94])) 89 {*movdi_internal}
     (nil))
(insn 22 45 23 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:94 b ] [94])
                    (const_int 36 [0x24])) [2 b_5(D)->yy_is_our_buffer+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:1691 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 23 22 24 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) lex.yy.c:1691 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 29)
;;  succ:       7 [29.0%]  (FALLTHRU)
;;              8 [71.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 2606, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [29.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(note 24 23 25 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 25 24 26 7 (var_location:DI ptr (mem/f/j:DI (plus:DI (reg/v/f:DI 3 bx [orig:94 b ] [94])
            (const_int 8 [0x8])) [0 b_5(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1692 -1
     (nil))
(insn 26 25 28 7 (set (reg/f:DI 5 di [orig:97 b_5(D)->yy_ch_buf ] [97])
        (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:94 b ] [94])
                (const_int 8 [0x8])) [1 b_5(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:2141 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:94 b ] [94])
                (const_int 8 [0x8])) [1 b_5(D)->yy_ch_buf+0 S8 A64])
        (nil)))
(call_insn 28 26 29 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [71.0%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 29 28 30 8 48 "" [1 uses])
(note 30 29 31 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 32 8 (var_location:DI ptr (reg/v/f:DI 3 bx [orig:94 b ] [94])) -1
     (nil))
(insn 32 31 33 8 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:94 b ] [94])) lex.yy.c:2141 89 {*movdi_internal}
     (nil))
(call_insn/j 33 32 34 8 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 34 33 37)
;; basic block 9, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [10.1%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 37 34 38 9 45 "" [1 uses])
(note 38 37 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 47 38 0 NOTE_INSN_DELETED)

;; Function void yy_flush_buffer(YY_BUFFER_STATE) (_Z15yy_flush_bufferP15yy_buffer_state, funcdef_no=97, decl_uid=4261, cgraph_uid=97, symbol_order=124)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) Ts {*leadi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 41:  (0) m  (1) qn {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 6
  BB 5
   Insn 41: point = 0
   Insn 40: point = 1
   Insn 39: point = 3
   Insn 38: point = 4
   Insn 37: point = 6
   Insn 36: point = 8
   Insn 35: point = 8
   Insn 34: point = 8
   Insn 33: point = 9
  BB 4
   Insn 31: point = 12
   Insn 30: point = 12
   Insn 29: point = 12
   Insn 55: point = 14
  BB 3
   Insn 25: point = 16
   Insn 24: point = 16
   Insn 22: point = 16
   Insn 21: point = 17
   Insn 20: point = 17
   Insn 19: point = 17
   Insn 18: point = 17
   Insn 17: point = 18
   Insn 16: point = 19
   Insn 15: point = 20
   Insn 14: point = 21
   Insn 13: point = 22
  BB 2
   Insn 7: point = 23
   Insn 6: point = 23
   Insn 2: point = 23
Compressing live ranges: from 24 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 40
changing reg in insn 36
changing reg in insn 35
changing reg in insn 19
changing reg in insn 22
changing reg in insn 29
changing reg in insn 24
changing reg in insn 29
changing reg in insn 37
changing reg in insn 30
changing reg in insn 2
changing reg in insn 33
changing reg in insn 30
changing reg in insn 21
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 16
changing reg in insn 14
changing reg in insn 13
changing reg in insn 6
changing reg in insn 16
changing reg in insn 14
changing reg in insn 55
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)


void yy_flush_buffer(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 17[flags]
;;  ref usage 	r0={8d,9u} r1={2d,4u} r2={3d,2u} r4={1d} r5={1d,10u,2e} r7={1d,6u} r17={3d,3u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 65{29d,34u,2e} in 27{27 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:99 b ] [99])
            (const_int 0 [0]))) lex.yy.c:1731 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) lex.yy.c:1731 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 44)
;;  succ:       6 [10.1%] 
;;              3 [89.9%]  (FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 12 7 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 32 [0x20])) [2 b_3(D)->yy_n_chars+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1734 90 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 0 ax [orig:87 D.6642 ] [87])
        (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1740 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])
        (nil)))
(insn 15 14 16 3 (set (mem:QI (reg/f:DI 0 ax [orig:87 D.6642 ] [87]) [0 *_6+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1740 93 {*movqi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [orig:88 D.6642 ] [88])
        (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1741 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])
        (nil)))
(insn 17 16 18 3 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:88 D.6642 ] [88])
                (const_int 1 [0x1])) [0 MEM[(char *)_8 + 1B]+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1741 93 {*movqi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 1 dx [orig:89 D.6642 ] [89])
        (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1743 89 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 16 [0x10])) [1 b_3(D)->yy_buf_pos+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 D.6642 ] [89])) lex.yy.c:1743 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 44 [0x2c])) [2 b_3(D)->yy_at_bol+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1745 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 60 [0x3c])) [2 b_3(D)->yy_buffer_status+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1746 90 {*movsi_internal}
     (nil))
(insn 22 21 24 3 (set (reg/f:DI 0 ax [orig:90 D.6643 ] [90])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1748 89 {*movdi_internal}
     (nil))
(insn 24 22 25 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:90 D.6643 ] [90])
            (const_int 0 [0]))) lex.yy.c:1748 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 25 24 26 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) lex.yy.c:1748 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 44)
;;  succ:       4 [85.0%]  (FALLTHRU)
;;              6 [15.0%] 
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [85.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
(note 26 25 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 28 26 55 4 NOTE_INSN_DELETED)
(insn 55 28 29 4 (set (reg:DI 2 cx [orig:101 yy_buffer_stack_top ] [101])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1748 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 29 55 30 4 (set (reg/f:DI 0 ax [orig:93 D.6643 ] [93])
        (plus:DI (mult:DI (reg:DI 2 cx [orig:101 yy_buffer_stack_top ] [101])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:90 D.6643 ] [90]))) lex.yy.c:1748 214 {*leadi}
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:99 b ] [99])
            (mem/f:DI (reg/f:DI 0 ax [orig:93 D.6643 ] [93]) [1 *_17+0 S8 A64]))) lex.yy.c:1748 8 {*cmpdi_1}
     (nil))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) lex.yy.c:1748 612 {*jcc_1}
     (int_list:REG_BR_PROB 7455 (nil))
 -> 44)
;;  succ:       5 [25.4%]  (FALLTHRU)
;;              6 [74.5%] 
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 1944, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [25.4%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg:SI 2 cx [orig:102 b_3(D)->yy_n_chars ] [102])
        (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 32 [0x20])) [2 b_3(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (nil)))
(insn 34 33 35 5 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:102 b_3(D)->yy_n_chars ] [102])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 D.6642 ] [89])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 D.6642 ] [89])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (reg/f:DI 0 ax [orig:103 *_17 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 D.6643 ] [93]) [1 *_17+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg/f:DI 0 ax [orig:104 _26->yy_input_file ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 *_17 ] [103]) [1 _26->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 39 38 40 5 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:104 _26->yy_input_file ] [104])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:QI 0 ax [orig:105 *_10 ] [105])
        (mem:QI (reg/f:DI 1 dx [orig:89 D.6642 ] [89]) [0 *_10+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 41 40 44 5 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:105 *_10 ] [105])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              2 [10.1%] 
;;              3 [15.0%] 
;;              4 [74.5%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 44 41 45 6 56 "" [3 uses])
(note 45 44 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 56 45 0 NOTE_INSN_DELETED)

;; Function void yy_init_buffer(YY_BUFFER_STATE, FILE*) (_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE, funcdef_no=96, decl_uid=4269, cgraph_uid=96, symbol_order=123)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rm {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =q {*setcc_si_1_movzbl}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 7
   Insn 45: point = 0
   Insn 44: point = 1
  BB 6
   Insn 40: point = 3
   Insn 38: point = 4
   Insn 37: point = 5
   Insn 36: point = 6
   Insn 35: point = 6
   Insn 34: point = 7
   Insn 33: point = 8
   Insn 32: point = 8
  BB 5
   Insn 30: point = 10
   Insn 29: point = 10
   Insn 5: point = 10
  BB 4
   Insn 26: point = 12
   Insn 25: point = 12
  BB 3
   Insn 22: point = 13
   Insn 21: point = 13
   Insn 20: point = 14
  BB 2
   Insn 18: point = 16
   Insn 17: point = 16
   Insn 16: point = 16
   Insn 15: point = 17
   Insn 14: point = 17
   Insn 13: point = 17
   Insn 12: point = 17
   Insn 10: point = 17
   Insn 9: point = 18
   Insn 8: point = 19
   Insn 3: point = 19
   Insn 2: point = 20
Compressing live ranges: from 21 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
changing reg in insn 40
changing reg in insn 5
changing reg in insn 44
changing reg in insn 9
changing reg in insn 45
changing reg in insn 10
changing reg in insn 10
changing reg in insn 45
changing reg in insn 11
changing reg in insn 16
changing reg in insn 21
changing reg in insn 17
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 2
changing reg in insn 44
changing reg in insn 26
changing reg in insn 25
changing reg in insn 21
changing reg in insn 15
changing reg in insn 14
changing reg in insn 12
changing reg in insn 3
changing reg in insn 32
changing reg in insn 29
changing reg in insn 14
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 34.
deleting insn with uid = 37.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)


void yy_init_buffer(YY_BUFFER_STATE, FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13]
;;  ref usage 	r0={8d,6u} r1={6d,1u} r2={5d} r3={1d,7u} r4={4d,1u} r5={7d,4u} r6={1d,3u} r7={1d,11u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={8d,4u} r18={4d} r19={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r41={1d,2u} r42={1d,2u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 330{289d,41u,0e} in 29{25 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 41 [r12] 42 [r13]
;; live  kill	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 3 bx [orig:98 b ] [98])
        (reg:DI 5 di [ b ])) lex.yy.c:1703 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 6 bp [orig:99 file ] [99])
        (reg:DI 4 si [ file ])) lex.yy.c:1703 89 {*movdi_internal}
     (nil))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/u 8 4 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) lex.yy.c:1704 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 9 8 10 2 (set (reg/f:DI 41 r12 [orig:89 D.6654 ] [89])
        (reg:DI 0 ax)) lex.yy.c:1704 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/v:SI 42 r13 [orig:90 oerrno ] [90])
        (mem:SI (reg/f:DI 41 r12 [orig:89 D.6654 ] [89]) [2 *_5+0 S4 A32])) lex.yy.c:1704 90 {*movsi_internal}
     (nil))
(debug_insn 11 10 12 2 (var_location:SI oerrno (reg/v:SI 42 r13 [orig:90 oerrno ] [90])) lex.yy.c:1704 -1
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:98 b ] [98])) lex.yy.c:1706 89 {*movdi_internal}
     (nil))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref:DI ("_Z15yy_flush_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c510 yy_flush_buffer>) [0 yy_flush_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1706 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z15yy_flush_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c510 yy_flush_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 2 (set (mem/f:DI (reg/v/f:DI 3 bx [orig:98 b ] [98]) [1 b_8(D)->yy_input_file+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:99 file ] [99])) lex.yy.c:1708 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 56 [0x38])) [2 b_8(D)->yy_fill_buffer+0 S4 A64])
        (const_int 1 [0x1])) lex.yy.c:1709 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:91 D.6655 ] [91])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1715 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:91 D.6655 ] [91])
            (const_int 0 [0]))) lex.yy.c:1715 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 23)
            (pc))) lex.yy.c:1715 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 23)
;;  succ:       3 [85.0%]  (FALLTHRU)
;;              4 [15.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 3, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [85.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg:DI 1 dx [orig:100 yy_buffer_stack_top ] [100])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1715 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 21 20 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 3 bx [orig:98 b ] [98])
            (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:100 yy_buffer_stack_top ] [100])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [orig:91 D.6655 ] [91])) [1 *_16+0 S8 A64]))) lex.yy.c:1715 8 {*cmpdi_1}
     (nil))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) lex.yy.c:1715 612 {*jcc_1}
     (int_list:REG_BR_PROB 1765 (nil))
 -> 27)
;;  succ:       4 [82.3%]  (FALLTHRU)
;;              5 [17.6%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 4, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [82.3%]  (FALLTHRU)
;;              2 [15.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(code_label 23 22 24 4 65 "" [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 48 [0x30])) [2 b_8(D)->yy_bs_lineno+0 S4 A64])
        (const_int 1 [0x1])) lex.yy.c:1716 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 52 [0x34])) [2 b_8(D)->yy_bs_column+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1717 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [17.6%] 
;;              4 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 27 26 28 5 66 "" [1 uses])
(note 28 27 5 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 5 28 29 5 (set (reg:SI 0 ax [orig:88 D.6653 ] [88])
        (const_int 0 [0])) lex.yy.c:1720 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 29 5 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 6 bp [orig:99 file ] [99])
            (const_int 0 [0]))) lex.yy.c:1720 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) lex.yy.c:1720 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 42)
;;  succ:       6 [78.3%]  (FALLTHRU)
;;              7 [21.6%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 6, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [78.3%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:99 file ] [99])) lex.yy.c:1720 89 {*movdi_internal}
     (nil))
(call_insn 33 32 35 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fileno") [flags 0x41]  <function_decl 0x7f88bbf95af8 fileno>) [0 fileno S1 A8])
            (const_int 0 [0]))) lex.yy.c:1720 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("fileno") [flags 0x41]  <function_decl 0x7f88bbf95af8 fileno>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 33 36 6 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:96 D.6653 ] [96])) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
(call_insn 36 35 38 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isatty") [flags 0x41]  <function_decl 0x7f88bc0d7e58 isatty>) [0 isatty S1 A8])
            (const_int 0 [0]))) lex.yy.c:1720 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("isatty") [flags 0x41]  <function_decl 0x7f88bc0d7e58 isatty>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 38 36 39 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:97 D.6653 ] [97])
            (const_int 0 [0]))) lex.yy.c:1720 3 {*cmpsi_ccno_1}
     (nil))
(note 39 38 40 6 NOTE_INSN_DELETED)
(insn 40 39 42 6 (set (reg:SI 0 ax [orig:88 D.6653 ] [88])
        (gt:SI (reg:CCNO 17 flags)
            (const_int 0 [0]))) lex.yy.c:1720 606 {*setcc_si_1_movzbl}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 6, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [21.6%] 
;;              6 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(code_label 42 40 43 7 67 "" [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 40 [0x28])) [2 b_8(D)->yy_is_interactive+0 S4 A64])
        (reg:SI 0 ax [orig:88 D.6653 ] [88])) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
(insn 45 44 60 7 (set (mem:SI (reg/f:DI 41 r12 [orig:89 D.6654 ] [89]) [2 *_5+0 S4 A32])
        (reg/v:SI 42 r13 [orig:90 oerrno ] [90])) lex.yy.c:1722 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 60 45 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_create_buffer(FILE*, int) (_Z16yy_create_bufferP8_IO_FILEi, funcdef_no=94, decl_uid=4257, cgraph_uid=94, symbol_order=121)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

  BB 3
   Insn 18: point = 0
   Insn 17: point = 0
  BB 5
   Insn 45: point = 0
   Insn 44: point = 0
   Insn 39: point = 1
   Insn 38: point = 1
   Insn 37: point = 1
   Insn 36: point = 2
  BB 4
   Insn 34: point = 3
   Insn 33: point = 3
   Insn 31: point = 4
   Insn 28: point = 4
   Insn 27: point = 5
   Insn 26: point = 5
   Insn 25: point = 6
   Insn 23: point = 8
   Insn 22: point = 8
  BB 2
   Insn 15: point = 11
   Insn 14: point = 11
   Insn 10: point = 11
   Insn 9: point = 12
   Insn 8: point = 12
   Insn 3: point = 12
   Insn 2: point = 13
Compressing live ranges: from 14 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 2
changing reg in insn 37
changing reg in insn 3
changing reg in insn 22
changing reg in insn 10
changing reg in insn 44
changing reg in insn 38
changing reg in insn 36
changing reg in insn 31
changing reg in insn 23
changing reg in insn 14
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 33
changing reg in insn 31
deleting insn with uid = 26.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 39.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)


yy_buffer_state* yy_create_buffer(FILE*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={7d,6u} r1={5d} r2={5d} r3={1d,6u} r4={7d,5u} r5={9d,5u} r6={1d,1u} r7={1d,9u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={7d,2u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={1d,1u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 353{318d,35u,0e} in 28{24 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 41 r12 [orig:92 file ] [92])
        (reg:DI 5 di [ file ])) lex.yy.c:1655 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 6 bp [orig:93 size ] [93])
        (reg:SI 4 si [ size ])) lex.yy.c:1655 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 8 2 (var_location:DI size (const_int 64 [0x40])) -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (const_int 64 [0x40])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 12 2 (set (reg/f:DI 3 bx [94])
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [94])
        (nil)))
(debug_insn 12 10 13 2 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1658 -1
     (nil))
(debug_insn 13 12 14 2 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1658 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 3 bx [94])
            (const_int 0 [0]))) lex.yy.c:1659 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 32 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) lex.yy.c:1659 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 20)
;;  succ:       3 [0.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 8
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [0.0%]  (FALLTHRU)
;;              4 [0.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 32 15 16 3 76 "" [1 uses])
(note 16 32 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f88bbf1aa20 *.LC9>)) lex.yy.c:1660 89 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1660 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 19 18 20)
;; basic block 4, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 20 19 21 4 75 "" [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:DI 4 si [orig:88 D.6665 ] [88])
        (sign_extend:DI (reg/v:SI 6 bp [orig:93 size ] [93]))) lex.yy.c:1662 142 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 4 (set (mem:DI (plus:DI (reg/f:DI 3 bx [94])
                (const_int 24 [0x18])) [4 MEM[(struct yy_buffer_state *)_14].yy_buf_size+0 S8 A64])
        (reg:DI 4 si [orig:88 D.6665 ] [88])) lex.yy.c:1662 89 {*movdi_internal}
     (nil))
(debug_insn 24 23 25 4 (var_location:DI size (plus:DI (reg:DI 4 si [orig:88 D.6665 ] [88])
        (const_int 2 [0x2]))) lex.yy.c:1667 -1
     (nil))
(insn 25 24 27 4 (parallel [
            (set (reg:DI 5 di [orig:95 D.6665 ] [95])
                (plus:DI (reg:DI 4 si [orig:88 D.6665 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2123 218 {*adddi_1}
     (nil))
(call_insn 27 25 28 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 27 30 4 (set (reg/f:DI 0 ax [96])
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [96])
        (nil)))
(debug_insn 30 28 31 4 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1667 -1
     (nil))
(insn 31 30 33 4 (set (mem/f:DI (plus:DI (reg/f:DI 3 bx [94])
                (const_int 8 [0x8])) [1 MEM[(struct yy_buffer_state *)_14].yy_ch_buf+0 S8 A64])
        (reg/f:DI 0 ax [96])) lex.yy.c:1667 89 {*movdi_internal}
     (nil))
(insn 33 31 34 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [96])
            (const_int 0 [0]))) lex.yy.c:1668 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 32)
            (pc))) lex.yy.c:1668 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 32)
;;  succ:       3 [0.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 7 [sp] 41 [r12]

;; basic block 5, loop depth 0, count 0, freq 9992, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (mem:SI (plus:DI (reg/f:DI 3 bx [94])
                (const_int 36 [0x24])) [2 MEM[(struct yy_buffer_state *)_14].yy_is_our_buffer+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1671 90 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:DI 4 si)
        (reg/v/f:DI 41 r12 [orig:92 file ] [92])) lex.yy.c:1673 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [94])) lex.yy.c:1673 89 {*movdi_internal}
     (nil))
(call_insn 39 38 44 5 (call (mem:QI (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>) [0 yy_init_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1673 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 44 39 45 5 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [94])) lex.yy.c:1676 89 {*movdi_internal}
     (nil))
(insn 45 44 56 5 (use (reg/i:DI 0 ax)) lex.yy.c:1676 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 56 45 0 NOTE_INSN_DELETED)

;; Function void yyrestart(FILE*) (_Z9yyrestartP8_IO_FILE, funcdef_no=91, decl_uid=4252, cgraph_uid=91, symbol_order=118)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 4:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 52:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 54:  (0) m  (1) qn {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 6
   Insn 54: point = 0
   Insn 53: point = 1
   Insn 52: point = 3
   Insn 51: point = 4
   Insn 50: point = 6
   Insn 49: point = 8
   Insn 48: point = 8
   Insn 47: point = 8
   Insn 46: point = 10
   Insn 45: point = 11
   Insn 44: point = 12
   Insn 43: point = 13
   Insn 72: point = 15
   Insn 42: point = 16
   Insn 39: point = 17
   Insn 38: point = 17
   Insn 37: point = 18
  BB 5
   Insn 32: point = 20
   Insn 31: point = 22
  BB 4
   Insn 29: point = 24
   Insn 28: point = 24
   Insn 4: point = 24
   Insn 27: point = 25
   Insn 26: point = 26
   Insn 25: point = 27
   Insn 24: point = 28
   Insn 23: point = 28
   Insn 22: point = 28
   Insn 21: point = 28
   Insn 73: point = 30
   Insn 20: point = 31
   Insn 17: point = 32
  BB 3
   Insn 14: point = 33
   Insn 13: point = 33
   Insn 12: point = 33
   Insn 11: point = 35
  BB 2
   Insn 9: point = 37
   Insn 8: point = 37
   Insn 7: point = 37
   Insn 2: point = 38
Compressing live ranges: from 39 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 7
changing reg in insn 12
changing reg in insn 8
changing reg in insn 4
changing reg in insn 32
changing reg in insn 12
changing reg in insn 38
changing reg in insn 13
changing reg in insn 21
changing reg in insn 26
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 28
changing reg in insn 43
changing reg in insn 50
changing reg in insn 44
changing reg in insn 44
changing reg in insn 44
changing reg in insn 47
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 53
changing reg in insn 49
changing reg in insn 48
changing reg in insn 2
changing reg in insn 37
changing reg in insn 11
changing reg in insn 12
changing reg in insn 73
changing reg in insn 21
changing reg in insn 20
changing reg in insn 21
changing reg in insn 31
changing reg in insn 32
changing reg in insn 72
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
deleting insn with uid = 25.
deleting insn with uid = 38.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 39.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)


void yyrestart(FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,13u,1e} r1={11d,8u,1e} r2={5d,1u} r3={1d,1u} r4={6d,2u} r5={8d,4u} r6={1d,1u} r7={1d,9u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,3u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 302{258d,42u,2e} in 38{35 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags]
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 3 bx [orig:112 input_file ] [112])
        (reg:DI 5 di [ input_file ])) lex.yy.c:1593 89 {*movdi_internal}
     (nil))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 3 8 2 (set (reg/f:DI 0 ax [orig:87 D.6669 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 D.6669 ] [87])
            (const_int 0 [0]))) lex.yy.c:1595 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 15)
            (pc))) lex.yy.c:1595 612 {*jcc_1}
     (int_list:REG_BR_PROB 672 (nil))
 -> 15)
;;  succ:       4 [6.7%] 
;;              3 [93.3%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [93.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 5 [di] 17 [flags]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:DI 1 dx [orig:113 yy_buffer_stack_top ] [113])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 12 11 13 3 (set (reg/f:DI 5 di [orig:91 D.6671 ] [91])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:113 yy_buffer_stack_top ] [113])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:87 D.6669 ] [87])) [1 *_7+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.6671 ] [91])
            (const_int 0 [0]))) lex.yy.c:1595 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) lex.yy.c:1595 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 35)
;;  succ:       4 [15.0%]  (FALLTHRU)
;;              6 [85.0%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 2071, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [15.0%]  (FALLTHRU)
;;              2 [6.7%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label 15 14 16 4 82 "" [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 19 4 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1596 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(note 19 17 20 4 NOTE_INSN_DELETED)
(insn 20 19 73 4 (set (reg/f:DI 0 ax [orig:116 yy_buffer_stack ] [116])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1597 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 73 20 21 4 (set (reg:DI 1 dx [orig:115 yy_buffer_stack_top ] [115])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1597 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 21 73 22 4 (set (reg/f:DI 6 bp [orig:95 D.6669 ] [95])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:115 yy_buffer_stack_top ] [115])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:116 yy_buffer_stack ] [116]))) lex.yy.c:1597 214 {*leadi}
     (nil))
(insn 22 21 23 4 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) lex.yy.c:1598 90 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1598 89 {*movdi_internal}
     (nil))
(call_insn 24 23 26 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:1598 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 26 24 27 4 (set (mem/f:DI (reg/f:DI 6 bp [orig:95 D.6669 ] [95]) [1 *_13+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6671 ] [97])) lex.yy.c:1598 89 {*movdi_internal}
     (nil))
(insn 27 26 4 4 (set (reg/f:DI 0 ax [orig:98 D.6669 ] [98])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
(insn 4 27 28 4 (set (reg/f:DI 5 di [orig:91 D.6671 ] [91])
        (const_int 0 [0])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
(insn 28 4 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:98 D.6669 ] [98])
            (const_int 0 [0]))) lex.yy.c:1601 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) lex.yy.c:1601 612 {*jcc_1}
     (int_list:REG_BR_PROB 4896 (nil))
 -> 35)
;;  succ:       5 [51.0%]  (FALLTHRU)
;;              6 [49.0%] 
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 1057, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [51.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 5 [di]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:DI 1 dx [orig:117 yy_buffer_stack_top ] [117])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 32 31 35 5 (set (reg/f:DI 5 di [orig:91 D.6671 ] [91])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:117 yy_buffer_stack_top ] [117])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:98 D.6669 ] [98])) [1 *_50+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [49.0%] 
;;              5 [100.0%]  (FALLTHRU)
;;              3 [85.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si]
;; live  kill	
(code_label 35 32 36 6 84 "" [2 uses])
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 39 6 (set (reg:DI 4 si)
        (reg/v/f:DI 3 bx [orig:112 input_file ] [112])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
(call_insn 39 37 41 6 (call (mem:QI (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>) [0 yy_init_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1601 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(note 41 39 42 6 NOTE_INSN_DELETED)
(insn 42 41 72 6 (set (reg/f:DI 0 ax [orig:120 yy_buffer_stack ] [120])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 72 42 43 6 (set (reg:DI 1 dx [orig:119 yy_buffer_stack_top ] [119])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 43 72 44 6 (set (reg/f:DI 1 dx [orig:102 D.6669 ] [102])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:119 yy_buffer_stack_top ] [119])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:120 yy_buffer_stack ] [120]))) lex.yy.c:1642 214 {*leadi}
     (nil))
(insn 44 43 45 6 (set (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6669 ] [102]) [1 *_29+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6669 ] [102]) [1 *_29+0 S8 A64])
        (nil)))
(insn 45 44 46 6 (set (reg:SI 2 cx [orig:121 _30->yy_n_chars ] [121])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
                (const_int 32 [0x20])) [2 _30->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
                (const_int 32 [0x20])) [2 _30->yy_n_chars+0 S4 A64])
        (nil)))
(insn 46 45 47 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:121 _30->yy_n_chars ] [121])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 47 46 48 6 (set (reg/f:DI 0 ax [orig:105 D.6674 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
                (const_int 16 [0x10])) [1 _30->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:105 D.6674 ] [105])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 49 48 50 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 0 ax [orig:105 D.6674 ] [105])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 50 49 51 6 (set (reg/f:DI 1 dx [orig:122 *_29 ] [122])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6669 ] [102]) [1 *_29+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 51 50 52 6 (set (reg/f:DI 1 dx [orig:123 _33->yy_input_file ] [123])
        (mem/f:DI (reg/f:DI 1 dx [orig:122 *_29 ] [122]) [1 _33->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 52 51 53 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 1 dx [orig:123 _33->yy_input_file ] [123])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 53 52 54 6 (set (reg:QI 0 ax [orig:124 *_32 ] [124])
        (mem:QI (reg/f:DI 0 ax [orig:105 D.6674 ] [105]) [0 *_32+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 54 53 74 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:124 *_32 ] [124])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 74 54 0 NOTE_INSN_DELETED)

;; Function void yypush_buffer_state(YY_BUFFER_STATE) (_Z19yypush_buffer_stateP15yy_buffer_state, funcdef_no=98, decl_uid=4263, cgraph_uid=98, symbol_order=125)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) r {*cmpdi_ccno_1}
      Removing equiv init insn 14 (freq=117)
   14: r107:DI=[`_ZL19yy_buffer_stack_top']
      REG_EQUIV [`_ZL19yy_buffer_stack_top']
deleting insn with uid = 14.
Changing pseudo 107 in operand 1 of insn 15 on equiv [`_ZL19yy_buffer_stack_top']
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 15:  (0) r  (1) l  (2) M {*ashldi3_1}
      Creating newreg=118, assigning class INDEX_REGS to r118
   15: {r103:DI=r118:DI<<0x3;clobber flags:CC;}
      REG_DEAD r107:DI
      REG_UNUSED flags:CC
      REG_EQUAL [`_ZL19yy_buffer_stack_top']<<0x3
    Inserting insn reload before:
   65: r118:DI=[`_ZL19yy_buffer_stack_top']

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 45:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 50:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
  BB 7
   Insn 50: point = 0
   Insn 49: point = 1
   Insn 48: point = 3
   Insn 47: point = 4
   Insn 46: point = 6
   Insn 45: point = 8
   Insn 44: point = 8
   Insn 43: point = 8
   Insn 42: point = 10
   Insn 41: point = 11
   Insn 40: point = 12
  BB 4
   Insn 61: point = 13
   Insn 15: point = 13
   Insn 65: point = 15
  BB 6
   Insn 37: point = 17
   Insn 35: point = 19
   Insn 34: point = 20
   Insn 33: point = 22
   Insn 32: point = 23
   Insn 31: point = 24
   Insn 30: point = 26
   Insn 29: point = 27
   Insn 28: point = 28
   Insn 27: point = 29
   Insn 26: point = 30
  BB 5
   Insn 24: point = 32
   Insn 23: point = 32
   Insn 22: point = 32
   Insn 21: point = 33
   Insn 20: point = 34
  BB 3
   Insn 12: point = 36
   Insn 11: point = 36
   Insn 10: point = 36
   Insn 9: point = 37
   Insn 63: point = 37
  BB 2
   Insn 7: point = 40
   Insn 6: point = 40
   Insn 2: point = 40
 r87: [18..36]
 r88: [21..34]
 r89: [18..33]
 r91: [26..30]
 r93: [26..27]
 r99: [2..8]
 r103: [25..32] [17..17] [7..13]
 r106: [38..40]
 r108: [28..29]
 r109: [22..24]
 r110: [22..23]
 r111: [19..20]
 r113: [10..11]
 r114: [5..6]
 r115: [3..4]
 r116: [0..1]
 r117: [9..37]
 r118: [14..15]
Compressing live ranges: from 41 to 23 - 56%
Ranges after the compression:
 r87: [13..20]
 r88: [15..20]
 r89: [13..20]
 r91: [17..20]
 r93: [17..18]
 r99: [2..7]
 r103: [17..20] [12..12] [6..9]
 r106: [21..22]
 r108: [19..20]
 r109: [15..16]
 r110: [15..16]
 r111: [13..14]
 r113: [8..9]
 r114: [4..5]
 r115: [2..3]
 r116: [0..1]
 r117: [8..20]
 r118: [10..11]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8

********** Pseudo live ranges #2: **********

  BB 8
  BB 7
   Insn 50: point = 0
   Insn 49: point = 1
   Insn 48: point = 3
   Insn 47: point = 4
   Insn 46: point = 6
   Insn 45: point = 8
   Insn 44: point = 8
   Insn 43: point = 8
   Insn 42: point = 10
   Insn 41: point = 11
   Insn 40: point = 12
  BB 4
   Insn 61: point = 13
   Insn 15: point = 13
   Insn 65: point = 15
  BB 6
   Insn 37: point = 17
   Insn 35: point = 19
   Insn 34: point = 20
   Insn 33: point = 22
   Insn 32: point = 23
   Insn 31: point = 24
   Insn 30: point = 26
   Insn 29: point = 27
   Insn 28: point = 28
   Insn 27: point = 29
   Insn 26: point = 30
  BB 5
   Insn 24: point = 32
   Insn 23: point = 32
   Insn 22: point = 32
   Insn 21: point = 33
   Insn 20: point = 34
  BB 3
   Insn 12: point = 36
   Insn 11: point = 36
   Insn 10: point = 36
   Insn 9: point = 37
   Insn 63: point = 37
  BB 2
   Insn 7: point = 40
   Insn 6: point = 40
   Insn 2: point = 40
 r87: [18..36]
 r88: [21..34]
 r89: [18..33]
 r91: [26..30]
 r93: [26..27]
 r99: [2..8]
 r103: [25..32] [17..17] [7..13]
 r106: [38..40]
 r108: [28..29]
 r109: [22..24]
 r110: [22..23]
 r111: [19..20]
 r113: [10..11]
 r114: [5..6]
 r115: [3..4]
 r116: [0..1]
 r117: [9..37]
 r118: [14..15]
Compressing live ranges: from 41 to 23 - 56%
Ranges after the compression:
 r87: [13..20]
 r88: [15..20]
 r89: [13..20]
 r91: [17..20]
 r93: [17..18]
 r99: [2..7]
 r103: [17..20] [12..12] [6..9]
 r106: [21..22]
 r108: [19..20]
 r109: [15..16]
 r110: [15..16]
 r111: [13..14]
 r113: [8..9]
 r114: [4..5]
 r115: [2..3]
 r116: [0..1]
 r117: [8..20]
 r118: [10..11]

********** Assignment #1: **********

	 Assigning to 118 (cl=INDEX_REGS, orig=118, freq=234, tfirst=118, tfreq=234)...
	   Assign 0 to reload r118 (freq=234)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 10
changing reg in insn 37
changing reg in insn 22
changing reg in insn 11
changing reg in insn 20
changing reg in insn 34
changing reg in insn 21
changing reg in insn 21
changing reg in insn 37
changing reg in insn 22
changing reg in insn 26
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 43
changing reg in insn 49
changing reg in insn 45
changing reg in insn 44
changing reg in insn 37
changing reg in insn 22
changing reg in insn 15
changing reg in insn 40
changing reg in insn 46
changing reg in insn 31
changing reg in insn 29
changing reg in insn 23
changing reg in insn 29
changing reg in insn 2
changing reg in insn 63
changing reg in insn 6
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 33
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 63
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 41
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 9 (    1)


void yypush_buffer_state(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={10d,10u,1e} r1={6d,7u} r2={3d,3u} r3={1d,3u,1e} r4={3d,2u} r5={4d,5u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={8d,3u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={4d,2u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 160{114d,44u,2e} in 37{36 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:106 new_buffer ] [106])
            (const_int 0 [0]))) lex.yy.c:1760 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) lex.yy.c:1760 612 {*jcc_1}
     (int_list:REG_BR_PROB 2164 (nil))
 -> 53)
;;  succ:       8 [21.6%] 
;;              3 [78.4%]  (FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7836, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.4%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 2 [cx] 3 [bx] 17 [flags]
;; live  kill	
(note 8 7 63 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 63 8 9 3 (set (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
        (reg/v/f:DI 5 di [orig:106 new_buffer ] [106])) 89 {*movdi_internal}
     (nil))
(call_insn 9 63 10 3 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1763 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn 10 9 11 3 (set (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1766 89 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
            (const_int 0 [0]))) lex.yy.c:1766 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) lex.yy.c:1766 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 18)
;;  succ:       5 [85.0%] 
;;              4 [15.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp]
;; live  out 	 2 [cx] 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 1175, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [15.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 14 13 65 4 NOTE_INSN_DELETED)
(insn 65 14 15 4 (set (reg:DI 0 ax [118])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 15 65 61 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6678 ] [103])
                (ashift:DI (reg:DI 0 ax [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(jump_insn 61 15 62 4 (set (pc)
        (label_ref 38)) 654 {jump}
     (nil)
 -> 38)
;;  succ:       7 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 62 61 18)
;; basic block 5, loop depth 0, count 0, freq 6661, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [85.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 18 62 19 5 93 "" [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:DI 1 dx [orig:88 D.6679 ] [88])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1766 89 {*movdi_internal}
     (nil))
(insn 21 20 22 5 (parallel [
            (set (reg:DI 4 si [orig:89 D.6679 ] [89])
                (ashift:DI (reg:DI 1 dx [orig:88 D.6679 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1766 512 {*ashldi3_1}
     (nil))
(insn 22 21 23 5 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6678 ] [103])
                (plus:DI (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
                    (reg:DI 4 si [orig:89 D.6679 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1766 218 {*adddi_1}
     (nil))
(insn 23 22 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_10+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:1766 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 24 23 25 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) lex.yy.c:1766 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 38)
;;  succ:       6 [85.0%]  (FALLTHRU)
;;              7 [15.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 5662, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [85.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg/f:DI 5 di [orig:91 D.6681 ] [91])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1769 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (nil)))
(insn 27 26 28 6 (set (reg:QI 37 r8 [orig:108 yy_hold_char ] [108])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1769 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 28 27 29 6 (set (mem:QI (reg/f:DI 5 di [orig:91 D.6681 ] [91]) [0 *_12+0 S1 A8])
        (reg:QI 37 r8 [orig:108 yy_hold_char ] [108])) lex.yy.c:1769 93 {*movqi_internal}
     (nil))
(insn 29 28 30 6 (set (reg/f:DI 37 r8 [orig:93 D.6680 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_10+0 S8 A64])) lex.yy.c:1770 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_10+0 S8 A64])
        (nil)))
(insn 30 29 31 6 (set (mem/f:DI (plus:DI (reg/f:DI 37 r8 [orig:93 D.6680 ] [93])
                (const_int 16 [0x10])) [1 _15->yy_buf_pos+0 S8 A64])
        (reg/f:DI 5 di [orig:91 D.6681 ] [91])) lex.yy.c:1770 89 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (set (reg/f:DI 0 ax [orig:109 *_10 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_10+0 S8 A64])) lex.yy.c:1771 89 {*movdi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:SI 5 di [orig:110 yy_n_chars ] [110])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1771 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (nil)))
(insn 33 32 34 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:109 *_10 ] [109])
                (const_int 32 [0x20])) [2 _17->yy_n_chars+0 S4 A64])
        (reg:SI 5 di [orig:110 yy_n_chars ] [110])) lex.yy.c:1771 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:DI 1 dx [111])
                (plus:DI (reg:DI 1 dx [orig:88 D.6679 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1776 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 35 34 36 6 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (reg:DI 1 dx [111])) lex.yy.c:1776 89 {*movdi_internal}
     (nil))
(note 36 35 37 6 NOTE_INSN_DELETED)
(insn 37 36 38 6 (set (reg/f:DI 0 ax [orig:103 D.6678 ] [103])
        (plus:DI (plus:DI (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
                (reg:DI 4 si [orig:89 D.6679 ] [89]))
            (const_int 8 [0x8]))) 214 {*leadi}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 7836, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              5 [15.0%] 
;;              4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 38 37 39 7 94 "" [2 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_41+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])) lex.yy.c:1777 89 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:SI 1 dx [orig:113 new_buffer_4(D)->yy_n_chars ] [113])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
                (const_int 32 [0x20])) [2 new_buffer_4(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
                (const_int 32 [0x20])) [2 new_buffer_4(D)->yy_n_chars+0 S4 A64])
        (nil)))
(insn 42 41 43 7 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 1 dx [orig:113 new_buffer_4(D)->yy_n_chars ] [113])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg/f:DI 1 dx [orig:99 D.6681 ] [99])
        (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
                (const_int 16 [0x10])) [1 new_buffer_4(D)->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6681 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6681 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg/f:DI 0 ax [orig:114 *_41 ] [114])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_41+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 47 46 48 7 (set (reg/f:DI 0 ax [orig:115 _34->yy_input_file ] [115])
        (mem/f:DI (reg/f:DI 0 ax [orig:114 *_41 ] [114]) [1 _34->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 48 47 49 7 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:115 _34->yy_input_file ] [115])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg:QI 0 ax [orig:116 *_33 ] [116])
        (mem:QI (reg/f:DI 1 dx [orig:99 D.6681 ] [99]) [0 *_33+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 50 49 53 7 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:116 *_33 ] [116])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              2 [21.6%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 53 50 54 8 91 "" [1 uses])
(note 54 53 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 64 54 0 NOTE_INSN_DELETED)

;; Function void yypop_buffer_state() (_Z18yypop_buffer_statev, funcdef_no=99, decl_uid=4264, cgraph_uid=99, symbol_order=126)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 41:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 50:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) r {*cmpdi_ccno_1}

********** Pseudo live ranges #1: **********

  BB 8
  BB 6
   Insn 81: point = 0
   Insn 41: point = 0
   Insn 40: point = 1
   Insn 39: point = 3
   Insn 38: point = 4
   Insn 37: point = 6
   Insn 36: point = 8
   Insn 35: point = 8
   Insn 34: point = 8
   Insn 33: point = 10
   Insn 32: point = 11
  BB 5
   Insn 30: point = 13
   Insn 29: point = 13
   Insn 28: point = 13
   Insn 27: point = 14
   Insn 25: point = 16
   Insn 24: point = 16
  BB 7
   Insn 53: point = 19
   Insn 52: point = 19
   Insn 50: point = 19
   Insn 49: point = 20
   Insn 48: point = 20
  BB 4
   Insn 79: point = 22
  BB 3
   Insn 19: point = 22
   Insn 18: point = 22
   Insn 16: point = 22
   Insn 15: point = 23
   Insn 13: point = 24
  BB 2
   Insn 7: point = 26
   Insn 6: point = 26
   Insn 5: point = 26
Compressing live ranges: from 27 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 27
changing reg in insn 37
changing reg in insn 28
changing reg in insn 5
changing reg in insn 27
changing reg in insn 15
changing reg in insn 6
changing reg in insn 13
changing reg in insn 15
changing reg in insn 52
changing reg in insn 24
changing reg in insn 15
changing reg in insn 50
changing reg in insn 16
changing reg in insn 16
changing reg in insn 48
changing reg in insn 18
changing reg in insn 24
changing reg in insn 27
changing reg in insn 25
changing reg in insn 28
changing reg in insn 34
changing reg in insn 32
changing reg in insn 29
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 36
changing reg in insn 35
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
deleting insn with uid = 48.


try_optimize_cfg iteration 1

Forwarding edge 3->4 to 8 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 49.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 9 (    1)


void yypop_buffer_state()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={5d,7u,1e} r1={5d,4u} r2={3d,1u} r3={2d,5u} r4={2d} r5={3d,2u} r6={1d,3u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,4u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={1d,2u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 143{105d,37u,1e} in 30{29 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 6 bp [orig:88 D.6687 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 6 bp [orig:88 D.6687 ] [88])
            (const_int 0 [0]))) lex.yy.c:1790 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1790 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 57)
;;  succ:       8 [10.1%] 
;;              3 [89.9%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags] 41 [r12]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags] 41 [r12]
;; live  kill	
(note 12 7 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:DI 3 bx [orig:89 D.6688 ] [89])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(note 14 13 15 3 NOTE_INSN_DELETED)
(insn 15 14 16 3 (set (reg/f:DI 41 r12 [orig:91 D.6687 ] [91])
        (plus:DI (mult:DI (reg:DI 3 bx [orig:89 D.6688 ] [89])
                (const_int 8 [0x8]))
            (reg/f:DI 6 bp [orig:88 D.6687 ] [88]))) lex.yy.c:1790 214 {*leadi}
     (nil))
(insn 16 15 18 3 (set (reg/f:DI 5 di [orig:92 D.6689 ] [92])
        (mem/f:DI (reg/f:DI 41 r12 [orig:91 D.6687 ] [91]) [1 *_8+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn 18 16 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:92 D.6689 ] [92])
            (const_int 0 [0]))) lex.yy.c:1790 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 78 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 77)
            (pc))) lex.yy.c:1790 612 {*jcc_1}
     (int_list:REG_BR_PROB 8986 (nil))
 -> 77)
;;  succ:       4 [10.1%]  (FALLTHRU)
;;              7 [89.9%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 911, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [10.1%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 78 19 79 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 79 78 80 4 (set (pc)
        (label_ref 57)) 654 {jump}
     (nil)
 -> 57)
;;  succ:       8 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 80 79 51)
;; basic block 5, loop depth 0, count 0, freq 4037, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [50.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 51 80 23 5 106 "" [1 uses])
(note 23 51 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (parallel [
            (set (reg:DI 3 bx [orig:94 D.6688 ] [94])
                (plus:DI (reg:DI 3 bx [orig:89 D.6688 ] [89])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1796 218 {*adddi_1}
     (nil))
(insn 25 24 26 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (reg:DI 3 bx [orig:94 D.6688 ] [94])) lex.yy.c:1796 89 {*movdi_internal}
     (nil))
(note 26 25 27 5 NOTE_INSN_DELETED)
(insn 27 26 28 5 (set (reg/f:DI 1 dx [orig:87 D.6687 ] [87])
        (plus:DI (mult:DI (reg:DI 3 bx [orig:94 D.6688 ] [94])
                (const_int 8 [0x8]))
            (reg/f:DI 6 bp [orig:88 D.6687 ] [88]))) 214 {*leadi}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
        (mem/f:DI (reg/f:DI 1 dx [orig:87 D.6687 ] [87]) [1 *_1+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
            (const_int 0 [0]))) lex.yy.c:1798 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1798 612 {*jcc_1}
     (int_list:REG_BR_PROB 0 (nil))
 -> 57)
;;  succ:       6 [100.0%]  (FALLTHRU)
;;              8
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 6520, maybe hot
;; Invalid sum of incoming frequencies 4037, should be 6520
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (reg:SI 2 cx [orig:103 _23->yy_n_chars ] [103])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
                (const_int 32 [0x20])) [2 _23->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
                (const_int 32 [0x20])) [2 _23->yy_n_chars+0 S4 A64])
        (nil)))
(insn 33 32 34 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:103 _23->yy_n_chars ] [103])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg/f:DI 0 ax [orig:97 D.6691 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
                (const_int 16 [0x10])) [1 _23->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6691 ] [97])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6691 ] [97])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:DI 1 dx [orig:104 *_1 ] [104])
        (mem/f:DI (reg/f:DI 1 dx [orig:87 D.6687 ] [87]) [1 *_1+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 1 dx [orig:105 _26->yy_input_file ] [105])
        (mem/f:DI (reg/f:DI 1 dx [orig:104 *_1 ] [104]) [1 _26->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 39 38 40 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 1 dx [orig:105 _26->yy_input_file ] [105])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:QI 0 ax [orig:106 *_25 ] [106])
        (mem:QI (reg/f:DI 0 ax [orig:97 D.6691 ] [97]) [0 *_25+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 41 40 81 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:106 *_25 ] [106])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(jump_insn 81 41 82 6 (set (pc)
        (label_ref 57)) 654 {jump}
     (nil)
 -> 57)
;;  succ:       8 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 82 81 77)
;; basic block 7, loop depth 0, count 0, freq 8075, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [89.9%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 5 [di] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 77 82 47 7 113 "" [1 uses])
(note 47 77 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 49 47 50 7 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1793 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 50 49 52 7 (set (mem/f:DI (reg/f:DI 41 r12 [orig:91 D.6687 ] [91]) [1 *_8+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1794 89 {*movdi_internal}
     (nil))
(insn 52 50 53 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 3 bx [orig:89 D.6688 ] [89])
            (const_int 0 [0]))) lex.yy.c:1795 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 53 52 57 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) lex.yy.c:1795 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 51)
;;  succ:       5 [50.0%] 
;;              8 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 10000, maybe hot
;; Invalid sum of incoming frequencies 12483, should be 10000
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%] 
;;              2 [10.1%] 
;;              7 [50.0%]  (FALLTHRU)
;;              5
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 57 53 58 8 101 "" [4 uses])
(note 58 57 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 83 58 0 NOTE_INSN_DELETED)

;; Function int yylex() (_Z5yylexv, funcdef_no=85, decl_uid=5394, cgraph_uid=85, symbol_order=112)

      Creating newreg=576
Removing SCRATCH in insn #3 (nop 2)
rescanning insn with uid = 3.
      Creating newreg=577
Removing SCRATCH in insn #1320 (nop 3)
rescanning insn with uid = 1320.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r576
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 91:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1663:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 122:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1661:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 133:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 134:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 137:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 139:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 145:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 148:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1438:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 155:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 158:  (0) r  (1) rm {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 161:  (0) q  (1) qm {*movqi_internal}
      Removing equiv init insn 970 (freq=7)
  970: r562:DI=0x2000
      REG_EQUIV 0x2000
deleting insn with uid = 970.
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 167:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 174:  (0) q  (1) qm {*movqi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) qm {zero_extendqidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1433:  (0) r {*cmphi_ccno_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1434:  (0) r  (2) 0  (3) rm {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1435:  (0) r {*cmphi_ccno_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1436:  (0) r  (2) 0  (3) rm {*movdicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1437:  (0) r {*cmphi_ccno_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1439:  (0) r  (2) 0  (3) r {*movqicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1440:  (0) r {*cmphi_ccno_1}
            3 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1442:  (0) r  (2) 0  (3) r {*movqicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1389:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 203:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 204:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) rm {extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) rm  (1) re {*cmpsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Costly set: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=15,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) rm {extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1390:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 247:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) rm  (1) rn {*cmphi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 251:  (0) q  (1) qm {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 254:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 263:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 274:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) r  (1) rm {extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=15,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 293:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 294:  (0) r  (1) rm {extendhisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 300:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 302:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=578 from oldreg=403, assigning class GENERAL_REGS to r578
  302: {r578:DI=r578:DI-r89:DI;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUIV [`yyleng']
    Inserting insn reload before:
 1665: r578:DI=r88:DI
    Inserting insn reload after:
 1666: r403:DI=r578:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 303:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 304:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 305:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 306:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 307:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) rm  (1) re {*cmpsi_1}
            0 Costly set: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 334:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) rBw {*tablejump_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 366:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 370:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 373:  (0) r  (1) rm {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 381:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 382:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 383:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=15,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 388:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 389:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 395:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) r  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) r  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 401:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 404:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 405:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 408:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 413:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 418:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 423:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 427:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 440:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 445:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 456:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 461:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 464:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 466:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 468:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 476:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 477:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 478:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 479:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 501:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 502:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 504:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 520:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 521:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 522:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 523:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) rm  (1) re {*cmpsi_1}
      Removing equiv init insn 537 (freq=1)
  537: {r427:DI=frame:DI+0x7;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_EQUIV frame:DI-0x9
deleting insn with uid = 537.
      Removing equiv init insn 538 (freq=1)
  538: r429:DI=[`yytext']
      REG_EQUIV [`yytext']
deleting insn with uid = 538.
Changing pseudo 429 in operand 1 of insn 539 on equiv [`yytext']
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
	 Choosing alt 3 in insn 539:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=579, assigning class GENERAL_REGS to r579
  539: {r428:DI=r579:DI+0x1;clobber flags:CC;}
      REG_DEAD r429:DI
      REG_UNUSED flags:CC
      REG_EQUAL [`yytext']+0x1
    Inserting insn reload before:
 1667: r579:DI=[`yytext']

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1667:  (0) r  (1) rem {*movdi_internal}
Changing pseudo 427 in operand 1 of insn 540 on equiv frame:DI+0x7
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=5,overall=12,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=16,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=9,overall=18,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=12,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=16,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly set: reject++
            alt=23: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=24,overall=12,losers=1 -- refuse
	 Choosing alt 3 in insn 540:  (0) r  (1) rem {*movdi_internal}
      Creating newreg=580, assigning class GENERAL_REGS to r580
  540: dx:DI=r580:DI
      REG_DEAD r427:DI
      REG_EQUAL frame:DI-0x9
    Inserting insn reload before:
 1668: r580:DI=frame:DI+0x7

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1668:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r580
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 541:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 543:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) qm {extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 547:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 553:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 554:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 555:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 556:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 557:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 563:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 568:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) r {*cmpdi_ccno_1}
      Removing equiv init insn 574 (freq=1)
  574: r435:DI=[`yytext']
      REG_EQUIV [`yytext']
deleting insn with uid = 574.
Changing pseudo 435 in operand 1 of insn 575 on equiv [`yytext']
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
	 Choosing alt 3 in insn 575:  (0) r  (1) r  (2) le {*adddi_1}
      Creating newreg=581, assigning class GENERAL_REGS to r581
  575: {r434:DI=r581:DI+0x1;clobber flags:CC;}
      REG_DEAD r435:DI
      REG_UNUSED flags:CC
      REG_EQUAL [`yytext']+0x1
    Inserting insn reload before:
 1669: r581:DI=[`yytext']

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 581:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 674:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 675:  (0) =r  (1) qm {extendqisi2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 680:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 682:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 685:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 688:  (0) r  (1) rm {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 693:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 694:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 696:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 698:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 700:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 701:  (0) r  (1) rm {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 704:  (0) r  (1) rm {*movhi_internal}
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=17,losers=2,rld_nregs=2
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 710:  (0) r  (1) 0  (2) rm {*subdi_1}
      Creating newreg=582 from oldreg=445, assigning class GENERAL_REGS to r582
  710: {r582:DI=r582:DI-[`yytext'];clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1670: r582:DI=r88:DI
    Inserting insn reload after:
 1671: r445:DI=r582:DI

            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non pseudo reload: reject++
            alt=1,overall=13,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
            0 Non pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=16,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=16,losers=2 -- refuse
	 Choosing alt 3 in insn 711:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=583 from oldreg=147, assigning class GENERAL_REGS to r583
  711: {r583:SI=r445:DI#0-0x1;clobber flags:CC;}
      REG_DEAD r445:DI
      REG_UNUSED flags:CC
    Inserting insn reload after:
 1672: r147:SI=r583:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1672:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 713:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 714:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 715:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 717:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 719:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 720:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 728:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 729:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 730:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 731:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 732:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 733:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 736:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 737:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
          alt=2,overall=8,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 738:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 739:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 740:  (0) rm  (1) re {*cmpdi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) rm {*extendsidi2_rex64}
      Creating newreg=584 from oldreg=147, assigning class GENERAL_REGS to r584
      Making reload reg 584 for reg 147 optional
  743: r451:DI=sign_extend(r584:SI)
      REG_DEAD r147:SI
    Inserting insn reload before:
 1673: r584:SI=r147:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1673:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 745
	 Choosing alt 0 in insn 745:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 746:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 754:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 755:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 756:  (0) r {*cmphi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 759:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 760:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 769:  (0) =r  (1) rm {*zero_extendhisi2}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 770:  (0) r  (1) r  (2) le {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 771:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 772:  (0) r  (1) rm {extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) rm  (1) re {*cmpsi_1}
            0 Costly set: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=15,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 782:  (0) r  (1) rm {extendhisi2}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 787:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 791:  (0) =r  (1) rm {*zero_extendhisi2}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 792:  (0) r  (1) r  (2) le {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 793:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 794:  (0) r  (1) rm {extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 801:  (0) r  (1) r  (2) le {*addsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 802:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 803:  (0) =r  (1) rm {*zero_extendhisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 813:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 815:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 818:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 819:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 828:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 831:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) rm  (1) re {*cmpdi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 835:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 836:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 840:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 843:  (0) =rm  (1) 0  (2) re {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 844:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 851:  (0) =rm  (1) 0  (2) re {*subdi_1}
      Creating newreg=585 from oldreg=478, assigning class GENERAL_REGS to r585
  851: {r585:DI=r585:DI-r213:DI;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1674: r585:DI=r244:DI
    Inserting insn reload after:
 1675: r478:DI=r585:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 858:  (0) =r  (1) %0  (2) rme {*adddi_2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 868:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 869:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 870:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 876:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 879:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 885:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 886:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 892:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=586 from oldreg=479, assigning class GENERAL_REGS to r586
  892: r586:DI=!r586:DI
    Inserting insn reload before:
 1676: r586:DI=r224:DI
    Inserting insn reload after:
 1677: r479:DI=r586:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 896:  (0) =r  (1) %0  (2) rme {*adddi_2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 907:  (0) r  (1) rem {*movdi_internal}
            0 Non pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 908:  (0) r  (1) 0  (2) rm {*subdi_1}
      Creating newreg=587 from oldreg=481, assigning class GENERAL_REGS to r587
  908: {r587:DI=r587:DI-r232:DI;clobber flags:CC;}
      REG_DEAD r244:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1678: r587:DI=r244:DI
    Inserting insn reload after:
 1679: r481:DI=r587:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1679:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 911:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 914:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 917:  (0) =rm  (1) 0  (2) J {*ashldi3_cmp}
      Creating newreg=588 from oldreg=238, assigning class GENERAL_REGS to r588
  917: {flags:CCZ=cmp(r588:DI<<0x1,0);r588:DI=r588:DI<<0x1;}
    Inserting insn reload before:
 1680: r588:DI=r237:DI
    Inserting insn reload after:
 1681: r238:DI=r588:DI

            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 920:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=589 from oldreg=482, assigning class GENERAL_REGS to r589
  920: {r589:DI=r589:DI 0>>0x3;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1682: r589:DI=r237:DI
    Inserting insn reload after:
 1683: r482:DI=r589:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 921:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 922:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 927:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 932:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 935:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 939:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 940:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 947:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 950:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 951:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 955:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 956:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 957:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 958:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 960:  (0) =rm  (1) 0 {*one_cmpldi2_1}
      Creating newreg=590 from oldreg=485, assigning class GENERAL_REGS to r590
  960: r590:DI=!r590:DI
    Inserting insn reload before:
 1684: r590:DI=r224:DI
    Inserting insn reload after:
 1685: r485:DI=r590:DI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 965:  (0) =r  (1) %0  (2) rme {*adddi_2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) rm  (1) re {*cmpdi_1}
Changing pseudo 562 in operand 3 of insn 971 on equiv 0x2000
            0 Non input pseudo reload: reject++
            3 Matching alt: reject+=2
            3 Non-pseudo reload: reject+=2
            3 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            2 Dying matched operand reload: reject++
            3 Non-pseudo reload: reject+=2
            3 Non input pseudo reload: reject++
          alt=1,overall=17,losers=2,rld_nregs=3
	 Choosing alt 1 in insn 971:  (0) r  (2) 0  (3) rm {*movdicc_noc}
      Creating newreg=591 from oldreg=309, assigning class GENERAL_REGS to r591
      Creating newreg=592, assigning class GENERAL_REGS to r592
  971: r591:DI={(leu(flags:CC,0))?r591:DI:r592:DI}
      REG_DEAD r230:DI
      REG_DEAD flags:CC
      REG_EQUAL {(leu(flags:CC,0))?r230:DI:0x2000}
    Inserting insn reload before:
 1686: r591:DI=r230:DI
 1688: r592:DI=0x2000
    Inserting insn reload after:
 1687: r309:DI=r591:DI

            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=5,overall=2,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1687:  (0) m  (1) re {*movdi_internal}
            0 Non pseudo reload: reject++
          alt=2,overall=1,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1688:  (0) r  (1) Z {*movdi_internal}
      Change to class INDEX_REGS for r592
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 973:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 979:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 980:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 983:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 986:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 992:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 993:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 996:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 997:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1002:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1004:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=17,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
  Commutative operand exchange in insn 1011
	 Choosing alt 0 in insn 1011:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=593 from oldreg=488, assigning class GENERAL_REGS to r593
 1011: {r593:DI=r593:DI+[r245:DI+0x8];clobber flags:CC;}
      REG_DEAD r245:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1689: r593:DI=r224:DI
    Inserting insn reload after:
 1690: r488:DI=r593:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1012:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1013:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1014:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1016:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1022:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1023:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1024:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1027:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1028:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1030:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1033:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1037:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1038:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1039:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1041:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1660:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1042:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1048:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1049:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1050:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1054:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1058:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1059:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1060:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1063:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1659:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1064:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1065:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1074:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1075:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1076:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1077:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            2 Matching alt: reject+=2
            alt=2,overall=8,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1081:  (0) r  (1) r  (2) le {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1083:  (0) r  (1) rm {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1084:  (0) r  (1) rm {*cmpdi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 1090:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=594 from oldreg=498, assigning class GENERAL_REGS to r594
 1090: {r594:SI=r594:SI>>0x1;clobber flags:CC;}
      REG_DEAD r275:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1691: r594:SI=r275:SI
    Inserting insn reload after:
 1692: r498:SI=r594:SI

          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1091:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1092:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1093:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1096:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1100:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1101:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1103:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1106:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1107:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1111:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1114:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1115:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1116:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1117:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1118:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1119:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1120:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1121:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1134:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1136:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1142:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=15,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=15,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=595 from oldreg=88, assigning class GENERAL_REGS to r595
   33: {r595:DI=r595:DI+[r506:DI+0x8];clobber flags:CC;}
      REG_DEAD r506:DI
      REG_DEAD r289:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1693: r595:DI=r289:DI
    Inserting insn reload after:
 1694: r88:DI=r595:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1161:  (0) m  (1) re {*movdi_internal}
      Removing equiv init insn 1162 (freq=1)
 1162: r509:SI=[`_ZL8yy_start']
      REG_EQUIV [`_ZL8yy_start']
deleting insn with uid = 1162.
Changing pseudo 509 in operand 1 of insn 1163 on equiv [`_ZL8yy_start']
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=20,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
	 Choosing alt 3 in insn 1163:  (0) r  (1) r  (2) le {*addsi_1}
      Creating newreg=596, assigning class GENERAL_REGS to r596
 1163: {r508:SI=r596:SI-0x1;clobber flags:CC;}
      REG_DEAD r509:SI
      REG_UNUSED flags:CC
      REG_EQUAL [`_ZL8yy_start']-0x1
    Inserting insn reload before:
 1695: r596:SI=[`_ZL8yy_start']

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1695:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 1164:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=597 from oldreg=511, assigning class GENERAL_REGS to r597
 1164: {r597:SI=r597:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1696: r597:SI=r508:SI
    Inserting insn reload after:
 1697: r511:SI=r597:SI

          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1165:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1166:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1167:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1173:  (0) r  (1) rm {*extendsidi2_rex64}
      Creating newreg=598 from oldreg=147, assigning class GENERAL_REGS to r598
      Making reload reg 598 for reg 147 optional
 1173: r514:DI=sign_extend(r598:SI)
      REG_DEAD r147:SI
    Inserting insn reload before:
 1698: r598:SI=r147:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1698:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1174
	 Choosing alt 0 in insn 1174:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1175:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1176:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1180:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1206:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1207:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1211:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1214:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1215:  (0) r  (1) rm {*movhi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1220:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1221:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1320:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r577
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1243:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1246:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1247:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=17,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
  Commutative operand exchange in insn 1249
	 Choosing alt 0 in insn 1249:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=599 from oldreg=523, assigning class GENERAL_REGS to r599
 1249: {r599:DI=r599:DI+[r521:DI+0x8];clobber flags:CC;}
      REG_DEAD r521:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1699: r599:DI=r212:DI
    Inserting insn reload after:
 1700: r523:DI=r599:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1251:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1252:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1257:  (0) r  (1) rm {*cmpdi_1}
      Creating newreg=600 from oldreg=309, assigning class GENERAL_REGS to r600
      Making reload reg 600 for reg 309 optional
 1257: flags:CC=cmp(r212:DI,r600:DI)
    Inserting insn reload before:
 1701: r600:DI=r309:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1701:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1265:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1268:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1274:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1285:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1288:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1291:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            2 Matching alt: reject+=2
            alt=2,overall=17,losers=2 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
  Commutative operand exchange in insn 1293
	 Choosing alt 0 in insn 1293:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=601 from oldreg=533, assigning class GENERAL_REGS to r601
 1293: {r601:DI=r601:DI+[r531:DI+0x8];clobber flags:CC;}
      REG_DEAD r531:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1702: r601:DI=r212:DI
    Inserting insn reload after:
 1703: r533:DI=r601:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1295:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1305:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1306:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1308:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1311:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1313:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1314:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1322:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 109
   Insn 836: point = 0
   Insn 835: point = 0
  BB 127
   Insn 951: point = 0
   Insn 950: point = 0
  BB 125
   Insn 1613: point = 0
  BB 126
   Insn 947: point = 0
  BB 134
   Insn 993: point = 2
   Insn 992: point = 2
  BB 167
   Insn 1653: point = 2
  BB 147
   Insn 1107: point = 2
   Insn 1106: point = 2
  BB 156
   Insn 1221: point = 2
   Insn 1220: point = 2
  BB 171
   Insn 1322: point = 2
  BB 162
   Insn 1644: point = 2
  BB 172
   Insn 1325: point = 2
  BB 161
   Insn 1321: point = 2
   Insn 1320: point = 2
   Insn 1319: point = 3
  BB 159
   Insn 1640: point = 5
   Insn 68: point = 5
  BB 158
   Insn 1638: point = 6
   Insn 43: point = 6
  BB 93
   Insn 1593: point = 7
   Insn 66: point = 7
  BB 92
   Insn 1591: point = 8
   Insn 65: point = 8
  BB 91
   Insn 1589: point = 9
   Insn 64: point = 9
  BB 90
   Insn 1587: point = 10
   Insn 63: point = 10
  BB 89
   Insn 1585: point = 11
   Insn 62: point = 11
  BB 88
   Insn 1583: point = 12
   Insn 61: point = 12
  BB 87
   Insn 1581: point = 13
   Insn 60: point = 13
  BB 86
   Insn 1579: point = 14
   Insn 59: point = 14
  BB 85
   Insn 1577: point = 15
   Insn 58: point = 15
  BB 84
   Insn 1575: point = 16
   Insn 57: point = 16
  BB 83
   Insn 1573: point = 17
   Insn 56: point = 17
  BB 82
   Insn 1571: point = 18
   Insn 55: point = 18
  BB 81
   Insn 1569: point = 19
   Insn 54: point = 19
  BB 80
   Insn 1567: point = 20
   Insn 53: point = 20
  BB 79
   Insn 1565: point = 21
   Insn 52: point = 21
  BB 78
   Insn 1563: point = 22
   Insn 51: point = 22
  BB 77
   Insn 1561: point = 23
   Insn 50: point = 23
  BB 76
   Insn 1559: point = 24
   Insn 49: point = 24
  BB 75
   Insn 1557: point = 25
   Insn 48: point = 25
  BB 74
   Insn 1555: point = 26
   Insn 47: point = 26
  BB 73
   Insn 1553: point = 27
   Insn 46: point = 27
  BB 72
   Insn 1551: point = 28
   Insn 45: point = 28
  BB 71
   Insn 1549: point = 29
   Insn 581: point = 29
   Insn 578: point = 30
   Insn 577: point = 30
   Insn 576: point = 30
   Insn 575: point = 31
   Insn 1669: point = 33
  BB 160
   Insn 67: point = 35
  BB 53
   Insn 1529: point = 36
  BB 94
   Insn 1595: point = 36
   Insn 675: point = 36
   Insn 674: point = 38
  BB 157
   Insn 1636: point = 39
   Insn 42: point = 39
  BB 69
   Insn 1547: point = 40
   Insn 40: point = 40
   Insn 557: point = 41
   Insn 556: point = 41
   Insn 555: point = 41
   Insn 554: point = 41
   Insn 553: point = 41
  BB 68
   Insn 1545: point = 41
   Insn 39: point = 41
   Insn 547: point = 42
   Insn 546: point = 43
   Insn 544: point = 44
   Insn 543: point = 44
   Insn 542: point = 44
   Insn 541: point = 45
   Insn 540: point = 45
	Hard reg 1 is preferable by r580 with profit 1
   Insn 1668: point = 46
   Insn 539: point = 47
   Insn 1667: point = 49
  BB 61
   Insn 1537: point = 50
   Insn 35: point = 50
  BB 70
   Insn 570: point = 51
   Insn 569: point = 51
   Insn 38: point = 51
   Insn 568: point = 52
   Insn 566: point = 52
   Insn 565: point = 53
   Insn 564: point = 53
   Insn 563: point = 54
   Insn 562: point = 55
  BB 56
   Insn 1531: point = 56
   Insn 471: point = 56
  BB 55
   Insn 468: point = 59
   Insn 467: point = 60
   Insn 466: point = 61
   Insn 465: point = 62
   Insn 464: point = 63
   Insn 463: point = 63
   Insn 462: point = 64
   Insn 461: point = 64
   Insn 460: point = 64
  BB 54
   Insn 458: point = 64
   Insn 457: point = 64
   Insn 456: point = 64
   Insn 455: point = 64
   Insn 454: point = 65
   Insn 453: point = 65
  BB 58
   Insn 1533: point = 65
   Insn 37: point = 65
  BB 43
   Insn 1511: point = 66
   Insn 44: point = 66
  BB 60
   Insn 1535: point = 67
   Insn 36: point = 67
  BB 67
   Insn 1543: point = 68
  BB 66
   Insn 531: point = 68
   Insn 530: point = 68
  BB 65
   Insn 528: point = 70
   Insn 527: point = 70
   Insn 526: point = 70
   Insn 524: point = 71
   Insn 523: point = 71
   Insn 522: point = 71
   Insn 521: point = 71
   Insn 520: point = 71
  BB 64
   Insn 1540: point = 71
  BB 63
   Insn 514: point = 71
   Insn 513: point = 71
  BB 62
   Insn 510: point = 73
   Insn 509: point = 73
   Insn 507: point = 73
   Insn 505: point = 74
   Insn 504: point = 74
   Insn 503: point = 74
   Insn 502: point = 74
   Insn 501: point = 74
  BB 59
   Insn 491: point = 74
   Insn 490: point = 74
  BB 57
   Insn 484: point = 76
   Insn 483: point = 76
   Insn 482: point = 76
   Insn 480: point = 77
   Insn 479: point = 77
   Insn 478: point = 77
   Insn 477: point = 77
   Insn 476: point = 77
  BB 42
   Insn 355: point = 77
   Insn 352: point = 78
  BB 41
   Insn 351: point = 81
   Insn 350: point = 81
  BB 153
   Insn 1630: point = 82
   Insn 1167: point = 82
   Insn 1166: point = 84
   Insn 1165: point = 86
   Insn 1697: point = 88
	Hard reg 1 is preferable by r597 with profit 1
   Insn 1164: point = 90
   Insn 1696: point = 90
   Insn 1163: point = 91
   Insn 1695: point = 93
   Insn 1161: point = 94
  BB 152
   Insn 32: point = 96
  BB 40
   Insn 342: point = 99
   Insn 341: point = 99
   Insn 340: point = 99
  BB 39
   Insn 334: point = 100
  BB 38
   Insn 332: point = 101
   Insn 331: point = 101
  BB 37
   Insn 319: point = 102
   Insn 318: point = 102
   Insn 328: point = 103
   Insn 326: point = 104
   Insn 317: point = 105
  BB 36
   Insn 314: point = 107
   Insn 313: point = 107
   Insn 312: point = 108
  BB 35
   Insn 309: point = 110
   Insn 308: point = 110
   Insn 307: point = 110
   Insn 306: point = 110
   Insn 305: point = 110
   Insn 304: point = 111
   Insn 303: point = 112
   Insn 1666: point = 113
	Hard reg 0 is preferable by r578 with profit 8
   Insn 302: point = 115
   Insn 1665: point = 115
   Insn 300: point = 116
  BB 34
   Insn 294: point = 117
   Insn 293: point = 119
   Insn 288: point = 120
  BB 33
   Insn 286: point = 122
   Insn 285: point = 122
   Insn 283: point = 122
  BB 155
   Insn 1634: point = 125
   Insn 1215: point = 125
   Insn 1214: point = 127
   Insn 1211: point = 129
   Insn 1208: point = 130
   Insn 1207: point = 131
   Insn 1206: point = 131
  BB 151
   Insn 1628: point = 132
   Insn 1694: point = 132
	Hard reg 3 is preferable by r595 with profit 1
   Insn 33: point = 134
   Insn 1693: point = 135
	Hard reg 3 is preferable by r595 with profit 1
	Hard reg 6 is preferable by r595 with profit 1
   Insn 1142: point = 137
  BB 112
   Insn 1605: point = 140
   Insn 34: point = 140
  BB 111
   Insn 845: point = 143
   Insn 844: point = 143
   Insn 843: point = 144
  BB 45
   Insn 1515: point = 147
   Insn 389: point = 147
   Insn 388: point = 149
   Insn 383: point = 150
   Insn 382: point = 151
   Insn 381: point = 152
  BB 32
   Insn 274: point = 154
  BB 31
   Insn 269: point = 157
  BB 30
   Insn 267: point = 159
   Insn 266: point = 159
  BB 29
   Insn 263: point = 161
  BB 28
   Insn 261: point = 163
   Insn 260: point = 163
  BB 26
   Insn 249: point = 165
   Insn 248: point = 165
   Insn 247: point = 165
   Insn 246: point = 166
   Insn 243: point = 167
   Insn 241: point = 167
   Insn 240: point = 169
  BB 23
   Insn 216: point = 172
   Insn 215: point = 172
   Insn 214: point = 173
   Insn 213: point = 175
   Insn 212: point = 176
   Insn 210: point = 178
  BB 21
   Insn 1505: point = 181
   Insn 1389: point = 181
   Insn 1442: point = 183
   Insn 1440: point = 183
   Insn 1439: point = 184
   Insn 1437: point = 184
   Insn 1436: point = 184
   Insn 1435: point = 184
   Insn 1434: point = 184
   Insn 1433: point = 184
   Insn 191: point = 184
  BB 27
   Insn 1509: point = 187
   Insn 254: point = 187
   Insn 251: point = 189
  BB 20
   Insn 20: point = 191
   Insn 19: point = 192
   Insn 184: point = 193
   Insn 183: point = 194
  BB 18
   Insn 1503: point = 196
   Insn 18: point = 196
   Insn 167: point = 197
  BB 44
   Insn 1513: point = 198
   Insn 375: point = 198
   Insn 374: point = 200
   Insn 373: point = 201
   Insn 370: point = 203
   Insn 369: point = 204
   Insn 367: point = 205
   Insn 366: point = 206
  BB 17
   Insn 17: point = 208
   Insn 16: point = 210
  r562 is added to live at bb17 start
  BB 14
   Insn 1501: point = 213
   Insn 1438: point = 213
   Insn 148: point = 214
   Insn 145: point = 216
   Insn 144: point = 217
   Insn 142: point = 218
  BB 3
   Insn 1499: point = 220
   Insn 75: point = 220
   Insn 74: point = 221
  BB 13
   Insn 139: point = 222
   Insn 138: point = 222
   Insn 137: point = 223
   Insn 136: point = 224
   Insn 135: point = 226
   Insn 134: point = 228
   Insn 133: point = 228
   Insn 132: point = 228
   Insn 131: point = 230
   Insn 130: point = 231
  BB 12
   Insn 127: point = 233
   Insn 126: point = 234
   Insn 1661: point = 236
   Insn 125: point = 237
   Insn 122: point = 238
   Insn 121: point = 239
   Insn 120: point = 240
   Insn 119: point = 240
   Insn 118: point = 240
   Insn 117: point = 240
   Insn 1662: point = 242
   Insn 116: point = 243
   Insn 113: point = 244
  BB 11
   Insn 110: point = 244
   Insn 109: point = 244
   Insn 108: point = 244
   Insn 107: point = 245
   Insn 1663: point = 247
  BB 10
   Insn 103: point = 249
   Insn 102: point = 249
   Insn 101: point = 249
  BB 9
   Insn 98: point = 250
   Insn 97: point = 251
  BB 8
   Insn 95: point = 252
   Insn 94: point = 252
  BB 7
   Insn 91: point = 252
   Insn 90: point = 253
  BB 6
   Insn 88: point = 254
   Insn 87: point = 254
  BB 5
   Insn 84: point = 254
  BB 4
   Insn 82: point = 254
   Insn 81: point = 254
   Insn 80: point = 254
  BB 2
   Insn 72: point = 254
   Insn 71: point = 254
   Insn 3: point = 254
  BB 16
   Insn 161: point = 256
   Insn 160: point = 257
  BB 96
   Insn 1599: point = 259
   Insn 704: point = 259
   Insn 701: point = 261
   Insn 700: point = 262
   Insn 698: point = 263
   Insn 697: point = 264
   Insn 696: point = 264
   Insn 695: point = 264
   Insn 694: point = 264
   Insn 693: point = 264
  BB 15
   Insn 158: point = 265
   Insn 155: point = 267
   Insn 154: point = 268
   Insn 152: point = 269
  BB 52
   Insn 446: point = 271
   Insn 445: point = 271
   Insn 444: point = 272
  BB 51
   Insn 442: point = 274
   Insn 441: point = 274
   Insn 440: point = 274
   Insn 439: point = 275
  BB 49
   Insn 1523: point = 276
   Insn 12: point = 276
   Insn 11: point = 277
   Insn 10: point = 278
   Insn 418: point = 279
  BB 95
   Insn 1597: point = 280
   Insn 688: point = 280
   Insn 685: point = 282
   Insn 684: point = 283
   Insn 682: point = 284
   Insn 681: point = 285
   Insn 680: point = 285
  BB 48
   Insn 1521: point = 286
   Insn 9: point = 286
   Insn 8: point = 287
   Insn 7: point = 288
   Insn 413: point = 289
  BB 46
   Insn 1517: point = 290
   Insn 6: point = 290
   Insn 5: point = 291
   Insn 4: point = 292
   Insn 395: point = 293
  BB 47
   Insn 1519: point = 294
   Insn 408: point = 294
   Insn 405: point = 296
   Insn 404: point = 297
   Insn 402: point = 298
   Insn 401: point = 299
  BB 50
   Insn 1525: point = 300
   Insn 15: point = 300
   Insn 14: point = 301
   Insn 13: point = 302
   Insn 434: point = 303
   Insn 433: point = 303
   Insn 432: point = 303
   Insn 431: point = 304
   Insn 430: point = 305
   Insn 429: point = 305
   Insn 428: point = 306
   Insn 427: point = 306
   Insn 426: point = 306
   Insn 425: point = 307
   Insn 424: point = 307
   Insn 423: point = 307
  BB 19
   Insn 180: point = 308
   Insn 177: point = 310
   Insn 176: point = 311
   Insn 174: point = 312
  BB 154
   Insn 1632: point = 314
   Insn 1180: point = 314
   Insn 1177: point = 315
   Insn 1176: point = 316
   Insn 1175: point = 316
   Insn 1174: point = 316
   Insn 1173: point = 318
   Insn 1698: point = 320
  BB 150
   Insn 1137: point = 323
   Insn 1136: point = 323
  BB 149
   Insn 1135: point = 325
   Insn 1134: point = 325
   Insn 1121: point = 325
   Insn 1120: point = 325
   Insn 1119: point = 327
   Insn 1118: point = 328
   Insn 1117: point = 329
   Insn 1116: point = 331
   Insn 1115: point = 332
   Insn 1114: point = 333
  BB 146
   Insn 1104: point = 335
   Insn 1103: point = 335
   Insn 1102: point = 335
   Insn 1101: point = 337
   Insn 1100: point = 338
   Insn 1097: point = 339
   Insn 1096: point = 340
   Insn 1095: point = 340
   Insn 1094: point = 341
   Insn 1093: point = 342
   Insn 1092: point = 343
   Insn 1091: point = 345
   Insn 1692: point = 347
	Hard reg 4 is preferable by r594 with profit 1
   Insn 1090: point = 349
   Insn 1691: point = 349
	Hard reg 4 is preferable by r594 with profit 1
	Hard reg 1 is preferable by r594 with profit 1
  BB 148
   Insn 1111: point = 352
  BB 145
   Insn 1085: point = 355
   Insn 1084: point = 355
   Insn 1083: point = 355
   Insn 1081: point = 356
  BB 143
   Insn 1625: point = 359
   Insn 30: point = 359
   Insn 1065: point = 360
   Insn 1064: point = 361
   Insn 1659: point = 363
   Insn 1063: point = 364
   Insn 1060: point = 365
   Insn 1059: point = 366
   Insn 1058: point = 366
  BB 144
   Insn 31: point = 367
   Insn 1077: point = 368
   Insn 1076: point = 369
   Insn 1075: point = 369
   Insn 1074: point = 370
  BB 142
   Insn 1055: point = 373
   Insn 1054: point = 373
  BB 118
   Insn 1607: point = 374
   Insn 886: point = 374
   Insn 885: point = 375
  BB 141
   Insn 1051: point = 376
   Insn 1050: point = 376
   Insn 29: point = 376
   Insn 1049: point = 377
   Insn 1048: point = 377
  BB 165
   Insn 1649: point = 379
   Insn 1268: point = 379
   Insn 1267: point = 380
   Insn 1265: point = 381
  BB 139
   Insn 1621: point = 383
   Insn 1033: point = 383
  BB 137
   Insn 1025: point = 385
   Insn 1024: point = 385
   Insn 1023: point = 386
   Insn 1022: point = 386
   Insn 1017: point = 387
   Insn 1016: point = 388
   Insn 1015: point = 388
   Insn 1014: point = 389
   Insn 1013: point = 389
   Insn 1012: point = 389
   Insn 1690: point = 389
	Hard reg 5 is preferable by r593 with profit 1
   Insn 1011: point = 391
   Insn 1689: point = 392
  BB 140
   Insn 1623: point = 394
   Insn 1042: point = 394
   Insn 1660: point = 396
   Insn 1041: point = 397
   Insn 1039: point = 398
   Insn 1038: point = 398
   Insn 1037: point = 398
  BB 166
   Insn 1275: point = 399
   Insn 1274: point = 399
  BB 138
   Insn 1031: point = 400
   Insn 1030: point = 400
   Insn 1029: point = 401
   Insn 1028: point = 402
   Insn 1027: point = 402
  BB 136
   Insn 1004: point = 403
   Insn 1003: point = 403
   Insn 1002: point = 404
  BB 135
   Insn 1619: point = 405
   Insn 997: point = 405
   Insn 996: point = 406
  BB 170
   Insn 1657: point = 408
   Insn 1314: point = 408
   Insn 1313: point = 409
   Insn 1311: point = 410
  BB 169
   Insn 1309: point = 412
   Insn 1308: point = 412
   Insn 1307: point = 413
   Insn 1306: point = 414
   Insn 1305: point = 414
  BB 168
   Insn 1655: point = 415
   Insn 28: point = 415
   Insn 1295: point = 415
   Insn 1703: point = 416
	Hard reg 0 is preferable by r601 with profit 1
   Insn 1293: point = 418
   Insn 1702: point = 419
   Insn 1291: point = 420
   Insn 1288: point = 421
   Insn 1287: point = 422
   Insn 1285: point = 423
  BB 133
   Insn 1617: point = 425
  BB 164
   Insn 1647: point = 426
  BB 163
   Insn 1258: point = 427
   Insn 1257: point = 427
   Insn 1701: point = 428
   Insn 1252: point = 429
   Insn 1251: point = 429
   Insn 1700: point = 430
	Hard reg 1 is preferable by r599 with profit 1
   Insn 1249: point = 432
   Insn 1699: point = 433
   Insn 1247: point = 434
   Insn 1246: point = 435
   Insn 1245: point = 436
   Insn 1243: point = 437
  BB 132
   Insn 987: point = 439
   Insn 986: point = 439
  BB 131
   Insn 984: point = 440
   Insn 983: point = 440
   Insn 981: point = 440
   Insn 980: point = 441
   Insn 979: point = 441
  BB 130
   Insn 27: point = 442
  BB 129
   Insn 974: point = 444
   Insn 973: point = 444
   Insn 1687: point = 444
   Insn 971: point = 446
   Insn 1688: point = 447
   Insn 1686: point = 448
	Hard reg 1 is preferable by r591 with profit 1
   Insn 969: point = 450
  BB 128
   Insn 966: point = 451
   Insn 965: point = 451
   Insn 1685: point = 453
	Hard reg 1 is preferable by r590 with profit 1
   Insn 960: point = 455
   Insn 1684: point = 455
   Insn 958: point = 456
   Insn 957: point = 457
   Insn 956: point = 457
   Insn 955: point = 459
  BB 124
   Insn 941: point = 462
   Insn 940: point = 462
   Insn 939: point = 462
   Insn 936: point = 463
   Insn 935: point = 464
   Insn 934: point = 464
   Insn 933: point = 465
   Insn 932: point = 466
  BB 122
   Insn 1609: point = 469
   Insn 922: point = 469
   Insn 921: point = 469
   Insn 1683: point = 471
	Hard reg 0 is preferable by r589 with profit 1
   Insn 920: point = 473
   Insn 1682: point = 473
  BB 123
   Insn 26: point = 475
   Insn 927: point = 477
  BB 121
   Insn 918: point = 478
   Insn 1681: point = 478
	Hard reg 0 is preferable by r588 with profit 1
   Insn 917: point = 480
   Insn 1680: point = 480
   Insn 914: point = 481
  BB 120
   Insn 912: point = 483
   Insn 911: point = 483
   Insn 1679: point = 483
   Insn 908: point = 485
   Insn 1678: point = 485
	Hard reg 0 is preferable by r587 with profit 1
   Insn 907: point = 487
  BB 119
   Insn 897: point = 489
   Insn 896: point = 489
   Insn 1677: point = 491
	Hard reg 1 is preferable by r586 with profit 1
   Insn 892: point = 493
   Insn 1676: point = 493
  BB 117
   Insn 883: point = 495
   Insn 882: point = 495
  BB 116
   Insn 879: point = 496
  BB 115
   Insn 877: point = 498
   Insn 876: point = 498
   Insn 870: point = 498
   Insn 869: point = 498
   Insn 868: point = 499
  BB 114
   Insn 25: point = 501
  BB 113
   Insn 859: point = 503
   Insn 858: point = 503
   Insn 1675: point = 505
	Hard reg 6 is preferable by r585 with profit 1
   Insn 851: point = 507
   Insn 1674: point = 507
  BB 110
   Insn 841: point = 509
   Insn 840: point = 509
  BB 108
   Insn 833: point = 510
   Insn 832: point = 510
   Insn 831: point = 511
   Insn 828: point = 513
  BB 107
   Insn 1603: point = 515
   Insn 819: point = 515
   Insn 818: point = 515
  BB 106
   Insn 816: point = 516
   Insn 815: point = 516
   Insn 813: point = 516
  BB 105
   Insn 808: point = 518
   Insn 807: point = 518
   Insn 1235: point = 518
   Insn 803: point = 519
   Insn 802: point = 521
   Insn 801: point = 523
  BB 104
   Insn 796: point = 526
   Insn 795: point = 526
   Insn 794: point = 527
   Insn 793: point = 529
   Insn 792: point = 531
   Insn 791: point = 532
   Insn 787: point = 533
   Insn 782: point = 534
  BB 103
   Insn 774: point = 537
   Insn 773: point = 537
   Insn 772: point = 538
   Insn 771: point = 540
   Insn 770: point = 542
   Insn 769: point = 543
  BB 102
   Insn 760: point = 545
   Insn 759: point = 545
  BB 101
   Insn 757: point = 546
   Insn 756: point = 546
   Insn 755: point = 546
   Insn 754: point = 547
   Insn 748: point = 548
   Insn 747: point = 549
   Insn 746: point = 549
   Insn 745: point = 549
   Insn 743: point = 551
   Insn 1673: point = 553
  BB 100
   Insn 741: point = 556
   Insn 740: point = 556
   Insn 739: point = 556
   Insn 738: point = 557
   Insn 737: point = 558
   Insn 736: point = 560
  BB 98
   Insn 1601: point = 562
   Insn 723: point = 562
  BB 99
   Insn 733: point = 564
   Insn 732: point = 564
   Insn 731: point = 565
   Insn 730: point = 566
   Insn 729: point = 567
   Insn 728: point = 567
  BB 97
   Insn 721: point = 569
   Insn 720: point = 569
   Insn 719: point = 569
   Insn 718: point = 570
   Insn 717: point = 571
   Insn 715: point = 572
   Insn 714: point = 573
   Insn 713: point = 574
   Insn 1672: point = 575
   Insn 711: point = 577
   Insn 1671: point = 579
	Hard reg 43 is preferable by r582 with profit 1
   Insn 710: point = 581
   Insn 1670: point = 581
  BB 22
   Insn 204: point = 583
   Insn 203: point = 585
  BB 25
   Insn 1507: point = 587
   Insn 1390: point = 587
   Insn 229: point = 589
  BB 24
   Insn 225: point = 592
   Insn 224: point = 592
   Insn 221: point = 592
   Insn 219: point = 594
df_worklist_dataflow_doublequeue:n_basic_blocks 173 n_edges 270 count 362 (  2.1)
Global pseudo live data have been updated:

BB 2:
    killed: 2:

      576
    liveout: 2:

        6    7   16   20

BB 3:
    killed: 3:

      318  320
    liveout: 3:

        6    7   16   20  318  320

BB 4:
    liveout: 4:

        6    7   16   20

BB 5:
    liveout: 5:

        6    7   16   20

BB 6:
    liveout: 6:

        6    7   16   20

BB 7:
    killed: 7:

      349
    liveout: 7:

        6    7   16   20

BB 8:
    liveout: 8:

        6    7   16   20

BB 9:
    killed: 9:

      350
    liveout: 9:

        6    7   16   20

BB 10:
    killed: 10:

       99
    liveout: 10:

        6    7   16   20   99

BB 11:
    gen: 11:

       99
    killed: 11:

      102  103  352
    livein: 11:

       99
    liveout: 11:

        6    7   16   20  102  103

BB 12:
    killed: 12:

      102  103  107  109  354  355  357  358
    liveout: 12:

        6    7   16   20  102  103

BB 13:
    gen: 13:

      102  103
    killed: 13:

      318  320  359  360  361
    livein: 13:

      102  103
    liveout: 13:

        6    7   16   20  318  320

BB 14:
    killed: 14:

      321  341  343  363  564
    livein: 14:

      318  320
    liveout: 14:

        6    7   16   20  318  320  321  341  343  564

BB 15:
    killed: 15:

      321  341  343  367
    livein: 15:

      564
    liveout: 15:

        6    7   16   20  321  341  343  564

BB 16:
    killed: 16:

      318  320
    livein: 16:

      321  341  343  564
    liveout: 16:

        6    7   16   20  318  320  321  341  343  564

BB 17:
    gen: 17:

      318  341
    killed: 17:

       87   88
    livein: 17:

      318  320  321  341  343  564
    liveout: 17:

        6    7   16   20   87   88  320  321  343  564

BB 18:
    gen: 18:

       88  320
    killed: 18:

       89
    livein: 18:

       87   88  320  321  343  564
    liveout: 18:

        6    7   16   20   87   88   89  320  321  343  564

BB 19:
    gen: 19:

       87   88
    killed: 19:

      320  321  343  371
    livein: 19:

       87   88   89  564
    liveout: 19:

        6    7   16   20   87   88   89  320  321  343  564

BB 20:
    killed: 20:

      313  314  315  316
    livein: 20:

       87   88   89  320  321  343  564
    liveout: 20:

        6    7   16   20   87   88   89  313  314  315  316
      320  321  343  564

BB 21:
    gen: 21:

       87   88  313  314  315  316  320  343  564
    killed: 21:

      376  539
    livein: 21:

       87   88   89  313  314  315  316  320  321  343  564
    liveout: 21:

        6    7   16   20   87   88   89  313  314  315  316
      321  539  564

BB 22:
    gen: 22:

       87
    killed: 22:

      321  378
    livein: 22:

       87   88   89  313  314  315  316  539  564
    liveout: 22:

        6    7   16   20   87   88   89  313  314  315  316
      321  539  564

BB 23:
    gen: 23:

       87  321  539
    killed: 23:

      380  382  383  384
    livein: 23:

       87   88   89  313  314  315  316  321  539  564
    liveout: 23:

        6    7   16   20   87   88   89  313  314  315  316
      382  539  564

BB 24:
    gen: 24:

       87
    killed: 24:

       87  386
    livein: 24:

       87   88   89  313  314  315  316  539  564
    liveout: 24:

        6    7   16   20   87   88   89  313  314  315  316
      539  564

BB 25:
    gen: 25:

      539
    killed: 25:

      388  539
    livein: 25:

       87   88   89  313  314  315  316  539  564
    liveout: 25:

        6    7   16   20   87   88   89  313  314  315  316
      539  564

BB 26:
    gen: 26:

       88  382
    killed: 26:

       87  321  393  538
    livein: 26:

       88   89  313  314  315  316  382  564
    liveout: 26:

        6    7   16   20   87   88   89  313  314  315  316
      321  538  564

BB 27:
    gen: 27:

       88  538
    killed: 27:

      320  343
    livein: 27:

       87   88   89  313  314  315  316  321  538  564
    liveout: 27:

        6    7   16   20   87   88   89  313  314  315  316
      320  321  343  564

BB 28:
    gen: 28:

      315
    livein: 28:

       88   89  313  314  315  316  538  564
    liveout: 28:

        6    7   16   20   88   89  313  314  316  538  564

BB 29:
    gen: 29:

      316
    livein: 29:

       88   89  313  314  316  538  564
    liveout: 29:

        6    7   16   20   88   89  313  314  538  564

BB 30:
    gen: 30:

      313
    livein: 30:

       88   89  313  314  538  564
    liveout: 30:

        6    7   16   20   88   89  314  538  564

BB 31:
    gen: 31:

      314
    livein: 31:

       88   89  314  538  564
    liveout: 31:

        6    7   16   20   88   89  538  564

BB 32:
    gen: 32:

      538
    killed: 32:

      186
    livein: 32:

       88   89  538  564
    liveout: 32:

        6    7   16   20   88   89  186  564

BB 33:
    gen: 33:

      186
    killed: 33:

       90
    livein: 33:

       88   89  186  564
    liveout: 33:

        6    7   16   20   88   89   90  564

BB 34:
    killed: 34:

       88   90  401
    livein: 34:

       89  564
    liveout: 34:

        6    7   16   20   88   89   90  564

BB 35:
    gen: 35:

       88   89   90
    killed: 35:

      403  404  578
    livein: 35:

       88   89   90  564
    liveout: 35:

        6    7   16   20   88   89   90  564

BB 36:
    gen: 36:

       90
    killed: 36:

      406
    livein: 36:

       88   89   90  564
    liveout: 36:

        6    7   16   20   88   89   90  564

BB 37:
    killed: 37:

      307  311  327
    livein: 37:

       88   89   90  564
    liveout: 37:

        6    7   16   20   88   89   90  311  327  564

BB 38:
    gen: 38:

      311
    livein: 38:

       88   89   90  311  327  564
    liveout: 38:

        6    7   16   20   88   89   90  311  327  564

BB 39:
    livein: 39:

       88   89   90  311  327  564
    liveout: 39:

        6    7   16   20   88   89   90  311  327  564

BB 40:
    gen: 40:

      311  327
    livein: 40:

       88   89   90  311  327  564
    liveout: 40:

        6    7   16   20   88   89   90  311  327  564

BB 41:
    gen: 41:

       90
    livein: 41:

       88   89   90  564
    liveout: 41:

        6    7   16   20   88   89   90  564

BB 42:
    gen: 42:

       90
    killed: 42:

      407
    livein: 42:

       88   89   90  564
    liveout: 42:

        6    7   16   20   88   89  564

BB 43:
    killed: 43:

       92
    liveout: 43:

        6    7   16   20   92

BB 44:
    killed: 44:

       87   88  320  321  342  343  411
    livein: 44:

      564
    liveout: 44:

        6    7   16   20   87   88  320  321  343  564

BB 45:
    gen: 45:

       88
    killed: 45:

       88  186  414  416
    livein: 45:

       88   89  564
    liveout: 45:

        6    7   16   20   88   89  186  564

BB 46:
    killed: 46:

      321  341  343
    livein: 46:

      564
    liveout: 46:

        6    7   16   20  321  341  343  564

BB 47:
    killed: 47:

      321  341  343  419
    livein: 47:

      564
    liveout: 47:

        6    7   16   20  321  341  343  564

BB 48:
    killed: 48:

      321  341  343
    livein: 48:

      564
    liveout: 48:

        6    7   16   20  321  341  343  564

BB 49:
    killed: 49:

      321  341  343
    livein: 49:

      564
    liveout: 49:

        6    7   16   20  321  341  343  564

BB 50:
    killed: 50:

      136  137  321  341  343
    livein: 50:

      564
    liveout: 50:

        6    7   16   20  321  341  343  564

BB 51:
    killed: 51:

      168
    livein: 51:

      564
    liveout: 51:

        6    7   16   20  168  564

BB 52:
    gen: 52:

      168
    killed: 52:

      422
    livein: 52:

      168  564
    liveout: 52:

        6    7   16   20  564

BB 53:
    liveout: 53:

        6    7   16   20

BB 54:
    killed: 54:

      198
    liveout: 54:

        6    7   16   20  198

BB 55:
    killed: 55:

      198  200  423
    liveout: 55:

        6    7   16   20  198

BB 56:
    gen: 56:

      198
    killed: 56:

       92
    livein: 56:

      198
    liveout: 56:

        6    7   16   20   92

BB 57:
    killed: 57:

      202
    liveout: 57:

        6    7   16   20  202

BB 58:
    killed: 58:

       92
    liveout: 58:

        6    7   16   20   92

BB 59:
    gen: 59:

      202
    livein: 59:

      202
    liveout: 59:

        6    7   16   20

BB 60:
    killed: 60:

       92
    liveout: 60:

        6    7   16   20   92

BB 61:
    killed: 61:

       92
    liveout: 61:

        6    7   16   20   92

BB 62:
    killed: 62:

      203
    liveout: 62:

        6    7   16   20  203

BB 63:
    gen: 63:

      203
    livein: 63:

      203
    liveout: 63:

        6    7   16   20

BB 64:
    liveout: 64:

        6    7   16   20

BB 65:
    killed: 65:

      204
    liveout: 65:

        6    7   16   20  204

BB 66:
    gen: 66:

      204
    livein: 66:

      204
    liveout: 66:

        6    7   16   20

BB 67:
    liveout: 67:

        6    7   16   20

BB 68:
    killed: 68:

       92  428  431  579  580
    liveout: 68:

        6    7   16   20   92

BB 69:
    killed: 69:

       92
    liveout: 69:

        6    7   16   20   92

BB 70:
    killed: 70:

       92  176  432  433
    liveout: 70:

        6    7   16   20   92  176  433

BB 71:
    gen: 71:

      176  433
    killed: 71:

      434  581
    livein: 71:

       92  176  433
    liveout: 71:

        6    7   16   20   92

BB 72:
    killed: 72:

       92
    liveout: 72:

        6    7   16   20   92

BB 73:
    killed: 73:

       92
    liveout: 73:

        6    7   16   20   92

BB 74:
    killed: 74:

       92
    liveout: 74:

        6    7   16   20   92

BB 75:
    killed: 75:

       92
    liveout: 75:

        6    7   16   20   92

BB 76:
    killed: 76:

       92
    liveout: 76:

        6    7   16   20   92

BB 77:
    killed: 77:

       92
    liveout: 77:

        6    7   16   20   92

BB 78:
    killed: 78:

       92
    liveout: 78:

        6    7   16   20   92

BB 79:
    killed: 79:

       92
    liveout: 79:

        6    7   16   20   92

BB 80:
    killed: 80:

       92
    liveout: 80:

        6    7   16   20   92

BB 81:
    killed: 81:

       92
    liveout: 81:

        6    7   16   20   92

BB 82:
    killed: 82:

       92
    liveout: 82:

        6    7   16   20   92

BB 83:
    killed: 83:

       92
    liveout: 83:

        6    7   16   20   92

BB 84:
    killed: 84:

       92
    liveout: 84:

        6    7   16   20   92

BB 85:
    killed: 85:

       92
    liveout: 85:

        6    7   16   20   92

BB 86:
    killed: 86:

       92
    liveout: 86:

        6    7   16   20   92

BB 87:
    killed: 87:

       92
    liveout: 87:

        6    7   16   20   92

BB 88:
    killed: 88:

       92
    liveout: 88:

        6    7   16   20   92

BB 89:
    killed: 89:

       92
    liveout: 89:

        6    7   16   20   92

BB 90:
    killed: 90:

       92
    liveout: 90:

        6    7   16   20   92

BB 91:
    killed: 91:

       92
    liveout: 91:

        6    7   16   20   92

BB 92:
    killed: 92:

       92
    liveout: 92:

        6    7   16   20   92

BB 93:
    killed: 93:

       92
    liveout: 93:

        6    7   16   20   92

BB 94:
    killed: 94:

       92  436
    liveout: 94:

        6    7   16   20   92

BB 95:
    killed: 95:

      321  341  343  438
    livein: 95:

      564
    liveout: 95:

        6    7   16   20  321  341  343  564

BB 96:
    killed: 96:

      321  341  343  442
    livein: 96:

      564
    liveout: 96:

        6    7   16   20  321  341  343  564

BB 97:
    gen: 97:

       88
    killed: 97:

      147  152  245  445  446  540  541  582  583
    livein: 97:

       88   89  564
    liveout: 97:

        6    7   16   20   88   89  147  152  245  540  541
      564

BB 98:
    killed: 98:

      154
    livein: 98:

       88   89  147  152  245  540  541  564
    liveout: 98:

        6    7   16   20   88   89  147  152  154  245  540
      541  564

BB 99:
    gen: 99:

      152  245
    killed: 99:

      154  245  450
    livein: 99:

       88   89  147  152  245  540  541  564
    liveout: 99:

        6    7   16   20   88   89  147  152  154  245  540
      541  564

BB 100:
    gen: 100:

      154  245
    killed: 100:

      156  157  158  244
    livein: 100:

       88   89  147  152  154  245  540  541  564
    liveout: 100:

        6    7   16   20   88   89  147  152  156  157  158
      244  245  540  541  564

BB 101:
    gen: 101:

      147
    killed: 101:

       88  186  193  451  543  584
    livein: 101:

      147  564
    liveout: 101:

        6    7   16   20   88  186  193  543  564

BB 102:
    gen: 102:

       88  193
    livein: 102:

       88  186  193  543  564
    liveout: 102:

        6    7   16   20   88  186  193  543  564

BB 103:
    gen: 103:

      193  543
    killed: 103:

      459  460  461  542
    livein: 103:

       88  186  193  543  564
    liveout: 103:

        6    7   16   20   88  186  542  543  564

BB 104:
    gen: 104:

      543
    killed: 104:

      193  468  469  470  542  543
    livein: 104:

       88  186  543  564
    liveout: 104:

        6    7   16   20   88  186  542  543  564

BB 105:
    gen: 105:

      542
    killed: 105:

       87   89  473  474
    livein: 105:

       88  186  542  564
    liveout: 105:

        6    7   16   20   87   88   89  186  564

BB 106:
    gen: 106:

       87
    killed: 106:

       89
    livein: 106:

       87   88  186  564
    liveout: 106:

        6    7   16   20   87   88   89  186  564

BB 107:
    gen: 107:

       88
    livein: 107:

       87   88   89  564
    liveout: 107:

        6    7   16   20   87   88   89  564

BB 108:
    gen: 108:

      156  157  244
    killed: 108:

      213  476
    livein: 108:

       88   89  147  152  156  157  158  244  245  540  541
      564
    liveout: 108:

        6    7   16   20   88   89  147  152  156  158  213
      244  245  540  541  564

BB 109:
    liveout: 109:

        7   16   20

BB 110:
    gen: 110:

      245
    livein: 110:

       88   89  147  152  156  158  213  244  245  540  541
      564
    liveout: 110:

        6    7   16   20   88   89  147  152  156  158  213
      244  245  540  541  564

BB 111:
    gen: 111:

      213  244
    killed: 111:

      477
    livein: 111:

       88   89  158  213  244  564
    liveout: 111:

        6    7   16   20   88   89  158  213  564

BB 112:
    gen: 112:

      158
    killed: 112:

       88
    livein: 112:

      158  564
    liveout: 112:

        6    7   16   20   88  564

BB 113:
    gen: 113:

      213  244
    killed: 113:

      224  478  585
    livein: 113:

       88   89  147  152  156  213  244  245  540  541  564
    liveout: 113:

        6    7   16   20   88   89  147  152  156  213  224
      244  245  540  541  564

BB 114:
    killed: 114:

      227
    livein: 114:

       88   89  147  152  156  213  224  244  540  541  564
    liveout: 114:

        6    7   16   20   88   89  147  152  156  213  224
      227  244  540  541  564

BB 115:
    gen: 115:

      156  213  224  227
    killed: 115:

      226
    livein: 115:

       88   89  147  152  156  213  224  227  244  540  541
      564
    liveout: 115:

        6    7   16   20   88   89  147  152  156  213  224
      227  244  540  541  564

BB 116:
    gen: 116:

      152
    killed: 116:

      245
    livein: 116:

       88   89  147  152  224  244  540  541  564
    liveout: 116:

        6    7   16   20   88   89  147  152  224  244  245
      540  541  564

BB 117:
    gen: 117:

      245
    livein: 117:

       88   89  147  152  224  244  245  540  541  564
    liveout: 117:

        6    7   16   20   88   89  147  152  224  244  245
      540  541  564

BB 118:
    gen: 118:

      245
    livein: 118:

       88   89  147  224  245  540  541  564
    liveout: 118:

        6    7   16   20   88   89  147  224  540  541  564

BB 119:
    gen: 119:

      224  245
    killed: 119:

      230  479  586
    livein: 119:

       88   89  147  152  224  244  245  564
    liveout: 119:

        6    7   16   20   88   89  147  152  224  230  244
      245  564

BB 120:
    gen: 120:

      244  245
    killed: 120:

      232  481  587
    livein: 120:

       88   89  147  152  224  244  245  564
    liveout: 120:

        6    7   16   20   88   89  147  152  224  232  245
      481  564

BB 121:
    gen: 121:

      245
    killed: 121:

      237  238  588
    livein: 121:

       88   89  147  152  224  232  245  481  564
    liveout: 121:

        6    7   16   20   88   89  147  152  224  232  237
      238  245  481  564

BB 122:
    gen: 122:

      237  245
    killed: 122:

      240  482  589
    livein: 122:

       88   89  147  152  224  232  237  245  481  564
    liveout: 122:

        6    7   16   20   88   89  147  152  224  232  240
      245  481  564

BB 123:
    gen: 123:

      238  245
    killed: 123:

      240
    livein: 123:

       88   89  147  152  224  232  238  245  481  564
    liveout: 123:

        6    7   16   20   88   89  147  152  224  232  240
      245  481  564

BB 124:
    gen: 124:

      232  240  245
    killed: 124:

      242  483
    livein: 124:

       88   89  147  152  224  232  240  245  481  564
    liveout: 124:

        6    7   16   20   88   89  147  152  224  242  481
      564

BB 125:
    liveout: 125:

        6    7   16   20

BB 126:
    gen: 126:

      245
    livein: 126:

      245
    liveout: 126:

        6    7   16   20

BB 127:
    liveout: 127:

        7   16   20

BB 128:
    gen: 128:

      152  224  242  481
    killed: 128:

      230  244  245  484  485  590
    livein: 128:

       88   89  147  152  224  242  481  564
    liveout: 128:

        6    7   16   20   88   89  147  152  224  230  244
      245  564

BB 129:
    gen: 129:

      230  245
    killed: 129:

      309  591  592
    livein: 129:

       88   89  147  224  230  245  564
    liveout: 129:

        6    7   16   20   88   89  147  224  245  309  564

BB 130:
    killed: 130:

      212
    livein: 130:

       88   89  147  224  309  564
    liveout: 130:

        6    7   16   20   88   89  147  212  224  309  564

BB 131:
    killed: 131:

      251
    livein: 131:

       88   89  147  212  224  309  564
    liveout: 131:

        6    7   16   20   88   89  147  212  224  251  309
      564

BB 132:
    gen: 132:

      251
    livein: 132:

       88   89  147  212  224  251  309  564
    liveout: 132:

        6    7   16   20   88   89  147  212  224  251  309
      564

BB 133:
    livein: 133:

       88   89  147  212  224  564
    liveout: 133:

        6    7   16   20   88   89  147  212  224  564

BB 134:
    liveout: 134:

        7   16   20

BB 135:
    gen: 135:

      212
    killed: 135:

      275
    livein: 135:

       88   89  147  212  224  347  540  541  564
    liveout: 135:

        6    7   16   20   88   89  147  224  275  347  540
      541  564

BB 136:
    killed: 136:

      270
    livein: 136:

       88   89  147  224  245  309  564
    liveout: 136:

        6    7   16   20   88   89  147  224  245  270  309
      564

BB 137:
    gen: 137:

      224  245  309
    killed: 137:

      274  275  488  593
    livein: 137:

       88   89  147  224  245  270  309  564
    liveout: 137:

        6    7   16   20   88   89  147  224  270  275  309
      564

BB 138:
    killed: 138:

      277
    livein: 138:

       88   89  147  224  270  309  564
    liveout: 138:

        6    7   16   20   88   89  147  224  270  309  564

BB 139:
    killed: 139:

      275
    livein: 139:

       88   89  147  224  564
    liveout: 139:

        6    7   16   20   88   89  147  224  275  564

BB 140:
    gen: 140:

      270
    killed: 140:

      245  490  491
    livein: 140:

       88   89  147  224  270  309  564
    liveout: 140:

        6    7   16   20   88   89  147  224  245  270  309
      564

BB 141:
    gen: 141:

      275  347
    killed: 141:

      280  308
    livein: 141:

       88   89  147  224  275  347  540  541  564
    liveout: 141:

        6    7   16   20   88   89  147  224  275  280  308
      347  540  541  564

BB 142:
    gen: 142:

      224
    livein: 142:

       88   89  147  224  540  541  564
    liveout: 142:

        6    7   16   20   88   89  147  224  540  541  564

BB 143:
    killed: 143:

      275  280  308  347  493  494
    livein: 143:

       88   89  147  224  564
    liveout: 143:

        6    7   16   20   88   89  147  224  275  280  308
      347  564

BB 144:
    gen: 144:

      540  541
    killed: 144:

      275  280  308  347
    livein: 144:

       88   89  147  224  540  541  564
    liveout: 144:

        6    7   16   20   88   89  147  224  275  280  308
      347  564

BB 145:
    gen: 145:

      224  275  280
    killed: 145:

      287  289
    livein: 145:

       88   89  147  224  275  280  308  347  564
    liveout: 145:

        6    7   16   20   88   89  147  275  280  287  289
      308  347  564

BB 146:
    gen: 146:

      275  280  287  347
    killed: 146:

      297  299  498  499  500  501  502  594
    livein: 146:

       88   89  147  275  280  287  289  308  347  564
    liveout: 146:

        6    7   16   20   88   89  147  287  289  299  308
      347  564

BB 147:
    liveout: 147:

        7   16   20

BB 148:
    gen: 148:

      280
    killed: 148:

      299
    livein: 148:

       88   89  147  280  287  289  308  347  564
    liveout: 148:

        6    7   16   20   88   89  147  287  289  299  308
      347  564

BB 149:
    gen: 149:

      287  289  299  308  347
    killed: 149:

      306  503  504  505
    livein: 149:

       88   89  147  287  289  299  308  347  564
    liveout: 149:

        6    7   16   20   88   89  147  289  306  308  347
      564

BB 150:
    gen: 150:

      308
    livein: 150:

      147  289  306  308  347  564
    liveout: 150:

        6    7   16   20  147  289  306  347  564

BB 151:
    gen: 151:

      289  347
    killed: 151:

       88  506  595
    livein: 151:

      289  347  564
    liveout: 151:

        6    7   16   20   88  564

BB 152:
    gen: 152:

      213
    killed: 152:

      306
    livein: 152:

       88   89  213  564
    liveout: 152:

        6    7   16   20   88   89  306  564

BB 153:
    gen: 153:

      306
    killed: 153:

       90  508  511  512  513  596  597
    livein: 153:

       88   89  306  564
    liveout: 153:

        6    7   16   20   88   89   90  564

BB 154:
    gen: 154:

      147  306
    killed: 154:

       87   88   89  514  598
    livein: 154:

      147  306  564
    liveout: 154:

        6    7   16   20   87   88   89  564

BB 155:
    gen: 155:

       88
    killed: 155:

       89  160  186  516
    livein: 155:

       88  564
    liveout: 155:

        6    7   16   20   88   89  186  564

BB 156:
    liveout: 156:

        7   16   20

BB 157:
    killed: 157:

       92
    liveout: 157:

        6    7   16   20   92

BB 158:
    killed: 158:

       92
    liveout: 158:

        6    7   16   20   92

BB 159:
    killed: 159:

       92
    liveout: 159:

        6    7   16   20   92

BB 160:
    killed: 160:

       92
    liveout: 160:

        6    7   16   20   92

BB 161:
    gen: 161:

       92
    killed: 161:

      577
    livein: 161:

       92
    liveout: 161:

        0    6    7   16   20

BB 162:
    liveout: 162:

        6    7   16   20

BB 163:
    gen: 163:

      212  224  251  309
    killed: 163:

      347  521  523  540  541  599  600
    livein: 163:

       88   89  147  212  224  251  309  564
    liveout: 163:

        6    7   16   20   88   89  147  212  224  309  347
      540  541  564

BB 164:
    livein: 164:

       88   89  147  212  224  347  540  541  564
    liveout: 164:

        6    7   16   20   88   89  147  212  224  347  540
      541  564

BB 165:
    killed: 165:

      347  540  541
    livein: 165:

       88   89  147  224  275  564
    liveout: 165:

        6    7   16   20   88   89  147  224  275  347  540
      541  564

BB 166:
    gen: 166:

      270
    livein: 166:

       88   89  147  224  270  309  564
    liveout: 166:

        6    7   16   20   88   89  147  224  270  309  564

BB 167:
    liveout: 167:

        6    7   16   20

BB 168:
    gen: 168:

      212  224
    killed: 168:

      347  531  533  540  541  601
    livein: 168:

       88   89  147  212  224  564
    liveout: 168:

        6    7   16   20   88   89  147  212  224  347  540
      541  564

BB 169:
    killed: 169:

      268
    livein: 169:

       88   89  147  212  224  564
    liveout: 169:

        6    7   16   20   88   89  147  212  224  564

BB 170:
    killed: 170:

      347  540  541
    livein: 170:

       88   89  147  212  224  564
    liveout: 170:

        6    7   16   20   88   89  147  212  224  347  540
      541  564

BB 171:
    liveout: 171:

        7   16   20

BB 172:
    liveout: 172:

        0    6    7   16   20
 r87: [595..596] [583..592] [515..519] [308..315] [208..210] [172..198] [165..167]
 r88: [556..596] [325..549] [308..316] [208..208] [143..200] [140..140] [122..132] [77..120]
 r89: [556..596] [518..518] [325..516] [308..314] [143..196] [77..129]
 r90: [122..122] [99..117] [79..82]
 r92: [65..67] [56..56] [50..51] [39..41] [3..36]
 r99: [246..249]
 r102: [244..245] [227..234]
 r103: [244..244] [229..233]
 r107: [238..240]
 r109: [238..239]
 r136: [305..306]
 r137: [303..304]
 r147: [554..575] [321..514]
 r152: [556..570] [451..514]
 r154: [564..567] [559..562]
 r156: [556..560] [498..514]
 r157: [556..558] [512..514]
 r158: [556..557] [509..514] [141..146]
 r160: [128..130]
 r168: [271..274]
 r176: [51..55] [29..34]
 r186: [516..546] [154..154] [147..147] [123..125]
 r193: [537..548] [526..534]
 r198: [57..64]
 r200: [59..62]
 r202: [74..76]
 r203: [71..73]
 r204: [68..70]
 r212: [405..442]
 r213: [498..513] [143..146] [97..98]
 r224: [357..503]
 r226: [498..499]
 r227: [498..501]
 r230: [489..489] [449..451]
 r232: [464..487]
 r237: [478..481] [470..474]
 r238: [476..478]
 r240: [475..475] [467..469]
 r242: [458..463]
 r244: [556..556] [486..514] [451..457] [145..146]
 r245: [556..569] [503..514] [462..496] [444..456] [403..404] [391..394] [374..375] [0..1]
 r251: [429..440]
 r268: [412..413]
 r270: [385..403]
 r274: [385..387]
 r275: [405..406] [385..386] [376..383] [367..368] [355..365] [350..351]
 r277: [400..401]
 r280: [376..377] [367..369] [353..360] [338..351]
 r287: [333..356]
 r289: [323..355] [136..139]
 r297: [338..339]
 r299: [352..352] [332..335]
 r306: [317..325] [94..96]
 r307: [102..105]
 r308: [376..376] [367..367] [323..359]
 r309: [427..444] [385..404]
 r311: [99..104]
 r313: [583..596] [159..192]
 r314: [583..596] [157..194]
 r315: [583..596] [163..191]
 r316: [583..596] [161..193]
 r318: [256..257] [209..228]
 r320: [308..312] [256..256] [222..222] [208..220] [191..206] [185..189]
 r321: [583..583] [308..308] [300..302] [294..294] [290..292] [286..288] [280..280] [276..278] [265..265] [256..259] [208..214] [179..201] [165..165]
 r327: [99..103]
 r341: [300..300] [294..298] [290..290] [286..286] [280..284] [276..276] [265..269] [256..263] [211..218]
 r342: [199..205]
 r343: [308..310] [300..301] [294..296] [290..291] [286..287] [280..282] [276..277] [265..267] [256..261] [208..216] [191..203] [183..187]
 r347: [426..435] [415..421] [405..408] [376..379] [367..370] [323..361] [138..139]
 r349: [252..253]
 r350: [250..251]
 r352: [246..247]
 r354: [241..242]
 r355: [241..243]
 r357: [235..236]
 r358: [235..237]
 r359: [230..231]
 r360: [225..226]
 r361: [223..224]
 r363: [215..217]
 r367: [266..268]
 r371: [309..311]
 r376: [182..184]
 r378: [584..585]
 r380: [177..178]
 r382: [170..176]
 r383: [174..175]
 r384: [172..173]
 r386: [593..594]
 r388: [588..589]
 r393: [168..169]
 r401: [118..119]
 r403: [112..113]
 r404: [110..111]
 r406: [107..108]
 r407: [77..78]
 r411: [202..204]
 r414: [151..152]
 r416: [148..149]
 r419: [295..297]
 r422: [271..272]
 r423: [60..61]
 r428: [44..47]
 r431: [42..43]
 r432: [53..54]
 r433: [51..52] [29..34]
 r434: [30..31]
 r436: [37..38]
 r438: [281..283]
 r442: [260..262]
 r445: [578..579]
 r446: [573..574]
 r450: [565..566]
 r451: [550..551]
 r459: [541..542]
 r460: [539..540]
 r461: [537..538]
 r468: [530..531]
 r469: [528..529]
 r470: [526..527]
 r473: [522..523]
 r474: [520..521]
 r476: [510..511]
 r477: [143..144]
 r478: [504..505]
 r479: [490..491]
 r481: [460..483]
 r482: [470..471]
 r483: [465..466]
 r484: [458..459]
 r485: [452..453]
 r488: [388..389]
 r490: [395..396]
 r491: [395..397]
 r493: [362..363]
 r494: [362..364]
 r498: [346..347]
 r499: [344..345]
 r500: [341..343]
 r501: [340..342]
 r502: [336..337]
 r503: [330..331]
 r504: [328..329]
 r505: [326..327]
 r506: [134..137]
 r508: [87..91]
 r511: [87..88]
 r512: [85..86]
 r513: [83..84]
 r514: [317..318]
 r516: [126..127]
 r521: [432..434]
 r523: [429..430]
 r531: [418..420]
 r533: [415..416]
 r538: [188..190] [155..166]
 r539: [590..596] [583..587] [172..181]
 r540: [556..572] [495..514] [426..437] [415..423] [405..410] [371..381]
 r541: [556..571] [495..514] [426..436] [415..422] [405..409] [371..380]
 r542: [537..543] [524..532]
 r543: [535..547] [526..533]
 r562: [308..596] [77..212]
 r564: [256..596] [77..213]
 r576: [254..255]
 r577: [2..2]
 r578: [114..115]
 r579: [48..49]
 r580: [45..46]
 r581: [32..33]
 r582: [580..581]
 r583: [576..577]
 r584: [552..553]
 r585: [506..507]
 r586: [492..493]
 r587: [484..485]
 r588: [479..480]
 r589: [472..473]
 r590: [454..455]
 r591: [445..448]
 r592: [446..447]
 r593: [390..392]
 r594: [348..349]
 r595: [133..135]
 r596: [92..93]
 r597: [89..90]
 r598: [319..320]
 r599: [431..433]
 r600: [427..428]
 r601: [417..419]
Compressing live ranges: from 597 to 340 - 56%
Ranges after the compression:
 r87: [338..339] [329..335] [290..293] [171..173] [112..114] [92..107] [88..89]
 r88: [315..339] [179..309] [171..173] [112..112] [76..109] [33..69]
 r89: [315..339] [179..292] [171..173] [77..107] [33..69]
 r90: [63..63] [51..60] [35..36]
 r92: [25..26] [22..22] [17..18] [9..10] [3..6]
 r99: [136..137]
 r102: [134..135] [124..127]
 r103: [134..134] [126..127]
 r107: [130..131]
 r109: [130..131]
 r136: [169..170]
 r137: [167..168]
 r147: [314..322] [178..289]
 r152: [315..320] [246..289]
 r154: [317..320]
 r156: [315..318] [279..289]
 r157: [315..316] [288..289]
 r158: [315..316] [286..289] [77..80]
 r160: [68..69]
 r168: [151..152]
 r176: [18..21] [3..6]
 r186: [291..309] [86..86] [81..81] [64..65]
 r193: [298..309]
 r198: [23..24]
 r200: [23..24]
 r202: [31..32]
 r203: [29..30]
 r204: [27..28]
 r212: [228..241]
 r213: [279..289] [77..80] [49..50]
 r224: [206..281]
 r226: [279..280]
 r227: [279..280]
 r230: [272..272] [245..246]
 r232: [255..271]
 r237: [265..267] [259..262]
 r238: [264..265]
 r240: [263..263] [257..258]
 r242: [251..254]
 r244: [315..315] [270..289] [246..250] [79..80]
 r245: [315..320] [281..289] [253..278] [242..250] [226..227] [220..221] [212..213] [0..1]
 r251: [238..241]
 r268: [230..231]
 r270: [216..226]
 r274: [216..217]
 r275: [228..229] [214..217] [204..211] [200..201]
 r277: [224..225]
 r280: [214..215] [210..211] [203..207] [190..201]
 r287: [186..205]
 r289: [178..204] [72..75]
 r297: [190..191]
 r299: [202..202] [186..187]
 r306: [174..179] [47..48]
 r307: [51..52]
 r308: [214..214] [210..210] [178..207]
 r309: [236..242] [216..227]
 r311: [51..52]
 r313: [329..339] [87..107]
 r314: [329..339] [87..107]
 r315: [329..339] [87..106]
 r316: [329..339] [87..107]
 r318: [144..145] [113..125]
 r320: [171..173] [144..144] [102..119]
 r321: [329..329] [171..171] [165..166] [158..162] [153..155] [148..148] [144..145] [112..116] [98..109] [88..88]
 r327: [51..52]
 r341: [162..165] [160..160] [155..158] [153..153] [144..150] [115..118]
 r342: [108..111]
 r343: [171..173] [153..166] [144..150] [106..118] [100..103]
 r347: [232..241] [228..229] [214..215] [210..211] [178..207] [74..75]
 r349: [140..141]
 r350: [138..139]
 r352: [136..137]
 r354: [132..133]
 r355: [132..133]
 r357: [128..129]
 r358: [128..129]
 r359: [126..127]
 r360: [122..123]
 r361: [120..121]
 r363: [117..118]
 r367: [149..150]
 r371: [172..173]
 r376: [100..101]
 r378: [330..331]
 r380: [96..97]
 r382: [92..95]
 r383: [94..95]
 r384: [92..93]
 r386: [336..337]
 r388: [332..333]
 r393: [90..91]
 r401: [61..62]
 r403: [57..58]
 r404: [55..56]
 r406: [53..54]
 r407: [33..34]
 r411: [110..111]
 r414: [84..85]
 r416: [82..83]
 r419: [163..164]
 r422: [151..152]
 r423: [23..24]
 r428: [13..14]
 r431: [11..12]
 r432: [20..21]
 r433: [18..19] [3..6]
 r434: [3..4]
 r436: [7..8]
 r438: [156..157]
 r442: [146..147]
 r445: [325..326]
 r446: [321..322]
 r450: [319..320]
 r451: [310..311]
 r459: [308..309]
 r460: [306..307]
 r461: [304..305]
 r468: [302..303]
 r469: [300..301]
 r470: [298..299]
 r473: [296..297]
 r474: [294..295]
 r476: [286..287]
 r477: [77..78]
 r478: [282..283]
 r479: [273..274]
 r481: [253..267]
 r482: [259..260]
 r483: [255..256]
 r484: [251..252]
 r485: [247..248]
 r488: [218..219]
 r490: [222..223]
 r491: [222..223]
 r493: [208..209]
 r494: [208..209]
 r498: [196..197]
 r499: [194..195]
 r500: [192..193]
 r501: [192..193]
 r502: [188..189]
 r503: [184..185]
 r504: [182..183]
 r505: [180..181]
 r506: [70..73]
 r508: [41..44]
 r511: [41..42]
 r512: [39..40]
 r513: [37..38]
 r514: [174..175]
 r516: [66..67]
 r521: [240..241]
 r523: [238..239]
 r531: [234..235]
 r533: [232..233]
 r538: [104..105] [87..89]
 r539: [334..339] [329..331] [92..99]
 r540: [315..320] [277..289] [232..241] [228..229] [212..215]
 r541: [315..320] [277..289] [232..241] [228..229] [212..215]
 r542: [298..309]
 r543: [298..309]
 r562: [171..339] [33..116]
 r564: [144..339] [33..116]
 r576: [142..143]
 r577: [2..2]
 r578: [59..60]
 r579: [15..16]
 r580: [13..14]
 r581: [5..6]
 r582: [327..328]
 r583: [323..324]
 r584: [312..313]
 r585: [284..285]
 r586: [275..276]
 r587: [268..269]
 r588: [266..267]
 r589: [261..262]
 r590: [249..250]
 r591: [243..244]
 r592: [243..244]
 r593: [220..221]
 r594: [198..199]
 r595: [70..71]
 r596: [45..46]
 r597: [43..44]
 r598: [176..177]
 r599: [240..241]
 r600: [236..237]
 r601: [234..235]
Live info was changed -- recalculate it

********** Pseudo live ranges #2: **********

  BB 109
   Insn 836: point = 0
   Insn 835: point = 0
  BB 127
   Insn 951: point = 0
   Insn 950: point = 0
  BB 125
   Insn 1613: point = 0
  BB 126
   Insn 947: point = 0
  BB 134
   Insn 993: point = 2
   Insn 992: point = 2
  BB 167
   Insn 1653: point = 2
  BB 147
   Insn 1107: point = 2
   Insn 1106: point = 2
  BB 156
   Insn 1221: point = 2
   Insn 1220: point = 2
  BB 171
   Insn 1322: point = 2
  BB 162
   Insn 1644: point = 2
  BB 172
   Insn 1325: point = 2
  BB 161
   Insn 1321: point = 2
   Insn 1320: point = 2
   Insn 1319: point = 3
  BB 159
   Insn 1640: point = 5
   Insn 68: point = 5
  BB 158
   Insn 1638: point = 6
   Insn 43: point = 6
  BB 93
   Insn 1593: point = 7
   Insn 66: point = 7
  BB 92
   Insn 1591: point = 8
   Insn 65: point = 8
  BB 91
   Insn 1589: point = 9
   Insn 64: point = 9
  BB 90
   Insn 1587: point = 10
   Insn 63: point = 10
  BB 89
   Insn 1585: point = 11
   Insn 62: point = 11
  BB 88
   Insn 1583: point = 12
   Insn 61: point = 12
  BB 87
   Insn 1581: point = 13
   Insn 60: point = 13
  BB 86
   Insn 1579: point = 14
   Insn 59: point = 14
  BB 85
   Insn 1577: point = 15
   Insn 58: point = 15
  BB 84
   Insn 1575: point = 16
   Insn 57: point = 16
  BB 83
   Insn 1573: point = 17
   Insn 56: point = 17
  BB 82
   Insn 1571: point = 18
   Insn 55: point = 18
  BB 81
   Insn 1569: point = 19
   Insn 54: point = 19
  BB 80
   Insn 1567: point = 20
   Insn 53: point = 20
  BB 79
   Insn 1565: point = 21
   Insn 52: point = 21
  BB 78
   Insn 1563: point = 22
   Insn 51: point = 22
  BB 77
   Insn 1561: point = 23
   Insn 50: point = 23
  BB 76
   Insn 1559: point = 24
   Insn 49: point = 24
  BB 75
   Insn 1557: point = 25
   Insn 48: point = 25
  BB 74
   Insn 1555: point = 26
   Insn 47: point = 26
  BB 73
   Insn 1553: point = 27
   Insn 46: point = 27
  BB 72
   Insn 1551: point = 28
   Insn 45: point = 28
  BB 71
   Insn 1549: point = 29
   Insn 581: point = 29
   Insn 578: point = 30
   Insn 577: point = 30
   Insn 576: point = 30
   Insn 575: point = 31
   Insn 1669: point = 33
  BB 160
   Insn 67: point = 35
  BB 53
   Insn 1529: point = 36
  BB 94
   Insn 1595: point = 36
   Insn 675: point = 36
   Insn 674: point = 38
  BB 157
   Insn 1636: point = 39
   Insn 42: point = 39
  BB 69
   Insn 1547: point = 40
   Insn 40: point = 40
   Insn 557: point = 41
   Insn 556: point = 41
   Insn 555: point = 41
   Insn 554: point = 41
   Insn 553: point = 41
  BB 68
   Insn 1545: point = 41
   Insn 39: point = 41
   Insn 547: point = 42
   Insn 546: point = 43
   Insn 544: point = 44
   Insn 543: point = 44
   Insn 542: point = 44
   Insn 541: point = 45
   Insn 540: point = 45
	Hard reg 1 is preferable by r580 with profit 1
   Insn 1668: point = 46
   Insn 539: point = 47
   Insn 1667: point = 49
  BB 61
   Insn 1537: point = 50
   Insn 35: point = 50
  BB 70
   Insn 570: point = 51
   Insn 569: point = 51
   Insn 38: point = 51
   Insn 568: point = 52
   Insn 566: point = 52
   Insn 565: point = 53
   Insn 564: point = 53
   Insn 563: point = 54
   Insn 562: point = 55
  BB 56
   Insn 1531: point = 56
   Insn 471: point = 56
  BB 55
   Insn 468: point = 59
   Insn 467: point = 60
   Insn 466: point = 61
   Insn 465: point = 62
   Insn 464: point = 63
   Insn 463: point = 63
   Insn 462: point = 64
   Insn 461: point = 64
   Insn 460: point = 64
  BB 54
   Insn 458: point = 64
   Insn 457: point = 64
   Insn 456: point = 64
   Insn 455: point = 64
   Insn 454: point = 65
   Insn 453: point = 65
  BB 58
   Insn 1533: point = 65
   Insn 37: point = 65
  BB 43
   Insn 1511: point = 66
   Insn 44: point = 66
  BB 60
   Insn 1535: point = 67
   Insn 36: point = 67
  BB 67
   Insn 1543: point = 68
  BB 66
   Insn 531: point = 68
   Insn 530: point = 68
  BB 65
   Insn 528: point = 70
   Insn 527: point = 70
   Insn 526: point = 70
   Insn 524: point = 71
   Insn 523: point = 71
   Insn 522: point = 71
   Insn 521: point = 71
   Insn 520: point = 71
  BB 64
   Insn 1540: point = 71
  BB 63
   Insn 514: point = 71
   Insn 513: point = 71
  BB 62
   Insn 510: point = 73
   Insn 509: point = 73
   Insn 507: point = 73
   Insn 505: point = 74
   Insn 504: point = 74
   Insn 503: point = 74
   Insn 502: point = 74
   Insn 501: point = 74
  BB 59
   Insn 491: point = 74
   Insn 490: point = 74
  BB 57
   Insn 484: point = 76
   Insn 483: point = 76
   Insn 482: point = 76
   Insn 480: point = 77
   Insn 479: point = 77
   Insn 478: point = 77
   Insn 477: point = 77
   Insn 476: point = 77
  BB 42
   Insn 355: point = 77
   Insn 352: point = 78
  BB 41
   Insn 351: point = 81
   Insn 350: point = 81
  BB 153
   Insn 1630: point = 82
   Insn 1167: point = 82
   Insn 1166: point = 84
   Insn 1165: point = 86
   Insn 1697: point = 88
	Hard reg 1 is preferable by r597 with profit 1
   Insn 1164: point = 90
   Insn 1696: point = 90
   Insn 1163: point = 91
   Insn 1695: point = 93
   Insn 1161: point = 94
  BB 152
   Insn 32: point = 96
  BB 40
   Insn 342: point = 99
   Insn 341: point = 99
   Insn 340: point = 99
  BB 39
   Insn 334: point = 100
  BB 38
   Insn 332: point = 101
   Insn 331: point = 101
  BB 37
   Insn 319: point = 102
   Insn 318: point = 102
   Insn 328: point = 103
   Insn 326: point = 104
   Insn 317: point = 105
  BB 36
   Insn 314: point = 107
   Insn 313: point = 107
   Insn 312: point = 108
  BB 35
   Insn 309: point = 110
   Insn 308: point = 110
   Insn 307: point = 110
   Insn 306: point = 110
   Insn 305: point = 110
   Insn 304: point = 111
   Insn 303: point = 112
   Insn 1666: point = 113
	Hard reg 0 is preferable by r578 with profit 8
   Insn 302: point = 115
   Insn 1665: point = 115
   Insn 300: point = 116
  BB 34
   Insn 294: point = 117
   Insn 293: point = 119
   Insn 288: point = 120
  BB 33
   Insn 286: point = 122
   Insn 285: point = 122
   Insn 283: point = 122
  BB 155
   Insn 1634: point = 125
   Insn 1215: point = 125
   Insn 1214: point = 127
   Insn 1211: point = 129
   Insn 1208: point = 130
   Insn 1207: point = 131
   Insn 1206: point = 131
  BB 151
   Insn 1628: point = 132
   Insn 1694: point = 132
	Hard reg 3 is preferable by r595 with profit 1
   Insn 33: point = 134
   Insn 1693: point = 135
	Hard reg 3 is preferable by r595 with profit 1
	Hard reg 6 is preferable by r595 with profit 1
   Insn 1142: point = 137
  BB 112
   Insn 1605: point = 140
   Insn 34: point = 140
  BB 111
   Insn 845: point = 143
   Insn 844: point = 143
   Insn 843: point = 144
  BB 45
   Insn 1515: point = 147
   Insn 389: point = 147
   Insn 388: point = 149
   Insn 383: point = 150
   Insn 382: point = 151
   Insn 381: point = 152
  BB 32
   Insn 274: point = 154
  BB 31
   Insn 269: point = 157
  BB 30
   Insn 267: point = 159
   Insn 266: point = 159
  BB 29
   Insn 263: point = 161
  BB 28
   Insn 261: point = 163
   Insn 260: point = 163
  BB 26
   Insn 249: point = 165
   Insn 248: point = 165
   Insn 247: point = 165
   Insn 246: point = 166
   Insn 243: point = 167
   Insn 241: point = 167
   Insn 240: point = 169
  BB 23
   Insn 216: point = 172
   Insn 215: point = 172
   Insn 214: point = 173
   Insn 213: point = 175
   Insn 212: point = 176
   Insn 210: point = 178
  BB 21
   Insn 1505: point = 181
   Insn 1389: point = 181
   Insn 1442: point = 183
   Insn 1440: point = 183
   Insn 1439: point = 184
   Insn 1437: point = 184
   Insn 1436: point = 184
   Insn 1435: point = 184
   Insn 1434: point = 184
   Insn 1433: point = 184
   Insn 191: point = 184
  BB 27
   Insn 1509: point = 187
   Insn 254: point = 187
   Insn 251: point = 189
  BB 20
   Insn 20: point = 191
   Insn 19: point = 192
   Insn 184: point = 193
   Insn 183: point = 194
  BB 18
   Insn 1503: point = 196
   Insn 18: point = 196
   Insn 167: point = 197
  BB 44
   Insn 1513: point = 198
   Insn 375: point = 198
   Insn 374: point = 200
   Insn 373: point = 201
   Insn 370: point = 203
   Insn 369: point = 204
   Insn 367: point = 205
   Insn 366: point = 206
  BB 17
   Insn 17: point = 208
   Insn 16: point = 210
  BB 14
   Insn 1501: point = 213
   Insn 1438: point = 213
   Insn 148: point = 214
   Insn 145: point = 216
   Insn 144: point = 217
   Insn 142: point = 218
  BB 3
   Insn 1499: point = 220
   Insn 75: point = 220
   Insn 74: point = 221
  BB 13
   Insn 139: point = 222
   Insn 138: point = 222
   Insn 137: point = 223
   Insn 136: point = 224
   Insn 135: point = 226
   Insn 134: point = 228
   Insn 133: point = 228
   Insn 132: point = 228
   Insn 131: point = 230
   Insn 130: point = 231
  BB 12
   Insn 127: point = 233
   Insn 126: point = 234
   Insn 1661: point = 236
   Insn 125: point = 237
   Insn 122: point = 238
   Insn 121: point = 239
   Insn 120: point = 240
   Insn 119: point = 240
   Insn 118: point = 240
   Insn 117: point = 240
   Insn 1662: point = 242
   Insn 116: point = 243
   Insn 113: point = 244
  BB 11
   Insn 110: point = 244
   Insn 109: point = 244
   Insn 108: point = 244
   Insn 107: point = 245
   Insn 1663: point = 247
  BB 10
   Insn 103: point = 249
   Insn 102: point = 249
   Insn 101: point = 249
  BB 9
   Insn 98: point = 250
   Insn 97: point = 251
  BB 8
   Insn 95: point = 252
   Insn 94: point = 252
  BB 7
   Insn 91: point = 252
   Insn 90: point = 253
  BB 6
   Insn 88: point = 254
   Insn 87: point = 254
  BB 5
   Insn 84: point = 254
  BB 4
   Insn 82: point = 254
   Insn 81: point = 254
   Insn 80: point = 254
  BB 2
   Insn 72: point = 254
   Insn 71: point = 254
   Insn 3: point = 254
  BB 16
   Insn 161: point = 256
   Insn 160: point = 257
  BB 96
   Insn 1599: point = 259
   Insn 704: point = 259
   Insn 701: point = 261
   Insn 700: point = 262
   Insn 698: point = 263
   Insn 697: point = 264
   Insn 696: point = 264
   Insn 695: point = 264
   Insn 694: point = 264
   Insn 693: point = 264
  BB 15
   Insn 158: point = 265
   Insn 155: point = 267
   Insn 154: point = 268
   Insn 152: point = 269
  BB 52
   Insn 446: point = 271
   Insn 445: point = 271
   Insn 444: point = 272
  BB 51
   Insn 442: point = 274
   Insn 441: point = 274
   Insn 440: point = 274
   Insn 439: point = 275
  BB 49
   Insn 1523: point = 276
   Insn 12: point = 276
   Insn 11: point = 277
   Insn 10: point = 278
   Insn 418: point = 279
  BB 95
   Insn 1597: point = 280
   Insn 688: point = 280
   Insn 685: point = 282
   Insn 684: point = 283
   Insn 682: point = 284
   Insn 681: point = 285
   Insn 680: point = 285
  BB 48
   Insn 1521: point = 286
   Insn 9: point = 286
   Insn 8: point = 287
   Insn 7: point = 288
   Insn 413: point = 289
  BB 46
   Insn 1517: point = 290
   Insn 6: point = 290
   Insn 5: point = 291
   Insn 4: point = 292
   Insn 395: point = 293
  BB 47
   Insn 1519: point = 294
   Insn 408: point = 294
   Insn 405: point = 296
   Insn 404: point = 297
   Insn 402: point = 298
   Insn 401: point = 299
  BB 50
   Insn 1525: point = 300
   Insn 15: point = 300
   Insn 14: point = 301
   Insn 13: point = 302
   Insn 434: point = 303
   Insn 433: point = 303
   Insn 432: point = 303
   Insn 431: point = 304
   Insn 430: point = 305
   Insn 429: point = 305
   Insn 428: point = 306
   Insn 427: point = 306
   Insn 426: point = 306
   Insn 425: point = 307
   Insn 424: point = 307
   Insn 423: point = 307
  BB 19
   Insn 180: point = 308
   Insn 177: point = 310
   Insn 176: point = 311
   Insn 174: point = 312
  BB 154
   Insn 1632: point = 314
   Insn 1180: point = 314
   Insn 1177: point = 315
   Insn 1176: point = 316
   Insn 1175: point = 316
   Insn 1174: point = 316
   Insn 1173: point = 318
   Insn 1698: point = 320
  BB 150
   Insn 1137: point = 323
   Insn 1136: point = 323
  BB 149
   Insn 1135: point = 325
   Insn 1134: point = 325
   Insn 1121: point = 325
   Insn 1120: point = 325
   Insn 1119: point = 327
   Insn 1118: point = 328
   Insn 1117: point = 329
   Insn 1116: point = 331
   Insn 1115: point = 332
   Insn 1114: point = 333
  BB 146
   Insn 1104: point = 335
   Insn 1103: point = 335
   Insn 1102: point = 335
   Insn 1101: point = 337
   Insn 1100: point = 338
   Insn 1097: point = 339
   Insn 1096: point = 340
   Insn 1095: point = 340
   Insn 1094: point = 341
   Insn 1093: point = 342
   Insn 1092: point = 343
   Insn 1091: point = 345
   Insn 1692: point = 347
	Hard reg 4 is preferable by r594 with profit 1
   Insn 1090: point = 349
   Insn 1691: point = 349
	Hard reg 4 is preferable by r594 with profit 1
	Hard reg 1 is preferable by r594 with profit 1
  BB 148
   Insn 1111: point = 352
  BB 145
   Insn 1085: point = 355
   Insn 1084: point = 355
   Insn 1083: point = 355
   Insn 1081: point = 356
  BB 143
   Insn 1625: point = 359
   Insn 30: point = 359
   Insn 1065: point = 360
   Insn 1064: point = 361
   Insn 1659: point = 363
   Insn 1063: point = 364
   Insn 1060: point = 365
   Insn 1059: point = 366
   Insn 1058: point = 366
  BB 144
   Insn 31: point = 367
   Insn 1077: point = 368
   Insn 1076: point = 369
   Insn 1075: point = 369
   Insn 1074: point = 370
  BB 142
   Insn 1055: point = 373
   Insn 1054: point = 373
  BB 118
   Insn 1607: point = 374
   Insn 886: point = 374
   Insn 885: point = 375
  BB 141
   Insn 1051: point = 376
   Insn 1050: point = 376
   Insn 29: point = 376
   Insn 1049: point = 377
   Insn 1048: point = 377
  BB 165
   Insn 1649: point = 379
   Insn 1268: point = 379
   Insn 1267: point = 380
   Insn 1265: point = 381
  BB 139
   Insn 1621: point = 383
   Insn 1033: point = 383
  BB 137
   Insn 1025: point = 385
   Insn 1024: point = 385
   Insn 1023: point = 386
   Insn 1022: point = 386
   Insn 1017: point = 387
   Insn 1016: point = 388
   Insn 1015: point = 388
   Insn 1014: point = 389
   Insn 1013: point = 389
   Insn 1012: point = 389
   Insn 1690: point = 389
	Hard reg 5 is preferable by r593 with profit 1
   Insn 1011: point = 391
   Insn 1689: point = 392
  BB 140
   Insn 1623: point = 394
   Insn 1042: point = 394
   Insn 1660: point = 396
   Insn 1041: point = 397
   Insn 1039: point = 398
   Insn 1038: point = 398
   Insn 1037: point = 398
  BB 166
   Insn 1275: point = 399
   Insn 1274: point = 399
  BB 138
   Insn 1031: point = 400
   Insn 1030: point = 400
   Insn 1029: point = 401
   Insn 1028: point = 402
   Insn 1027: point = 402
  BB 136
   Insn 1004: point = 403
   Insn 1003: point = 403
   Insn 1002: point = 404
  BB 135
   Insn 1619: point = 405
   Insn 997: point = 405
   Insn 996: point = 406
  BB 170
   Insn 1657: point = 408
   Insn 1314: point = 408
   Insn 1313: point = 409
   Insn 1311: point = 410
  BB 169
   Insn 1309: point = 412
   Insn 1308: point = 412
   Insn 1307: point = 413
   Insn 1306: point = 414
   Insn 1305: point = 414
  BB 168
   Insn 1655: point = 415
   Insn 28: point = 415
   Insn 1295: point = 415
   Insn 1703: point = 416
	Hard reg 0 is preferable by r601 with profit 1
   Insn 1293: point = 418
   Insn 1702: point = 419
   Insn 1291: point = 420
   Insn 1288: point = 421
   Insn 1287: point = 422
   Insn 1285: point = 423
  BB 133
   Insn 1617: point = 425
  BB 164
   Insn 1647: point = 426
  BB 163
   Insn 1258: point = 427
   Insn 1257: point = 427
   Insn 1701: point = 428
   Insn 1252: point = 429
   Insn 1251: point = 429
   Insn 1700: point = 430
	Hard reg 1 is preferable by r599 with profit 1
   Insn 1249: point = 432
   Insn 1699: point = 433
   Insn 1247: point = 434
   Insn 1246: point = 435
   Insn 1245: point = 436
   Insn 1243: point = 437
  BB 132
   Insn 987: point = 439
   Insn 986: point = 439
  BB 131
   Insn 984: point = 440
   Insn 983: point = 440
   Insn 981: point = 440
   Insn 980: point = 441
   Insn 979: point = 441
  BB 130
   Insn 27: point = 442
  BB 129
   Insn 974: point = 444
   Insn 973: point = 444
   Insn 1687: point = 444
   Insn 971: point = 446
   Insn 1688: point = 447
   Insn 1686: point = 448
	Hard reg 1 is preferable by r591 with profit 1
   Insn 969: point = 450
  BB 128
   Insn 966: point = 451
   Insn 965: point = 451
   Insn 1685: point = 453
	Hard reg 1 is preferable by r590 with profit 1
   Insn 960: point = 455
   Insn 1684: point = 455
   Insn 958: point = 456
   Insn 957: point = 457
   Insn 956: point = 457
   Insn 955: point = 459
  BB 124
   Insn 941: point = 462
   Insn 940: point = 462
   Insn 939: point = 462
   Insn 936: point = 463
   Insn 935: point = 464
   Insn 934: point = 464
   Insn 933: point = 465
   Insn 932: point = 466
  BB 122
   Insn 1609: point = 469
   Insn 922: point = 469
   Insn 921: point = 469
   Insn 1683: point = 471
	Hard reg 0 is preferable by r589 with profit 1
   Insn 920: point = 473
   Insn 1682: point = 473
  BB 123
   Insn 26: point = 475
   Insn 927: point = 477
  BB 121
   Insn 918: point = 478
   Insn 1681: point = 478
	Hard reg 0 is preferable by r588 with profit 1
   Insn 917: point = 480
   Insn 1680: point = 480
   Insn 914: point = 481
  BB 120
   Insn 912: point = 483
   Insn 911: point = 483
   Insn 1679: point = 483
   Insn 908: point = 485
   Insn 1678: point = 485
	Hard reg 0 is preferable by r587 with profit 1
   Insn 907: point = 487
  BB 119
   Insn 897: point = 489
   Insn 896: point = 489
   Insn 1677: point = 491
	Hard reg 1 is preferable by r586 with profit 1
   Insn 892: point = 493
   Insn 1676: point = 493
  BB 117
   Insn 883: point = 495
   Insn 882: point = 495
  BB 116
   Insn 879: point = 496
  BB 115
   Insn 877: point = 498
   Insn 876: point = 498
   Insn 870: point = 498
   Insn 869: point = 498
   Insn 868: point = 499
  BB 114
   Insn 25: point = 501
  BB 113
   Insn 859: point = 503
   Insn 858: point = 503
   Insn 1675: point = 505
	Hard reg 6 is preferable by r585 with profit 1
   Insn 851: point = 507
   Insn 1674: point = 507
  BB 110
   Insn 841: point = 509
   Insn 840: point = 509
  BB 108
   Insn 833: point = 510
   Insn 832: point = 510
   Insn 831: point = 511
   Insn 828: point = 513
  BB 107
   Insn 1603: point = 515
   Insn 819: point = 515
   Insn 818: point = 515
  BB 106
   Insn 816: point = 516
   Insn 815: point = 516
   Insn 813: point = 516
  BB 105
   Insn 808: point = 518
   Insn 807: point = 518
   Insn 1235: point = 518
   Insn 803: point = 519
   Insn 802: point = 521
   Insn 801: point = 523
  BB 104
   Insn 796: point = 526
   Insn 795: point = 526
   Insn 794: point = 527
   Insn 793: point = 529
   Insn 792: point = 531
   Insn 791: point = 532
   Insn 787: point = 533
   Insn 782: point = 534
  BB 103
   Insn 774: point = 537
   Insn 773: point = 537
   Insn 772: point = 538
   Insn 771: point = 540
   Insn 770: point = 542
   Insn 769: point = 543
  BB 102
   Insn 760: point = 545
   Insn 759: point = 545
  BB 101
   Insn 757: point = 546
   Insn 756: point = 546
   Insn 755: point = 546
   Insn 754: point = 547
   Insn 748: point = 548
   Insn 747: point = 549
   Insn 746: point = 549
   Insn 745: point = 549
   Insn 743: point = 551
   Insn 1673: point = 553
  BB 100
   Insn 741: point = 556
   Insn 740: point = 556
   Insn 739: point = 556
   Insn 738: point = 557
   Insn 737: point = 558
   Insn 736: point = 560
  BB 98
   Insn 1601: point = 562
   Insn 723: point = 562
  BB 99
   Insn 733: point = 564
   Insn 732: point = 564
   Insn 731: point = 565
   Insn 730: point = 566
   Insn 729: point = 567
   Insn 728: point = 567
  BB 97
   Insn 721: point = 569
   Insn 720: point = 569
   Insn 719: point = 569
   Insn 718: point = 570
   Insn 717: point = 571
   Insn 715: point = 572
   Insn 714: point = 573
   Insn 713: point = 574
   Insn 1672: point = 575
   Insn 711: point = 577
   Insn 1671: point = 579
	Hard reg 43 is preferable by r582 with profit 1
   Insn 710: point = 581
   Insn 1670: point = 581
  BB 22
   Insn 204: point = 583
   Insn 203: point = 585
  BB 25
   Insn 1507: point = 587
   Insn 1390: point = 587
   Insn 229: point = 589
  BB 24
   Insn 225: point = 592
   Insn 224: point = 592
   Insn 221: point = 592
   Insn 219: point = 594
 r87: [595..596] [583..592] [515..519] [308..315] [208..210] [172..198] [165..167]
 r88: [556..596] [325..549] [308..316] [208..208] [143..200] [140..140] [122..132] [77..120]
 r89: [556..596] [518..518] [325..516] [308..314] [143..196] [77..129]
 r90: [122..122] [99..117] [79..82]
 r92: [65..67] [56..56] [50..51] [39..41] [3..36]
 r99: [246..249]
 r102: [244..245] [227..234]
 r103: [244..244] [229..233]
 r107: [238..240]
 r109: [238..239]
 r136: [305..306]
 r137: [303..304]
 r147: [554..575] [321..514]
 r152: [556..570] [451..514]
 r154: [564..567] [559..562]
 r156: [556..560] [498..514]
 r157: [556..558] [512..514]
 r158: [556..557] [509..514] [141..146]
 r160: [128..130]
 r168: [271..274]
 r176: [51..55] [29..34]
 r186: [516..546] [154..154] [147..147] [123..125]
 r193: [537..548] [526..534]
 r198: [57..64]
 r200: [59..62]
 r202: [74..76]
 r203: [71..73]
 r204: [68..70]
 r212: [405..442]
 r213: [498..513] [143..146] [97..98]
 r224: [357..503]
 r226: [498..499]
 r227: [498..501]
 r230: [489..489] [449..451]
 r232: [464..487]
 r237: [478..481] [470..474]
 r238: [476..478]
 r240: [475..475] [467..469]
 r242: [458..463]
 r244: [556..556] [486..514] [451..457] [145..146]
 r245: [556..569] [503..514] [462..496] [444..456] [403..404] [391..394] [374..375] [0..1]
 r251: [429..440]
 r268: [412..413]
 r270: [385..403]
 r274: [385..387]
 r275: [405..406] [385..386] [376..383] [367..368] [355..365] [350..351]
 r277: [400..401]
 r280: [376..377] [367..369] [353..360] [338..351]
 r287: [333..356]
 r289: [323..355] [136..139]
 r297: [338..339]
 r299: [352..352] [332..335]
 r306: [317..325] [94..96]
 r307: [102..105]
 r308: [376..376] [367..367] [323..359]
 r309: [427..444] [385..404]
 r311: [99..104]
 r313: [583..596] [159..192]
 r314: [583..596] [157..194]
 r315: [583..596] [163..191]
 r316: [583..596] [161..193]
 r318: [256..257] [209..228]
 r320: [308..312] [256..256] [222..222] [208..220] [191..206] [185..189]
 r321: [583..583] [308..308] [300..302] [294..294] [290..292] [286..288] [280..280] [276..278] [265..265] [256..259] [208..214] [179..201] [165..165]
 r327: [99..103]
 r341: [300..300] [294..298] [290..290] [286..286] [280..284] [276..276] [265..269] [256..263] [211..218]
 r342: [199..205]
 r343: [308..310] [300..301] [294..296] [290..291] [286..287] [280..282] [276..277] [265..267] [256..261] [208..216] [191..203] [183..187]
 r347: [426..435] [415..421] [405..408] [376..379] [367..370] [323..361] [138..139]
 r349: [252..253]
 r350: [250..251]
 r352: [246..247]
 r354: [241..242]
 r355: [241..243]
 r357: [235..236]
 r358: [235..237]
 r359: [230..231]
 r360: [225..226]
 r361: [223..224]
 r363: [215..217]
 r367: [266..268]
 r371: [309..311]
 r376: [182..184]
 r378: [584..585]
 r380: [177..178]
 r382: [170..176]
 r383: [174..175]
 r384: [172..173]
 r386: [593..594]
 r388: [588..589]
 r393: [168..169]
 r401: [118..119]
 r403: [112..113]
 r404: [110..111]
 r406: [107..108]
 r407: [77..78]
 r411: [202..204]
 r414: [151..152]
 r416: [148..149]
 r419: [295..297]
 r422: [271..272]
 r423: [60..61]
 r428: [44..47]
 r431: [42..43]
 r432: [53..54]
 r433: [51..52] [29..34]
 r434: [30..31]
 r436: [37..38]
 r438: [281..283]
 r442: [260..262]
 r445: [578..579]
 r446: [573..574]
 r450: [565..566]
 r451: [550..551]
 r459: [541..542]
 r460: [539..540]
 r461: [537..538]
 r468: [530..531]
 r469: [528..529]
 r470: [526..527]
 r473: [522..523]
 r474: [520..521]
 r476: [510..511]
 r477: [143..144]
 r478: [504..505]
 r479: [490..491]
 r481: [460..483]
 r482: [470..471]
 r483: [465..466]
 r484: [458..459]
 r485: [452..453]
 r488: [388..389]
 r490: [395..396]
 r491: [395..397]
 r493: [362..363]
 r494: [362..364]
 r498: [346..347]
 r499: [344..345]
 r500: [341..343]
 r501: [340..342]
 r502: [336..337]
 r503: [330..331]
 r504: [328..329]
 r505: [326..327]
 r506: [134..137]
 r508: [87..91]
 r511: [87..88]
 r512: [85..86]
 r513: [83..84]
 r514: [317..318]
 r516: [126..127]
 r521: [432..434]
 r523: [429..430]
 r531: [418..420]
 r533: [415..416]
 r538: [188..190] [155..166]
 r539: [590..596] [583..587] [172..181]
 r540: [556..572] [495..514] [426..437] [415..423] [405..410] [371..381]
 r541: [556..571] [495..514] [426..436] [415..422] [405..409] [371..380]
 r542: [537..543] [524..532]
 r543: [535..547] [526..533]
 r564: [256..596] [77..213]
 r576: [254..255]
 r577: [2..2]
 r578: [114..115]
 r579: [48..49]
 r580: [45..46]
 r581: [32..33]
 r582: [580..581]
 r583: [576..577]
 r584: [552..553]
 r585: [506..507]
 r586: [492..493]
 r587: [484..485]
 r588: [479..480]
 r589: [472..473]
 r590: [454..455]
 r591: [445..448]
 r592: [446..447]
 r593: [390..392]
 r594: [348..349]
 r595: [133..135]
 r596: [92..93]
 r597: [89..90]
 r598: [319..320]
 r599: [431..433]
 r600: [427..428]
 r601: [417..419]
Compressing live ranges: from 597 to 340 - 56%
Ranges after the compression:
 r87: [338..339] [329..335] [290..293] [171..173] [112..114] [92..107] [88..89]
 r88: [315..339] [179..309] [171..173] [112..112] [76..109] [33..69]
 r89: [315..339] [179..292] [171..173] [77..107] [33..69]
 r90: [63..63] [51..60] [35..36]
 r92: [25..26] [22..22] [17..18] [9..10] [3..6]
 r99: [136..137]
 r102: [134..135] [124..127]
 r103: [134..134] [126..127]
 r107: [130..131]
 r109: [130..131]
 r136: [169..170]
 r137: [167..168]
 r147: [314..322] [178..289]
 r152: [315..320] [246..289]
 r154: [317..320]
 r156: [315..318] [279..289]
 r157: [315..316] [288..289]
 r158: [315..316] [286..289] [77..80]
 r160: [68..69]
 r168: [151..152]
 r176: [18..21] [3..6]
 r186: [291..309] [86..86] [81..81] [64..65]
 r193: [298..309]
 r198: [23..24]
 r200: [23..24]
 r202: [31..32]
 r203: [29..30]
 r204: [27..28]
 r212: [228..241]
 r213: [279..289] [77..80] [49..50]
 r224: [206..281]
 r226: [279..280]
 r227: [279..280]
 r230: [272..272] [245..246]
 r232: [255..271]
 r237: [265..267] [259..262]
 r238: [264..265]
 r240: [263..263] [257..258]
 r242: [251..254]
 r244: [315..315] [270..289] [246..250] [79..80]
 r245: [315..320] [281..289] [253..278] [242..250] [226..227] [220..221] [212..213] [0..1]
 r251: [238..241]
 r268: [230..231]
 r270: [216..226]
 r274: [216..217]
 r275: [228..229] [214..217] [204..211] [200..201]
 r277: [224..225]
 r280: [214..215] [210..211] [203..207] [190..201]
 r287: [186..205]
 r289: [178..204] [72..75]
 r297: [190..191]
 r299: [202..202] [186..187]
 r306: [174..179] [47..48]
 r307: [51..52]
 r308: [214..214] [210..210] [178..207]
 r309: [236..242] [216..227]
 r311: [51..52]
 r313: [329..339] [87..107]
 r314: [329..339] [87..107]
 r315: [329..339] [87..106]
 r316: [329..339] [87..107]
 r318: [144..145] [113..125]
 r320: [171..173] [144..144] [102..119]
 r321: [329..329] [171..171] [165..166] [158..162] [153..155] [148..148] [144..145] [112..116] [98..109] [88..88]
 r327: [51..52]
 r341: [162..165] [160..160] [155..158] [153..153] [144..150] [115..118]
 r342: [108..111]
 r343: [171..173] [153..166] [144..150] [106..118] [100..103]
 r347: [232..241] [228..229] [214..215] [210..211] [178..207] [74..75]
 r349: [140..141]
 r350: [138..139]
 r352: [136..137]
 r354: [132..133]
 r355: [132..133]
 r357: [128..129]
 r358: [128..129]
 r359: [126..127]
 r360: [122..123]
 r361: [120..121]
 r363: [117..118]
 r367: [149..150]
 r371: [172..173]
 r376: [100..101]
 r378: [330..331]
 r380: [96..97]
 r382: [92..95]
 r383: [94..95]
 r384: [92..93]
 r386: [336..337]
 r388: [332..333]
 r393: [90..91]
 r401: [61..62]
 r403: [57..58]
 r404: [55..56]
 r406: [53..54]
 r407: [33..34]
 r411: [110..111]
 r414: [84..85]
 r416: [82..83]
 r419: [163..164]
 r422: [151..152]
 r423: [23..24]
 r428: [13..14]
 r431: [11..12]
 r432: [20..21]
 r433: [18..19] [3..6]
 r434: [3..4]
 r436: [7..8]
 r438: [156..157]
 r442: [146..147]
 r445: [325..326]
 r446: [321..322]
 r450: [319..320]
 r451: [310..311]
 r459: [308..309]
 r460: [306..307]
 r461: [304..305]
 r468: [302..303]
 r469: [300..301]
 r470: [298..299]
 r473: [296..297]
 r474: [294..295]
 r476: [286..287]
 r477: [77..78]
 r478: [282..283]
 r479: [273..274]
 r481: [253..267]
 r482: [259..260]
 r483: [255..256]
 r484: [251..252]
 r485: [247..248]
 r488: [218..219]
 r490: [222..223]
 r491: [222..223]
 r493: [208..209]
 r494: [208..209]
 r498: [196..197]
 r499: [194..195]
 r500: [192..193]
 r501: [192..193]
 r502: [188..189]
 r503: [184..185]
 r504: [182..183]
 r505: [180..181]
 r506: [70..73]
 r508: [41..44]
 r511: [41..42]
 r512: [39..40]
 r513: [37..38]
 r514: [174..175]
 r516: [66..67]
 r521: [240..241]
 r523: [238..239]
 r531: [234..235]
 r533: [232..233]
 r538: [104..105] [87..89]
 r539: [334..339] [329..331] [92..99]
 r540: [315..320] [277..289] [232..241] [228..229] [212..215]
 r541: [315..320] [277..289] [232..241] [228..229] [212..215]
 r542: [298..309]
 r543: [298..309]
 r564: [144..339] [33..116]
 r576: [142..143]
 r577: [2..2]
 r578: [59..60]
 r579: [15..16]
 r580: [13..14]
 r581: [5..6]
 r582: [327..328]
 r583: [323..324]
 r584: [312..313]
 r585: [284..285]
 r586: [275..276]
 r587: [268..269]
 r588: [266..267]
 r589: [261..262]
 r590: [249..250]
 r591: [243..244]
 r592: [243..244]
 r593: [220..221]
 r594: [198..199]
 r595: [70..71]
 r596: [45..46]
 r597: [43..44]
 r598: [176..177]
 r599: [240..241]
 r600: [236..237]
 r601: [234..235]

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23 24 25
EBB 26 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33 34
EBB 35 36 37
EBB 38
EBB 39
EBB 40
EBB 41 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62 63
EBB 64
EBB 65 66
EBB 67
EBB 68
EBB 69
EBB 70 71
  578: ax:DI=call [`strcpy'] argc:0
      REG_RETURNED r433:DI
      REG_DEAD di:DI
      REG_DEAD si:DI
      REG_UNUSED ax:DI
      REG_CALL_DECL `strcpy'
      REG_EH_REGION 0
    Inserting call parameter restore after:
 1704: r433:DI=ax:DI

EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97 98
EBB 99
EBB 100
EBB 101 102
EBB 103
EBB 104
EBB 105 106
EBB 107
EBB 108
EBB 109
EBB 110 111 112
EBB 113 114
EBB 115
EBB 116
EBB 117
EBB 118
EBB 119
EBB 120 121 122
EBB 123
EBB 124
EBB 125
EBB 126
EBB 127
EBB 128
EBB 129 130
EBB 131 132
EBB 133
EBB 134
EBB 135
EBB 136
EBB 137
EBB 138 139
EBB 140
EBB 141
EBB 142
EBB 143
EBB 144
EBB 145
EBB 146
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=602, assigning class NO_REGS to save r602
 1100: [r280:DI+0x8]=r297:DI
      REG_DEAD r297:DI
      REG_DEAD r280:DI
    Add reg<-save before:
 1706: r280:DI=r602:DI

 1093: r501:DI=[r280:DI+0x8]
      REG_EQUIV [r280:DI+0x8]
    Add save<-reg after:
 1705: r602:DI=r280:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=603, assigning class NO_REGS to save r603
 1104: pc={(flags:CCZ!=0)?L1112:pc}
      REG_DEAD flags:CCZ
      REG_BR_PROB 9996
    Add reg<-save before:
 1708: r287:SI=r603:SI

 1091: {r499:SI=r498:SI+r287:SI;clobber flags:CC;}
      REG_DEAD r498:SI
      REG_UNUSED flags:CC
    Add save<-reg after:
 1707: r603:SI=r287:SI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 147
EBB 148
EBB 149
EBB 150
EBB 151
EBB 152
EBB 153
EBB 154
EBB 155
EBB 156
EBB 157
EBB 158
EBB 159
EBB 160
EBB 161
EBB 162
EBB 163
EBB 164
EBB 165
EBB 166
EBB 167
EBB 168
EBB 169 170
EBB 171
EBB 172

********** Pseudo live ranges #3: **********

  BB 109
   Insn 836: point = 0
   Insn 835: point = 0
  BB 127
   Insn 951: point = 0
   Insn 950: point = 0
  BB 125
   Insn 1613: point = 0
  BB 126
   Insn 947: point = 0
  BB 134
   Insn 993: point = 2
   Insn 992: point = 2
  BB 167
   Insn 1653: point = 2
  BB 147
   Insn 1107: point = 2
   Insn 1106: point = 2
  BB 156
   Insn 1221: point = 2
   Insn 1220: point = 2
  BB 171
   Insn 1322: point = 2
  BB 162
   Insn 1644: point = 2
  BB 172
   Insn 1325: point = 2
  BB 161
   Insn 1321: point = 2
   Insn 1320: point = 2
   Insn 1319: point = 3
  BB 159
   Insn 1640: point = 5
   Insn 68: point = 5
  BB 158
   Insn 1638: point = 6
   Insn 43: point = 6
  BB 93
   Insn 1593: point = 7
   Insn 66: point = 7
  BB 92
   Insn 1591: point = 8
   Insn 65: point = 8
  BB 91
   Insn 1589: point = 9
   Insn 64: point = 9
  BB 90
   Insn 1587: point = 10
   Insn 63: point = 10
  BB 89
   Insn 1585: point = 11
   Insn 62: point = 11
  BB 88
   Insn 1583: point = 12
   Insn 61: point = 12
  BB 87
   Insn 1581: point = 13
   Insn 60: point = 13
  BB 86
   Insn 1579: point = 14
   Insn 59: point = 14
  BB 85
   Insn 1577: point = 15
   Insn 58: point = 15
  BB 84
   Insn 1575: point = 16
   Insn 57: point = 16
  BB 83
   Insn 1573: point = 17
   Insn 56: point = 17
  BB 82
   Insn 1571: point = 18
   Insn 55: point = 18
  BB 81
   Insn 1569: point = 19
   Insn 54: point = 19
  BB 80
   Insn 1567: point = 20
   Insn 53: point = 20
  BB 79
   Insn 1565: point = 21
   Insn 52: point = 21
  BB 78
   Insn 1563: point = 22
   Insn 51: point = 22
  BB 77
   Insn 1561: point = 23
   Insn 50: point = 23
  BB 76
   Insn 1559: point = 24
   Insn 49: point = 24
  BB 75
   Insn 1557: point = 25
   Insn 48: point = 25
  BB 74
   Insn 1555: point = 26
   Insn 47: point = 26
  BB 73
   Insn 1553: point = 27
   Insn 46: point = 27
  BB 72
   Insn 1551: point = 28
   Insn 45: point = 28
  BB 71
   Insn 1549: point = 29
   Insn 581: point = 29
   Insn 1704: point = 30
   Insn 578: point = 31
   Insn 577: point = 31
   Insn 576: point = 32
   Insn 575: point = 33
   Insn 1669: point = 35
  BB 160
   Insn 67: point = 37
  BB 53
   Insn 1529: point = 38
  BB 94
   Insn 1595: point = 38
   Insn 675: point = 38
   Insn 674: point = 40
  BB 157
   Insn 1636: point = 41
   Insn 42: point = 41
  BB 69
   Insn 1547: point = 42
   Insn 40: point = 42
   Insn 557: point = 43
   Insn 556: point = 43
   Insn 555: point = 43
   Insn 554: point = 43
   Insn 553: point = 43
  BB 68
   Insn 1545: point = 43
   Insn 39: point = 43
   Insn 547: point = 44
   Insn 546: point = 45
   Insn 544: point = 46
   Insn 543: point = 46
   Insn 542: point = 46
   Insn 541: point = 47
   Insn 540: point = 47
	Hard reg 1 is preferable by r580 with profit 1
   Insn 1668: point = 48
   Insn 539: point = 49
   Insn 1667: point = 51
  BB 61
   Insn 1537: point = 52
   Insn 35: point = 52
  BB 70
   Insn 570: point = 53
   Insn 569: point = 53
   Insn 38: point = 53
   Insn 568: point = 54
   Insn 566: point = 54
   Insn 565: point = 55
   Insn 564: point = 55
   Insn 563: point = 56
   Insn 562: point = 57
  BB 56
   Insn 1531: point = 58
   Insn 471: point = 58
  BB 55
   Insn 468: point = 61
   Insn 467: point = 62
   Insn 466: point = 63
   Insn 465: point = 64
   Insn 464: point = 65
   Insn 463: point = 65
   Insn 462: point = 66
   Insn 461: point = 66
   Insn 460: point = 66
  BB 54
   Insn 458: point = 66
   Insn 457: point = 66
   Insn 456: point = 66
   Insn 455: point = 66
   Insn 454: point = 67
   Insn 453: point = 67
  BB 58
   Insn 1533: point = 67
   Insn 37: point = 67
  BB 43
   Insn 1511: point = 68
   Insn 44: point = 68
  BB 60
   Insn 1535: point = 69
   Insn 36: point = 69
  BB 67
   Insn 1543: point = 70
  BB 66
   Insn 531: point = 70
   Insn 530: point = 70
  BB 65
   Insn 528: point = 72
   Insn 527: point = 72
   Insn 526: point = 72
   Insn 524: point = 73
   Insn 523: point = 73
   Insn 522: point = 73
   Insn 521: point = 73
   Insn 520: point = 73
  BB 64
   Insn 1540: point = 73
  BB 63
   Insn 514: point = 73
   Insn 513: point = 73
  BB 62
   Insn 510: point = 75
   Insn 509: point = 75
   Insn 507: point = 75
   Insn 505: point = 76
   Insn 504: point = 76
   Insn 503: point = 76
   Insn 502: point = 76
   Insn 501: point = 76
  BB 59
   Insn 491: point = 76
   Insn 490: point = 76
  BB 57
   Insn 484: point = 78
   Insn 483: point = 78
   Insn 482: point = 78
   Insn 480: point = 79
   Insn 479: point = 79
   Insn 478: point = 79
   Insn 477: point = 79
   Insn 476: point = 79
  BB 42
   Insn 355: point = 79
   Insn 352: point = 80
  BB 41
   Insn 351: point = 83
   Insn 350: point = 83
  BB 153
   Insn 1630: point = 84
   Insn 1167: point = 84
   Insn 1166: point = 86
   Insn 1165: point = 88
   Insn 1697: point = 90
	Hard reg 1 is preferable by r597 with profit 1
   Insn 1164: point = 92
   Insn 1696: point = 92
   Insn 1163: point = 93
   Insn 1695: point = 95
   Insn 1161: point = 96
  BB 152
   Insn 32: point = 98
  BB 40
   Insn 342: point = 101
   Insn 341: point = 101
   Insn 340: point = 101
  BB 39
   Insn 334: point = 102
  BB 38
   Insn 332: point = 103
   Insn 331: point = 103
  BB 37
   Insn 319: point = 104
   Insn 318: point = 104
   Insn 328: point = 105
   Insn 326: point = 106
   Insn 317: point = 107
  BB 36
   Insn 314: point = 109
   Insn 313: point = 109
   Insn 312: point = 110
  BB 35
   Insn 309: point = 112
   Insn 308: point = 112
   Insn 307: point = 112
   Insn 306: point = 112
   Insn 305: point = 112
   Insn 304: point = 113
   Insn 303: point = 114
   Insn 1666: point = 115
	Hard reg 0 is preferable by r578 with profit 8
   Insn 302: point = 117
   Insn 1665: point = 117
   Insn 300: point = 118
  BB 34
   Insn 294: point = 119
   Insn 293: point = 121
   Insn 288: point = 122
  BB 33
   Insn 286: point = 124
   Insn 285: point = 124
   Insn 283: point = 124
  BB 155
   Insn 1634: point = 127
   Insn 1215: point = 127
   Insn 1214: point = 129
   Insn 1211: point = 131
   Insn 1208: point = 132
   Insn 1207: point = 133
   Insn 1206: point = 133
  BB 151
   Insn 1628: point = 134
   Insn 1694: point = 134
	Hard reg 3 is preferable by r595 with profit 1
   Insn 33: point = 136
   Insn 1693: point = 137
	Hard reg 3 is preferable by r595 with profit 1
	Hard reg 6 is preferable by r595 with profit 1
   Insn 1142: point = 139
  BB 112
   Insn 1605: point = 142
   Insn 34: point = 142
  BB 111
   Insn 845: point = 145
   Insn 844: point = 145
   Insn 843: point = 146
  BB 45
   Insn 1515: point = 149
   Insn 389: point = 149
   Insn 388: point = 151
   Insn 383: point = 152
   Insn 382: point = 153
   Insn 381: point = 154
  BB 32
   Insn 274: point = 156
  BB 31
   Insn 269: point = 159
  BB 30
   Insn 267: point = 161
   Insn 266: point = 161
  BB 29
   Insn 263: point = 163
  BB 28
   Insn 261: point = 165
   Insn 260: point = 165
  BB 26
   Insn 249: point = 167
   Insn 248: point = 167
   Insn 247: point = 167
   Insn 246: point = 168
   Insn 243: point = 169
   Insn 241: point = 169
   Insn 240: point = 171
  BB 23
   Insn 216: point = 174
   Insn 215: point = 174
   Insn 214: point = 175
   Insn 213: point = 177
   Insn 212: point = 178
   Insn 210: point = 180
  BB 21
   Insn 1505: point = 183
   Insn 1389: point = 183
   Insn 1442: point = 185
   Insn 1440: point = 185
   Insn 1439: point = 186
   Insn 1437: point = 186
   Insn 1436: point = 186
   Insn 1435: point = 186
   Insn 1434: point = 186
   Insn 1433: point = 186
   Insn 191: point = 186
  BB 27
   Insn 1509: point = 189
   Insn 254: point = 189
   Insn 251: point = 191
  BB 20
   Insn 20: point = 193
   Insn 19: point = 194
   Insn 184: point = 195
   Insn 183: point = 196
  BB 18
   Insn 1503: point = 198
   Insn 18: point = 198
   Insn 167: point = 199
  BB 44
   Insn 1513: point = 200
   Insn 375: point = 200
   Insn 374: point = 202
   Insn 373: point = 203
   Insn 370: point = 205
   Insn 369: point = 206
   Insn 367: point = 207
   Insn 366: point = 208
  BB 17
   Insn 17: point = 210
   Insn 16: point = 212
  BB 14
   Insn 1501: point = 215
   Insn 1438: point = 215
   Insn 148: point = 216
   Insn 145: point = 218
   Insn 144: point = 219
   Insn 142: point = 220
  BB 3
   Insn 1499: point = 222
   Insn 75: point = 222
   Insn 74: point = 223
  BB 13
   Insn 139: point = 224
   Insn 138: point = 224
   Insn 137: point = 225
   Insn 136: point = 226
   Insn 135: point = 228
   Insn 134: point = 230
   Insn 133: point = 230
   Insn 132: point = 230
   Insn 131: point = 232
   Insn 130: point = 233
  BB 12
   Insn 127: point = 235
   Insn 126: point = 236
   Insn 1661: point = 238
   Insn 125: point = 239
   Insn 122: point = 240
   Insn 121: point = 241
   Insn 120: point = 242
   Insn 119: point = 242
   Insn 118: point = 242
   Insn 117: point = 242
   Insn 1662: point = 244
   Insn 116: point = 245
   Insn 113: point = 246
  BB 11
   Insn 110: point = 246
   Insn 109: point = 246
   Insn 108: point = 246
   Insn 107: point = 247
   Insn 1663: point = 249
  BB 10
   Insn 103: point = 251
   Insn 102: point = 251
   Insn 101: point = 251
  BB 9
   Insn 98: point = 252
   Insn 97: point = 253
  BB 8
   Insn 95: point = 254
   Insn 94: point = 254
  BB 7
   Insn 91: point = 254
   Insn 90: point = 255
  BB 6
   Insn 88: point = 256
   Insn 87: point = 256
  BB 5
   Insn 84: point = 256
  BB 4
   Insn 82: point = 256
   Insn 81: point = 256
   Insn 80: point = 256
  BB 2
   Insn 72: point = 256
   Insn 71: point = 256
   Insn 3: point = 256
  BB 16
   Insn 161: point = 258
   Insn 160: point = 259
  BB 96
   Insn 1599: point = 261
   Insn 704: point = 261
   Insn 701: point = 263
   Insn 700: point = 264
   Insn 698: point = 265
   Insn 697: point = 266
   Insn 696: point = 266
   Insn 695: point = 266
   Insn 694: point = 266
   Insn 693: point = 266
  BB 15
   Insn 158: point = 267
   Insn 155: point = 269
   Insn 154: point = 270
   Insn 152: point = 271
  BB 52
   Insn 446: point = 273
   Insn 445: point = 273
   Insn 444: point = 274
  BB 51
   Insn 442: point = 276
   Insn 441: point = 276
   Insn 440: point = 276
   Insn 439: point = 277
  BB 49
   Insn 1523: point = 278
   Insn 12: point = 278
   Insn 11: point = 279
   Insn 10: point = 280
   Insn 418: point = 281
  BB 95
   Insn 1597: point = 282
   Insn 688: point = 282
   Insn 685: point = 284
   Insn 684: point = 285
   Insn 682: point = 286
   Insn 681: point = 287
   Insn 680: point = 287
  BB 48
   Insn 1521: point = 288
   Insn 9: point = 288
   Insn 8: point = 289
   Insn 7: point = 290
   Insn 413: point = 291
  BB 46
   Insn 1517: point = 292
   Insn 6: point = 292
   Insn 5: point = 293
   Insn 4: point = 294
   Insn 395: point = 295
  BB 47
   Insn 1519: point = 296
   Insn 408: point = 296
   Insn 405: point = 298
   Insn 404: point = 299
   Insn 402: point = 300
   Insn 401: point = 301
  BB 50
   Insn 1525: point = 302
   Insn 15: point = 302
   Insn 14: point = 303
   Insn 13: point = 304
   Insn 434: point = 305
   Insn 433: point = 305
   Insn 432: point = 305
   Insn 431: point = 306
   Insn 430: point = 307
   Insn 429: point = 307
   Insn 428: point = 308
   Insn 427: point = 308
   Insn 426: point = 308
   Insn 425: point = 309
   Insn 424: point = 309
   Insn 423: point = 309
  BB 19
   Insn 180: point = 310
   Insn 177: point = 312
   Insn 176: point = 313
   Insn 174: point = 314
  BB 154
   Insn 1632: point = 316
   Insn 1180: point = 316
   Insn 1177: point = 317
   Insn 1176: point = 318
   Insn 1175: point = 318
   Insn 1174: point = 318
   Insn 1173: point = 320
   Insn 1698: point = 322
  BB 150
   Insn 1137: point = 325
   Insn 1136: point = 325
  BB 149
   Insn 1135: point = 327
   Insn 1134: point = 327
   Insn 1121: point = 327
   Insn 1120: point = 327
   Insn 1119: point = 329
   Insn 1118: point = 330
   Insn 1117: point = 331
   Insn 1116: point = 333
   Insn 1115: point = 334
   Insn 1114: point = 335
  BB 146
   Insn 1104: point = 337
   Insn 1708: point = 337
	Hard reg 2 is preferable by r603 with profit 1
   Insn 1103: point = 339
   Insn 1102: point = 339
   Insn 1101: point = 341
   Insn 1100: point = 342
   Insn 1706: point = 343
	Hard reg 39 is preferable by r602 with profit 1
   Insn 1097: point = 345
   Insn 1096: point = 346
   Insn 1095: point = 346
   Insn 1094: point = 347
   Insn 1705: point = 348
	Hard reg 39 is preferable by r602 with profit 2
   Insn 1093: point = 350
   Insn 1092: point = 351
   Insn 1707: point = 353
	Hard reg 2 is preferable by r603 with profit 2
   Insn 1091: point = 355
   Insn 1692: point = 357
	Hard reg 4 is preferable by r594 with profit 1
   Insn 1090: point = 359
   Insn 1691: point = 359
	Hard reg 4 is preferable by r594 with profit 1
	Hard reg 1 is preferable by r594 with profit 1
  BB 148
   Insn 1111: point = 362
  BB 145
   Insn 1085: point = 365
   Insn 1084: point = 365
   Insn 1083: point = 365
   Insn 1081: point = 366
  BB 143
   Insn 1625: point = 369
   Insn 30: point = 369
   Insn 1065: point = 370
   Insn 1064: point = 371
   Insn 1659: point = 373
   Insn 1063: point = 374
   Insn 1060: point = 375
   Insn 1059: point = 376
   Insn 1058: point = 376
  BB 144
   Insn 31: point = 377
   Insn 1077: point = 378
   Insn 1076: point = 379
   Insn 1075: point = 379
   Insn 1074: point = 380
  BB 142
   Insn 1055: point = 383
   Insn 1054: point = 383
  BB 118
   Insn 1607: point = 384
   Insn 886: point = 384
   Insn 885: point = 385
  BB 141
   Insn 1051: point = 386
   Insn 1050: point = 386
   Insn 29: point = 386
   Insn 1049: point = 387
   Insn 1048: point = 387
  BB 165
   Insn 1649: point = 389
   Insn 1268: point = 389
   Insn 1267: point = 390
   Insn 1265: point = 391
  BB 139
   Insn 1621: point = 393
   Insn 1033: point = 393
  BB 137
   Insn 1025: point = 395
   Insn 1024: point = 395
   Insn 1023: point = 396
   Insn 1022: point = 396
   Insn 1017: point = 397
   Insn 1016: point = 398
   Insn 1015: point = 398
   Insn 1014: point = 399
   Insn 1013: point = 399
   Insn 1012: point = 399
   Insn 1690: point = 399
	Hard reg 5 is preferable by r593 with profit 1
   Insn 1011: point = 401
   Insn 1689: point = 402
  BB 140
   Insn 1623: point = 404
   Insn 1042: point = 404
   Insn 1660: point = 406
   Insn 1041: point = 407
   Insn 1039: point = 408
   Insn 1038: point = 408
   Insn 1037: point = 408
  BB 166
   Insn 1275: point = 409
   Insn 1274: point = 409
  BB 138
   Insn 1031: point = 410
   Insn 1030: point = 410
   Insn 1029: point = 411
   Insn 1028: point = 412
   Insn 1027: point = 412
  BB 136
   Insn 1004: point = 413
   Insn 1003: point = 413
   Insn 1002: point = 414
  BB 135
   Insn 1619: point = 415
   Insn 997: point = 415
   Insn 996: point = 416
  BB 170
   Insn 1657: point = 418
   Insn 1314: point = 418
   Insn 1313: point = 419
   Insn 1311: point = 420
  BB 169
   Insn 1309: point = 422
   Insn 1308: point = 422
   Insn 1307: point = 423
   Insn 1306: point = 424
   Insn 1305: point = 424
  BB 168
   Insn 1655: point = 425
   Insn 28: point = 425
   Insn 1295: point = 425
   Insn 1703: point = 426
	Hard reg 0 is preferable by r601 with profit 1
   Insn 1293: point = 428
   Insn 1702: point = 429
   Insn 1291: point = 430
   Insn 1288: point = 431
   Insn 1287: point = 432
   Insn 1285: point = 433
  BB 133
   Insn 1617: point = 435
  BB 164
   Insn 1647: point = 436
  BB 163
   Insn 1258: point = 437
   Insn 1257: point = 437
   Insn 1701: point = 438
   Insn 1252: point = 439
   Insn 1251: point = 439
   Insn 1700: point = 440
	Hard reg 1 is preferable by r599 with profit 1
   Insn 1249: point = 442
   Insn 1699: point = 443
   Insn 1247: point = 444
   Insn 1246: point = 445
   Insn 1245: point = 446
   Insn 1243: point = 447
  BB 132
   Insn 987: point = 449
   Insn 986: point = 449
  BB 131
   Insn 984: point = 450
   Insn 983: point = 450
   Insn 981: point = 450
   Insn 980: point = 451
   Insn 979: point = 451
  BB 130
   Insn 27: point = 452
  BB 129
   Insn 974: point = 454
   Insn 973: point = 454
   Insn 1687: point = 454
   Insn 971: point = 456
   Insn 1688: point = 457
   Insn 1686: point = 458
	Hard reg 1 is preferable by r591 with profit 1
   Insn 969: point = 460
  BB 128
   Insn 966: point = 461
   Insn 965: point = 461
   Insn 1685: point = 463
	Hard reg 1 is preferable by r590 with profit 1
   Insn 960: point = 465
   Insn 1684: point = 465
   Insn 958: point = 466
   Insn 957: point = 467
   Insn 956: point = 467
   Insn 955: point = 469
  BB 124
   Insn 941: point = 472
   Insn 940: point = 472
   Insn 939: point = 472
   Insn 936: point = 473
   Insn 935: point = 474
   Insn 934: point = 474
   Insn 933: point = 475
   Insn 932: point = 476
  BB 122
   Insn 1609: point = 479
   Insn 922: point = 479
   Insn 921: point = 479
   Insn 1683: point = 481
	Hard reg 0 is preferable by r589 with profit 1
   Insn 920: point = 483
   Insn 1682: point = 483
  BB 123
   Insn 26: point = 485
   Insn 927: point = 487
  BB 121
   Insn 918: point = 488
   Insn 1681: point = 488
	Hard reg 0 is preferable by r588 with profit 1
   Insn 917: point = 490
   Insn 1680: point = 490
   Insn 914: point = 491
  BB 120
   Insn 912: point = 493
   Insn 911: point = 493
   Insn 1679: point = 493
   Insn 908: point = 495
   Insn 1678: point = 495
	Hard reg 0 is preferable by r587 with profit 1
   Insn 907: point = 497
  BB 119
   Insn 897: point = 499
   Insn 896: point = 499
   Insn 1677: point = 501
	Hard reg 1 is preferable by r586 with profit 1
   Insn 892: point = 503
   Insn 1676: point = 503
  BB 117
   Insn 883: point = 505
   Insn 882: point = 505
  BB 116
   Insn 879: point = 506
  BB 115
   Insn 877: point = 508
   Insn 876: point = 508
   Insn 870: point = 508
   Insn 869: point = 508
   Insn 868: point = 509
  BB 114
   Insn 25: point = 511
  BB 113
   Insn 859: point = 513
   Insn 858: point = 513
   Insn 1675: point = 515
	Hard reg 6 is preferable by r585 with profit 1
   Insn 851: point = 517
   Insn 1674: point = 517
  BB 110
   Insn 841: point = 519
   Insn 840: point = 519
  BB 108
   Insn 833: point = 520
   Insn 832: point = 520
   Insn 831: point = 521
   Insn 828: point = 523
  BB 107
   Insn 1603: point = 525
   Insn 819: point = 525
   Insn 818: point = 525
  BB 106
   Insn 816: point = 526
   Insn 815: point = 526
   Insn 813: point = 526
  BB 105
   Insn 808: point = 528
   Insn 807: point = 528
   Insn 1235: point = 528
   Insn 803: point = 529
   Insn 802: point = 531
   Insn 801: point = 533
  BB 104
   Insn 796: point = 536
   Insn 795: point = 536
   Insn 794: point = 537
   Insn 793: point = 539
   Insn 792: point = 541
   Insn 791: point = 542
   Insn 787: point = 543
   Insn 782: point = 544
  BB 103
   Insn 774: point = 547
   Insn 773: point = 547
   Insn 772: point = 548
   Insn 771: point = 550
   Insn 770: point = 552
   Insn 769: point = 553
  BB 102
   Insn 760: point = 555
   Insn 759: point = 555
  BB 101
   Insn 757: point = 556
   Insn 756: point = 556
   Insn 755: point = 556
   Insn 754: point = 557
   Insn 748: point = 558
   Insn 747: point = 559
   Insn 746: point = 559
   Insn 745: point = 559
   Insn 743: point = 561
   Insn 1673: point = 563
  BB 100
   Insn 741: point = 566
   Insn 740: point = 566
   Insn 739: point = 566
   Insn 738: point = 567
   Insn 737: point = 568
   Insn 736: point = 570
  BB 98
   Insn 1601: point = 572
   Insn 723: point = 572
  BB 99
   Insn 733: point = 574
   Insn 732: point = 574
   Insn 731: point = 575
   Insn 730: point = 576
   Insn 729: point = 577
   Insn 728: point = 577
  BB 97
   Insn 721: point = 579
   Insn 720: point = 579
   Insn 719: point = 579
   Insn 718: point = 580
   Insn 717: point = 581
   Insn 715: point = 582
   Insn 714: point = 583
   Insn 713: point = 584
   Insn 1672: point = 585
   Insn 711: point = 587
   Insn 1671: point = 589
	Hard reg 43 is preferable by r582 with profit 1
   Insn 710: point = 591
   Insn 1670: point = 591
  BB 22
   Insn 204: point = 593
   Insn 203: point = 595
  BB 25
   Insn 1507: point = 597
   Insn 1390: point = 597
   Insn 229: point = 599
  BB 24
   Insn 225: point = 602
   Insn 224: point = 602
   Insn 221: point = 602
   Insn 219: point = 604
 r87: [605..606] [593..602] [525..529] [310..317] [210..212] [174..200] [167..169]
 r88: [566..606] [327..559] [310..318] [210..210] [145..202] [142..142] [124..134] [79..122]
 r89: [566..606] [528..528] [327..526] [310..316] [145..198] [79..131]
 r90: [124..124] [101..119] [81..84]
 r92: [67..69] [58..58] [52..53] [41..43] [3..38]
 r99: [248..251]
 r102: [246..247] [229..236]
 r103: [246..246] [231..235]
 r107: [240..242]
 r109: [240..241]
 r136: [307..308]
 r137: [305..306]
 r147: [564..585] [323..524]
 r152: [566..580] [461..524]
 r154: [574..577] [569..572]
 r156: [566..570] [508..524]
 r157: [566..568] [522..524]
 r158: [566..567] [519..524] [143..148]
 r160: [130..132]
 r168: [273..276]
 r176: [53..57] [29..36]
 r186: [526..556] [156..156] [149..149] [125..127]
 r193: [547..558] [536..544]
 r198: [59..66]
 r200: [61..64]
 r202: [76..78]
 r203: [73..75]
 r204: [70..72]
 r212: [415..452]
 r213: [508..523] [145..148] [99..100]
 r224: [367..513]
 r226: [508..509]
 r227: [508..511]
 r230: [499..499] [459..461]
 r232: [474..497]
 r237: [488..491] [480..484]
 r238: [486..488]
 r240: [485..485] [477..479]
 r242: [468..473]
 r244: [566..566] [496..524] [461..467] [147..148]
 r245: [566..579] [513..524] [472..506] [454..466] [413..414] [401..404] [384..385] [0..1]
 r251: [439..450]
 r268: [422..423]
 r270: [395..413]
 r274: [395..397]
 r275: [415..416] [395..396] [386..393] [377..378] [365..375] [360..361]
 r277: [410..411]
 r280: [386..387] [377..379] [363..370] [349..361] [342..343]
 r287: [354..366] [335..337]
 r289: [325..365] [138..141]
 r297: [342..345]
 r299: [362..362] [334..339]
 r306: [319..327] [96..98]
 r307: [104..107]
 r308: [386..386] [377..377] [325..369]
 r309: [437..454] [395..414]
 r311: [101..106]
 r313: [593..606] [161..194]
 r314: [593..606] [159..196]
 r315: [593..606] [165..193]
 r316: [593..606] [163..195]
 r318: [258..259] [211..230]
 r320: [310..314] [258..258] [224..224] [210..222] [193..208] [187..191]
 r321: [593..593] [310..310] [302..304] [296..296] [292..294] [288..290] [282..282] [278..280] [267..267] [258..261] [210..216] [181..203] [167..167]
 r327: [101..105]
 r341: [302..302] [296..300] [292..292] [288..288] [282..286] [278..278] [267..271] [258..265] [213..220]
 r342: [201..207]
 r343: [310..312] [302..303] [296..298] [292..293] [288..289] [282..284] [278..279] [267..269] [258..263] [210..218] [193..205] [185..189]
 r347: [436..445] [425..431] [415..418] [386..389] [377..380] [325..371] [140..141]
 r349: [254..255]
 r350: [252..253]
 r352: [248..249]
 r354: [243..244]
 r355: [243..245]
 r357: [237..238]
 r358: [237..239]
 r359: [232..233]
 r360: [227..228]
 r361: [225..226]
 r363: [217..219]
 r367: [268..270]
 r371: [311..313]
 r376: [184..186]
 r378: [594..595]
 r380: [179..180]
 r382: [172..178]
 r383: [176..177]
 r384: [174..175]
 r386: [603..604]
 r388: [598..599]
 r393: [170..171]
 r401: [120..121]
 r403: [114..115]
 r404: [112..113]
 r406: [109..110]
 r407: [79..80]
 r411: [204..206]
 r414: [153..154]
 r416: [150..151]
 r419: [297..299]
 r422: [273..274]
 r423: [62..63]
 r428: [46..49]
 r431: [44..45]
 r432: [55..56]
 r433: [53..54] [29..36]
 r434: [32..33]
 r436: [39..40]
 r438: [283..285]
 r442: [262..264]
 r445: [588..589]
 r446: [583..584]
 r450: [575..576]
 r451: [560..561]
 r459: [551..552]
 r460: [549..550]
 r461: [547..548]
 r468: [540..541]
 r469: [538..539]
 r470: [536..537]
 r473: [532..533]
 r474: [530..531]
 r476: [520..521]
 r477: [145..146]
 r478: [514..515]
 r479: [500..501]
 r481: [470..493]
 r482: [480..481]
 r483: [475..476]
 r484: [468..469]
 r485: [462..463]
 r488: [398..399]
 r490: [405..406]
 r491: [405..407]
 r493: [372..373]
 r494: [372..374]
 r498: [356..357]
 r499: [352..355]
 r500: [347..351]
 r501: [346..350]
 r502: [340..341]
 r503: [332..333]
 r504: [330..331]
 r505: [328..329]
 r506: [136..139]
 r508: [89..93]
 r511: [89..90]
 r512: [87..88]
 r513: [85..86]
 r514: [319..320]
 r516: [128..129]
 r521: [442..444]
 r523: [439..440]
 r531: [428..430]
 r533: [425..426]
 r538: [190..192] [157..168]
 r539: [600..606] [593..597] [174..183]
 r540: [566..582] [505..524] [436..447] [425..433] [415..420] [381..391]
 r541: [566..581] [505..524] [436..446] [425..432] [415..419] [381..390]
 r542: [547..553] [534..542]
 r543: [545..557] [536..543]
 r564: [258..606] [79..215]
 r576: [256..257]
 r577: [2..2]
 r578: [116..117]
 r579: [50..51]
 r580: [47..48]
 r581: [34..35]
 r582: [590..591]
 r583: [586..587]
 r584: [562..563]
 r585: [516..517]
 r586: [502..503]
 r587: [494..495]
 r588: [489..490]
 r589: [482..483]
 r590: [464..465]
 r591: [455..458]
 r592: [456..457]
 r593: [400..402]
 r594: [358..359]
 r595: [135..137]
 r596: [94..95]
 r597: [91..92]
 r598: [321..322]
 r599: [441..443]
 r600: [437..438]
 r601: [427..429]
 r602: [344..348]
 r603: [338..353]
Compressing live ranges: from 607 to 348 - 57%
Ranges after the compression:
 r87: [346..347] [337..343] [298..301] [171..173] [112..114] [92..107] [88..89]
 r88: [323..347] [179..317] [171..173] [112..112] [76..109] [33..69]
 r89: [323..347] [179..300] [171..173] [77..107] [33..69]
 r90: [63..63] [51..60] [35..36]
 r92: [25..26] [22..22] [17..18] [9..10] [3..6]
 r99: [136..137]
 r102: [134..135] [124..127]
 r103: [134..134] [126..127]
 r107: [130..131]
 r109: [130..131]
 r136: [169..170]
 r137: [167..168]
 r147: [322..330] [178..297]
 r152: [323..328] [254..297]
 r154: [325..328]
 r156: [323..326] [287..297]
 r157: [323..324] [296..297]
 r158: [323..324] [294..297] [77..80]
 r160: [68..69]
 r168: [151..152]
 r176: [18..21] [3..6]
 r186: [299..317] [86..86] [81..81] [64..65]
 r193: [306..317]
 r198: [23..24]
 r200: [23..24]
 r202: [31..32]
 r203: [29..30]
 r204: [27..28]
 r212: [236..249]
 r213: [287..297] [77..80] [49..50]
 r224: [214..289]
 r226: [287..288]
 r227: [287..288]
 r230: [280..280] [253..254]
 r232: [263..279]
 r237: [273..275] [267..270]
 r238: [272..273]
 r240: [271..271] [265..266]
 r242: [259..262]
 r244: [323..323] [278..297] [254..258] [79..80]
 r245: [323..328] [289..297] [261..286] [250..258] [234..235] [228..229] [220..221] [0..1]
 r251: [246..249]
 r268: [238..239]
 r270: [224..234]
 r274: [224..225]
 r275: [236..237] [222..225] [212..219] [208..209]
 r277: [232..233]
 r280: [222..223] [218..219] [211..215] [198..209] [192..193]
 r287: [202..213] [186..187]
 r289: [178..212] [72..75]
 r297: [192..195]
 r299: [210..210] [186..189]
 r306: [174..179] [47..48]
 r307: [51..52]
 r308: [222..222] [218..218] [178..215]
 r309: [244..250] [224..235]
 r311: [51..52]
 r313: [337..347] [87..107]
 r314: [337..347] [87..107]
 r315: [337..347] [87..106]
 r316: [337..347] [87..107]
 r318: [144..145] [113..125]
 r320: [171..173] [144..144] [102..119]
 r321: [337..337] [171..171] [165..166] [158..162] [153..155] [148..148] [144..145] [112..116] [98..109] [88..88]
 r327: [51..52]
 r341: [162..165] [160..160] [155..158] [153..153] [144..150] [115..118]
 r342: [108..111]
 r343: [171..173] [153..166] [144..150] [106..118] [100..103]
 r347: [240..249] [236..237] [222..223] [218..219] [178..215] [74..75]
 r349: [140..141]
 r350: [138..139]
 r352: [136..137]
 r354: [132..133]
 r355: [132..133]
 r357: [128..129]
 r358: [128..129]
 r359: [126..127]
 r360: [122..123]
 r361: [120..121]
 r363: [117..118]
 r367: [149..150]
 r371: [172..173]
 r376: [100..101]
 r378: [338..339]
 r380: [96..97]
 r382: [92..95]
 r383: [94..95]
 r384: [92..93]
 r386: [344..345]
 r388: [340..341]
 r393: [90..91]
 r401: [61..62]
 r403: [57..58]
 r404: [55..56]
 r406: [53..54]
 r407: [33..34]
 r411: [110..111]
 r414: [84..85]
 r416: [82..83]
 r419: [163..164]
 r422: [151..152]
 r423: [23..24]
 r428: [13..14]
 r431: [11..12]
 r432: [20..21]
 r433: [18..19] [3..6]
 r434: [3..4]
 r436: [7..8]
 r438: [156..157]
 r442: [146..147]
 r445: [333..334]
 r446: [329..330]
 r450: [327..328]
 r451: [318..319]
 r459: [316..317]
 r460: [314..315]
 r461: [312..313]
 r468: [310..311]
 r469: [308..309]
 r470: [306..307]
 r473: [304..305]
 r474: [302..303]
 r476: [294..295]
 r477: [77..78]
 r478: [290..291]
 r479: [281..282]
 r481: [261..275]
 r482: [267..268]
 r483: [263..264]
 r484: [259..260]
 r485: [255..256]
 r488: [226..227]
 r490: [230..231]
 r491: [230..231]
 r493: [216..217]
 r494: [216..217]
 r498: [204..205]
 r499: [200..203]
 r500: [196..199]
 r501: [196..199]
 r502: [190..191]
 r503: [184..185]
 r504: [182..183]
 r505: [180..181]
 r506: [70..73]
 r508: [41..44]
 r511: [41..42]
 r512: [39..40]
 r513: [37..38]
 r514: [174..175]
 r516: [66..67]
 r521: [248..249]
 r523: [246..247]
 r531: [242..243]
 r533: [240..241]
 r538: [104..105] [87..89]
 r539: [342..347] [337..339] [92..99]
 r540: [323..328] [285..297] [240..249] [236..237] [220..223]
 r541: [323..328] [285..297] [240..249] [236..237] [220..223]
 r542: [306..317]
 r543: [306..317]
 r564: [144..347] [33..116]
 r576: [142..143]
 r577: [2..2]
 r578: [59..60]
 r579: [15..16]
 r580: [13..14]
 r581: [5..6]
 r582: [335..336]
 r583: [331..332]
 r584: [320..321]
 r585: [292..293]
 r586: [283..284]
 r587: [276..277]
 r588: [274..275]
 r589: [269..270]
 r590: [257..258]
 r591: [251..252]
 r592: [251..252]
 r593: [228..229]
 r594: [206..207]
 r595: [70..71]
 r596: [45..46]
 r597: [43..44]
 r598: [176..177]
 r599: [248..249]
 r600: [244..245]
 r601: [242..243]
 r602: [194..197]
 r603: [188..201]

********** Assignment #1: **********

	 Assigning to 578 (cl=GENERAL_REGS, orig=403, freq=24, tfirst=578, tfreq=24)...
	   Assign 0 to reload r578 (freq=24)
	 Assigning to 576 (cl=INDEX_REGS, orig=576, freq=6, tfirst=576, tfreq=6)...
	   Assign 0 to reload r576 (freq=6)
	 Assigning to 577 (cl=INDEX_REGS, orig=577, freq=6, tfirst=577, tfreq=6)...
	   Assign 5 to reload r577 (freq=6)
	 Assigning to 582 (cl=GENERAL_REGS, orig=445, freq=3, tfirst=582, tfreq=3)...
	   Assign 43 to reload r582 (freq=3)
	 Assigning to 585 (cl=GENERAL_REGS, orig=478, freq=3, tfirst=585, tfreq=3)...
	   Assign 6 to reload r585 (freq=3)
	 Assigning to 586 (cl=GENERAL_REGS, orig=479, freq=3, tfirst=586, tfreq=3)...
	   Assign 1 to reload r586 (freq=3)
	 Assigning to 587 (cl=GENERAL_REGS, orig=481, freq=3, tfirst=587, tfreq=3)...
	   Assign 0 to reload r587 (freq=3)
	 Assigning to 588 (cl=GENERAL_REGS, orig=238, freq=3, tfirst=588, tfreq=3)...
	   Assign 0 to reload r588 (freq=3)
	 Assigning to 589 (cl=GENERAL_REGS, orig=482, freq=3, tfirst=589, tfreq=3)...
	   Assign 0 to reload r589 (freq=3)
	 Assigning to 590 (cl=GENERAL_REGS, orig=485, freq=3, tfirst=590, tfreq=3)...
	   Assign 1 to reload r590 (freq=3)
	 Assigning to 591 (cl=GENERAL_REGS, orig=309, freq=3, tfirst=591, tfreq=3)...
	   Assign 1 to reload r591 (freq=3)
	 Assigning to 593 (cl=GENERAL_REGS, orig=488, freq=3, tfirst=593, tfreq=3)...
	   Assign 5 to reload r593 (freq=3)
	 Assigning to 594 (cl=GENERAL_REGS, orig=498, freq=3, tfirst=594, tfreq=3)...
	   Assign 4 to reload r594 (freq=3)
	 Assigning to 595 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=595, tfreq=3)...
	   Assign 3 to reload r595 (freq=3)
	 Assigning to 597 (cl=GENERAL_REGS, orig=511, freq=3, tfirst=597, tfreq=3)...
	   Assign 1 to reload r597 (freq=3)
	 Assigning to 599 (cl=GENERAL_REGS, orig=523, freq=3, tfirst=599, tfreq=3)...
	   Assign 5 to reload r599 (freq=3)
	 Assigning to 601 (cl=GENERAL_REGS, orig=533, freq=3, tfirst=601, tfreq=3)...
	   Assign 5 to reload r601 (freq=3)
	 Assigning to 579 (cl=GENERAL_REGS, orig=579, freq=2, tfirst=579, tfreq=2)...
	   Assign 0 to reload r579 (freq=2)
	 Assigning to 580 (cl=INDEX_REGS, orig=580, freq=2, tfirst=580, tfreq=2)...
	   Assign 1 to reload r580 (freq=2)
	 Assigning to 581 (cl=GENERAL_REGS, orig=581, freq=2, tfirst=581, tfreq=2)...
	   Assign 0 to reload r581 (freq=2)
	 Assigning to 583 (cl=GENERAL_REGS, orig=147, freq=2, tfirst=583, tfreq=2)...
	   Assign 0 to reload r583 (freq=2)
	 Assigning to 584 (cl=GENERAL_REGS, orig=147, freq=2, tfirst=584, tfreq=2)...
	   Assign 0 to optional reload r584 (freq=2)
	 Assigning to 592 (cl=INDEX_REGS, orig=592, freq=2, tfirst=592, tfreq=2)...
	   Assign 0 to reload r592 (freq=2)
	 Assigning to 596 (cl=GENERAL_REGS, orig=596, freq=2, tfirst=596, tfreq=2)...
	   Assign 0 to reload r596 (freq=2)
	 Assigning to 598 (cl=GENERAL_REGS, orig=147, freq=2, tfirst=598, tfreq=2)...
	   Assign 5 to optional reload r598 (freq=2)
	 Assigning to 600 (cl=GENERAL_REGS, orig=309, freq=2, tfirst=600, tfreq=2)...
	   Assign 0 to optional reload r600 (freq=2)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

	     Keep split r602 (orig=r280)
	     Keep split r603 (orig=r287)
Split 2 out of 2 (100.00%)
Remove optional reload reg 584
  Restoring original insn:
  743: r451:DI=sign_extend(r147:SI)
      REG_DEAD r147:SI
  Deleting move 1673
 1673: r584:SI=r147:SI
      REG_DEAD r147:SI
deleting insn with uid = 1673.
Remove optional reload reg 598
  Restoring original insn:
 1173: r514:DI=sign_extend(r147:SI)
      REG_DEAD r147:SI
  Deleting move 1698
 1698: r598:SI=r147:SI
      REG_DEAD r147:SI
deleting insn with uid = 1698.
Remove optional reload reg 600
  Restoring original insn:
 1257: flags:CC=cmp(r212:DI,r309:DI)
      REG_DEAD r309:DI
  Deleting move 1701
 1701: r600:DI=r309:DI
deleting insn with uid = 1701.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1257:  (0) r  (1) rm {*cmpdi_1}
      Creating newreg=604 from oldreg=309, assigning class GENERAL_REGS to r604
      Making reload reg 604 for reg 309 optional
 1257: flags:CC=cmp(r212:DI,r604:DI)
      REG_DEAD r309:DI
    Inserting insn reload before:
 1709: r604:DI=r309:DI

            0 Non pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=2,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1709:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1173:  (0) r  (1) rm {*extendsidi2_rex64}
      Creating newreg=605 from oldreg=147, assigning class GENERAL_REGS to r605
      Making reload reg 605 for reg 147 optional
 1173: r514:DI=sign_extend(r605:SI)
      REG_DEAD r147:SI
    Inserting insn reload before:
 1710: r605:SI=r147:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1710:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) rm {*extendsidi2_rex64}
      Creating newreg=606 from oldreg=147, assigning class GENERAL_REGS to r606
      Making reload reg 606 for reg 147 optional
  743: r451:DI=sign_extend(r606:SI)
      REG_DEAD r147:SI
    Inserting insn reload before:
 1711: r606:SI=r147:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1711:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1707:  (0) m  (1) re {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1708:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1705:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1706:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #4: **********

  BB 109
   Insn 836: point = 0
   Insn 835: point = 0
  BB 127
   Insn 951: point = 0
   Insn 950: point = 0
  BB 125
   Insn 1613: point = 0
  BB 126
   Insn 947: point = 0
  BB 134
   Insn 993: point = 2
   Insn 992: point = 2
  BB 167
   Insn 1653: point = 2
  BB 147
   Insn 1107: point = 2
   Insn 1106: point = 2
  BB 156
   Insn 1221: point = 2
   Insn 1220: point = 2
  BB 171
   Insn 1322: point = 2
  BB 162
   Insn 1644: point = 2
  BB 172
   Insn 1325: point = 2
  BB 161
   Insn 1321: point = 2
   Insn 1320: point = 2
   Insn 1319: point = 3
  BB 159
   Insn 1640: point = 5
   Insn 68: point = 5
  BB 158
   Insn 1638: point = 6
   Insn 43: point = 6
  BB 93
   Insn 1593: point = 7
   Insn 66: point = 7
  BB 92
   Insn 1591: point = 8
   Insn 65: point = 8
  BB 91
   Insn 1589: point = 9
   Insn 64: point = 9
  BB 90
   Insn 1587: point = 10
   Insn 63: point = 10
  BB 89
   Insn 1585: point = 11
   Insn 62: point = 11
  BB 88
   Insn 1583: point = 12
   Insn 61: point = 12
  BB 87
   Insn 1581: point = 13
   Insn 60: point = 13
  BB 86
   Insn 1579: point = 14
   Insn 59: point = 14
  BB 85
   Insn 1577: point = 15
   Insn 58: point = 15
  BB 84
   Insn 1575: point = 16
   Insn 57: point = 16
  BB 83
   Insn 1573: point = 17
   Insn 56: point = 17
  BB 82
   Insn 1571: point = 18
   Insn 55: point = 18
  BB 81
   Insn 1569: point = 19
   Insn 54: point = 19
  BB 80
   Insn 1567: point = 20
   Insn 53: point = 20
  BB 79
   Insn 1565: point = 21
   Insn 52: point = 21
  BB 78
   Insn 1563: point = 22
   Insn 51: point = 22
  BB 77
   Insn 1561: point = 23
   Insn 50: point = 23
  BB 76
   Insn 1559: point = 24
   Insn 49: point = 24
  BB 75
   Insn 1557: point = 25
   Insn 48: point = 25
  BB 74
   Insn 1555: point = 26
   Insn 47: point = 26
  BB 73
   Insn 1553: point = 27
   Insn 46: point = 27
  BB 72
   Insn 1551: point = 28
   Insn 45: point = 28
  BB 71
   Insn 1549: point = 29
   Insn 581: point = 29
   Insn 1704: point = 30
   Insn 578: point = 31
   Insn 577: point = 31
   Insn 576: point = 32
   Insn 575: point = 33
   Insn 1669: point = 35
  BB 160
   Insn 67: point = 37
  BB 53
   Insn 1529: point = 38
  BB 94
   Insn 1595: point = 38
   Insn 675: point = 38
   Insn 674: point = 40
  BB 157
   Insn 1636: point = 41
   Insn 42: point = 41
  BB 69
   Insn 1547: point = 42
   Insn 40: point = 42
   Insn 557: point = 43
   Insn 556: point = 43
   Insn 555: point = 43
   Insn 554: point = 43
   Insn 553: point = 43
  BB 68
   Insn 1545: point = 43
   Insn 39: point = 43
   Insn 547: point = 44
   Insn 546: point = 45
   Insn 544: point = 46
   Insn 543: point = 46
   Insn 542: point = 46
   Insn 541: point = 47
   Insn 540: point = 47
	Hard reg 1 is preferable by r580 with profit 1
   Insn 1668: point = 48
   Insn 539: point = 49
   Insn 1667: point = 51
  BB 61
   Insn 1537: point = 52
   Insn 35: point = 52
  BB 70
   Insn 570: point = 53
   Insn 569: point = 53
   Insn 38: point = 53
   Insn 568: point = 54
   Insn 566: point = 54
   Insn 565: point = 55
   Insn 564: point = 55
   Insn 563: point = 56
   Insn 562: point = 57
  BB 56
   Insn 1531: point = 58
   Insn 471: point = 58
  BB 55
   Insn 468: point = 61
   Insn 467: point = 62
   Insn 466: point = 63
   Insn 465: point = 64
   Insn 464: point = 65
   Insn 463: point = 65
   Insn 462: point = 66
   Insn 461: point = 66
   Insn 460: point = 66
  BB 54
   Insn 458: point = 66
   Insn 457: point = 66
   Insn 456: point = 66
   Insn 455: point = 66
   Insn 454: point = 67
   Insn 453: point = 67
  BB 58
   Insn 1533: point = 67
   Insn 37: point = 67
  BB 43
   Insn 1511: point = 68
   Insn 44: point = 68
  BB 60
   Insn 1535: point = 69
   Insn 36: point = 69
  BB 67
   Insn 1543: point = 70
  BB 66
   Insn 531: point = 70
   Insn 530: point = 70
  BB 65
   Insn 528: point = 72
   Insn 527: point = 72
   Insn 526: point = 72
   Insn 524: point = 73
   Insn 523: point = 73
   Insn 522: point = 73
   Insn 521: point = 73
   Insn 520: point = 73
  BB 64
   Insn 1540: point = 73
  BB 63
   Insn 514: point = 73
   Insn 513: point = 73
  BB 62
   Insn 510: point = 75
   Insn 509: point = 75
   Insn 507: point = 75
   Insn 505: point = 76
   Insn 504: point = 76
   Insn 503: point = 76
   Insn 502: point = 76
   Insn 501: point = 76
  BB 59
   Insn 491: point = 76
   Insn 490: point = 76
  BB 57
   Insn 484: point = 78
   Insn 483: point = 78
   Insn 482: point = 78
   Insn 480: point = 79
   Insn 479: point = 79
   Insn 478: point = 79
   Insn 477: point = 79
   Insn 476: point = 79
  BB 42
   Insn 355: point = 79
   Insn 352: point = 80
  BB 41
   Insn 351: point = 83
   Insn 350: point = 83
  BB 153
   Insn 1630: point = 84
   Insn 1167: point = 84
   Insn 1166: point = 86
   Insn 1165: point = 88
   Insn 1697: point = 90
	Hard reg 1 is preferable by r597 with profit 1
   Insn 1164: point = 92
   Insn 1696: point = 92
   Insn 1163: point = 93
   Insn 1695: point = 95
   Insn 1161: point = 96
  BB 152
   Insn 32: point = 98
  BB 40
   Insn 342: point = 101
   Insn 341: point = 101
   Insn 340: point = 101
  BB 39
   Insn 334: point = 102
  BB 38
   Insn 332: point = 103
   Insn 331: point = 103
  BB 37
   Insn 319: point = 104
   Insn 318: point = 104
   Insn 328: point = 105
   Insn 326: point = 106
   Insn 317: point = 107
  BB 36
   Insn 314: point = 109
   Insn 313: point = 109
   Insn 312: point = 110
  BB 35
   Insn 309: point = 112
   Insn 308: point = 112
   Insn 307: point = 112
   Insn 306: point = 112
   Insn 305: point = 112
   Insn 304: point = 113
   Insn 303: point = 114
   Insn 1666: point = 115
	Hard reg 0 is preferable by r578 with profit 8
   Insn 302: point = 117
   Insn 1665: point = 117
   Insn 300: point = 118
  BB 34
   Insn 294: point = 119
   Insn 293: point = 121
   Insn 288: point = 122
  BB 33
   Insn 286: point = 124
   Insn 285: point = 124
   Insn 283: point = 124
  BB 155
   Insn 1634: point = 127
   Insn 1215: point = 127
   Insn 1214: point = 129
   Insn 1211: point = 131
   Insn 1208: point = 132
   Insn 1207: point = 133
   Insn 1206: point = 133
  BB 151
   Insn 1628: point = 134
   Insn 1694: point = 134
	Hard reg 3 is preferable by r595 with profit 1
   Insn 33: point = 136
   Insn 1693: point = 137
	Hard reg 3 is preferable by r595 with profit 1
	Hard reg 6 is preferable by r595 with profit 1
   Insn 1142: point = 139
  BB 112
   Insn 1605: point = 142
   Insn 34: point = 142
  BB 111
   Insn 845: point = 145
   Insn 844: point = 145
   Insn 843: point = 146
  BB 45
   Insn 1515: point = 149
   Insn 389: point = 149
   Insn 388: point = 151
   Insn 383: point = 152
   Insn 382: point = 153
   Insn 381: point = 154
  BB 32
   Insn 274: point = 156
  BB 31
   Insn 269: point = 159
  BB 30
   Insn 267: point = 161
   Insn 266: point = 161
  BB 29
   Insn 263: point = 163
  BB 28
   Insn 261: point = 165
   Insn 260: point = 165
  BB 26
   Insn 249: point = 167
   Insn 248: point = 167
   Insn 247: point = 167
   Insn 246: point = 168
   Insn 243: point = 169
   Insn 241: point = 169
   Insn 240: point = 171
  BB 23
   Insn 216: point = 174
   Insn 215: point = 174
   Insn 214: point = 175
   Insn 213: point = 177
   Insn 212: point = 178
   Insn 210: point = 180
  BB 21
   Insn 1505: point = 183
   Insn 1389: point = 183
   Insn 1442: point = 185
   Insn 1440: point = 185
   Insn 1439: point = 186
   Insn 1437: point = 186
   Insn 1436: point = 186
   Insn 1435: point = 186
   Insn 1434: point = 186
   Insn 1433: point = 186
   Insn 191: point = 186
  BB 27
   Insn 1509: point = 189
   Insn 254: point = 189
   Insn 251: point = 191
  BB 20
   Insn 20: point = 193
   Insn 19: point = 194
   Insn 184: point = 195
   Insn 183: point = 196
  BB 18
   Insn 1503: point = 198
   Insn 18: point = 198
   Insn 167: point = 199
  BB 44
   Insn 1513: point = 200
   Insn 375: point = 200
   Insn 374: point = 202
   Insn 373: point = 203
   Insn 370: point = 205
   Insn 369: point = 206
   Insn 367: point = 207
   Insn 366: point = 208
  BB 17
   Insn 17: point = 210
   Insn 16: point = 212
  BB 14
   Insn 1501: point = 215
   Insn 1438: point = 215
   Insn 148: point = 216
   Insn 145: point = 218
   Insn 144: point = 219
   Insn 142: point = 220
  BB 3
   Insn 1499: point = 222
   Insn 75: point = 222
   Insn 74: point = 223
  BB 13
   Insn 139: point = 224
   Insn 138: point = 224
   Insn 137: point = 225
   Insn 136: point = 226
   Insn 135: point = 228
   Insn 134: point = 230
   Insn 133: point = 230
   Insn 132: point = 230
   Insn 131: point = 232
   Insn 130: point = 233
  BB 12
   Insn 127: point = 235
   Insn 126: point = 236
   Insn 1661: point = 238
   Insn 125: point = 239
   Insn 122: point = 240
   Insn 121: point = 241
   Insn 120: point = 242
   Insn 119: point = 242
   Insn 118: point = 242
   Insn 117: point = 242
   Insn 1662: point = 244
   Insn 116: point = 245
   Insn 113: point = 246
  BB 11
   Insn 110: point = 246
   Insn 109: point = 246
   Insn 108: point = 246
   Insn 107: point = 247
   Insn 1663: point = 249
  BB 10
   Insn 103: point = 251
   Insn 102: point = 251
   Insn 101: point = 251
  BB 9
   Insn 98: point = 252
   Insn 97: point = 253
  BB 8
   Insn 95: point = 254
   Insn 94: point = 254
  BB 7
   Insn 91: point = 254
   Insn 90: point = 255
  BB 6
   Insn 88: point = 256
   Insn 87: point = 256
  BB 5
   Insn 84: point = 256
  BB 4
   Insn 82: point = 256
   Insn 81: point = 256
   Insn 80: point = 256
  BB 2
   Insn 72: point = 256
   Insn 71: point = 256
   Insn 3: point = 256
  BB 16
   Insn 161: point = 258
   Insn 160: point = 259
  BB 96
   Insn 1599: point = 261
   Insn 704: point = 261
   Insn 701: point = 263
   Insn 700: point = 264
   Insn 698: point = 265
   Insn 697: point = 266
   Insn 696: point = 266
   Insn 695: point = 266
   Insn 694: point = 266
   Insn 693: point = 266
  BB 15
   Insn 158: point = 267
   Insn 155: point = 269
   Insn 154: point = 270
   Insn 152: point = 271
  BB 52
   Insn 446: point = 273
   Insn 445: point = 273
   Insn 444: point = 274
  BB 51
   Insn 442: point = 276
   Insn 441: point = 276
   Insn 440: point = 276
   Insn 439: point = 277
  BB 49
   Insn 1523: point = 278
   Insn 12: point = 278
   Insn 11: point = 279
   Insn 10: point = 280
   Insn 418: point = 281
  BB 95
   Insn 1597: point = 282
   Insn 688: point = 282
   Insn 685: point = 284
   Insn 684: point = 285
   Insn 682: point = 286
   Insn 681: point = 287
   Insn 680: point = 287
  BB 48
   Insn 1521: point = 288
   Insn 9: point = 288
   Insn 8: point = 289
   Insn 7: point = 290
   Insn 413: point = 291
  BB 46
   Insn 1517: point = 292
   Insn 6: point = 292
   Insn 5: point = 293
   Insn 4: point = 294
   Insn 395: point = 295
  BB 47
   Insn 1519: point = 296
   Insn 408: point = 296
   Insn 405: point = 298
   Insn 404: point = 299
   Insn 402: point = 300
   Insn 401: point = 301
  BB 50
   Insn 1525: point = 302
   Insn 15: point = 302
   Insn 14: point = 303
   Insn 13: point = 304
   Insn 434: point = 305
   Insn 433: point = 305
   Insn 432: point = 305
   Insn 431: point = 306
   Insn 430: point = 307
   Insn 429: point = 307
   Insn 428: point = 308
   Insn 427: point = 308
   Insn 426: point = 308
   Insn 425: point = 309
   Insn 424: point = 309
   Insn 423: point = 309
  BB 19
   Insn 180: point = 310
   Insn 177: point = 312
   Insn 176: point = 313
   Insn 174: point = 314
  BB 154
   Insn 1632: point = 316
   Insn 1180: point = 316
   Insn 1177: point = 317
   Insn 1176: point = 318
   Insn 1175: point = 318
   Insn 1174: point = 318
   Insn 1173: point = 320
   Insn 1710: point = 322
  BB 150
   Insn 1137: point = 325
   Insn 1136: point = 325
  BB 149
   Insn 1135: point = 327
   Insn 1134: point = 327
   Insn 1121: point = 327
   Insn 1120: point = 327
   Insn 1119: point = 329
   Insn 1118: point = 330
   Insn 1117: point = 331
   Insn 1116: point = 333
   Insn 1115: point = 334
   Insn 1114: point = 335
  BB 146
   Insn 1104: point = 337
   Insn 1708: point = 337
	Hard reg 2 is preferable by r603 with profit 1
   Insn 1103: point = 339
   Insn 1102: point = 339
   Insn 1101: point = 341
   Insn 1100: point = 342
   Insn 1706: point = 343
	Hard reg 39 is preferable by r602 with profit 1
   Insn 1097: point = 345
   Insn 1096: point = 346
   Insn 1095: point = 346
   Insn 1094: point = 347
   Insn 1705: point = 348
	Hard reg 39 is preferable by r602 with profit 2
   Insn 1093: point = 350
   Insn 1092: point = 351
   Insn 1707: point = 353
	Hard reg 2 is preferable by r603 with profit 2
   Insn 1091: point = 355
   Insn 1692: point = 357
	Hard reg 4 is preferable by r594 with profit 1
   Insn 1090: point = 359
   Insn 1691: point = 359
	Hard reg 4 is preferable by r594 with profit 1
	Hard reg 1 is preferable by r594 with profit 1
  BB 148
   Insn 1111: point = 362
  BB 145
   Insn 1085: point = 365
   Insn 1084: point = 365
   Insn 1083: point = 365
   Insn 1081: point = 366
  BB 143
   Insn 1625: point = 369
   Insn 30: point = 369
   Insn 1065: point = 370
   Insn 1064: point = 371
   Insn 1659: point = 373
   Insn 1063: point = 374
   Insn 1060: point = 375
   Insn 1059: point = 376
   Insn 1058: point = 376
  BB 144
   Insn 31: point = 377
   Insn 1077: point = 378
   Insn 1076: point = 379
   Insn 1075: point = 379
   Insn 1074: point = 380
  BB 142
   Insn 1055: point = 383
   Insn 1054: point = 383
  BB 118
   Insn 1607: point = 384
   Insn 886: point = 384
   Insn 885: point = 385
  BB 141
   Insn 1051: point = 386
   Insn 1050: point = 386
   Insn 29: point = 386
   Insn 1049: point = 387
   Insn 1048: point = 387
  BB 165
   Insn 1649: point = 389
   Insn 1268: point = 389
   Insn 1267: point = 390
   Insn 1265: point = 391
  BB 139
   Insn 1621: point = 393
   Insn 1033: point = 393
  BB 137
   Insn 1025: point = 395
   Insn 1024: point = 395
   Insn 1023: point = 396
   Insn 1022: point = 396
   Insn 1017: point = 397
   Insn 1016: point = 398
   Insn 1015: point = 398
   Insn 1014: point = 399
   Insn 1013: point = 399
   Insn 1012: point = 399
   Insn 1690: point = 399
	Hard reg 5 is preferable by r593 with profit 1
   Insn 1011: point = 401
   Insn 1689: point = 402
  BB 140
   Insn 1623: point = 404
   Insn 1042: point = 404
   Insn 1660: point = 406
   Insn 1041: point = 407
   Insn 1039: point = 408
   Insn 1038: point = 408
   Insn 1037: point = 408
  BB 166
   Insn 1275: point = 409
   Insn 1274: point = 409
  BB 138
   Insn 1031: point = 410
   Insn 1030: point = 410
   Insn 1029: point = 411
   Insn 1028: point = 412
   Insn 1027: point = 412
  BB 136
   Insn 1004: point = 413
   Insn 1003: point = 413
   Insn 1002: point = 414
  BB 135
   Insn 1619: point = 415
   Insn 997: point = 415
   Insn 996: point = 416
  BB 170
   Insn 1657: point = 418
   Insn 1314: point = 418
   Insn 1313: point = 419
   Insn 1311: point = 420
  BB 169
   Insn 1309: point = 422
   Insn 1308: point = 422
   Insn 1307: point = 423
   Insn 1306: point = 424
   Insn 1305: point = 424
  BB 168
   Insn 1655: point = 425
   Insn 28: point = 425
   Insn 1295: point = 425
   Insn 1703: point = 426
	Hard reg 0 is preferable by r601 with profit 1
   Insn 1293: point = 428
   Insn 1702: point = 429
   Insn 1291: point = 430
   Insn 1288: point = 431
   Insn 1287: point = 432
   Insn 1285: point = 433
  BB 133
   Insn 1617: point = 435
  BB 164
   Insn 1647: point = 436
  BB 163
   Insn 1258: point = 437
   Insn 1257: point = 437
   Insn 1709: point = 438
   Insn 1252: point = 439
   Insn 1251: point = 439
   Insn 1700: point = 440
	Hard reg 1 is preferable by r599 with profit 1
   Insn 1249: point = 442
   Insn 1699: point = 443
   Insn 1247: point = 444
   Insn 1246: point = 445
   Insn 1245: point = 446
   Insn 1243: point = 447
  BB 132
   Insn 987: point = 449
   Insn 986: point = 449
  BB 131
   Insn 984: point = 450
   Insn 983: point = 450
   Insn 981: point = 450
   Insn 980: point = 451
   Insn 979: point = 451
  BB 130
   Insn 27: point = 452
  BB 129
   Insn 974: point = 454
   Insn 973: point = 454
   Insn 1687: point = 454
   Insn 971: point = 456
   Insn 1688: point = 457
   Insn 1686: point = 458
	Hard reg 1 is preferable by r591 with profit 1
   Insn 969: point = 460
  BB 128
   Insn 966: point = 461
   Insn 965: point = 461
   Insn 1685: point = 463
	Hard reg 1 is preferable by r590 with profit 1
   Insn 960: point = 465
   Insn 1684: point = 465
   Insn 958: point = 466
   Insn 957: point = 467
   Insn 956: point = 467
   Insn 955: point = 469
  BB 124
   Insn 941: point = 472
   Insn 940: point = 472
   Insn 939: point = 472
   Insn 936: point = 473
   Insn 935: point = 474
   Insn 934: point = 474
   Insn 933: point = 475
   Insn 932: point = 476
  BB 122
   Insn 1609: point = 479
   Insn 922: point = 479
   Insn 921: point = 479
   Insn 1683: point = 481
	Hard reg 0 is preferable by r589 with profit 1
   Insn 920: point = 483
   Insn 1682: point = 483
  BB 123
   Insn 26: point = 485
   Insn 927: point = 487
  BB 121
   Insn 918: point = 488
   Insn 1681: point = 488
	Hard reg 0 is preferable by r588 with profit 1
   Insn 917: point = 490
   Insn 1680: point = 490
   Insn 914: point = 491
  BB 120
   Insn 912: point = 493
   Insn 911: point = 493
   Insn 1679: point = 493
   Insn 908: point = 495
   Insn 1678: point = 495
	Hard reg 0 is preferable by r587 with profit 1
   Insn 907: point = 497
  BB 119
   Insn 897: point = 499
   Insn 896: point = 499
   Insn 1677: point = 501
	Hard reg 1 is preferable by r586 with profit 1
   Insn 892: point = 503
   Insn 1676: point = 503
  BB 117
   Insn 883: point = 505
   Insn 882: point = 505
  BB 116
   Insn 879: point = 506
  BB 115
   Insn 877: point = 508
   Insn 876: point = 508
   Insn 870: point = 508
   Insn 869: point = 508
   Insn 868: point = 509
  BB 114
   Insn 25: point = 511
  BB 113
   Insn 859: point = 513
   Insn 858: point = 513
   Insn 1675: point = 515
	Hard reg 6 is preferable by r585 with profit 1
   Insn 851: point = 517
   Insn 1674: point = 517
  BB 110
   Insn 841: point = 519
   Insn 840: point = 519
  BB 108
   Insn 833: point = 520
   Insn 832: point = 520
   Insn 831: point = 521
   Insn 828: point = 523
  BB 107
   Insn 1603: point = 525
   Insn 819: point = 525
   Insn 818: point = 525
  BB 106
   Insn 816: point = 526
   Insn 815: point = 526
   Insn 813: point = 526
  BB 105
   Insn 808: point = 528
   Insn 807: point = 528
   Insn 1235: point = 528
   Insn 803: point = 529
   Insn 802: point = 531
   Insn 801: point = 533
  BB 104
   Insn 796: point = 536
   Insn 795: point = 536
   Insn 794: point = 537
   Insn 793: point = 539
   Insn 792: point = 541
   Insn 791: point = 542
   Insn 787: point = 543
   Insn 782: point = 544
  BB 103
   Insn 774: point = 547
   Insn 773: point = 547
   Insn 772: point = 548
   Insn 771: point = 550
   Insn 770: point = 552
   Insn 769: point = 553
  BB 102
   Insn 760: point = 555
   Insn 759: point = 555
  BB 101
   Insn 757: point = 556
   Insn 756: point = 556
   Insn 755: point = 556
   Insn 754: point = 557
   Insn 748: point = 558
   Insn 747: point = 559
   Insn 746: point = 559
   Insn 745: point = 559
   Insn 743: point = 561
   Insn 1711: point = 563
  BB 100
   Insn 741: point = 566
   Insn 740: point = 566
   Insn 739: point = 566
   Insn 738: point = 567
   Insn 737: point = 568
   Insn 736: point = 570
  BB 98
   Insn 1601: point = 572
   Insn 723: point = 572
  BB 99
   Insn 733: point = 574
   Insn 732: point = 574
   Insn 731: point = 575
   Insn 730: point = 576
   Insn 729: point = 577
   Insn 728: point = 577
  BB 97
   Insn 721: point = 579
   Insn 720: point = 579
   Insn 719: point = 579
   Insn 718: point = 580
   Insn 717: point = 581
   Insn 715: point = 582
   Insn 714: point = 583
   Insn 713: point = 584
   Insn 1672: point = 585
   Insn 711: point = 587
   Insn 1671: point = 589
	Hard reg 43 is preferable by r582 with profit 1
   Insn 710: point = 591
   Insn 1670: point = 591
  BB 22
   Insn 204: point = 593
   Insn 203: point = 595
  BB 25
   Insn 1507: point = 597
   Insn 1390: point = 597
   Insn 229: point = 599
  BB 24
   Insn 225: point = 602
   Insn 224: point = 602
   Insn 221: point = 602
   Insn 219: point = 604
 r87: [605..606] [593..602] [525..529] [310..317] [210..212] [174..200] [167..169]
 r88: [566..606] [327..559] [310..318] [210..210] [145..202] [142..142] [124..134] [79..122]
 r89: [566..606] [528..528] [327..526] [310..316] [145..198] [79..131]
 r90: [124..124] [101..119] [81..84]
 r92: [67..69] [58..58] [52..53] [41..43] [3..38]
 r99: [248..251]
 r102: [246..247] [229..236]
 r103: [246..246] [231..235]
 r107: [240..242]
 r109: [240..241]
 r136: [307..308]
 r137: [305..306]
 r147: [564..585] [323..524]
 r152: [566..580] [461..524]
 r154: [574..577] [569..572]
 r156: [566..570] [508..524]
 r157: [566..568] [522..524]
 r158: [566..567] [519..524] [143..148]
 r160: [130..132]
 r168: [273..276]
 r176: [53..57] [29..36]
 r186: [526..556] [156..156] [149..149] [125..127]
 r193: [547..558] [536..544]
 r198: [59..66]
 r200: [61..64]
 r202: [76..78]
 r203: [73..75]
 r204: [70..72]
 r212: [415..452]
 r213: [508..523] [145..148] [99..100]
 r224: [367..513]
 r226: [508..509]
 r227: [508..511]
 r230: [499..499] [459..461]
 r232: [474..497]
 r237: [488..491] [480..484]
 r238: [486..488]
 r240: [485..485] [477..479]
 r242: [468..473]
 r244: [566..566] [496..524] [461..467] [147..148]
 r245: [566..579] [513..524] [472..506] [454..466] [413..414] [401..404] [384..385] [0..1]
 r251: [439..450]
 r268: [422..423]
 r270: [395..413]
 r274: [395..397]
 r275: [415..416] [395..396] [386..393] [377..378] [365..375] [360..361]
 r277: [410..411]
 r280: [386..387] [377..379] [363..370] [349..361] [342..343]
 r287: [354..366] [335..337]
 r289: [325..365] [138..141]
 r297: [342..345]
 r299: [362..362] [334..339]
 r306: [319..327] [96..98]
 r307: [104..107]
 r308: [386..386] [377..377] [325..369]
 r309: [437..454] [395..414]
 r311: [101..106]
 r313: [593..606] [161..194]
 r314: [593..606] [159..196]
 r315: [593..606] [165..193]
 r316: [593..606] [163..195]
 r318: [258..259] [211..230]
 r320: [310..314] [258..258] [224..224] [210..222] [193..208] [187..191]
 r321: [593..593] [310..310] [302..304] [296..296] [292..294] [288..290] [282..282] [278..280] [267..267] [258..261] [210..216] [181..203] [167..167]
 r327: [101..105]
 r341: [302..302] [296..300] [292..292] [288..288] [282..286] [278..278] [267..271] [258..265] [213..220]
 r342: [201..207]
 r343: [310..312] [302..303] [296..298] [292..293] [288..289] [282..284] [278..279] [267..269] [258..263] [210..218] [193..205] [185..189]
 r347: [436..445] [425..431] [415..418] [386..389] [377..380] [325..371] [140..141]
 r349: [254..255]
 r350: [252..253]
 r352: [248..249]
 r354: [243..244]
 r355: [243..245]
 r357: [237..238]
 r358: [237..239]
 r359: [232..233]
 r360: [227..228]
 r361: [225..226]
 r363: [217..219]
 r367: [268..270]
 r371: [311..313]
 r376: [184..186]
 r378: [594..595]
 r380: [179..180]
 r382: [172..178]
 r383: [176..177]
 r384: [174..175]
 r386: [603..604]
 r388: [598..599]
 r393: [170..171]
 r401: [120..121]
 r403: [114..115]
 r404: [112..113]
 r406: [109..110]
 r407: [79..80]
 r411: [204..206]
 r414: [153..154]
 r416: [150..151]
 r419: [297..299]
 r422: [273..274]
 r423: [62..63]
 r428: [46..49]
 r431: [44..45]
 r432: [55..56]
 r433: [53..54] [29..36]
 r434: [32..33]
 r436: [39..40]
 r438: [283..285]
 r442: [262..264]
 r445: [588..589]
 r446: [583..584]
 r450: [575..576]
 r451: [560..561]
 r459: [551..552]
 r460: [549..550]
 r461: [547..548]
 r468: [540..541]
 r469: [538..539]
 r470: [536..537]
 r473: [532..533]
 r474: [530..531]
 r476: [520..521]
 r477: [145..146]
 r478: [514..515]
 r479: [500..501]
 r481: [470..493]
 r482: [480..481]
 r483: [475..476]
 r484: [468..469]
 r485: [462..463]
 r488: [398..399]
 r490: [405..406]
 r491: [405..407]
 r493: [372..373]
 r494: [372..374]
 r498: [356..357]
 r499: [352..355]
 r500: [347..351]
 r501: [346..350]
 r502: [340..341]
 r503: [332..333]
 r504: [330..331]
 r505: [328..329]
 r506: [136..139]
 r508: [89..93]
 r511: [89..90]
 r512: [87..88]
 r513: [85..86]
 r514: [319..320]
 r516: [128..129]
 r521: [442..444]
 r523: [439..440]
 r531: [428..430]
 r533: [425..426]
 r538: [190..192] [157..168]
 r539: [600..606] [593..597] [174..183]
 r540: [566..582] [505..524] [436..447] [425..433] [415..420] [381..391]
 r541: [566..581] [505..524] [436..446] [425..432] [415..419] [381..390]
 r542: [547..553] [534..542]
 r543: [545..557] [536..543]
 r564: [258..606] [79..215]
 r576: [256..257]
 r577: [2..2]
 r578: [116..117]
 r579: [50..51]
 r580: [47..48]
 r581: [34..35]
 r582: [590..591]
 r583: [586..587]
 r585: [516..517]
 r586: [502..503]
 r587: [494..495]
 r588: [489..490]
 r589: [482..483]
 r590: [464..465]
 r591: [455..458]
 r592: [456..457]
 r593: [400..402]
 r594: [358..359]
 r595: [135..137]
 r596: [94..95]
 r597: [91..92]
 r599: [441..443]
 r601: [427..429]
 r602: [344..348]
 r603: [338..353]
 r604: [437..438]
 r605: [321..322]
 r606: [562..563]
Compressing live ranges: from 607 to 348 - 57%
Ranges after the compression:
 r87: [346..347] [337..343] [298..301] [171..173] [112..114] [92..107] [88..89]
 r88: [323..347] [179..317] [171..173] [112..112] [76..109] [33..69]
 r89: [323..347] [179..300] [171..173] [77..107] [33..69]
 r90: [63..63] [51..60] [35..36]
 r92: [25..26] [22..22] [17..18] [9..10] [3..6]
 r99: [136..137]
 r102: [134..135] [124..127]
 r103: [134..134] [126..127]
 r107: [130..131]
 r109: [130..131]
 r136: [169..170]
 r137: [167..168]
 r147: [322..330] [178..297]
 r152: [323..328] [254..297]
 r154: [325..328]
 r156: [323..326] [287..297]
 r157: [323..324] [296..297]
 r158: [323..324] [294..297] [77..80]
 r160: [68..69]
 r168: [151..152]
 r176: [18..21] [3..6]
 r186: [299..317] [86..86] [81..81] [64..65]
 r193: [306..317]
 r198: [23..24]
 r200: [23..24]
 r202: [31..32]
 r203: [29..30]
 r204: [27..28]
 r212: [236..249]
 r213: [287..297] [77..80] [49..50]
 r224: [214..289]
 r226: [287..288]
 r227: [287..288]
 r230: [280..280] [253..254]
 r232: [263..279]
 r237: [273..275] [267..270]
 r238: [272..273]
 r240: [271..271] [265..266]
 r242: [259..262]
 r244: [323..323] [278..297] [254..258] [79..80]
 r245: [323..328] [289..297] [261..286] [250..258] [234..235] [228..229] [220..221] [0..1]
 r251: [246..249]
 r268: [238..239]
 r270: [224..234]
 r274: [224..225]
 r275: [236..237] [222..225] [212..219] [208..209]
 r277: [232..233]
 r280: [222..223] [218..219] [211..215] [198..209] [192..193]
 r287: [202..213] [186..187]
 r289: [178..212] [72..75]
 r297: [192..195]
 r299: [210..210] [186..189]
 r306: [174..179] [47..48]
 r307: [51..52]
 r308: [222..222] [218..218] [178..215]
 r309: [244..250] [224..235]
 r311: [51..52]
 r313: [337..347] [87..107]
 r314: [337..347] [87..107]
 r315: [337..347] [87..106]
 r316: [337..347] [87..107]
 r318: [144..145] [113..125]
 r320: [171..173] [144..144] [102..119]
 r321: [337..337] [171..171] [165..166] [158..162] [153..155] [148..148] [144..145] [112..116] [98..109] [88..88]
 r327: [51..52]
 r341: [162..165] [160..160] [155..158] [153..153] [144..150] [115..118]
 r342: [108..111]
 r343: [171..173] [153..166] [144..150] [106..118] [100..103]
 r347: [240..249] [236..237] [222..223] [218..219] [178..215] [74..75]
 r349: [140..141]
 r350: [138..139]
 r352: [136..137]
 r354: [132..133]
 r355: [132..133]
 r357: [128..129]
 r358: [128..129]
 r359: [126..127]
 r360: [122..123]
 r361: [120..121]
 r363: [117..118]
 r367: [149..150]
 r371: [172..173]
 r376: [100..101]
 r378: [338..339]
 r380: [96..97]
 r382: [92..95]
 r383: [94..95]
 r384: [92..93]
 r386: [344..345]
 r388: [340..341]
 r393: [90..91]
 r401: [61..62]
 r403: [57..58]
 r404: [55..56]
 r406: [53..54]
 r407: [33..34]
 r411: [110..111]
 r414: [84..85]
 r416: [82..83]
 r419: [163..164]
 r422: [151..152]
 r423: [23..24]
 r428: [13..14]
 r431: [11..12]
 r432: [20..21]
 r433: [18..19] [3..6]
 r434: [3..4]
 r436: [7..8]
 r438: [156..157]
 r442: [146..147]
 r445: [333..334]
 r446: [329..330]
 r450: [327..328]
 r451: [318..319]
 r459: [316..317]
 r460: [314..315]
 r461: [312..313]
 r468: [310..311]
 r469: [308..309]
 r470: [306..307]
 r473: [304..305]
 r474: [302..303]
 r476: [294..295]
 r477: [77..78]
 r478: [290..291]
 r479: [281..282]
 r481: [261..275]
 r482: [267..268]
 r483: [263..264]
 r484: [259..260]
 r485: [255..256]
 r488: [226..227]
 r490: [230..231]
 r491: [230..231]
 r493: [216..217]
 r494: [216..217]
 r498: [204..205]
 r499: [200..203]
 r500: [196..199]
 r501: [196..199]
 r502: [190..191]
 r503: [184..185]
 r504: [182..183]
 r505: [180..181]
 r506: [70..73]
 r508: [41..44]
 r511: [41..42]
 r512: [39..40]
 r513: [37..38]
 r514: [174..175]
 r516: [66..67]
 r521: [248..249]
 r523: [246..247]
 r531: [242..243]
 r533: [240..241]
 r538: [104..105] [87..89]
 r539: [342..347] [337..339] [92..99]
 r540: [323..328] [285..297] [240..249] [236..237] [220..223]
 r541: [323..328] [285..297] [240..249] [236..237] [220..223]
 r542: [306..317]
 r543: [306..317]
 r564: [144..347] [33..116]
 r576: [142..143]
 r577: [2..2]
 r578: [59..60]
 r579: [15..16]
 r580: [13..14]
 r581: [5..6]
 r582: [335..336]
 r583: [331..332]
 r585: [292..293]
 r586: [283..284]
 r587: [276..277]
 r588: [274..275]
 r589: [269..270]
 r590: [257..258]
 r591: [251..252]
 r592: [251..252]
 r593: [228..229]
 r594: [206..207]
 r595: [70..71]
 r596: [45..46]
 r597: [43..44]
 r599: [248..249]
 r601: [242..243]
 r602: [194..197]
 r603: [188..201]
 r604: [244..245]
 r605: [176..177]
 r606: [320..321]

********** Inheritance #2: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23 24 25
EBB 26 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33 34
EBB 35 36 37
EBB 38
EBB 39
EBB 40
EBB 41 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62 63
EBB 64
EBB 65 66
EBB 67
EBB 68
EBB 69
EBB 70 71
  578: ax:DI=call [`strcpy'] argc:0
      REG_RETURNED r433:DI
      REG_DEAD di:DI
      REG_DEAD si:DI
      REG_CALL_DECL `strcpy'
      REG_EH_REGION 0
    Inserting call parameter restore after:
 1712: r433:DI=ax:DI

EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97 98
EBB 99
EBB 100
EBB 101 102
EBB 103
EBB 104
EBB 105 106
EBB 107
EBB 108
EBB 109
EBB 110 111 112
EBB 113 114
EBB 115
EBB 116
EBB 117
EBB 118
EBB 119
EBB 120 121 122
EBB 123
EBB 124
EBB 125
EBB 126
EBB 127
EBB 128
EBB 129 130
EBB 131 132
EBB 133
EBB 134
EBB 135
EBB 136
EBB 137
EBB 138 139
EBB 140
EBB 141
EBB 142
EBB 143
EBB 144
EBB 145
EBB 146
EBB 147
EBB 148
EBB 149
EBB 150
EBB 151
EBB 152
EBB 153
EBB 154
EBB 155
EBB 156
EBB 157
EBB 158
EBB 159
EBB 160
EBB 161
EBB 162
EBB 163
EBB 164
EBB 165
EBB 166
EBB 167
EBB 168
EBB 169 170
EBB 171
EBB 172

********** Pseudo live ranges #5: **********

  BB 109
   Insn 836: point = 0
   Insn 835: point = 0
  BB 127
   Insn 951: point = 0
   Insn 950: point = 0
  BB 125
   Insn 1613: point = 0
  BB 126
   Insn 947: point = 0
  BB 134
   Insn 993: point = 2
   Insn 992: point = 2
  BB 167
   Insn 1653: point = 2
  BB 147
   Insn 1107: point = 2
   Insn 1106: point = 2
  BB 156
   Insn 1221: point = 2
   Insn 1220: point = 2
  BB 171
   Insn 1322: point = 2
  BB 162
   Insn 1644: point = 2
  BB 172
   Insn 1325: point = 2
  BB 161
   Insn 1321: point = 2
   Insn 1320: point = 2
   Insn 1319: point = 3
  BB 159
   Insn 1640: point = 5
   Insn 68: point = 5
  BB 158
   Insn 1638: point = 6
   Insn 43: point = 6
  BB 93
   Insn 1593: point = 7
   Insn 66: point = 7
  BB 92
   Insn 1591: point = 8
   Insn 65: point = 8
  BB 91
   Insn 1589: point = 9
   Insn 64: point = 9
  BB 90
   Insn 1587: point = 10
   Insn 63: point = 10
  BB 89
   Insn 1585: point = 11
   Insn 62: point = 11
  BB 88
   Insn 1583: point = 12
   Insn 61: point = 12
  BB 87
   Insn 1581: point = 13
   Insn 60: point = 13
  BB 86
   Insn 1579: point = 14
   Insn 59: point = 14
  BB 85
   Insn 1577: point = 15
   Insn 58: point = 15
  BB 84
   Insn 1575: point = 16
   Insn 57: point = 16
  BB 83
   Insn 1573: point = 17
   Insn 56: point = 17
  BB 82
   Insn 1571: point = 18
   Insn 55: point = 18
  BB 81
   Insn 1569: point = 19
   Insn 54: point = 19
  BB 80
   Insn 1567: point = 20
   Insn 53: point = 20
  BB 79
   Insn 1565: point = 21
   Insn 52: point = 21
  BB 78
   Insn 1563: point = 22
   Insn 51: point = 22
  BB 77
   Insn 1561: point = 23
   Insn 50: point = 23
  BB 76
   Insn 1559: point = 24
   Insn 49: point = 24
  BB 75
   Insn 1557: point = 25
   Insn 48: point = 25
  BB 74
   Insn 1555: point = 26
   Insn 47: point = 26
  BB 73
   Insn 1553: point = 27
   Insn 46: point = 27
  BB 72
   Insn 1551: point = 28
   Insn 45: point = 28
  BB 71
   Insn 1549: point = 29
   Insn 581: point = 29
   Insn 1704: point = 30
   Insn 1712: point = 31
   Insn 578: point = 32
   Insn 577: point = 32
   Insn 576: point = 33
   Insn 575: point = 34
   Insn 1669: point = 36
  BB 160
   Insn 67: point = 38
  BB 53
   Insn 1529: point = 39
  BB 94
   Insn 1595: point = 39
   Insn 675: point = 39
   Insn 674: point = 41
  BB 157
   Insn 1636: point = 42
   Insn 42: point = 42
  BB 69
   Insn 1547: point = 43
   Insn 40: point = 43
   Insn 557: point = 44
   Insn 556: point = 44
   Insn 555: point = 44
   Insn 554: point = 44
   Insn 553: point = 44
  BB 68
   Insn 1545: point = 44
   Insn 39: point = 44
   Insn 547: point = 45
   Insn 546: point = 46
   Insn 544: point = 47
   Insn 543: point = 47
   Insn 542: point = 47
   Insn 541: point = 48
   Insn 540: point = 48
	Hard reg 1 is preferable by r580 with profit 1
   Insn 1668: point = 49
   Insn 539: point = 50
   Insn 1667: point = 52
  BB 61
   Insn 1537: point = 53
   Insn 35: point = 53
  BB 70
   Insn 570: point = 54
   Insn 569: point = 54
   Insn 38: point = 54
   Insn 568: point = 55
   Insn 566: point = 55
   Insn 565: point = 56
   Insn 564: point = 56
   Insn 563: point = 57
   Insn 562: point = 58
  BB 56
   Insn 1531: point = 59
   Insn 471: point = 59
  BB 55
   Insn 468: point = 62
   Insn 467: point = 63
   Insn 466: point = 64
   Insn 465: point = 65
   Insn 464: point = 66
   Insn 463: point = 66
   Insn 462: point = 67
   Insn 461: point = 67
   Insn 460: point = 67
  BB 54
   Insn 458: point = 67
   Insn 457: point = 67
   Insn 456: point = 67
   Insn 455: point = 67
   Insn 454: point = 68
   Insn 453: point = 68
  BB 58
   Insn 1533: point = 68
   Insn 37: point = 68
  BB 43
   Insn 1511: point = 69
   Insn 44: point = 69
  BB 60
   Insn 1535: point = 70
   Insn 36: point = 70
  BB 67
   Insn 1543: point = 71
  BB 66
   Insn 531: point = 71
   Insn 530: point = 71
  BB 65
   Insn 528: point = 73
   Insn 527: point = 73
   Insn 526: point = 73
   Insn 524: point = 74
   Insn 523: point = 74
   Insn 522: point = 74
   Insn 521: point = 74
   Insn 520: point = 74
  BB 64
   Insn 1540: point = 74
  BB 63
   Insn 514: point = 74
   Insn 513: point = 74
  BB 62
   Insn 510: point = 76
   Insn 509: point = 76
   Insn 507: point = 76
   Insn 505: point = 77
   Insn 504: point = 77
   Insn 503: point = 77
   Insn 502: point = 77
   Insn 501: point = 77
  BB 59
   Insn 491: point = 77
   Insn 490: point = 77
  BB 57
   Insn 484: point = 79
   Insn 483: point = 79
   Insn 482: point = 79
   Insn 480: point = 80
   Insn 479: point = 80
   Insn 478: point = 80
   Insn 477: point = 80
   Insn 476: point = 80
  BB 42
   Insn 355: point = 80
   Insn 352: point = 81
  BB 41
   Insn 351: point = 84
   Insn 350: point = 84
  BB 153
   Insn 1630: point = 85
   Insn 1167: point = 85
   Insn 1166: point = 87
   Insn 1165: point = 89
   Insn 1697: point = 91
	Hard reg 1 is preferable by r597 with profit 1
   Insn 1164: point = 93
   Insn 1696: point = 93
   Insn 1163: point = 94
   Insn 1695: point = 96
   Insn 1161: point = 97
  BB 152
   Insn 32: point = 99
  BB 40
   Insn 342: point = 102
   Insn 341: point = 102
   Insn 340: point = 102
  BB 39
   Insn 334: point = 103
  BB 38
   Insn 332: point = 104
   Insn 331: point = 104
  BB 37
   Insn 319: point = 105
   Insn 318: point = 105
   Insn 328: point = 106
   Insn 326: point = 107
   Insn 317: point = 108
  BB 36
   Insn 314: point = 110
   Insn 313: point = 110
   Insn 312: point = 111
  BB 35
   Insn 309: point = 113
   Insn 308: point = 113
   Insn 307: point = 113
   Insn 306: point = 113
   Insn 305: point = 113
   Insn 304: point = 114
   Insn 303: point = 115
   Insn 1666: point = 116
	Hard reg 0 is preferable by r578 with profit 8
   Insn 302: point = 118
   Insn 1665: point = 118
   Insn 300: point = 119
  BB 34
   Insn 294: point = 120
   Insn 293: point = 122
   Insn 288: point = 123
  BB 33
   Insn 286: point = 125
   Insn 285: point = 125
   Insn 283: point = 125
  BB 155
   Insn 1634: point = 128
   Insn 1215: point = 128
   Insn 1214: point = 130
   Insn 1211: point = 132
   Insn 1208: point = 133
   Insn 1207: point = 134
   Insn 1206: point = 134
  BB 151
   Insn 1628: point = 135
   Insn 1694: point = 135
	Hard reg 3 is preferable by r595 with profit 1
   Insn 33: point = 137
   Insn 1693: point = 138
	Hard reg 3 is preferable by r595 with profit 1
	Hard reg 6 is preferable by r595 with profit 1
   Insn 1142: point = 140
  BB 112
   Insn 1605: point = 143
   Insn 34: point = 143
  BB 111
   Insn 845: point = 146
   Insn 844: point = 146
   Insn 843: point = 147
  BB 45
   Insn 1515: point = 150
   Insn 389: point = 150
   Insn 388: point = 152
   Insn 383: point = 153
   Insn 382: point = 154
   Insn 381: point = 155
  BB 32
   Insn 274: point = 157
  BB 31
   Insn 269: point = 160
  BB 30
   Insn 267: point = 162
   Insn 266: point = 162
  BB 29
   Insn 263: point = 164
  BB 28
   Insn 261: point = 166
   Insn 260: point = 166
  BB 26
   Insn 249: point = 168
   Insn 248: point = 168
   Insn 247: point = 168
   Insn 246: point = 169
   Insn 243: point = 170
   Insn 241: point = 170
   Insn 240: point = 172
  BB 23
   Insn 216: point = 175
   Insn 215: point = 175
   Insn 214: point = 176
   Insn 213: point = 178
   Insn 212: point = 179
   Insn 210: point = 181
  BB 21
   Insn 1505: point = 184
   Insn 1389: point = 184
   Insn 1442: point = 186
   Insn 1440: point = 186
   Insn 1439: point = 187
   Insn 1437: point = 187
   Insn 1436: point = 187
   Insn 1435: point = 187
   Insn 1434: point = 187
   Insn 1433: point = 187
   Insn 191: point = 187
  BB 27
   Insn 1509: point = 190
   Insn 254: point = 190
   Insn 251: point = 192
  BB 20
   Insn 20: point = 194
   Insn 19: point = 195
   Insn 184: point = 196
   Insn 183: point = 197
  BB 18
   Insn 1503: point = 199
   Insn 18: point = 199
   Insn 167: point = 200
  BB 44
   Insn 1513: point = 201
   Insn 375: point = 201
   Insn 374: point = 203
   Insn 373: point = 204
   Insn 370: point = 206
   Insn 369: point = 207
   Insn 367: point = 208
   Insn 366: point = 209
  BB 17
   Insn 17: point = 211
   Insn 16: point = 213
  BB 14
   Insn 1501: point = 216
   Insn 1438: point = 216
   Insn 148: point = 217
   Insn 145: point = 219
   Insn 144: point = 220
   Insn 142: point = 221
  BB 3
   Insn 1499: point = 223
   Insn 75: point = 223
   Insn 74: point = 224
  BB 13
   Insn 139: point = 225
   Insn 138: point = 225
   Insn 137: point = 226
   Insn 136: point = 227
   Insn 135: point = 229
   Insn 134: point = 231
   Insn 133: point = 231
   Insn 132: point = 231
   Insn 131: point = 233
   Insn 130: point = 234
  BB 12
   Insn 127: point = 236
   Insn 126: point = 237
   Insn 1661: point = 239
   Insn 125: point = 240
   Insn 122: point = 241
   Insn 121: point = 242
   Insn 120: point = 243
   Insn 119: point = 243
   Insn 118: point = 243
   Insn 117: point = 243
   Insn 1662: point = 245
   Insn 116: point = 246
   Insn 113: point = 247
  BB 11
   Insn 110: point = 247
   Insn 109: point = 247
   Insn 108: point = 247
   Insn 107: point = 248
   Insn 1663: point = 250
  BB 10
   Insn 103: point = 252
   Insn 102: point = 252
   Insn 101: point = 252
  BB 9
   Insn 98: point = 253
   Insn 97: point = 254
  BB 8
   Insn 95: point = 255
   Insn 94: point = 255
  BB 7
   Insn 91: point = 255
   Insn 90: point = 256
  BB 6
   Insn 88: point = 257
   Insn 87: point = 257
  BB 5
   Insn 84: point = 257
  BB 4
   Insn 82: point = 257
   Insn 81: point = 257
   Insn 80: point = 257
  BB 2
   Insn 72: point = 257
   Insn 71: point = 257
   Insn 3: point = 257
  BB 16
   Insn 161: point = 259
   Insn 160: point = 260
  BB 96
   Insn 1599: point = 262
   Insn 704: point = 262
   Insn 701: point = 264
   Insn 700: point = 265
   Insn 698: point = 266
   Insn 697: point = 267
   Insn 696: point = 267
   Insn 695: point = 267
   Insn 694: point = 267
   Insn 693: point = 267
  BB 15
   Insn 158: point = 268
   Insn 155: point = 270
   Insn 154: point = 271
   Insn 152: point = 272
  BB 52
   Insn 446: point = 274
   Insn 445: point = 274
   Insn 444: point = 275
  BB 51
   Insn 442: point = 277
   Insn 441: point = 277
   Insn 440: point = 277
   Insn 439: point = 278
  BB 49
   Insn 1523: point = 279
   Insn 12: point = 279
   Insn 11: point = 280
   Insn 10: point = 281
   Insn 418: point = 282
  BB 95
   Insn 1597: point = 283
   Insn 688: point = 283
   Insn 685: point = 285
   Insn 684: point = 286
   Insn 682: point = 287
   Insn 681: point = 288
   Insn 680: point = 288
  BB 48
   Insn 1521: point = 289
   Insn 9: point = 289
   Insn 8: point = 290
   Insn 7: point = 291
   Insn 413: point = 292
  BB 46
   Insn 1517: point = 293
   Insn 6: point = 293
   Insn 5: point = 294
   Insn 4: point = 295
   Insn 395: point = 296
  BB 47
   Insn 1519: point = 297
   Insn 408: point = 297
   Insn 405: point = 299
   Insn 404: point = 300
   Insn 402: point = 301
   Insn 401: point = 302
  BB 50
   Insn 1525: point = 303
   Insn 15: point = 303
   Insn 14: point = 304
   Insn 13: point = 305
   Insn 434: point = 306
   Insn 433: point = 306
   Insn 432: point = 306
   Insn 431: point = 307
   Insn 430: point = 308
   Insn 429: point = 308
   Insn 428: point = 309
   Insn 427: point = 309
   Insn 426: point = 309
   Insn 425: point = 310
   Insn 424: point = 310
   Insn 423: point = 310
  BB 19
   Insn 180: point = 311
   Insn 177: point = 313
   Insn 176: point = 314
   Insn 174: point = 315
  BB 154
   Insn 1632: point = 317
   Insn 1180: point = 317
   Insn 1177: point = 318
   Insn 1176: point = 319
   Insn 1175: point = 319
   Insn 1174: point = 319
   Insn 1173: point = 321
   Insn 1710: point = 323
  BB 150
   Insn 1137: point = 326
   Insn 1136: point = 326
  BB 149
   Insn 1135: point = 328
   Insn 1134: point = 328
   Insn 1121: point = 328
   Insn 1120: point = 328
   Insn 1119: point = 330
   Insn 1118: point = 331
   Insn 1117: point = 332
   Insn 1116: point = 334
   Insn 1115: point = 335
   Insn 1114: point = 336
  BB 146
   Insn 1104: point = 338
   Insn 1708: point = 338
	Hard reg 2 is preferable by r603 with profit 1
   Insn 1103: point = 340
   Insn 1102: point = 340
   Insn 1101: point = 342
   Insn 1100: point = 343
   Insn 1706: point = 344
	Hard reg 39 is preferable by r602 with profit 1
   Insn 1097: point = 346
   Insn 1096: point = 347
   Insn 1095: point = 347
   Insn 1094: point = 348
   Insn 1705: point = 349
	Hard reg 39 is preferable by r602 with profit 2
   Insn 1093: point = 351
   Insn 1092: point = 352
   Insn 1707: point = 354
	Hard reg 2 is preferable by r603 with profit 2
   Insn 1091: point = 356
   Insn 1692: point = 358
	Hard reg 4 is preferable by r594 with profit 1
   Insn 1090: point = 360
   Insn 1691: point = 360
	Hard reg 4 is preferable by r594 with profit 1
	Hard reg 1 is preferable by r594 with profit 1
  BB 148
   Insn 1111: point = 363
  BB 145
   Insn 1085: point = 366
   Insn 1084: point = 366
   Insn 1083: point = 366
   Insn 1081: point = 367
  BB 143
   Insn 1625: point = 370
   Insn 30: point = 370
   Insn 1065: point = 371
   Insn 1064: point = 372
   Insn 1659: point = 374
   Insn 1063: point = 375
   Insn 1060: point = 376
   Insn 1059: point = 377
   Insn 1058: point = 377
  BB 144
   Insn 31: point = 378
   Insn 1077: point = 379
   Insn 1076: point = 380
   Insn 1075: point = 380
   Insn 1074: point = 381
  BB 142
   Insn 1055: point = 384
   Insn 1054: point = 384
  BB 118
   Insn 1607: point = 385
   Insn 886: point = 385
   Insn 885: point = 386
  BB 141
   Insn 1051: point = 387
   Insn 1050: point = 387
   Insn 29: point = 387
   Insn 1049: point = 388
   Insn 1048: point = 388
  BB 165
   Insn 1649: point = 390
   Insn 1268: point = 390
   Insn 1267: point = 391
   Insn 1265: point = 392
  BB 139
   Insn 1621: point = 394
   Insn 1033: point = 394
  BB 137
   Insn 1025: point = 396
   Insn 1024: point = 396
   Insn 1023: point = 397
   Insn 1022: point = 397
   Insn 1017: point = 398
   Insn 1016: point = 399
   Insn 1015: point = 399
   Insn 1014: point = 400
   Insn 1013: point = 400
   Insn 1012: point = 400
   Insn 1690: point = 400
	Hard reg 5 is preferable by r593 with profit 1
   Insn 1011: point = 402
   Insn 1689: point = 403
  BB 140
   Insn 1623: point = 405
   Insn 1042: point = 405
   Insn 1660: point = 407
   Insn 1041: point = 408
   Insn 1039: point = 409
   Insn 1038: point = 409
   Insn 1037: point = 409
  BB 166
   Insn 1275: point = 410
   Insn 1274: point = 410
  BB 138
   Insn 1031: point = 411
   Insn 1030: point = 411
   Insn 1029: point = 412
   Insn 1028: point = 413
   Insn 1027: point = 413
  BB 136
   Insn 1004: point = 414
   Insn 1003: point = 414
   Insn 1002: point = 415
  BB 135
   Insn 1619: point = 416
   Insn 997: point = 416
   Insn 996: point = 417
  BB 170
   Insn 1657: point = 419
   Insn 1314: point = 419
   Insn 1313: point = 420
   Insn 1311: point = 421
  BB 169
   Insn 1309: point = 423
   Insn 1308: point = 423
   Insn 1307: point = 424
   Insn 1306: point = 425
   Insn 1305: point = 425
  BB 168
   Insn 1655: point = 426
   Insn 28: point = 426
   Insn 1295: point = 426
   Insn 1703: point = 427
	Hard reg 0 is preferable by r601 with profit 1
   Insn 1293: point = 429
   Insn 1702: point = 430
   Insn 1291: point = 431
   Insn 1288: point = 432
   Insn 1287: point = 433
   Insn 1285: point = 434
  BB 133
   Insn 1617: point = 436
  BB 164
   Insn 1647: point = 437
  BB 163
   Insn 1258: point = 438
   Insn 1257: point = 438
   Insn 1709: point = 439
   Insn 1252: point = 440
   Insn 1251: point = 440
   Insn 1700: point = 441
	Hard reg 1 is preferable by r599 with profit 1
   Insn 1249: point = 443
   Insn 1699: point = 444
   Insn 1247: point = 445
   Insn 1246: point = 446
   Insn 1245: point = 447
   Insn 1243: point = 448
  BB 132
   Insn 987: point = 450
   Insn 986: point = 450
  BB 131
   Insn 984: point = 451
   Insn 983: point = 451
   Insn 981: point = 451
   Insn 980: point = 452
   Insn 979: point = 452
  BB 130
   Insn 27: point = 453
  BB 129
   Insn 974: point = 455
   Insn 973: point = 455
   Insn 1687: point = 455
   Insn 971: point = 457
   Insn 1688: point = 458
   Insn 1686: point = 459
	Hard reg 1 is preferable by r591 with profit 1
   Insn 969: point = 461
  BB 128
   Insn 966: point = 462
   Insn 965: point = 462
   Insn 1685: point = 464
	Hard reg 1 is preferable by r590 with profit 1
   Insn 960: point = 466
   Insn 1684: point = 466
   Insn 958: point = 467
   Insn 957: point = 468
   Insn 956: point = 468
   Insn 955: point = 470
  BB 124
   Insn 941: point = 473
   Insn 940: point = 473
   Insn 939: point = 473
   Insn 936: point = 474
   Insn 935: point = 475
   Insn 934: point = 475
   Insn 933: point = 476
   Insn 932: point = 477
  BB 122
   Insn 1609: point = 480
   Insn 922: point = 480
   Insn 921: point = 480
   Insn 1683: point = 482
	Hard reg 0 is preferable by r589 with profit 1
   Insn 920: point = 484
   Insn 1682: point = 484
  BB 123
   Insn 26: point = 486
   Insn 927: point = 488
  BB 121
   Insn 918: point = 489
   Insn 1681: point = 489
	Hard reg 0 is preferable by r588 with profit 1
   Insn 917: point = 491
   Insn 1680: point = 491
   Insn 914: point = 492
  BB 120
   Insn 912: point = 494
   Insn 911: point = 494
   Insn 1679: point = 494
   Insn 908: point = 496
   Insn 1678: point = 496
	Hard reg 0 is preferable by r587 with profit 1
   Insn 907: point = 498
  BB 119
   Insn 897: point = 500
   Insn 896: point = 500
   Insn 1677: point = 502
	Hard reg 1 is preferable by r586 with profit 1
   Insn 892: point = 504
   Insn 1676: point = 504
  BB 117
   Insn 883: point = 506
   Insn 882: point = 506
  BB 116
   Insn 879: point = 507
  BB 115
   Insn 877: point = 509
   Insn 876: point = 509
   Insn 870: point = 509
   Insn 869: point = 509
   Insn 868: point = 510
  BB 114
   Insn 25: point = 512
  BB 113
   Insn 859: point = 514
   Insn 858: point = 514
   Insn 1675: point = 516
	Hard reg 6 is preferable by r585 with profit 1
   Insn 851: point = 518
   Insn 1674: point = 518
  BB 110
   Insn 841: point = 520
   Insn 840: point = 520
  BB 108
   Insn 833: point = 521
   Insn 832: point = 521
   Insn 831: point = 522
   Insn 828: point = 524
  BB 107
   Insn 1603: point = 526
   Insn 819: point = 526
   Insn 818: point = 526
  BB 106
   Insn 816: point = 527
   Insn 815: point = 527
   Insn 813: point = 527
  BB 105
   Insn 808: point = 529
   Insn 807: point = 529
   Insn 1235: point = 529
   Insn 803: point = 530
   Insn 802: point = 532
   Insn 801: point = 534
  BB 104
   Insn 796: point = 537
   Insn 795: point = 537
   Insn 794: point = 538
   Insn 793: point = 540
   Insn 792: point = 542
   Insn 791: point = 543
   Insn 787: point = 544
   Insn 782: point = 545
  BB 103
   Insn 774: point = 548
   Insn 773: point = 548
   Insn 772: point = 549
   Insn 771: point = 551
   Insn 770: point = 553
   Insn 769: point = 554
  BB 102
   Insn 760: point = 556
   Insn 759: point = 556
  BB 101
   Insn 757: point = 557
   Insn 756: point = 557
   Insn 755: point = 557
   Insn 754: point = 558
   Insn 748: point = 559
   Insn 747: point = 560
   Insn 746: point = 560
   Insn 745: point = 560
   Insn 743: point = 562
   Insn 1711: point = 564
  BB 100
   Insn 741: point = 567
   Insn 740: point = 567
   Insn 739: point = 567
   Insn 738: point = 568
   Insn 737: point = 569
   Insn 736: point = 571
  BB 98
   Insn 1601: point = 573
   Insn 723: point = 573
  BB 99
   Insn 733: point = 575
   Insn 732: point = 575
   Insn 731: point = 576
   Insn 730: point = 577
   Insn 729: point = 578
   Insn 728: point = 578
  BB 97
   Insn 721: point = 580
   Insn 720: point = 580
   Insn 719: point = 580
   Insn 718: point = 581
   Insn 717: point = 582
   Insn 715: point = 583
   Insn 714: point = 584
   Insn 713: point = 585
   Insn 1672: point = 586
   Insn 711: point = 588
   Insn 1671: point = 590
	Hard reg 43 is preferable by r582 with profit 1
   Insn 710: point = 592
   Insn 1670: point = 592
  BB 22
   Insn 204: point = 594
   Insn 203: point = 596
  BB 25
   Insn 1507: point = 598
   Insn 1390: point = 598
   Insn 229: point = 600
  BB 24
   Insn 225: point = 603
   Insn 224: point = 603
   Insn 221: point = 603
   Insn 219: point = 605
 r87: [606..607] [594..603] [526..530] [311..318] [211..213] [175..201] [168..170]
 r88: [567..607] [328..560] [311..319] [211..211] [146..203] [143..143] [125..135] [80..123]
 r89: [567..607] [529..529] [328..527] [311..317] [146..199] [80..132]
 r90: [125..125] [102..120] [82..85]
 r92: [68..70] [59..59] [53..54] [42..44] [3..39]
 r99: [249..252]
 r102: [247..248] [230..237]
 r103: [247..247] [232..236]
 r107: [241..243]
 r109: [241..242]
 r136: [308..309]
 r137: [306..307]
 r147: [565..586] [324..525]
 r152: [567..581] [462..525]
 r154: [575..578] [570..573]
 r156: [567..571] [509..525]
 r157: [567..569] [523..525]
 r158: [567..568] [520..525] [144..149]
 r160: [131..133]
 r168: [274..277]
 r176: [54..58] [29..37]
 r186: [527..557] [157..157] [150..150] [126..128]
 r193: [548..559] [537..545]
 r198: [60..67]
 r200: [62..65]
 r202: [77..79]
 r203: [74..76]
 r204: [71..73]
 r212: [416..453]
 r213: [509..524] [146..149] [100..101]
 r224: [368..514]
 r226: [509..510]
 r227: [509..512]
 r230: [500..500] [460..462]
 r232: [475..498]
 r237: [489..492] [481..485]
 r238: [487..489]
 r240: [486..486] [478..480]
 r242: [469..474]
 r244: [567..567] [497..525] [462..468] [148..149]
 r245: [567..580] [514..525] [473..507] [455..467] [414..415] [402..405] [385..386] [0..1]
 r251: [440..451]
 r268: [423..424]
 r270: [396..414]
 r274: [396..398]
 r275: [416..417] [396..397] [387..394] [378..379] [366..376] [361..362]
 r277: [411..412]
 r280: [387..388] [378..380] [364..371] [350..362] [343..344]
 r287: [355..367] [336..338]
 r289: [326..366] [139..142]
 r297: [343..346]
 r299: [363..363] [335..340]
 r306: [320..328] [97..99]
 r307: [105..108]
 r308: [387..387] [378..378] [326..370]
 r309: [438..455] [396..415]
 r311: [102..107]
 r313: [594..607] [162..195]
 r314: [594..607] [160..197]
 r315: [594..607] [166..194]
 r316: [594..607] [164..196]
 r318: [259..260] [212..231]
 r320: [311..315] [259..259] [225..225] [211..223] [194..209] [188..192]
 r321: [594..594] [311..311] [303..305] [297..297] [293..295] [289..291] [283..283] [279..281] [268..268] [259..262] [211..217] [182..204] [168..168]
 r327: [102..106]
 r341: [303..303] [297..301] [293..293] [289..289] [283..287] [279..279] [268..272] [259..266] [214..221]
 r342: [202..208]
 r343: [311..313] [303..304] [297..299] [293..294] [289..290] [283..285] [279..280] [268..270] [259..264] [211..219] [194..206] [186..190]
 r347: [437..446] [426..432] [416..419] [387..390] [378..381] [326..372] [141..142]
 r349: [255..256]
 r350: [253..254]
 r352: [249..250]
 r354: [244..245]
 r355: [244..246]
 r357: [238..239]
 r358: [238..240]
 r359: [233..234]
 r360: [228..229]
 r361: [226..227]
 r363: [218..220]
 r367: [269..271]
 r371: [312..314]
 r376: [185..187]
 r378: [595..596]
 r380: [180..181]
 r382: [173..179]
 r383: [177..178]
 r384: [175..176]
 r386: [604..605]
 r388: [599..600]
 r393: [171..172]
 r401: [121..122]
 r403: [115..116]
 r404: [113..114]
 r406: [110..111]
 r407: [80..81]
 r411: [205..207]
 r414: [154..155]
 r416: [151..152]
 r419: [298..300]
 r422: [274..275]
 r423: [63..64]
 r428: [47..50]
 r431: [45..46]
 r432: [56..57]
 r433: [54..55] [29..37]
 r434: [33..34]
 r436: [40..41]
 r438: [284..286]
 r442: [263..265]
 r445: [589..590]
 r446: [584..585]
 r450: [576..577]
 r451: [561..562]
 r459: [552..553]
 r460: [550..551]
 r461: [548..549]
 r468: [541..542]
 r469: [539..540]
 r470: [537..538]
 r473: [533..534]
 r474: [531..532]
 r476: [521..522]
 r477: [146..147]
 r478: [515..516]
 r479: [501..502]
 r481: [471..494]
 r482: [481..482]
 r483: [476..477]
 r484: [469..470]
 r485: [463..464]
 r488: [399..400]
 r490: [406..407]
 r491: [406..408]
 r493: [373..374]
 r494: [373..375]
 r498: [357..358]
 r499: [353..356]
 r500: [348..352]
 r501: [347..351]
 r502: [341..342]
 r503: [333..334]
 r504: [331..332]
 r505: [329..330]
 r506: [137..140]
 r508: [90..94]
 r511: [90..91]
 r512: [88..89]
 r513: [86..87]
 r514: [320..321]
 r516: [129..130]
 r521: [443..445]
 r523: [440..441]
 r531: [429..431]
 r533: [426..427]
 r538: [191..193] [158..169]
 r539: [601..607] [594..598] [175..184]
 r540: [567..583] [506..525] [437..448] [426..434] [416..421] [382..392]
 r541: [567..582] [506..525] [437..447] [426..433] [416..420] [382..391]
 r542: [548..554] [535..543]
 r543: [546..558] [537..544]
 r564: [259..607] [80..216]
 r576: [257..258]
 r577: [2..2]
 r578: [117..118]
 r579: [51..52]
 r580: [48..49]
 r581: [35..36]
 r582: [591..592]
 r583: [587..588]
 r585: [517..518]
 r586: [503..504]
 r587: [495..496]
 r588: [490..491]
 r589: [483..484]
 r590: [465..466]
 r591: [456..459]
 r592: [457..458]
 r593: [401..403]
 r594: [359..360]
 r595: [136..138]
 r596: [95..96]
 r597: [92..93]
 r599: [442..444]
 r601: [428..430]
 r602: [345..349]
 r603: [339..354]
 r604: [438..439]
 r605: [322..323]
 r606: [563..564]
Compressing live ranges: from 608 to 348 - 57%
Ranges after the compression:
 r87: [346..347] [337..343] [298..301] [171..173] [112..114] [92..107] [88..89]
 r88: [323..347] [179..317] [171..173] [112..112] [76..109] [33..69]
 r89: [323..347] [179..300] [171..173] [77..107] [33..69]
 r90: [63..63] [51..60] [35..36]
 r92: [25..26] [22..22] [17..18] [9..10] [3..6]
 r99: [136..137]
 r102: [134..135] [124..127]
 r103: [134..134] [126..127]
 r107: [130..131]
 r109: [130..131]
 r136: [169..170]
 r137: [167..168]
 r147: [322..330] [178..297]
 r152: [323..328] [254..297]
 r154: [325..328]
 r156: [323..326] [287..297]
 r157: [323..324] [296..297]
 r158: [323..324] [294..297] [77..80]
 r160: [68..69]
 r168: [151..152]
 r176: [18..21] [3..6]
 r186: [299..317] [86..86] [81..81] [64..65]
 r193: [306..317]
 r198: [23..24]
 r200: [23..24]
 r202: [31..32]
 r203: [29..30]
 r204: [27..28]
 r212: [236..249]
 r213: [287..297] [77..80] [49..50]
 r224: [214..289]
 r226: [287..288]
 r227: [287..288]
 r230: [280..280] [253..254]
 r232: [263..279]
 r237: [273..275] [267..270]
 r238: [272..273]
 r240: [271..271] [265..266]
 r242: [259..262]
 r244: [323..323] [278..297] [254..258] [79..80]
 r245: [323..328] [289..297] [261..286] [250..258] [234..235] [228..229] [220..221] [0..1]
 r251: [246..249]
 r268: [238..239]
 r270: [224..234]
 r274: [224..225]
 r275: [236..237] [222..225] [212..219] [208..209]
 r277: [232..233]
 r280: [222..223] [218..219] [211..215] [198..209] [192..193]
 r287: [202..213] [186..187]
 r289: [178..212] [72..75]
 r297: [192..195]
 r299: [210..210] [186..189]
 r306: [174..179] [47..48]
 r307: [51..52]
 r308: [222..222] [218..218] [178..215]
 r309: [244..250] [224..235]
 r311: [51..52]
 r313: [337..347] [87..107]
 r314: [337..347] [87..107]
 r315: [337..347] [87..106]
 r316: [337..347] [87..107]
 r318: [144..145] [113..125]
 r320: [171..173] [144..144] [102..119]
 r321: [337..337] [171..171] [165..166] [158..162] [153..155] [148..148] [144..145] [112..116] [98..109] [88..88]
 r327: [51..52]
 r341: [162..165] [160..160] [155..158] [153..153] [144..150] [115..118]
 r342: [108..111]
 r343: [171..173] [153..166] [144..150] [106..118] [100..103]
 r347: [240..249] [236..237] [222..223] [218..219] [178..215] [74..75]
 r349: [140..141]
 r350: [138..139]
 r352: [136..137]
 r354: [132..133]
 r355: [132..133]
 r357: [128..129]
 r358: [128..129]
 r359: [126..127]
 r360: [122..123]
 r361: [120..121]
 r363: [117..118]
 r367: [149..150]
 r371: [172..173]
 r376: [100..101]
 r378: [338..339]
 r380: [96..97]
 r382: [92..95]
 r383: [94..95]
 r384: [92..93]
 r386: [344..345]
 r388: [340..341]
 r393: [90..91]
 r401: [61..62]
 r403: [57..58]
 r404: [55..56]
 r406: [53..54]
 r407: [33..34]
 r411: [110..111]
 r414: [84..85]
 r416: [82..83]
 r419: [163..164]
 r422: [151..152]
 r423: [23..24]
 r428: [13..14]
 r431: [11..12]
 r432: [20..21]
 r433: [18..19] [3..6]
 r434: [3..4]
 r436: [7..8]
 r438: [156..157]
 r442: [146..147]
 r445: [333..334]
 r446: [329..330]
 r450: [327..328]
 r451: [318..319]
 r459: [316..317]
 r460: [314..315]
 r461: [312..313]
 r468: [310..311]
 r469: [308..309]
 r470: [306..307]
 r473: [304..305]
 r474: [302..303]
 r476: [294..295]
 r477: [77..78]
 r478: [290..291]
 r479: [281..282]
 r481: [261..275]
 r482: [267..268]
 r483: [263..264]
 r484: [259..260]
 r485: [255..256]
 r488: [226..227]
 r490: [230..231]
 r491: [230..231]
 r493: [216..217]
 r494: [216..217]
 r498: [204..205]
 r499: [200..203]
 r500: [196..199]
 r501: [196..199]
 r502: [190..191]
 r503: [184..185]
 r504: [182..183]
 r505: [180..181]
 r506: [70..73]
 r508: [41..44]
 r511: [41..42]
 r512: [39..40]
 r513: [37..38]
 r514: [174..175]
 r516: [66..67]
 r521: [248..249]
 r523: [246..247]
 r531: [242..243]
 r533: [240..241]
 r538: [104..105] [87..89]
 r539: [342..347] [337..339] [92..99]
 r540: [323..328] [285..297] [240..249] [236..237] [220..223]
 r541: [323..328] [285..297] [240..249] [236..237] [220..223]
 r542: [306..317]
 r543: [306..317]
 r564: [144..347] [33..116]
 r576: [142..143]
 r577: [2..2]
 r578: [59..60]
 r579: [15..16]
 r580: [13..14]
 r581: [5..6]
 r582: [335..336]
 r583: [331..332]
 r585: [292..293]
 r586: [283..284]
 r587: [276..277]
 r588: [274..275]
 r589: [269..270]
 r590: [257..258]
 r591: [251..252]
 r592: [251..252]
 r593: [228..229]
 r594: [206..207]
 r595: [70..71]
 r596: [45..46]
 r597: [43..44]
 r599: [248..249]
 r601: [242..243]
 r602: [194..197]
 r603: [188..201]
 r604: [244..245]
 r605: [176..177]
 r606: [320..321]

********** Assignment #2: **********

	 Assigning to 604 (cl=GENERAL_REGS, orig=309, freq=2, tfirst=604, tfreq=2)...
	   Assign 0 to optional reload r604 (freq=2)
	 Assigning to 605 (cl=GENERAL_REGS, orig=147, freq=2, tfirst=605, tfreq=2)...
	   Assign 5 to optional reload r605 (freq=2)
	 Assigning to 606 (cl=GENERAL_REGS, orig=147, freq=2, tfirst=606, tfreq=2)...
	   Assign 0 to optional reload r606 (freq=2)
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Keep optional reload reg 584
Keep optional reload reg 598
Keep optional reload reg 600
Remove optional reload reg 604
  Restoring original insn:
 1257: flags:CC=cmp(r212:DI,r309:DI)
      REG_DEAD r309:DI
  Deleting move 1709
 1709: r604:DI=r309:DI
deleting insn with uid = 1709.
Remove optional reload reg 605
  Restoring original insn:
 1173: r514:DI=sign_extend(r147:SI)
      REG_DEAD r147:SI
  Deleting move 1710
 1710: r605:SI=r147:SI
      REG_DEAD r147:SI
deleting insn with uid = 1710.
Remove optional reload reg 606
  Restoring original insn:
  743: r451:DI=sign_extend(r147:SI)
      REG_DEAD r147:SI
  Deleting move 1711
 1711: r606:SI=r147:SI
      REG_DEAD r147:SI
deleting insn with uid = 1711.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=6,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1257:  (0) r  (1) rm {*cmpdi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1173:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) rm {*extendsidi2_rex64}

********** Pseudo live ranges #6: **********

  BB 109
   Insn 836: point = 0
   Insn 835: point = 0
  BB 127
   Insn 951: point = 0
   Insn 950: point = 0
  BB 125
   Insn 1613: point = 0
  BB 126
   Insn 947: point = 0
  BB 134
   Insn 993: point = 2
   Insn 992: point = 2
  BB 167
   Insn 1653: point = 2
  BB 147
   Insn 1107: point = 2
   Insn 1106: point = 2
  BB 156
   Insn 1221: point = 2
   Insn 1220: point = 2
  BB 171
   Insn 1322: point = 2
  BB 162
   Insn 1644: point = 2
  BB 172
   Insn 1325: point = 2
  BB 161
   Insn 1321: point = 2
   Insn 1320: point = 2
   Insn 1319: point = 3
  BB 159
   Insn 1640: point = 5
   Insn 68: point = 5
  BB 158
   Insn 1638: point = 6
   Insn 43: point = 6
  BB 93
   Insn 1593: point = 7
   Insn 66: point = 7
  BB 92
   Insn 1591: point = 8
   Insn 65: point = 8
  BB 91
   Insn 1589: point = 9
   Insn 64: point = 9
  BB 90
   Insn 1587: point = 10
   Insn 63: point = 10
  BB 89
   Insn 1585: point = 11
   Insn 62: point = 11
  BB 88
   Insn 1583: point = 12
   Insn 61: point = 12
  BB 87
   Insn 1581: point = 13
   Insn 60: point = 13
  BB 86
   Insn 1579: point = 14
   Insn 59: point = 14
  BB 85
   Insn 1577: point = 15
   Insn 58: point = 15
  BB 84
   Insn 1575: point = 16
   Insn 57: point = 16
  BB 83
   Insn 1573: point = 17
   Insn 56: point = 17
  BB 82
   Insn 1571: point = 18
   Insn 55: point = 18
  BB 81
   Insn 1569: point = 19
   Insn 54: point = 19
  BB 80
   Insn 1567: point = 20
   Insn 53: point = 20
  BB 79
   Insn 1565: point = 21
   Insn 52: point = 21
  BB 78
   Insn 1563: point = 22
   Insn 51: point = 22
  BB 77
   Insn 1561: point = 23
   Insn 50: point = 23
  BB 76
   Insn 1559: point = 24
   Insn 49: point = 24
  BB 75
   Insn 1557: point = 25
   Insn 48: point = 25
  BB 74
   Insn 1555: point = 26
   Insn 47: point = 26
  BB 73
   Insn 1553: point = 27
   Insn 46: point = 27
  BB 72
   Insn 1551: point = 28
   Insn 45: point = 28
  BB 71
   Insn 1549: point = 29
   Insn 581: point = 29
   Insn 1704: point = 30
   Insn 1712: point = 31
   Deleting dead insn 1712
deleting insn with uid = 1712.
   Insn 578: point = 31
   Insn 577: point = 31
   Insn 576: point = 32
   Insn 575: point = 33
   Insn 1669: point = 35
  BB 160
   Insn 67: point = 37
  BB 53
   Insn 1529: point = 38
  BB 94
   Insn 1595: point = 38
   Insn 675: point = 38
   Insn 674: point = 40
  BB 157
   Insn 1636: point = 41
   Insn 42: point = 41
  BB 69
   Insn 1547: point = 42
   Insn 40: point = 42
   Insn 557: point = 43
   Insn 556: point = 43
   Insn 555: point = 43
   Insn 554: point = 43
   Insn 553: point = 43
  BB 68
   Insn 1545: point = 43
   Insn 39: point = 43
   Insn 547: point = 44
   Insn 546: point = 45
   Insn 544: point = 46
   Insn 543: point = 46
   Insn 542: point = 46
   Insn 541: point = 47
   Insn 540: point = 47
   Insn 1668: point = 48
   Insn 539: point = 49
   Insn 1667: point = 51
  BB 61
   Insn 1537: point = 52
   Insn 35: point = 52
  BB 70
   Insn 570: point = 53
   Insn 569: point = 53
   Insn 38: point = 53
   Insn 568: point = 54
   Insn 566: point = 54
   Insn 565: point = 55
   Insn 564: point = 55
   Insn 563: point = 56
   Insn 562: point = 57
  BB 56
   Insn 1531: point = 58
   Insn 471: point = 58
  BB 55
   Insn 468: point = 61
   Insn 467: point = 62
   Insn 466: point = 63
   Insn 465: point = 64
   Insn 464: point = 65
   Insn 463: point = 65
   Insn 462: point = 66
   Insn 461: point = 66
   Insn 460: point = 66
  BB 54
   Insn 458: point = 66
   Insn 457: point = 66
   Insn 456: point = 66
   Insn 455: point = 66
   Insn 454: point = 67
   Insn 453: point = 67
  BB 58
   Insn 1533: point = 67
   Insn 37: point = 67
  BB 43
   Insn 1511: point = 68
   Insn 44: point = 68
  BB 60
   Insn 1535: point = 69
   Insn 36: point = 69
  BB 67
   Insn 1543: point = 70
  BB 66
   Insn 531: point = 70
   Insn 530: point = 70
  BB 65
   Insn 528: point = 72
   Insn 527: point = 72
   Insn 526: point = 72
   Insn 524: point = 73
   Insn 523: point = 73
   Insn 522: point = 73
   Insn 521: point = 73
   Insn 520: point = 73
  BB 64
   Insn 1540: point = 73
  BB 63
   Insn 514: point = 73
   Insn 513: point = 73
  BB 62
   Insn 510: point = 75
   Insn 509: point = 75
   Insn 507: point = 75
   Insn 505: point = 76
   Insn 504: point = 76
   Insn 503: point = 76
   Insn 502: point = 76
   Insn 501: point = 76
  BB 59
   Insn 491: point = 76
   Insn 490: point = 76
  BB 57
   Insn 484: point = 78
   Insn 483: point = 78
   Insn 482: point = 78
   Insn 480: point = 79
   Insn 479: point = 79
   Insn 478: point = 79
   Insn 477: point = 79
   Insn 476: point = 79
  BB 42
   Insn 355: point = 79
   Insn 352: point = 80
  BB 41
   Insn 351: point = 83
   Insn 350: point = 83
  BB 153
   Insn 1630: point = 84
   Insn 1167: point = 84
   Insn 1166: point = 86
   Insn 1165: point = 88
   Insn 1697: point = 90
   Insn 1164: point = 92
   Insn 1696: point = 92
   Insn 1163: point = 93
   Insn 1695: point = 95
   Insn 1161: point = 96
  BB 152
   Insn 32: point = 98
  BB 40
   Insn 342: point = 101
   Insn 341: point = 101
   Insn 340: point = 101
  BB 39
   Insn 334: point = 102
  BB 38
   Insn 332: point = 103
   Insn 331: point = 103
  BB 37
   Insn 319: point = 104
   Insn 318: point = 104
   Insn 328: point = 105
   Insn 326: point = 106
   Insn 317: point = 107
  BB 36
   Insn 314: point = 109
   Insn 313: point = 109
   Insn 312: point = 110
  BB 35
   Insn 309: point = 112
   Insn 308: point = 112
   Insn 307: point = 112
   Insn 306: point = 112
   Insn 305: point = 112
   Insn 304: point = 113
   Insn 303: point = 114
   Insn 1666: point = 115
   Insn 302: point = 117
   Insn 1665: point = 117
   Insn 300: point = 118
  BB 34
   Insn 294: point = 119
   Insn 293: point = 121
   Insn 288: point = 122
  BB 33
   Insn 286: point = 124
   Insn 285: point = 124
   Insn 283: point = 124
  BB 155
   Insn 1634: point = 127
   Insn 1215: point = 127
   Insn 1214: point = 129
   Insn 1211: point = 131
   Insn 1208: point = 132
   Insn 1207: point = 133
   Insn 1206: point = 133
  BB 151
   Insn 1628: point = 134
   Insn 1694: point = 134
   Insn 33: point = 136
   Insn 1693: point = 137
   Insn 1142: point = 139
  BB 112
   Insn 1605: point = 142
   Insn 34: point = 142
  BB 111
   Insn 845: point = 145
   Insn 844: point = 145
   Insn 843: point = 146
  BB 45
   Insn 1515: point = 149
   Insn 389: point = 149
   Insn 388: point = 151
   Insn 383: point = 152
   Insn 382: point = 153
   Insn 381: point = 154
  BB 32
   Insn 274: point = 156
  BB 31
   Insn 269: point = 159
  BB 30
   Insn 267: point = 161
   Insn 266: point = 161
  BB 29
   Insn 263: point = 163
  BB 28
   Insn 261: point = 165
   Insn 260: point = 165
  BB 26
   Insn 249: point = 167
   Insn 248: point = 167
   Insn 247: point = 167
   Insn 246: point = 168
   Insn 243: point = 169
   Insn 241: point = 169
   Insn 240: point = 171
  BB 23
   Insn 216: point = 174
   Insn 215: point = 174
   Insn 214: point = 175
   Insn 213: point = 177
   Insn 212: point = 178
   Insn 210: point = 180
  BB 21
   Insn 1505: point = 183
   Insn 1389: point = 183
   Insn 1442: point = 185
   Insn 1440: point = 185
   Insn 1439: point = 186
   Insn 1437: point = 186
   Insn 1436: point = 186
   Insn 1435: point = 186
   Insn 1434: point = 186
   Insn 1433: point = 186
   Insn 191: point = 186
  BB 27
   Insn 1509: point = 189
   Insn 254: point = 189
   Insn 251: point = 191
  BB 20
   Insn 20: point = 193
   Insn 19: point = 194
   Insn 184: point = 195
   Insn 183: point = 196
  BB 18
   Insn 1503: point = 198
   Insn 18: point = 198
   Insn 167: point = 199
  BB 44
   Insn 1513: point = 200
   Insn 375: point = 200
   Insn 374: point = 202
   Insn 373: point = 203
   Insn 370: point = 205
   Insn 369: point = 206
   Insn 367: point = 207
   Insn 366: point = 208
  BB 17
   Insn 17: point = 210
   Insn 16: point = 212
  BB 14
   Insn 1501: point = 215
   Insn 1438: point = 215
   Insn 148: point = 216
   Insn 145: point = 218
   Insn 144: point = 219
   Insn 142: point = 220
  BB 3
   Insn 1499: point = 222
   Insn 75: point = 222
   Insn 74: point = 223
  BB 13
   Insn 139: point = 224
   Insn 138: point = 224
   Insn 137: point = 225
   Insn 136: point = 226
   Insn 135: point = 228
   Insn 134: point = 230
   Insn 133: point = 230
   Insn 132: point = 230
   Insn 131: point = 232
   Insn 130: point = 233
  BB 12
   Insn 127: point = 235
   Insn 126: point = 236
   Insn 1661: point = 238
   Insn 125: point = 239
   Insn 122: point = 240
   Insn 121: point = 241
   Insn 120: point = 242
   Insn 119: point = 242
   Insn 118: point = 242
   Insn 117: point = 242
   Insn 1662: point = 244
   Insn 116: point = 245
   Insn 113: point = 246
  BB 11
   Insn 110: point = 246
   Insn 109: point = 246
   Insn 108: point = 246
   Insn 107: point = 247
   Insn 1663: point = 249
  BB 10
   Insn 103: point = 251
   Insn 102: point = 251
   Insn 101: point = 251
  BB 9
   Insn 98: point = 252
   Insn 97: point = 253
  BB 8
   Insn 95: point = 254
   Insn 94: point = 254
  BB 7
   Insn 91: point = 254
   Insn 90: point = 255
  BB 6
   Insn 88: point = 256
   Insn 87: point = 256
  BB 5
   Insn 84: point = 256
  BB 4
   Insn 82: point = 256
   Insn 81: point = 256
   Insn 80: point = 256
  BB 2
   Insn 72: point = 256
   Insn 71: point = 256
   Insn 3: point = 256
  BB 16
   Insn 161: point = 258
   Insn 160: point = 259
  BB 96
   Insn 1599: point = 261
   Insn 704: point = 261
   Insn 701: point = 263
   Insn 700: point = 264
   Insn 698: point = 265
   Insn 697: point = 266
   Insn 696: point = 266
   Insn 695: point = 266
   Insn 694: point = 266
   Insn 693: point = 266
  BB 15
   Insn 158: point = 267
   Insn 155: point = 269
   Insn 154: point = 270
   Insn 152: point = 271
  BB 52
   Insn 446: point = 273
   Insn 445: point = 273
   Insn 444: point = 274
  BB 51
   Insn 442: point = 276
   Insn 441: point = 276
   Insn 440: point = 276
   Insn 439: point = 277
  BB 49
   Insn 1523: point = 278
   Insn 12: point = 278
   Insn 11: point = 279
   Insn 10: point = 280
   Insn 418: point = 281
  BB 95
   Insn 1597: point = 282
   Insn 688: point = 282
   Insn 685: point = 284
   Insn 684: point = 285
   Insn 682: point = 286
   Insn 681: point = 287
   Insn 680: point = 287
  BB 48
   Insn 1521: point = 288
   Insn 9: point = 288
   Insn 8: point = 289
   Insn 7: point = 290
   Insn 413: point = 291
  BB 46
   Insn 1517: point = 292
   Insn 6: point = 292
   Insn 5: point = 293
   Insn 4: point = 294
   Insn 395: point = 295
  BB 47
   Insn 1519: point = 296
   Insn 408: point = 296
   Insn 405: point = 298
   Insn 404: point = 299
   Insn 402: point = 300
   Insn 401: point = 301
  BB 50
   Insn 1525: point = 302
   Insn 15: point = 302
   Insn 14: point = 303
   Insn 13: point = 304
   Insn 434: point = 305
   Insn 433: point = 305
   Insn 432: point = 305
   Insn 431: point = 306
   Insn 430: point = 307
   Insn 429: point = 307
   Insn 428: point = 308
   Insn 427: point = 308
   Insn 426: point = 308
   Insn 425: point = 309
   Insn 424: point = 309
   Insn 423: point = 309
  BB 19
   Insn 180: point = 310
   Insn 177: point = 312
   Insn 176: point = 313
   Insn 174: point = 314
  BB 154
   Insn 1632: point = 316
   Insn 1180: point = 316
   Insn 1177: point = 317
   Insn 1176: point = 318
   Insn 1175: point = 318
   Insn 1174: point = 318
   Insn 1173: point = 320
  BB 150
   Insn 1137: point = 323
   Insn 1136: point = 323
  BB 149
   Insn 1135: point = 325
   Insn 1134: point = 325
   Insn 1121: point = 325
   Insn 1120: point = 325
   Insn 1119: point = 327
   Insn 1118: point = 328
   Insn 1117: point = 329
   Insn 1116: point = 331
   Insn 1115: point = 332
   Insn 1114: point = 333
  BB 146
   Insn 1104: point = 335
   Insn 1708: point = 335
   Insn 1103: point = 337
   Insn 1102: point = 337
   Insn 1101: point = 339
   Insn 1100: point = 340
   Insn 1706: point = 341
   Insn 1097: point = 343
   Insn 1096: point = 344
   Insn 1095: point = 344
   Insn 1094: point = 345
   Insn 1705: point = 346
   Insn 1093: point = 348
   Insn 1092: point = 349
   Insn 1707: point = 351
   Insn 1091: point = 353
   Insn 1692: point = 355
   Insn 1090: point = 357
   Insn 1691: point = 357
  BB 148
   Insn 1111: point = 360
  BB 145
   Insn 1085: point = 363
   Insn 1084: point = 363
   Insn 1083: point = 363
   Insn 1081: point = 364
  BB 143
   Insn 1625: point = 367
   Insn 30: point = 367
   Insn 1065: point = 368
   Insn 1064: point = 369
   Insn 1659: point = 371
   Insn 1063: point = 372
   Insn 1060: point = 373
   Insn 1059: point = 374
   Insn 1058: point = 374
  BB 144
   Insn 31: point = 375
   Insn 1077: point = 376
   Insn 1076: point = 377
   Insn 1075: point = 377
   Insn 1074: point = 378
  BB 142
   Insn 1055: point = 381
   Insn 1054: point = 381
  BB 118
   Insn 1607: point = 382
   Insn 886: point = 382
   Insn 885: point = 383
  BB 141
   Insn 1051: point = 384
   Insn 1050: point = 384
   Insn 29: point = 384
   Insn 1049: point = 385
   Insn 1048: point = 385
  BB 165
   Insn 1649: point = 387
   Insn 1268: point = 387
   Insn 1267: point = 388
   Insn 1265: point = 389
  BB 139
   Insn 1621: point = 391
   Insn 1033: point = 391
  BB 137
   Insn 1025: point = 393
   Insn 1024: point = 393
   Insn 1023: point = 394
   Insn 1022: point = 394
   Insn 1017: point = 395
   Insn 1016: point = 396
   Insn 1015: point = 396
   Insn 1014: point = 397
   Insn 1013: point = 397
   Insn 1012: point = 397
   Insn 1690: point = 397
   Insn 1011: point = 399
   Insn 1689: point = 400
  BB 140
   Insn 1623: point = 402
   Insn 1042: point = 402
   Insn 1660: point = 404
   Insn 1041: point = 405
   Insn 1039: point = 406
   Insn 1038: point = 406
   Insn 1037: point = 406
  BB 166
   Insn 1275: point = 407
   Insn 1274: point = 407
  BB 138
   Insn 1031: point = 408
   Insn 1030: point = 408
   Insn 1029: point = 409
   Insn 1028: point = 410
   Insn 1027: point = 410
  BB 136
   Insn 1004: point = 411
   Insn 1003: point = 411
   Insn 1002: point = 412
  BB 135
   Insn 1619: point = 413
   Insn 997: point = 413
   Insn 996: point = 414
  BB 170
   Insn 1657: point = 416
   Insn 1314: point = 416
   Insn 1313: point = 417
   Insn 1311: point = 418
  BB 169
   Insn 1309: point = 420
   Insn 1308: point = 420
   Insn 1307: point = 421
   Insn 1306: point = 422
   Insn 1305: point = 422
  BB 168
   Insn 1655: point = 423
   Insn 28: point = 423
   Insn 1295: point = 423
   Insn 1703: point = 424
   Insn 1293: point = 426
   Insn 1702: point = 427
   Insn 1291: point = 428
   Insn 1288: point = 429
   Insn 1287: point = 430
   Insn 1285: point = 431
  BB 133
   Insn 1617: point = 433
  BB 164
   Insn 1647: point = 434
  BB 163
   Insn 1258: point = 435
   Insn 1257: point = 435
   Insn 1252: point = 435
   Insn 1251: point = 435
   Insn 1700: point = 436
   Insn 1249: point = 438
   Insn 1699: point = 439
   Insn 1247: point = 440
   Insn 1246: point = 441
   Insn 1245: point = 442
   Insn 1243: point = 443
  BB 132
   Insn 987: point = 445
   Insn 986: point = 445
  BB 131
   Insn 984: point = 446
   Insn 983: point = 446
   Insn 981: point = 446
   Insn 980: point = 447
   Insn 979: point = 447
  BB 130
   Insn 27: point = 448
  BB 129
   Insn 974: point = 450
   Insn 973: point = 450
   Insn 1687: point = 450
   Insn 971: point = 452
   Insn 1688: point = 453
   Insn 1686: point = 454
   Insn 969: point = 456
  BB 128
   Insn 966: point = 457
   Insn 965: point = 457
   Insn 1685: point = 459
   Insn 960: point = 461
   Insn 1684: point = 461
   Insn 958: point = 462
   Insn 957: point = 463
   Insn 956: point = 463
   Insn 955: point = 465
  BB 124
   Insn 941: point = 468
   Insn 940: point = 468
   Insn 939: point = 468
   Insn 936: point = 469
   Insn 935: point = 470
   Insn 934: point = 470
   Insn 933: point = 471
   Insn 932: point = 472
  BB 122
   Insn 1609: point = 475
   Insn 922: point = 475
   Insn 921: point = 475
   Insn 1683: point = 477
   Insn 920: point = 479
   Insn 1682: point = 479
  BB 123
   Insn 26: point = 481
   Insn 927: point = 483
  BB 121
   Insn 918: point = 484
   Insn 1681: point = 484
   Insn 917: point = 486
   Insn 1680: point = 486
   Insn 914: point = 487
  BB 120
   Insn 912: point = 489
   Insn 911: point = 489
   Insn 1679: point = 489
   Insn 908: point = 491
   Insn 1678: point = 491
   Insn 907: point = 493
  BB 119
   Insn 897: point = 495
   Insn 896: point = 495
   Insn 1677: point = 497
   Insn 892: point = 499
   Insn 1676: point = 499
  BB 117
   Insn 883: point = 501
   Insn 882: point = 501
  BB 116
   Insn 879: point = 502
  BB 115
   Insn 877: point = 504
   Insn 876: point = 504
   Insn 870: point = 504
   Insn 869: point = 504
   Insn 868: point = 505
  BB 114
   Insn 25: point = 507
  BB 113
   Insn 859: point = 509
   Insn 858: point = 509
   Insn 1675: point = 511
   Insn 851: point = 513
   Insn 1674: point = 513
  BB 110
   Insn 841: point = 515
   Insn 840: point = 515
  BB 108
   Insn 833: point = 516
   Insn 832: point = 516
   Insn 831: point = 517
   Insn 828: point = 519
  BB 107
   Insn 1603: point = 521
   Insn 819: point = 521
   Insn 818: point = 521
  BB 106
   Insn 816: point = 522
   Insn 815: point = 522
   Insn 813: point = 522
  BB 105
   Insn 808: point = 524
   Insn 807: point = 524
   Insn 1235: point = 524
   Insn 803: point = 525
   Insn 802: point = 527
   Insn 801: point = 529
  BB 104
   Insn 796: point = 532
   Insn 795: point = 532
   Insn 794: point = 533
   Insn 793: point = 535
   Insn 792: point = 537
   Insn 791: point = 538
   Insn 787: point = 539
   Insn 782: point = 540
  BB 103
   Insn 774: point = 543
   Insn 773: point = 543
   Insn 772: point = 544
   Insn 771: point = 546
   Insn 770: point = 548
   Insn 769: point = 549
  BB 102
   Insn 760: point = 551
   Insn 759: point = 551
  BB 101
   Insn 757: point = 552
   Insn 756: point = 552
   Insn 755: point = 552
   Insn 754: point = 553
   Insn 748: point = 554
   Insn 747: point = 555
   Insn 746: point = 555
   Insn 745: point = 555
   Insn 743: point = 557
  BB 100
   Insn 741: point = 560
   Insn 740: point = 560
   Insn 739: point = 560
   Insn 738: point = 561
   Insn 737: point = 562
   Insn 736: point = 564
  BB 98
   Insn 1601: point = 566
   Insn 723: point = 566
  BB 99
   Insn 733: point = 568
   Insn 732: point = 568
   Insn 731: point = 569
   Insn 730: point = 570
   Insn 729: point = 571
   Insn 728: point = 571
  BB 97
   Insn 721: point = 573
   Insn 720: point = 573
   Insn 719: point = 573
   Insn 718: point = 574
   Insn 717: point = 575
   Insn 715: point = 576
   Insn 714: point = 577
   Insn 713: point = 578
   Insn 1672: point = 579
   Insn 711: point = 581
   Insn 1671: point = 583
   Insn 710: point = 585
   Insn 1670: point = 585
  BB 22
   Insn 204: point = 587
   Insn 203: point = 589
  BB 25
   Insn 1507: point = 591
   Insn 1390: point = 591
   Insn 229: point = 593
  BB 24
   Insn 225: point = 596
   Insn 224: point = 596
   Insn 221: point = 596
   Insn 219: point = 598
 r147: [558..579] [321..520]
 r309: [435..450] [393..412]
 r481: [466..489]
 r602: [342..346]
 r603: [336..351]
Compressing live ranges: from 601 to 10 - 1%
Ranges after the compression:
 r147: [0..9]
 r309: [2..5]
 r481: [6..7]
 r602: [0..1]
 r603: [0..1]

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 173 n_edges 270 count 173 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 173 n_edges 270 count 173 (    1)

Cands:

BB 2:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 576
  dead regs: 17 [flags] 20 [frame]

BB 3:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 318 320
  changed regs: 318 320
  dead regs:

BB 4:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 17 [flags]

BB 5:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 6:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 17 [flags]

BB 7:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 349
  dead regs: 349

BB 8:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 17 [flags]

BB 9:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 350
  dead regs: 350

BB 10:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99
  changed regs: 99
  dead regs: 17 [flags]

BB 11:
  register live in: 99
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102 103
  changed regs: 102 103 352
  dead regs: 17 [flags] 99 352

BB 12:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102 103
  changed regs: 0 [ax] 4 [si] 5 [di] 102 103 107 109 354 355 357 358
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 109 354 355 357 358

BB 13:
  register live in: 102 103
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 318 320
  changed regs: 318 320 359 360 361
  dead regs: 102 103 359 360 361

BB 14:
  register live in: 318 320
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 318 320 321 341 343 564
  changed regs: 321 341 343 363 564
  dead regs: 363

BB 15:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 321 341 343 367
  dead regs: 367

BB 16:
  register live in: 321 341 343 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 318 320 321 341 343 564
  changed regs: 318 320
  dead regs:

BB 17:
  register live in: 318 320 321 341 343 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 320 321 343 564
  changed regs: 87 88
  dead regs: 318 341

BB 18:
  register live in: 87 88 320 321 343 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 320 321 343 564
  changed regs: 89
  dead regs:

BB 19:
  register live in: 87 88 89 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 320 321 343 564
  changed regs: 320 321 343 371
  dead regs: 371

BB 20:
  register live in: 87 88 89 320 321 343 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 320 321 343 564
  changed regs: 313 314 315 316
  dead regs:

BB 21:
  register live in: 87 88 89 313 314 315 316 320 321 343 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 321 539 564
  changed regs: 313 314 315 316 376 539
  dead regs: 17 [flags] 320 343 376

BB 22:
  register live in: 87 88 89 313 314 315 316 539 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 321 539 564
  changed regs: 321 378
  dead regs: 378

BB 23:
  register live in: 87 88 89 313 314 315 316 321 539 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 382 539 564
  changed regs: 380 382 383 384
  dead regs: 17 [flags] 321 380 383 384

BB 24:
  register live in: 87 88 89 313 314 315 316 539 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 539 564
  changed regs: 87 386
  dead regs: 17 [flags] 87 386

BB 25:
  register live in: 87 88 89 313 314 315 316 539 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 539 564
  changed regs: 388 539
  dead regs: 388 539

BB 26:
  register live in: 88 89 313 314 315 316 382 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 321 538 564
  changed regs: 87 88 321 393 538
  dead regs: 17 [flags] 382 393

BB 27:
  register live in: 87 88 89 313 314 315 316 321 538 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 313 314 315 316 320 321 343 564
  changed regs: 320 343
  dead regs: 538

BB 28:
  register live in: 88 89 313 314 315 316 538 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 313 314 316 538 564
  changed regs:
  dead regs: 17 [flags] 315

BB 29:
  register live in: 88 89 313 314 316 538 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 313 314 538 564
  changed regs:
  dead regs: 316

BB 30:
  register live in: 88 89 313 314 538 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 314 538 564
  changed regs:
  dead regs: 17 [flags] 313

BB 31:
  register live in: 88 89 314 538 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 538 564
  changed regs:
  dead regs: 314

BB 32:
  register live in: 88 89 538 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 186 564
  changed regs: 186
  dead regs: 538

BB 33:
  register live in: 88 89 186 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 564
  changed regs: 90
  dead regs: 17 [flags] 186

BB 34:
  register live in: 89 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 564
  changed regs: 88 90 401
  dead regs: 401

BB 35:
  register live in: 88 89 90 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 564
  changed regs: 403 404 578
  dead regs: 17 [flags] 403 404 578

BB 36:
  register live in: 88 89 90 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 564
  changed regs: 406
  dead regs: 17 [flags] 406

BB 37:
  register live in: 88 89 90 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 311 327 564
  changed regs: 307 311 327
  dead regs: 17 [flags] 307

BB 38:
  register live in: 88 89 90 311 327 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 311 327 564
  changed regs:
  dead regs: 17 [flags]

BB 39:
  register live in: 88 89 90 311 327 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 311 327 564
  changed regs:
  dead regs:

BB 40:
  register live in: 88 89 90 311 327 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 311 327 564
  changed regs: 311
  dead regs: 17 [flags]

BB 41:
  register live in: 88 89 90 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 564
  changed regs:
  dead regs: 17 [flags]

BB 42:
  register live in: 88 89 90 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 564
  changed regs: 407
  dead regs: 90 407

BB 43:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 44:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 320 321 343 564
  changed regs: 87 88 320 321 342 343 411
  dead regs: 342 411

BB 45:
  register live in: 88 89 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 186 564
  changed regs: 88 186 414 416
  dead regs: 88 414 416

BB 46:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 321 341 343
  dead regs:

BB 47:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 321 341 343 419
  dead regs: 419

BB 48:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 321 341 343
  dead regs:

BB 49:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 321 341 343
  dead regs:

BB 50:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 0 [ax] 4 [si] 5 [di] 136 137 321 341 343
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 136 137

BB 51:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168 564
  changed regs: 168
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 52:
  register live in: 168 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 564
  changed regs: 422
  dead regs: 17 [flags] 168 422

BB 53:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 54:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 198
  changed regs: 0 [ax] 5 [di] 198
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 55:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 198
  changed regs: 0 [ax] 4 [si] 5 [di] 198 200 423
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 200 423

BB 56:
  register live in: 198
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs: 198

BB 57:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 202
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 202
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 58:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 59:
  register live in: 202
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 17 [flags] 202

BB 60:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 61:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 62:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 203
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 203
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 63:
  register live in: 203
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 17 [flags] 203

BB 64:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 65:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 204
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 204
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 66:
  register live in: 204
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 17 [flags] 204

BB 67:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 68:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 92 428 431 579 580
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 428 431 579 580

BB 69:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 92
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 70:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 176 433
  changed regs: 0 [ax] 5 [di] 92 176 432 433
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 432

BB 71:
  register live in: 92 176 433
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 0 [ax] 4 [si] 5 [di] 433 434 581
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 176 433 434 581

BB 72:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 73:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 74:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 75:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 76:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 77:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 78:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 79:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 80:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 81:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 82:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 83:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 84:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 85:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 86:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 87:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 88:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 89:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 90:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 91:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 92:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 93:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 94:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92 436
  dead regs: 436

BB 95:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 0 [ax] 5 [di] 321 341 343 438
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 438

BB 96:
  register live in: 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 321 341 343 564
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 321 341 343 442
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 442

BB 97:
  register live in: 88 89 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 245 540 541 564
  changed regs: 147 152 245 445 446 540 541 582 583
  dead regs: 17 [flags] 445 446 582 583

BB 98:
  register live in: 88 89 147 152 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 154 245 540 541 564
  changed regs: 154
  dead regs:

BB 99:
  register live in: 88 89 147 152 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 154 245 540 541 564
  changed regs: 154 245 450
  dead regs: 245 450

BB 100:
  register live in: 88 89 147 152 154 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 156 157 158 244 245 540 541 564
  changed regs: 156 157 158 244
  dead regs: 17 [flags] 154

BB 101:
  register live in: 147 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 186 193 543 564
  changed regs: 0 [ax] 88 186 193 451 543
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 147 451

BB 102:
  register live in: 88 186 193 543 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 186 193 543 564
  changed regs:
  dead regs:

BB 103:
  register live in: 88 186 193 543 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 186 542 543 564
  changed regs: 459 460 461 542
  dead regs: 17 [flags] 193 459 460 461

BB 104:
  register live in: 88 186 543 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 186 542 543 564
  changed regs: 193 468 469 470 542 543
  dead regs: 17 [flags] 193 468 469 470 543

BB 105:
  register live in: 88 186 542 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 186 564
  changed regs: 87 89 473 474
  dead regs: 17 [flags] 473 474 542

BB 106:
  register live in: 87 88 186 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 186 564
  changed regs: 89
  dead regs: 17 [flags]

BB 107:
  register live in: 87 88 89 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 564
  changed regs: 88
  dead regs:

BB 108:
  register live in: 88 89 147 152 156 157 158 244 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 156 158 213 244 245 540 541 564
  changed regs: 213 476
  dead regs: 17 [flags] 157 476

BB 109:
  register live in:
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 110:
  register live in: 88 89 147 152 156 158 213 244 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 156 158 213 244 245 540 541 564
  changed regs:
  dead regs: 17 [flags]

BB 111:
  register live in: 88 89 158 213 244 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 158 213 564
  changed regs: 477
  dead regs: 17 [flags] 244 477

BB 112:
  register live in: 158 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 564
  changed regs: 88
  dead regs: 158

BB 113:
  register live in: 88 89 147 152 156 213 244 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 156 213 224 244 245 540 541 564
  changed regs: 224 478 585
  dead regs: 17 [flags] 478 585

BB 114:
  register live in: 88 89 147 152 156 213 224 244 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 156 213 224 227 244 540 541 564
  changed regs: 227
  dead regs:

BB 115:
  register live in: 88 89 147 152 156 213 224 227 244 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 156 213 224 227 244 540 541 564
  changed regs: 226 227
  dead regs: 17 [flags] 226

BB 116:
  register live in: 88 89 147 152 224 244 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 244 245 540 541 564
  changed regs: 245
  dead regs:

BB 117:
  register live in: 88 89 147 152 224 244 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 244 245 540 541 564
  changed regs:
  dead regs: 17 [flags]

BB 118:
  register live in: 88 89 147 224 245 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 540 541 564
  changed regs:
  dead regs: 245

BB 119:
  register live in: 88 89 147 152 224 244 245 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 230 244 245 564
  changed regs: 230 479 586
  dead regs: 17 [flags] 479 586

BB 120:
  register live in: 88 89 147 152 224 244 245 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 232 245 481 564
  changed regs: 232 481 587
  dead regs: 17 [flags] 244 587

BB 121:
  register live in: 88 89 147 152 224 232 245 481 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 232 237 238 245 481 564
  changed regs: 237 238 588
  dead regs: 17 [flags] 588

BB 122:
  register live in: 88 89 147 152 224 232 237 245 481 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 232 240 245 481 564
  changed regs: 240 482 589
  dead regs: 237 482 589

BB 123:
  register live in: 88 89 147 152 224 232 238 245 481 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 232 240 245 481 564
  changed regs: 240
  dead regs: 238

BB 124:
  register live in: 88 89 147 152 224 232 240 245 481 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 242 481 564
  changed regs: 0 [ax] 4 [si] 5 [di] 242 483
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 232 240 245 483

BB 125:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 126:
  register live in: 245
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 245

BB 127:
  register live in:
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 128:
  register live in: 88 89 147 152 224 242 481 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 152 224 230 244 245 564
  changed regs: 230 244 245 484 485 590
  dead regs: 17 [flags] 242 481 484 485 590

BB 129:
  register live in: 88 89 147 224 230 245 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 245 309 564
  changed regs: 309 591 592
  dead regs: 17 [flags] 230 591 592

BB 130:
  register live in: 88 89 147 224 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 309 564
  changed regs: 212
  dead regs:

BB 131:
  register live in: 88 89 147 212 224 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 251 309 564
  changed regs: 0 [ax] 5 [di] 251
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 132:
  register live in: 88 89 147 212 224 251 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 251 309 564
  changed regs:
  dead regs: 17 [flags]

BB 133:
  register live in: 88 89 147 212 224 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 564
  changed regs:
  dead regs:

BB 134:
  register live in:
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 135:
  register live in: 88 89 147 212 224 347 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 275 347 540 541 564
  changed regs: 275
  dead regs: 212

BB 136:
  register live in: 88 89 147 224 245 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 245 270 309 564
  changed regs: 0 [ax] 270
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 137:
  register live in: 88 89 147 224 245 270 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 270 275 309 564
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 274 275 488 593
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 245 274 488 593

BB 138:
  register live in: 88 89 147 224 270 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 270 309 564
  changed regs: 0 [ax] 5 [di] 277
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 277

BB 139:
  register live in: 88 89 147 224 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 275 564
  changed regs: 275
  dead regs:

BB 140:
  register live in: 88 89 147 224 270 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 245 270 309 564
  changed regs: 5 [di] 245 490 491
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 490 491

BB 141:
  register live in: 88 89 147 224 275 347 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 275 280 308 347 540 541 564
  changed regs: 280 308
  dead regs: 17 [flags]

BB 142:
  register live in: 88 89 147 224 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 540 541 564
  changed regs:
  dead regs: 17 [flags]

BB 143:
  register live in: 88 89 147 224 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 275 280 308 347 564
  changed regs: 5 [di] 275 280 308 347 493 494
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 493 494

BB 144:
  register live in: 88 89 147 224 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 275 280 308 347 564
  changed regs: 275 280 308 347
  dead regs: 540 541

BB 145:
  register live in: 88 89 147 224 275 280 308 347 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 275 280 287 289 308 347 564
  changed regs: 287 289
  dead regs: 17 [flags] 224

BB 146:
  register live in: 88 89 147 275 280 287 289 308 347 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 287 289 299 308 347 564
  changed regs: 0 [ax] 4 [si] 5 [di] 280 287 297 299 498 499 500 501 502 594 602 603
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 275 280 287 297 498 499 500 501 502 594 602 603

BB 147:
  register live in:
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 148:
  register live in: 88 89 147 280 287 289 308 347 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 287 289 299 308 347 564
  changed regs: 299
  dead regs: 280

BB 149:
  register live in: 88 89 147 287 289 299 308 347 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 289 306 308 347 564
  changed regs: 306 503 504 505
  dead regs: 17 [flags] 287 299 503 504 505

BB 150:
  register live in: 147 289 306 308 347 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 147 289 306 347 564
  changed regs:
  dead regs: 17 [flags] 308

BB 151:
  register live in: 289 347 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 564
  changed regs: 88 506 595
  dead regs: 289 347 506 595

BB 152:
  register live in: 88 89 213 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 306 564
  changed regs: 306
  dead regs: 213

BB 153:
  register live in: 88 89 306 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 90 564
  changed regs: 90 508 511 512 513 596 597
  dead regs: 306 508 511 512 513 596 597

BB 154:
  register live in: 147 306 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87 88 89 564
  changed regs: 0 [ax] 87 88 89 514
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 147 306 514

BB 155:
  register live in: 88 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 186 564
  changed regs: 0 [ax] 89 160 186 516
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 160 516

BB 156:
  register live in:
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 157:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 158:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 159:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 160:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
  changed regs: 92
  dead regs:

BB 161:
  register live in: 92
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 0 [ax] 17 [flags] 577
  dead regs: 17 [flags] 20 [frame] 92

BB 162:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 163:
  register live in: 88 89 147 212 224 251 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 309 347 540 541 564
  changed regs: 212 347 521 523 540 541 599
  dead regs: 17 [flags] 251 521 523 599

BB 164:
  register live in: 88 89 147 212 224 347 540 541 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 347 540 541 564
  changed regs:
  dead regs:

BB 165:
  register live in: 88 89 147 224 275 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 275 347 540 541 564
  changed regs: 347 540 541
  dead regs:

BB 166:
  register live in: 88 89 147 224 270 309 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 224 270 309 564
  changed regs:
  dead regs: 17 [flags]

BB 167:
  register live in:
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 168:
  register live in: 88 89 147 212 224 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 347 540 541 564
  changed regs: 212 347 531 533 540 541 601
  dead regs: 531 533 601

BB 169:
  register live in: 88 89 147 212 224 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 564
  changed regs: 0 [ax] 5 [di] 268
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 268

BB 170:
  register live in: 88 89 147 212 224 564
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 89 147 212 224 347 540 541 564
  changed regs: 347 540 541
  dead regs:

BB 171:
  register live in:
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 172:
  register live in:
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:
subreg regs:
  Slot 0 regnos (width = 4):	 147
  Slot 1 regnos (width = 8):	 309	 602	 481
  Slot 2 regnos (width = 4):	 603
Changing spilled pseudos to memory in insn #1672
Changing spilled pseudos to memory in insn #712
Changing spilled pseudos to memory in insn #743
Changing spilled pseudos to memory in insn #1679
Changing spilled pseudos to memory in insn #910
Changing spilled pseudos to memory in insn #955
Changing spilled pseudos to memory in insn #1687
Changing spilled pseudos to memory in insn #972
Changing spilled pseudos to memory in insn #1008
Changing spilled pseudos to memory in insn #1013
Changing spilled pseudos to memory in insn #1707
Changing spilled pseudos to memory in insn #1705
Changing spilled pseudos to memory in insn #1706
Changing spilled pseudos to memory in insn #1708
Changing spilled pseudos to memory in insn #1173
Changing spilled pseudos to memory in insn #1257
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=16)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)

********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1668:  (0) =r  (1) Ts {*leadi}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1320:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) qm {extendqisi2}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1257:  (0) r  (1) rm {*cmpdi_1}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1173:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1708:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1706:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1705:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1707:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1013:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1687:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 955:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1679:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
          alt=0,overall=25,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1672:  (0) m  (1) re {*movsi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
changing reg in insn 221
changing reg in insn 803
changing reg in insn 241
changing reg in insn 1177
changing reg in insn 375
changing reg in insn 16
changing reg in insn 1434
changing reg in insn 246
changing reg in insn 1178
changing reg in insn 821
changing reg in insn 815
changing reg in insn 807
changing reg in insn 805
changing reg in insn 804
changing reg in insn 242
changing reg in insn 224
changing reg in insn 222
changing reg in insn 219
changing reg in insn 215
changing reg in insn 208
changing reg in insn 203
changing reg in insn 188
changing reg in insn 176
changing reg in insn 745
changing reg in insn 1174
changing reg in insn 34
changing reg in insn 818
changing reg in insn 383
changing reg in insn 374
changing reg in insn 288
changing reg in insn 243
changing reg in insn 17
changing reg in insn 1436
changing reg in insn 1206
changing reg in insn 1179
changing reg in insn 1175
changing reg in insn 820
changing reg in insn 819
changing reg in insn 818
changing reg in insn 760
changing reg in insn 751
changing reg in insn 746
changing reg in insn 714
changing reg in insn 384
changing reg in insn 382
changing reg in insn 307
changing reg in insn 306
changing reg in insn 304
changing reg in insn 299
changing reg in insn 289
changing reg in insn 281
changing reg in insn 251
changing reg in insn 244
changing reg in insn 243
changing reg in insn 187
changing reg in insn 174
changing reg in insn 18
changing reg in insn 167
changing reg in insn 304
changing reg in insn 1235
changing reg in insn 1211
changing reg in insn 1180
changing reg in insn 813
changing reg in insn 18
changing reg in insn 302
changing reg in insn 1212
changing reg in insn 1181
changing reg in insn 814
changing reg in insn 300
changing reg in insn 280
changing reg in insn 186
changing reg in insn 294
changing reg in insn 1167
changing reg in insn 283
changing reg in insn 1168
changing reg in insn 352
changing reg in insn 350
changing reg in insn 349
changing reg in insn 312
changing reg in insn 308
changing reg in insn 298
changing reg in insn 295
changing reg in insn 285
changing reg in insn 284
changing reg in insn 38
changing reg in insn 67
changing reg in insn 68
changing reg in insn 43
changing reg in insn 42
changing reg in insn 675
changing reg in insn 66
changing reg in insn 65
changing reg in insn 64
changing reg in insn 63
changing reg in insn 62
changing reg in insn 61
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 57
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 49
changing reg in insn 48
changing reg in insn 47
changing reg in insn 46
changing reg in insn 45
changing reg in insn 40
changing reg in insn 39
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 471
changing reg in insn 44
changing reg in insn 1319
changing reg in insn 101
changing reg in insn 107
changing reg in insn 102
changing reg in insn 126
changing reg in insn 107
changing reg in insn 135
changing reg in insn 127
changing reg in insn 108
changing reg in insn 127
changing reg in insn 108
changing reg in insn 132
changing reg in insn 130
changing reg in insn 109
changing reg in insn 130
changing reg in insn 117
changing reg in insn 122
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 426
changing reg in insn 429
changing reg in insn 427
changing reg in insn 431
changing reg in insn 432
changing reg in insn 718
changing reg in insn 958
changing reg in insn 879
changing reg in insn 732
changing reg in insn 719
changing reg in insn 728
changing reg in insn 723
changing reg in insn 737
changing reg in insn 729
changing reg in insn 736
changing reg in insn 831
changing reg in insn 869
changing reg in insn 864
changing reg in insn 857
changing reg in insn 827
changing reg in insn 738
changing reg in insn 737
changing reg in insn 831
changing reg in insn 738
changing reg in insn 738
changing reg in insn 34
changing reg in insn 740
changing reg in insn 1208
changing reg in insn 1214
changing reg in insn 1209
changing reg in insn 440
changing reg in insn 445
changing reg in insn 441
changing reg in insn 562
changing reg in insn 581
changing reg in insn 563
changing reg in insn 755
changing reg in insn 274
changing reg in insn 1215
changing reg in insn 389
changing reg in insn 756
changing reg in insn 283
changing reg in insn 782
changing reg in insn 748
changing reg in insn 754
changing reg in insn 787
changing reg in insn 795
changing reg in insn 773
changing reg in insn 759
changing reg in insn 463
changing reg in insn 455
changing reg in insn 471
changing reg in insn 468
changing reg in insn 464
changing reg in insn 457
changing reg in insn 456
changing reg in insn 465
changing reg in insn 465
changing reg in insn 468
changing reg in insn 466
changing reg in insn 482
changing reg in insn 490
changing reg in insn 483
changing reg in insn 507
changing reg in insn 513
changing reg in insn 509
changing reg in insn 526
changing reg in insn 530
changing reg in insn 527
changing reg in insn 28
changing reg in insn 1252
changing reg in insn 27
changing reg in insn 1296
changing reg in insn 1290
changing reg in insn 28
changing reg in insn 1304
changing reg in insn 1257
changing reg in insn 1254
changing reg in insn 1252
changing reg in insn 977
changing reg in insn 828
changing reg in insn 32
changing reg in insn 868
changing reg in insn 866
changing reg in insn 856
changing reg in insn 851
changing reg in insn 843
changing reg in insn 829
changing reg in insn 868
changing reg in insn 858
changing reg in insn 1295
changing reg in insn 1251
changing reg in insn 1054
changing reg in insn 1006
changing reg in insn 876
changing reg in insn 868
changing reg in insn 869
changing reg in insn 870
changing reg in insn 25
changing reg in insn 876
changing reg in insn 872
changing reg in insn 870
changing reg in insn 869
changing reg in insn 868
changing reg in insn 866
changing reg in insn 864
changing reg in insn 861
changing reg in insn 868
changing reg in insn 965
changing reg in insn 896
changing reg in insn 969
changing reg in insn 971
changing reg in insn 907
changing reg in insn 934
changing reg in insn 930
changing reg in insn 908
changing reg in insn 914
changing reg in insn 916
changing reg in insn 921
changing reg in insn 26
changing reg in insn 927
changing reg in insn 26
changing reg in insn 921
changing reg in insn 932
changing reg in insn 931
changing reg in insn 922
changing reg in insn 936
changing reg in insn 956
changing reg in insn 940
changing reg in insn 939
changing reg in insn 956
changing reg in insn 739
changing reg in insn 957
changing reg in insn 843
changing reg in insn 832
changing reg in insn 740
changing reg in insn 1042
changing reg in insn 958
changing reg in insn 879
changing reg in insn 732
changing reg in insn 719
changing reg in insn 1011
changing reg in insn 965
changing reg in insn 965
changing reg in insn 963
changing reg in insn 896
changing reg in insn 896
changing reg in insn 895
changing reg in insn 1006
changing reg in insn 973
changing reg in insn 947
changing reg in insn 939
changing reg in insn 927
changing reg in insn 922
changing reg in insn 914
changing reg in insn 911
changing reg in insn 907
changing reg in insn 886
changing reg in insn 882
changing reg in insn 840
changing reg in insn 736
changing reg in insn 733
changing reg in insn 731
changing reg in insn 728
changing reg in insn 720
changing reg in insn 981
changing reg in insn 986
changing reg in insn 983
changing reg in insn 1307
changing reg in insn 1308
changing reg in insn 1003
changing reg in insn 1274
changing reg in insn 1037
changing reg in insn 1004
changing reg in insn 1017
changing reg in insn 1077
changing reg in insn 1060
changing reg in insn 1033
changing reg in insn 1022
changing reg in insn 996
changing reg in insn 1089
changing reg in insn 1087
changing reg in insn 1081
changing reg in insn 1050
changing reg in insn 1049
changing reg in insn 1029
changing reg in insn 1030
changing reg in insn 1075
changing reg in insn 1065
changing reg in insn 1048
changing reg in insn 1111
changing reg in insn 1100
changing reg in insn 1093
changing reg in insn 1088
changing reg in insn 1084
changing reg in insn 1076
changing reg in insn 1049
changing reg in insn 1097
changing reg in insn 1093
changing reg in insn 1081
changing reg in insn 1114
changing reg in insn 1083
changing reg in insn 1091
changing reg in insn 1089
changing reg in insn 1087
changing reg in insn 1083
changing reg in insn 1118
changing reg in insn 1115
changing reg in insn 1084
changing reg in insn 1097
changing reg in insn 1100
changing reg in insn 1111
changing reg in insn 1102
changing reg in insn 1115
changing reg in insn 1103
changing reg in insn 32
changing reg in insn 1120
changing reg in insn 1161
changing reg in insn 1121
changing reg in insn 317
changing reg in insn 328
changing reg in insn 318
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 1136
changing reg in insn 1134
changing reg in insn 1080
changing reg in insn 326
changing reg in insn 340
changing reg in insn 328
changing reg in insn 337
changing reg in insn 330
changing reg in insn 341
changing reg in insn 340
changing reg in insn 331
changing reg in insn 1439
changing reg in insn 19
changing reg in insn 1439
changing reg in insn 266
changing reg in insn 1439
changing reg in insn 1434
changing reg in insn 183
changing reg in insn 1434
changing reg in insn 269
changing reg in insn 1442
changing reg in insn 20
changing reg in insn 1442
changing reg in insn 260
changing reg in insn 1442
changing reg in insn 1436
changing reg in insn 184
changing reg in insn 1436
changing reg in insn 263
changing reg in insn 160
changing reg in insn 132
changing reg in insn 74
changing reg in insn 17
changing reg in insn 138
changing reg in insn 134
changing reg in insn 133
changing reg in insn 366
changing reg in insn 251
changing reg in insn 174
changing reg in insn 161
changing reg in insn 138
changing reg in insn 75
changing reg in insn 191
changing reg in insn 167
changing reg in insn 139
changing reg in insn 247
changing reg in insn 704
changing reg in insn 688
changing reg in insn 408
changing reg in insn 373
changing reg in insn 204
changing reg in insn 180
changing reg in insn 158
changing reg in insn 148
changing reg in insn 13
changing reg in insn 10
changing reg in insn 7
changing reg in insn 4
changing reg in insn 248
changing reg in insn 210
changing reg in insn 328
changing reg in insn 341
changing reg in insn 698
changing reg in insn 682
changing reg in insn 15
changing reg in insn 12
changing reg in insn 9
changing reg in insn 402
changing reg in insn 6
changing reg in insn 152
changing reg in insn 142
changing reg in insn 700
changing reg in insn 684
changing reg in insn 404
changing reg in insn 16
changing reg in insn 154
changing reg in insn 144
changing reg in insn 367
changing reg in insn 375
changing reg in insn 369
changing reg in insn 254
changing reg in insn 701
changing reg in insn 685
changing reg in insn 405
changing reg in insn 370
changing reg in insn 177
changing reg in insn 155
changing reg in insn 145
changing reg in insn 14
changing reg in insn 11
changing reg in insn 8
changing reg in insn 5
changing reg in insn 1440
changing reg in insn 1437
changing reg in insn 1435
changing reg in insn 1433
changing reg in insn 1314
changing reg in insn 1288
changing reg in insn 1268
changing reg in insn 1246
changing reg in insn 1074
changing reg in insn 1064
changing reg in insn 1291
changing reg in insn 1247
changing reg in insn 1142
changing reg in insn 1119
changing reg in insn 1116
changing reg in insn 1101
changing reg in insn 1075
changing reg in insn 1065
changing reg in insn 1048
changing reg in insn 1291
changing reg in insn 1247
changing reg in insn 1119
changing reg in insn 1116
changing reg in insn 1101
changing reg in insn 90
changing reg in insn 91
changing reg in insn 97
changing reg in insn 98
changing reg in insn 1663
changing reg in insn 107
changing reg in insn 1662
changing reg in insn 117
changing reg in insn 116
changing reg in insn 117
changing reg in insn 1661
changing reg in insn 126
changing reg in insn 125
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 144
changing reg in insn 148
changing reg in insn 145
changing reg in insn 154
changing reg in insn 158
changing reg in insn 155
changing reg in insn 176
changing reg in insn 180
changing reg in insn 177
changing reg in insn 191
changing reg in insn 1389
changing reg in insn 1409
changing reg in insn 203
changing reg in insn 204
changing reg in insn 210
changing reg in insn 212
changing reg in insn 212
changing reg in insn 240
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 219
changing reg in insn 221
changing reg in insn 229
changing reg in insn 1390
changing reg in insn 1408
changing reg in insn 240
changing reg in insn 241
changing reg in insn 293
changing reg in insn 294
changing reg in insn 303
changing reg in insn 304
changing reg in insn 305
changing reg in insn 312
changing reg in insn 313
changing reg in insn 352
changing reg in insn 355
changing reg in insn 369
changing reg in insn 373
changing reg in insn 370
changing reg in insn 381
changing reg in insn 382
changing reg in insn 388
changing reg in insn 389
changing reg in insn 404
changing reg in insn 408
changing reg in insn 405
changing reg in insn 444
changing reg in insn 445
changing reg in insn 466
changing reg in insn 467
changing reg in insn 539
changing reg in insn 542
changing reg in insn 546
changing reg in insn 547
changing reg in insn 563
changing reg in insn 564
changing reg in insn 566
changing reg in insn 581
changing reg in insn 577
changing reg in insn 572
changing reg in insn 569
changing reg in insn 568
changing reg in insn 575
changing reg in insn 576
changing reg in insn 674
changing reg in insn 675
changing reg in insn 684
changing reg in insn 688
changing reg in insn 685
changing reg in insn 700
changing reg in insn 704
changing reg in insn 701
changing reg in insn 713
changing reg in insn 714
changing reg in insn 730
changing reg in insn 731
changing reg in insn 743
changing reg in insn 770
changing reg in insn 771
changing reg in insn 771
changing reg in insn 772
changing reg in insn 772
changing reg in insn 773
changing reg in insn 792
changing reg in insn 793
changing reg in insn 793
changing reg in insn 794
changing reg in insn 794
changing reg in insn 795
changing reg in insn 801
changing reg in insn 802
changing reg in insn 802
changing reg in insn 803
changing reg in insn 831
changing reg in insn 832
changing reg in insn 843
changing reg in insn 844
changing reg in insn 858
changing reg in insn 858
changing reg in insn 853
changing reg in insn 896
changing reg in insn 896
changing reg in insn 895
changing reg in insn 921
changing reg in insn 932
changing reg in insn 933
changing reg in insn 955
changing reg in insn 956
changing reg in insn 965
changing reg in insn 965
changing reg in insn 963
changing reg in insn 1015
changing reg in insn 1660
changing reg in insn 1042
changing reg in insn 1041
changing reg in insn 1042
changing reg in insn 1659
changing reg in insn 1064
changing reg in insn 1063
changing reg in insn 1064
changing reg in insn 1091
changing reg in insn 1091
changing reg in insn 1092
changing reg in insn 1092
changing reg in insn 1094
changing reg in insn 1093
changing reg in insn 1095
changing reg in insn 1101
changing reg in insn 1102
changing reg in insn 1116
changing reg in insn 1117
changing reg in insn 1117
changing reg in insn 1118
changing reg in insn 1119
changing reg in insn 1120
changing reg in insn 1142
changing reg in insn 33
changing reg in insn 1163
changing reg in insn 1165
changing reg in insn 1165
changing reg in insn 1165
changing reg in insn 1166
changing reg in insn 1166
changing reg in insn 1167
changing reg in insn 1173
changing reg in insn 1214
changing reg in insn 1215
changing reg in insn 1247
changing reg in insn 1249
changing reg in insn 1251
changing reg in insn 1291
changing reg in insn 1293
changing reg in insn 1295
changing reg in insn 246
changing reg in insn 254
changing reg in insn 274
changing reg in insn 247
changing reg in insn 1390
changing reg in insn 1389
changing reg in insn 229
changing reg in insn 212
changing reg in insn 715
changing reg in insn 1243
changing reg in insn 1265
changing reg in insn 1285
changing reg in insn 1311
changing reg in insn 1314
changing reg in insn 1288
changing reg in insn 1268
changing reg in insn 1246
changing reg in insn 1074
changing reg in insn 718
changing reg in insn 717
changing reg in insn 1245
changing reg in insn 1267
changing reg in insn 1287
changing reg in insn 1313
changing reg in insn 1314
changing reg in insn 1288
changing reg in insn 1268
changing reg in insn 1246
changing reg in insn 1074
changing reg in insn 718
changing reg in insn 791
changing reg in insn 769
changing reg in insn 801
changing reg in insn 792
changing reg in insn 770
changing reg in insn 754
changing reg in insn 787
changing reg in insn 1406
changing reg in insn 791
changing reg in insn 782
changing reg in insn 769
changing reg in insn 755
changing reg in insn 1438
changing reg in insn 1442
changing reg in insn 1439
changing reg in insn 3
changing reg in insn 1320
deleting insn with uid = 17.
deleting insn with uid = 540.
deleting insn with uid = 542.
deleting insn with uid = 564.
deleting insn with uid = 576.
deleting insn with uid = 1671.
deleting insn with uid = 1675.
deleting insn with uid = 1677.
deleting insn with uid = 933.
deleting insn with uid = 934.
deleting insn with uid = 1685.
deleting insn with uid = 1686.
deleting insn with uid = 1690.
deleting insn with uid = 1015.
deleting insn with uid = 1692.
deleting insn with uid = 1094.
deleting insn with uid = 1095.
deleting insn with uid = 1694.
deleting insn with uid = 1697.


try_optimize_cfg iteration 1

Forwarding edge 52->53 to 160 failed.
Forwarding edge 63->64 to 60 failed.
Forwarding edge 66->67 to 60 failed.
Forwarding edge 124->125 to 127 failed.
Forwarding edge 132->133 to 168 failed.
Forwarding edge 161->162 to 171 failed.
Forwarding edge 163->164 to 135 failed.
Forwarding edge 166->167 to 134 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 425.
verify found no changes in insn with uid = 430.
verify found no changes in insn with uid = 433.
verify found no changes in insn with uid = 439.
verify found no changes in insn with uid = 454.
verify found no changes in insn with uid = 462.
verify found no changes in insn with uid = 480.
verify found no changes in insn with uid = 505.
verify found no changes in insn with uid = 524.
verify found no changes in insn with uid = 544.
verify found no changes in insn with uid = 557.
verify found no changes in insn with uid = 565.
verify found no changes in insn with uid = 578.
verify found no changes in insn with uid = 681.
verify found no changes in insn with uid = 697.
verify found no changes in insn with uid = 747.
verify found no changes in insn with uid = 836.
verify found no changes in insn with uid = 935.
verify found no changes in insn with uid = 951.
verify found no changes in insn with uid = 980.
verify found no changes in insn with uid = 993.
verify found no changes in insn with uid = 1002.
verify found no changes in insn with uid = 1016.
verify found no changes in insn with uid = 1028.
verify found no changes in insn with uid = 1039.
verify found no changes in insn with uid = 1059.
verify found no changes in insn with uid = 1096.
verify found no changes in insn with uid = 1107.
verify found no changes in insn with uid = 1176.
verify found no changes in insn with uid = 1207.
verify found no changes in insn with uid = 1221.
verify found no changes in insn with uid = 1306.
verify found no changes in insn with uid = 1322.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 173 n_edges 270 count 350 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 173 n_edges 270 count 301 (  1.7)


int yylex()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={137d,162u,2e} r1={106d,88u,2e} r2={68d,36u} r3={51d,36u,2e} r4={70d,37u} r5={80d,51u,2e} r6={8d,23u} r7={1d,227u} r8={35d} r9={35d} r10={35d} r11={35d} r12={35d} r13={35d} r14={35d} r15={35d} r17={143d,66u,3e} r18={35d} r19={35d} r21={33d} r22={33d} r23={33d} r24={33d} r25={33d} r26={33d} r27={33d} r28={33d} r29={32d} r30={32d} r31={32d} r32={32d} r33={32d} r34={32d} r35={32d} r36={32d} r37={36d} r38={36d} r39={44d,14u,2e} r40={38d,8u,1e} r41={5d,7u} r42={1d,2u} r43={13d,41u} r44={8d,16u,5e} r45={32d} r46={32d} r47={32d} r48={32d} r49={32d} r50={32d} r51={32d} r52={32d} r53={35d} r54={35d} r55={35d} r56={35d} r57={35d} r58={35d} r59={35d} r60={35d} r61={35d} r62={35d} r63={35d} r64={35d} r65={35d} r66={35d} r67={35d} r68={35d} r69={35d} r70={35d} r71={35d} r72={35d} r73={35d} r74={35d} r75={35d} r76={35d} r77={35d} r78={35d} r79={35d} r80={35d} 
;;    total ref usage 3784{2951d,814u,19e} in 851{816 regular + 35 call} insns.
(note 1 0 69 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(note 69 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 69 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 71 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [1 D.6797+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [576])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:787 986 {stack_tls_protect_set_di}
     (nil))
(insn 71 3 72 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:792 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 72 71 73 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) lex.yy.c:792 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 78)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 4 [si]
;; live  kill	
(note 73 72 74 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 3 (set (reg/f:DI 3 bx [orig:318 D.6783 ] [318])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 75 74 1499 3 (set (reg:QI 4 si [orig:320 D.6789 ] [320])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) 93 {*movqi_internal}
     (nil))
(jump_insn 1499 75 1500 3 (set (pc)
        (label_ref 140)) 654 {jump}
     (nil)
 -> 140)
;;  succ:       14 [100.0%] 
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1500 1499 78)
;; basic block 4, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 78 1500 79 4 116 "" [1 uses])
(note 79 78 80 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 4 (set (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:794 90 {*movsi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:800 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 82 81 83 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) lex.yy.c:800 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 85)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [50.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 83 82 84 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 5 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:801 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 85 84 86 6 118 "" [1 uses])
(note 86 85 87 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:803 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 88 87 89 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) lex.yy.c:803 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 92)
;;  succ:       7 [15.0%]  (FALLTHRU)
;;              8 [85.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [15.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 89 88 90 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 7 (set (reg/f:DI 0 ax [orig:349 stdin ] [349])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f88bc3c9d80 stdin>) [1 stdin+0 S8 A64])) lex.yy.c:804 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f88bc3c9d80 stdin>) [1 stdin+0 S8 A64])
        (nil)))
(insn 91 90 92 7 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:349 stdin ] [349])) lex.yy.c:804 89 {*movdi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [85.0%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 92 91 93 8 119 "" [1 uses])
(note 93 92 94 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:806 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 95 94 96 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) lex.yy.c:806 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 99)
;;  succ:       9 [15.0%]  (FALLTHRU)
;;              10 [85.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [15.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 96 95 97 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 9 (set (reg/f:DI 0 ax [orig:350 stdout ] [350])
        (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f88bc3c9e10 stdout>) [1 stdout+0 S8 A64])) lex.yy.c:807 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f88bc3c9e10 stdout>) [1 stdout+0 S8 A64])
        (nil)))
(insn 98 97 99 9 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (reg/f:DI 0 ax [orig:350 stdout ] [350])) lex.yy.c:807 89 {*movdi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [85.0%] 
;;              9 [100.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 99 98 100 10 120 "" [1 uses])
(note 100 99 101 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 10 (set (reg/f:DI 0 ax [orig:99 D.6780 ] [99])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (nil))
(insn 102 101 103 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:99 D.6780 ] [99])
            (const_int 0 [0]))) lex.yy.c:809 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 103 102 104 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) lex.yy.c:809 612 {*jcc_1}
     (int_list:REG_BR_PROB 672 (nil))
 -> 111)
;;  succ:       12 [6.7%] 
;;              11 [93.3%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 11, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [93.3%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 104 103 106 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 106 104 1663 11 NOTE_INSN_DELETED)
(insn 1663 106 107 11 (set (reg:DI 1 dx [orig:352 yy_buffer_stack_top ] [352])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 107 1663 108 11 (set (reg/f:DI 1 dx [orig:102 D.6780 ] [102])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:352 yy_buffer_stack_top ] [352])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:99 D.6780 ] [99]))) lex.yy.c:809 214 {*leadi}
     (nil))
(insn 108 107 109 11 (set (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6780 ] [102]) [1 *_42+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (nil))
(insn 109 108 110 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
            (const_int 0 [0]))) lex.yy.c:809 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 110 109 111 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) lex.yy.c:809 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 128)
;;  succ:       12 [15.0%]  (FALLTHRU)
;;              13 [85.0%] 
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [15.0%]  (FALLTHRU)
;;              10 [6.7%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di]
;; live  kill	
(code_label 111 110 112 12 121 "" [1 uses])
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(call_insn 113 112 115 12 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:810 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(note 115 113 116 12 NOTE_INSN_DELETED)
(insn 116 115 1662 12 (set (reg/f:DI 0 ax [orig:355 yy_buffer_stack ] [355])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:811 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 1662 116 117 12 (set (reg:DI 1 dx [orig:354 yy_buffer_stack_top ] [354])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:811 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 117 1662 118 12 (set (reg/f:DI 3 bx [orig:107 D.6780 ] [107])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:354 yy_buffer_stack_top ] [354])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:355 yy_buffer_stack ] [355]))) lex.yy.c:811 214 {*leadi}
     (nil))
(insn 118 117 119 12 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) lex.yy.c:812 90 {*movsi_internal}
     (nil))
(insn 119 118 120 12 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:812 89 {*movdi_internal}
     (nil))
(call_insn 120 119 121 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:812 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 121 120 122 12 (set (reg/f:DI 0 ax [orig:109 D.6782 ] [109])
        (reg:DI 0 ax)) lex.yy.c:812 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 3 bx [orig:107 D.6780 ] [107]) [1 *_48+0 S8 A64])
        (nil)))
(insn 122 121 124 12 (set (mem/f:DI (reg/f:DI 3 bx [orig:107 D.6780 ] [107]) [1 *_48+0 S8 A64])
        (reg/f:DI 0 ax [orig:109 D.6782 ] [109])) lex.yy.c:812 89 {*movdi_internal}
     (nil))
(note 124 122 125 12 NOTE_INSN_DELETED)
(insn 125 124 1661 12 (set (reg/f:DI 0 ax [orig:358 yy_buffer_stack ] [358])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 1661 125 126 12 (set (reg:DI 1 dx [orig:357 yy_buffer_stack_top ] [357])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 126 1661 127 12 (set (reg/f:DI 1 dx [orig:102 D.6780 ] [102])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:357 yy_buffer_stack_top ] [357])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:358 yy_buffer_stack ] [358]))) 214 {*leadi}
     (nil))
(insn 127 126 128 12 (set (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6780 ] [102]) [1 *_1030+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [85.0%] 
;;              12 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si]
;; live  kill	
(code_label 128 127 129 13 122 "" [1 uses])
(note 129 128 130 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 13 (set (reg:SI 2 cx [orig:359 _1033->yy_n_chars ] [359])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
                (const_int 32 [0x20])) [2 _1033->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
                (const_int 32 [0x20])) [2 _1033->yy_n_chars+0 S4 A64])
        (nil)))
(insn 131 130 132 13 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:359 _1033->yy_n_chars ] [359])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 132 131 133 13 (set (reg/f:DI 3 bx [orig:318 D.6783 ] [318])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
                (const_int 16 [0x10])) [1 _1033->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 133 132 134 13 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 3 bx [orig:318 D.6783 ] [318])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 134 133 135 13 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 3 bx [orig:318 D.6783 ] [318])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 135 134 136 13 (set (reg/f:DI 0 ax [orig:360 *_1031 ] [360])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6780 ] [102]) [1 *_1031+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 136 135 137 13 (set (reg/f:DI 0 ax [orig:361 _249->yy_input_file ] [361])
        (mem/f:DI (reg/f:DI 0 ax [orig:360 *_1031 ] [360]) [1 _249->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 137 136 138 13 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:361 _249->yy_input_file ] [361])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 138 137 139 13 (set (reg:QI 4 si [orig:320 D.6789 ] [320])
        (mem:QI (reg/f:DI 3 bx [orig:318 D.6783 ] [318]) [0 *_248+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(insn 139 138 140 13 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 4 si [orig:320 D.6789 ] [320])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 64, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 42 [r13]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 42 [r13]
;; live  kill	
(code_label 140 139 141 14 117 "" [1 uses])
(note 141 140 142 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 144 14 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 144 142 145 14 (set (reg:DI 1 dx [orig:363 D.6777 ] [363])
        (sign_extend:DI (reg:SI 0 ax [orig:341 D.6777 ] [341]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 145 144 148 14 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:363 D.6777 ] [363])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 148 145 1438 14 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:363 D.6777 ] [363])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 1438 148 1501 14 (set (reg:QI 42 r13 [564])
        (const_int 1 [0x1])) lex.yy.c:844 93 {*movqi_internal}
     (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))
(jump_insn 1501 1438 1502 14 (set (pc)
        (label_ref 162)) 654 {jump}
     (nil)
 -> 162)
;;  succ:       17 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

(barrier 1502 1501 1527)
;; basic block 15, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       52 [98.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 1527 1502 151 15 280 "" [1 uses])
(note 151 1527 152 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 154 15 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 154 152 155 15 (set (reg:DI 1 dx [orig:367 D.6777 ] [367])
        (sign_extend:DI (reg:SI 0 ax [orig:341 D.6777 ] [341]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 155 154 158 15 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:367 D.6777 ] [367])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 158 155 396 15 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:367 D.6777 ] [367])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

;; basic block 16, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       50 [100.0%] 
;;              47 [100.0%] 
;;              46 [100.0%] 
;;              48 [100.0%] 
;;              95 [100.0%] 
;;              49 [100.0%] 
;;              15 [100.0%]  (FALLTHRU)
;;              96 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  gen 	 3 [bx] 4 [si]
;; live  kill	
(code_label 396 158 159 16 188 "" [7 uses])
(note 159 396 160 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 16 (set (reg/f:DI 3 bx [orig:318 D.6783 ] [318])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 161 160 162 16 (set (reg:QI 4 si [orig:320 D.6789 ] [320])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) 93 {*movqi_internal}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 17, loop depth 0, count 0, freq 79, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU,DFS_BACK)
;;              14 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 162 161 163 17 123 "" [1 uses])
(note 163 162 16 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 16 163 970 17 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (reg:SI 0 ax [orig:341 D.6777 ] [341])) mycc.l:56 90 {*movsi_internal}
     (nil))
(note 970 16 376 17 NOTE_INSN_DELETED)
;;  succ:       18 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 18, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              44 [100.0%]  (DFS_BACK)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 41 [r12]
;; live  kill	
(code_label 376 970 164 18 186 "" [1 uses])
(note 164 376 165 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(debug_insn 165 164 166 18 (var_location:DI D#16 (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:827 -1
     (nil))
(debug_insn 166 165 167 18 (var_location:DI yy_cp (debug_expr:DI D#16)) lex.yy.c:827 -1
     (nil))
(insn 167 166 168 18 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_916+0 S1 A8])
        (reg:QI 4 si [orig:320 D.6789 ] [320])) lex.yy.c:830 93 {*movqi_internal}
     (nil))
(debug_insn 168 167 169 18 (var_location:DI yy_bp (debug_expr:DI D#16)) lex.yy.c:835 -1
     (nil))
(debug_insn 169 168 170 18 (var_location:SI D#15 (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:837 -1
     (nil))
(debug_insn 170 169 18 18 (var_location:SI yy_current_state (debug_expr:SI D#15)) lex.yy.c:837 -1
     (nil))
(insn 18 170 1503 18 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:830 89 {*movdi_internal}
     (nil))
(jump_insn 1503 18 1504 18 (set (pc)
        (label_ref 181)) 654 {jump}
     (nil)
 -> 181)
;;  succ:       20 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]

(barrier 1504 1503 822)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       107 [100.0%] 
;;              154 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 2 [cx] 4 [si]
;; live  kill	
(code_label 822 1504 173 19 202 "" [2 uses])
(note 173 822 174 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 176 19 (set (reg:QI 4 si [orig:320 D.6789 ] [320])
        (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_147+0 S1 A8])) 93 {*movqi_internal}
     (nil))
(insn 176 174 177 19 (set (reg:DI 1 dx [orig:371 yy_current_state ] [371])
        (sign_extend:DI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 177 176 180 19 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:371 yy_current_state ] [371])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 180 177 181 19 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:371 yy_current_state ] [371])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       20 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]

;; basic block 20, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [100.0%]  (FALLTHRU,DFS_BACK)
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 6 [bp] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 5 [di] 6 [bp] 39 [r10] 40 [r11]
;; live  kill	
(code_label 181 180 182 20 124 "" [1 uses])
(note 182 181 183 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 184 20 (set (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 184 183 19 20 (set (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 19 184 20 20 (set (reg:QI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
        (const_int 0 [0])) lex.yy.c:830 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 20 19 255 20 (set (reg:QI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
        (const_int 0 [0])) lex.yy.c:830 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              27 [100.0%]  (DFS_BACK)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 42 [r13]
;; lr  def 	 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  kill	
(code_label 255 20 185 21 130 "" [1 uses])
(note 185 255 186 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(debug_insn 186 185 187 21 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) -1
     (nil))
(debug_insn 187 186 188 21 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) -1
     (nil))
(debug_insn 188 187 190 21 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) -1
     (nil))
(note 190 188 191 21 NOTE_INSN_DELETED)
(insn 191 190 1409 21 (set (reg:DI 4 si [orig:376 D.6785 ] [376])
        (zero_extend:DI (reg:QI 4 si [orig:320 D.6789 ] [320]))) lex.yy.c:841 134 {zero_extendqidi2}
     (nil))
(debug_insn 1409 191 192 21 (var_location:QI D#23 (mem/u/j:QI (plus:DI (reg:DI 4 si [orig:376 D.6785 ] [376])
            (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) [0 yy_ec S1 A8])) -1
     (nil))
(note 192 1409 193 21 NOTE_INSN_DELETED)
(debug_insn 193 192 1433 21 (var_location:QI yy_c (debug_expr:QI D#23)) lex.yy.c:841 -1
     (nil))
(insn 1433 193 1434 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 2 cx [orig:343 D.6786 ] [343])
            (const_int 0 [0]))) lex.yy.c:844 2 {*cmphi_ccno_1}
     (nil))
(insn 1434 1433 1435 21 (set (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])
        (if_then_else:SI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])
            (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) lex.yy.c:844 953 {*movsicc_noc}
     (nil))
(insn 1435 1434 1436 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 2 cx [orig:343 D.6786 ] [343])
            (const_int 0 [0]))) lex.yy.c:844 2 {*cmphi_ccno_1}
     (nil))
(insn 1436 1435 1437 21 (set (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])
        (if_then_else:DI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])
            (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]))) lex.yy.c:844 954 {*movdicc_noc}
     (nil))
(insn 1437 1436 1439 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 2 cx [orig:343 D.6786 ] [343])
            (const_int 0 [0]))) lex.yy.c:844 2 {*cmphi_ccno_1}
     (nil))
(insn 1439 1437 1440 21 (set (reg:QI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
        (if_then_else:QI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:QI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
            (reg:QI 42 r13 [564]))) lex.yy.c:844 955 {*movqicc_noc}
     (expr_list:REG_EQUAL (if_then_else:QI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:QI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
            (const_int 1 [0x1]))
        (nil)))
(insn 1440 1439 1442 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 2 cx [orig:343 D.6786 ] [343])
            (const_int 0 [0]))) lex.yy.c:844 2 {*cmphi_ccno_1}
     (nil))
(insn 1442 1440 1389 21 (set (reg:QI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
        (if_then_else:QI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:QI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
            (reg:QI 42 r13 [564]))) lex.yy.c:844 955 {*movqicc_noc}
     (expr_list:REG_EQUAL (if_then_else:QI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:QI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
            (const_int 1 [0x1]))
        (nil)))
(insn 1389 1442 1505 21 (set (reg:SI 2 cx [orig:539 D.6777 ] [539])
        (zero_extend:SI (mem/u/j:QI (plus:DI (reg:DI 4 si [orig:376 D.6785 ] [376])
                    (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) [0 yy_ec S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(jump_insn 1505 1389 1506 21 (set (pc)
        (label_ref 205)) 654 {jump}
     (nil)
 -> 205)
;;  succ:       23 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

(barrier 1506 1505 223)
;; basic block 22, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [50.0%] 
;;              25 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 223 1506 201 22 128 "" [2 uses])
(note 201 223 203 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 203 201 204 22 (set (reg:DI 1 dx [orig:378 yy_current_state ] [378])
        (sign_extend:DI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 22 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:378 yy_current_state ] [378])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       23 [100.0%]  (FALLTHRU,DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 23, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [100.0%]  (FALLTHRU,DFS_BACK)
;;              21 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 205 204 206 23 126 "" [1 uses])
(note 206 205 207 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(debug_insn 207 206 208 23 (var_location:QI yy_c (debug_expr:QI D#23)) -1
     (nil))
(debug_insn 208 207 210 23 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) -1
     (nil))
(insn 210 208 212 23 (set (reg:SI 1 dx [orig:380 D.6777 ] [380])
        (zero_extend:SI (reg:HI 1 dx [orig:321 D.6787 ] [321]))) lex.yy.c:847 139 {*zero_extendhisi2}
     (nil))
(insn 212 210 213 23 (parallel [
            (set (reg:SI 1 dx [orig:382 D.6777 ] [382])
                (plus:SI (reg:SI 1 dx [orig:380 D.6777 ] [380])
                    (reg:SI 2 cx [orig:539 D.6777 ] [539])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:847 217 {*addsi_1}
     (nil))
(insn 213 212 214 23 (set (reg:DI 4 si [orig:383 D.6777 ] [383])
        (sign_extend:DI (reg:SI 1 dx [orig:382 D.6777 ] [382]))) lex.yy.c:847 142 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 23 (set (reg:SI 4 si [orig:384 D.6777 ] [384])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:383 D.6777 ] [383])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:847 146 {extendhisi2}
     (nil))
(insn 215 214 216 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (reg:SI 4 si [orig:384 D.6777 ] [384]))) lex.yy.c:847 7 {*cmpsi_1}
     (nil))
(jump_insn 216 215 217 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 234)
            (pc))) lex.yy.c:847 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 234)
;;  succ:       26 [9.0%]  (LOOP_EXIT)
;;              24 [91.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 24, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [91.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 217 216 219 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 219 217 220 24 (set (reg:DI 0 ax [orig:386 yy_current_state ] [386])
        (sign_extend:DI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) lex.yy.c:849 142 {*extendsidi2_rex64}
     (nil))
(note 220 219 221 24 NOTE_INSN_DELETED)
(insn 221 220 222 24 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:386 yy_current_state ] [386])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) lex.yy.c:849 146 {extendhisi2}
     (nil))
(debug_insn 222 221 224 24 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:849 -1
     (nil))
(insn 224 222 225 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (const_int 101 [0x65]))) lex.yy.c:850 7 {*cmpsi_1}
     (nil))
(jump_insn 225 224 226 24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) lex.yy.c:850 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 223)
;;  succ:       25 [50.0%]  (FALLTHRU)
;;              22 [50.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 25, loop depth 0, count 0, freq 4550, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [50.0%]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 2 [cx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx]
;; live  kill	
(note 226 225 229 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 229 226 1408 25 (set (reg:DI 2 cx [orig:388 D.6785 ] [388])
        (zero_extend:DI (reg:SI 2 cx [orig:539 D.6777 ] [539]))) lex.yy.c:851 133 {*zero_extendsidi2}
     (nil))
(debug_insn 1408 229 230 25 (var_location:QI D#23 (mem/u/j:QI (plus:DI (reg:DI 2 cx [orig:388 D.6785 ] [388])
            (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) [0 yy_meta S1 A8])) -1
     (nil))
(note 230 1408 231 25 NOTE_INSN_DELETED)
(debug_insn 231 230 1390 25 (var_location:QI yy_c (debug_expr:QI D#23)) lex.yy.c:851 -1
     (nil))
(insn 1390 231 1507 25 (set (reg:SI 2 cx [orig:539 D.6777 ] [539])
        (zero_extend:SI (mem/u/j:QI (plus:DI (reg:DI 2 cx [orig:388 D.6785 ] [388])
                    (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) [0 yy_meta S1 A8]))) 138 {*zero_extendqisi2}
     (nil))
(jump_insn 1507 1390 1508 25 (set (pc)
        (label_ref 223)) 654 {jump}
     (nil)
 -> 223)
;;  succ:       22 [100.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

(barrier 1508 1507 234)
;; basic block 26, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [9.0%]  (LOOP_EXIT)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 234 1508 235 26 127 "" [1 uses])
(note 235 234 240 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 240 235 241 26 (set (reg:DI 1 dx [orig:393 D.6785 ] [393])
        (zero_extend:DI (reg:SI 1 dx [orig:382 D.6777 ] [382]))) lex.yy.c:853 133 {*zero_extendsidi2}
     (nil))
(insn 241 240 242 26 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:393 D.6785 ] [393])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) [3 yy_nxt S2 A16]))) lex.yy.c:853 139 {*zero_extendhisi2}
     (nil))
(debug_insn 242 241 243 26 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:853 -1
     (nil))
(insn 243 242 244 26 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:854 218 {*adddi_1}
     (nil))
(debug_insn 244 243 246 26 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:854 -1
     (nil))
(insn 246 244 247 26 (set (reg:DI 2 cx [orig:538 yy_current_state ] [538])
        (sign_extend:DI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) lex.yy.c:856 142 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 26 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 2 cx [orig:538 yy_current_state ] [538])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) lex.yy.c:856 92 {*movhi_internal}
     (nil))
(insn 248 247 249 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 1 dx [orig:321 D.6787 ] [321])
            (const_int 190 [0xbe]))) lex.yy.c:856 6 {*cmphi_1}
     (nil))
(jump_insn 249 248 250 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) lex.yy.c:856 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 258)
;;  succ:       28 [9.0%]  (LOOP_EXIT)
;;              27 [91.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 27, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [91.0%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 4 [si]
;; live  kill	
(note 250 249 251 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 254 27 (set (reg:QI 4 si [orig:320 D.6789 ] [320])
        (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 MEM[base: yy_cp_82, offset: 0B]+0 S1 A8])) 93 {*movqi_internal}
     (nil))
(insn 254 251 1509 27 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 2 cx [orig:538 yy_current_state ] [538])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(jump_insn 1509 254 1510 27 (set (pc)
        (label_ref 255)) 654 {jump}
     (nil)
 -> 255)
;;  succ:       21 [100.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

(barrier 1510 1509 258)
;; basic block 28, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [9.0%]  (LOOP_EXIT)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 258 1510 259 28 129 "" [1 uses])
(note 259 258 260 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 261 260 262 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 264)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 264)
;;  succ:       30 [100.0%] 
;;              29 (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(note 262 261 263 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 29 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])) 89 {*movdi_internal}
     (nil))
;;  succ:       30 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       29 [100.0%]  (FALLTHRU)
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 40 [r11]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 264 263 265 30 131 "" [1 uses])
(note 265 264 266 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 266 265 267 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 267 266 268 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 270)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 270)
;;  succ:       32 [100.0%] 
;;              31 (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(note 268 267 269 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 269 268 270 31 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])) 90 {*movsi_internal}
     (nil))
;;  succ:       32 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 32, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       31 [100.0%]  (FALLTHRU)
;;              30 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 270 269 271 32 132 "" [1 uses])
(note 271 270 274 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 274 271 278 32 (set (reg:HI 1 dx [orig:186 D.6786 ] [186])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 2 cx [orig:538 yy_current_state ] [538])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       33 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 33, loop depth 0, count 0, freq 83, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       32 [100.0%]  (FALLTHRU)
;;              105 [28.0%] 
;;              45 [100.0%]  (DFS_BACK)
;;              106 [98.0%] 
;;              155 [100.0%]  (DFS_BACK)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 278 274 279 33 133 "" [4 uses])
(note 279 278 280 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(debug_insn 280 279 281 33 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) -1
     (nil))
(debug_insn 281 280 282 33 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) -1
     (nil))
(debug_insn 282 281 283 33 (var_location:SI yy_current_state (clobber (const_int 0 [0]))) -1
     (nil))
(insn 283 282 284 33 (set (reg/v:SI 1 dx [orig:90 yy_act ] [90])
        (sign_extend:SI (reg:HI 1 dx [orig:186 D.6786 ] [186]))) lex.yy.c:859 146 {extendhisi2}
     (nil))
(debug_insn 284 283 285 33 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) lex.yy.c:859 -1
     (nil))
(insn 285 284 286 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:90 yy_act ] [90])
            (const_int 0 [0]))) lex.yy.c:860 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 286 285 287 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) lex.yy.c:860 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 296)
;;  succ:       34 [50.0%]  (FALLTHRU)
;;              35 [50.0%] 
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 34, loop depth 0, count 0, freq 42, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       33 [50.0%]  (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(note 287 286 288 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 34 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) lex.yy.c:862 89 {*movdi_internal}
     (nil))
(debug_insn 289 288 290 34 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:862 -1
     (nil))
(debug_insn 290 289 292 34 (var_location:SI yy_current_state (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) lex.yy.c:863 -1
     (nil))
(note 292 290 293 34 NOTE_INSN_DELETED)
(insn 293 292 294 34 (set (reg:DI 0 ax [orig:401 yy_last_accepting_state ] [401])
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32]))) lex.yy.c:864 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 34 (set (reg/v:SI 1 dx [orig:90 yy_act ] [90])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:401 yy_last_accepting_state ] [401])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16]))) lex.yy.c:864 146 {extendhisi2}
     (nil))
(debug_insn 295 294 296 34 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) lex.yy.c:864 -1
     (nil))
;;  succ:       35 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 35, loop depth 0, count 0, freq 83, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       33 [50.0%] 
;;              34 [100.0%]  (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 296 295 297 35 134 "" [1 uses])
(note 297 296 298 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(debug_insn 298 297 299 35 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) -1
     (nil))
(debug_insn 299 298 300 35 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) -1
     (nil))
(insn 300 299 1665 35 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 1665 300 302 35 (set (reg:DI 0 ax [403])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 302 1665 1666 35 (parallel [
            (set (reg:DI 0 ax [403])
                (minus:DI (reg:DI 0 ax [403])
                    (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:867 261 {*subdi_1}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])
        (nil)))
(insn 1666 302 303 35 (set (reg:DI 0 ax [403])
        (reg:DI 0 ax [403])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 303 1666 304 35 (set (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])
        (reg:DI 0 ax [403])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 304 303 305 35 (set (reg:QI 0 ax [orig:404 *yy_cp_6 ] [404])
        (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])) lex.yy.c:867 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])
        (nil)))
(insn 305 304 306 35 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:404 *yy_cp_6 ] [404])) lex.yy.c:867 93 {*movqi_internal}
     (nil))
(insn 306 305 307 35 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:867 93 {*movqi_internal}
     (nil))
(insn 307 306 308 35 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 308 307 309 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:90 yy_act ] [90])
            (const_int 46 [0x2e]))) lex.yy.c:869 7 {*cmpsi_1}
     (nil))
(jump_insn 309 308 310 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 347)
            (pc))) lex.yy.c:869 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 347)
;;  succ:       36 [72.0%]  (FALLTHRU)
;;              41 [28.0%] 
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 36, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 35, next block 37, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       35 [72.0%]  (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 310 309 312 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 312 310 313 36 (set (reg:DI 0 ax [orig:406 yy_act ] [406])
        (sign_extend:DI (reg/v:SI 1 dx [orig:90 yy_act ] [90]))) lex.yy.c:869 142 {*extendsidi2_rex64}
     (nil))
(insn 313 312 314 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:406 yy_act ] [406])
                        (const_int 4 [0x4]))
                    (symbol_ref:DI ("_ZL21yy_rule_can_match_eol") [flags 0x2]  <var_decl 0x7f88bc080750 yy_rule_can_match_eol>)) [2 yy_rule_can_match_eol S4 A32])
            (const_int 0 [0]))) lex.yy.c:869 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 314 313 315 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 347)
            (pc))) lex.yy.c:869 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 347)
;;  succ:       37 [50.0%]  (FALLTHRU)
;;              41 [50.0%] 
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 37, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 36, next block 38, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       36 [50.0%]  (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(note 315 314 316 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(debug_insn 316 315 317 37 (var_location:DI yyl (const_int 0 [0])) -1
     (nil))
(insn 317 316 326 37 (set (reg:DI 4 si [orig:307 D.6781 ] [307])
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) lex.yy.c:872 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])
        (nil)))
(insn 326 317 328 37 (set (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 328 326 318 37 (parallel [
            (set (reg:DI 2 cx [orig:327 D.6796 ] [327])
                (plus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
                    (reg:DI 4 si [orig:307 D.6781 ] [307])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 318 328 319 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 4 si [orig:307 D.6781 ] [307])
            (const_int 0 [0]))) lex.yy.c:872 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 319 318 1472 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 347)
            (pc))) lex.yy.c:872 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 347)
;;  succ:       41 [9.0%] 
;;              38 [91.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 38, loop depth 0, count 0, freq 303, maybe hot
;;  prev block 37, next block 39, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       37 [91.0%]  (FALLTHRU)
;;              40 [91.0%]  (DFS_BACK)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1472 319 1443 38 268 "" [1 uses])
(note 1443 1472 330 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(debug_insn 330 1443 331 38 (var_location:DI yyl (minus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
        (debug_expr:DI D#21))) -1
     (nil))
(insn 331 330 332 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311]) [0 MEM[base: _324, offset: 0B]+0 S1 A8])
            (const_int 10 [0xa]))) lex.yy.c:873 5 {*cmpqi_1}
     (nil))
(jump_insn 332 331 333 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 335)
            (pc))) lex.yy.c:873 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 335)
;;  succ:       39 [28.0%]  (FALLTHRU)
;;              40 [72.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 39, loop depth 0, count 0, freq 85, maybe hot
;;  prev block 38, next block 40, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       38 [28.0%]  (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	 17 [flags]
(note 333 332 334 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 334 333 335 39 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
                (plus:SI (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:875 217 {*addsi_1}
     (nil))
;;  succ:       40 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 40, loop depth 0, count 0, freq 303, maybe hot
;;  prev block 39, next block 41, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       38 [72.0%] 
;;              39 [100.0%]  (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 335 334 336 40 138 "" [1 uses])
(note 336 335 337 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(debug_insn 337 336 339 40 (var_location:DI D#19 (plus:DI (minus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
            (debug_expr:DI D#21))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 339 337 340 40 (var_location:DI yyl (debug_expr:DI D#19)) -1
     (nil))
(insn 340 339 341 40 (parallel [
            (set (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
                (plus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 341 340 342 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
            (reg:DI 2 cx [orig:327 D.6796 ] [327]))) lex.yy.c:872 8 {*cmpdi_1}
     (nil))
(jump_insn 342 341 347 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1472)
            (pc))) lex.yy.c:872 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 1472)
;;  succ:       41 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              38 [91.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 41, loop depth 0, count 0, freq 84, maybe hot
;;  prev block 40, next block 42, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       40 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              37 [9.0%] 
;;              35 [28.0%] 
;;              36 [50.0%] 
;;              153 [100.0%]  (DFS_BACK)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 347 342 348 41 137 "" [4 uses])
(note 348 347 349 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(debug_insn 349 348 350 41 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) -1
     (nil))
(insn 350 349 351 41 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 1 dx [orig:90 yy_act ] [90])
            (const_int 49 [0x31]))) lex.yy.c:881 7 {*cmpsi_1}
     (nil))
(jump_insn 351 350 1350 41 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1218)
            (pc))) lex.yy.c:881 612 {*jcc_1}
     (int_list:REG_BR_PROB 222 (nil))
 -> 1218)
;;  succ:       156 [2.2%]  (LOOP_EXIT)
;;              42 [97.8%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 42, loop depth 0, count 0, freq 82, maybe hot
;;  prev block 41, next block 43, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       41 [97.8%]  (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(note 1350 351 352 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 352 1350 354 42 (set (reg:DI 1 dx [orig:407 yy_act ] [407])
        (zero_extend:DI (reg/v:SI 1 dx [orig:90 yy_act ] [90]))) lex.yy.c:881 133 {*zero_extendsidi2}
     (nil))
(note 354 352 355 42 NOTE_INSN_DELETED)
(jump_insn 355 354 356 42 (parallel [
            (set (pc)
                (mem/u/c:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:407 yy_act ] [407])
                            (const_int 8 [0x8]))
                        (label_ref:DI 357)) [0  S8 A8]))
            (use (label_ref 357))
        ]) lex.yy.c:881 658 {*tablejump_1}
     (insn_list:REG_LABEL_OPERAND 357 (nil))
 -> 357)
;;  succ:       94 [2.3%]  (LOOP_EXIT)
;;              45 [2.3%]  (LOOP_EXIT)
;;              46 [2.3%]  (LOOP_EXIT)
;;              44 [2.3%]  (LOOP_EXIT)
;;              51 [2.3%]  (LOOP_EXIT)
;;              47 [2.3%]  (LOOP_EXIT)
;;              48 [2.3%]  (LOOP_EXIT)
;;              49 [2.3%]  (LOOP_EXIT)
;;              97 [2.3%] 
;;              50 [2.3%]  (LOOP_EXIT)
;;              96 [2.3%]  (LOOP_EXIT)
;;              95 [2.3%]  (LOOP_EXIT)
;;              54 [2.3%]  (LOOP_EXIT)
;;              57 [2.3%]  (LOOP_EXIT)
;;              62 [2.3%]  (LOOP_EXIT)
;;              65 [2.3%]  (LOOP_EXIT)
;;              68 [2.3%]  (LOOP_EXIT)
;;              69 [2.3%]  (LOOP_EXIT)
;;              70 [2.3%]  (LOOP_EXIT)
;;              157 [2.3%]  (LOOP_EXIT)
;;              158 [2.3%]  (LOOP_EXIT)
;;              43 [2.3%]  (LOOP_EXIT)
;;              72 [2.3%]  (LOOP_EXIT)
;;              73 [2.3%]  (LOOP_EXIT)
;;              74 [2.3%]  (LOOP_EXIT)
;;              75 [2.3%]  (LOOP_EXIT)
;;              76 [2.3%]  (LOOP_EXIT)
;;              77 [2.3%]  (LOOP_EXIT)
;;              78 [2.3%]  (LOOP_EXIT)
;;              79 [2.3%]  (LOOP_EXIT)
;;              80 [2.3%]  (LOOP_EXIT)
;;              81 [2.3%]  (LOOP_EXIT)
;;              82 [2.3%]  (LOOP_EXIT)
;;              83 [2.3%]  (LOOP_EXIT)
;;              84 [2.3%]  (LOOP_EXIT)
;;              85 [2.3%]  (LOOP_EXIT)
;;              86 [2.3%]  (LOOP_EXIT)
;;              87 [2.3%]  (LOOP_EXIT)
;;              88 [2.3%]  (LOOP_EXIT)
;;              89 [2.3%]  (LOOP_EXIT)
;;              90 [2.3%]  (LOOP_EXIT)
;;              91 [2.3%]  (LOOP_EXIT)
;;              92 [2.3%]  (LOOP_EXIT)
;;              93 [2.3%]  (LOOP_EXIT)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 356 355 357)
;; Insn is not within a basic block
(code_label 357 356 358 142 "" [2 uses])
;; Insn is not within a basic block
(jump_table_data 358 357 359 (addr_vec:DI [
            (label_ref:DI 379)
            (label_ref:DI 393)
            (label_ref:DI 364)
            (label_ref:DI 364)
            (label_ref:DI 399)
            (label_ref:DI 411)
            (label_ref:DI 416)
            (label_ref:DI 364)
            (label_ref:DI 421)
            (label_ref:DI 364)
            (label_ref:DI 364)
            (label_ref:DI 451)
            (label_ref:DI 474)
            (label_ref:DI 499)
            (label_ref:DI 518)
            (label_ref:DI 535)
            (label_ref:DI 551)
            (label_ref:DI 560)
            (label_ref:DI 1223)
            (label_ref:DI 1330)
            (label_ref:DI 360)
            (label_ref:DI 584)
            (label_ref:DI 588)
            (label_ref:DI 592)
            (label_ref:DI 596)
            (label_ref:DI 600)
            (label_ref:DI 604)
            (label_ref:DI 608)
            (label_ref:DI 612)
            (label_ref:DI 616)
            (label_ref:DI 620)
            (label_ref:DI 624)
            (label_ref:DI 628)
            (label_ref:DI 632)
            (label_ref:DI 636)
            (label_ref:DI 640)
            (label_ref:DI 644)
            (label_ref:DI 648)
            (label_ref:DI 652)
            (label_ref:DI 656)
            (label_ref:DI 660)
            (label_ref:DI 664)
            (label_ref:DI 668)
            (label_ref:DI 672)
            (label_ref:DI 678)
            (label_ref:DI 691)
            (label_ref:DI 707)
            (label_ref:DI 437)
            (label_ref:DI 437)
            (label_ref:DI 437)
        ]))
(barrier 359 358 360)
;; basic block 43, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 42, next block 44, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 360 359 361 43 158 "" [1 uses])
(note 361 360 44 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 44 361 1511 43 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 278 [0x116])) mycc.l:77 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 278 [0x116])
        (nil)))
(jump_insn 1511 44 1512 43 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1512 1511 364)
;; basic block 44, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 43, next block 45, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si]
;; live  kill	
(code_label 364 1512 365 44 144 "" [5 uses])
(note 365 364 366 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 366 365 367 44 (set (reg:QI 4 si [orig:320 D.6789 ] [320])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) 93 {*movqi_internal}
     (nil))
(insn 367 366 369 44 (set (reg:SI 0 ax [orig:342 D.6777 ] [342])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (nil)))
(insn 369 367 370 44 (set (reg:DI 1 dx [orig:411 D.6777 ] [411])
        (sign_extend:DI (reg:SI 0 ax [orig:342 D.6777 ] [342]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 370 369 373 44 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:411 D.6777 ] [411])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 373 370 374 44 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:411 D.6777 ] [411])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 374 373 375 44 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 375 374 1513 44 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (reg:SI 0 ax [orig:342 D.6777 ] [342])) 90 {*movsi_internal}
     (nil))
(jump_insn 1513 375 1514 44 (set (pc)
        (label_ref 376)) 654 {jump}
     (nil)
 -> 376)
;;  succ:       18 [100.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

(barrier 1514 1513 379)
;; basic block 45, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 44, next block 46, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(code_label 379 1514 380 45 141 "" [1 uses])
(note 380 379 381 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 45 (set (reg:QI 0 ax [orig:414 yy_hold_char ] [414])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:885 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 382 381 383 45 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])
        (reg:QI 0 ax [orig:414 yy_hold_char ] [414])) lex.yy.c:885 93 {*movqi_internal}
     (nil))
(insn 383 382 384 45 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) lex.yy.c:886 89 {*movdi_internal}
     (nil))
(debug_insn 384 383 385 45 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:886 -1
     (nil))
(debug_insn 385 384 387 45 (var_location:SI yy_current_state (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) lex.yy.c:887 -1
     (nil))
(note 387 385 388 45 NOTE_INSN_DELETED)
(insn 388 387 389 45 (set (reg:DI 0 ax [orig:416 yy_last_accepting_state ] [416])
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 389 388 1515 45 (set (reg:HI 1 dx [orig:186 D.6786 ] [186])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:416 yy_last_accepting_state ] [416])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(jump_insn 1515 389 1516 45 (set (pc)
        (label_ref 278)) lex.yy.c:888 654 {jump}
     (nil)
 -> 278)
;;  succ:       33 [100.0%]  (DFS_BACK)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 1516 1515 393)
;; basic block 46, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 45, next block 47, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 393 1516 394 46 143 "" [1 uses])
(note 394 393 395 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 4 46 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 5 [0x5])) mycc.l:43 90 {*movsi_internal}
     (nil))
(insn 4 395 5 46 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (const_int 40 [0x28])) mycc.l:44 92 {*movhi_internal}
     (nil))
(insn 5 4 6 46 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (const_int 2 [0x2])) mycc.l:44 92 {*movhi_internal}
     (nil))
(insn 6 5 1517 46 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (const_int 5 [0x5])) mycc.l:44 90 {*movsi_internal}
     (nil))
(jump_insn 1517 6 1518 46 (set (pc)
        (label_ref 396)) mycc.l:44 654 {jump}
     (nil)
 -> 396)
;;  succ:       16 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 1518 1517 399)
;; basic block 47, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 46, next block 48, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
(code_label 399 1518 400 47 145 "" [1 uses])
(note 400 399 401 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 401 400 402 47 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("_ZL8line_num") [flags 0x2]  <var_decl 0x7f88bc119b40 line_num>) [2 line_num+0 S4 A32])
                (plus:SI (mem/c:SI (symbol_ref:DI ("_ZL8line_num") [flags 0x2]  <var_decl 0x7f88bc119b40 line_num>) [2 line_num+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:46 217 {*addsi_1}
     (nil))
(insn 402 401 404 47 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 404 402 405 47 (set (reg:DI 1 dx [orig:419 D.6777 ] [419])
        (sign_extend:DI (reg:SI 0 ax [orig:341 D.6777 ] [341]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 405 404 408 47 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:419 D.6777 ] [419])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 408 405 1519 47 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:419 D.6777 ] [419])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
(jump_insn 1519 408 1520 47 (set (pc)
        (label_ref 396)) mycc.l:47 654 {jump}
     (nil)
 -> 396)
;;  succ:       16 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 1520 1519 411)
;; basic block 48, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 47, next block 49, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 411 1520 412 48 146 "" [1 uses])
(note 412 411 413 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 413 412 7 48 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) mycc.l:47 90 {*movsi_internal}
     (nil))
(insn 7 413 8 48 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (const_int 0 [0])) mycc.l:48 92 {*movhi_internal}
     (nil))
(insn 8 7 9 48 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (const_int 0 [0])) mycc.l:48 92 {*movhi_internal}
     (nil))
(insn 9 8 1521 48 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (const_int 1 [0x1])) mycc.l:48 90 {*movsi_internal}
     (nil))
(jump_insn 1521 9 1522 48 (set (pc)
        (label_ref 396)) mycc.l:48 654 {jump}
     (nil)
 -> 396)
;;  succ:       16 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 1522 1521 416)
;; basic block 49, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 48, next block 50, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 416 1522 417 49 147 "" [1 uses])
(note 417 416 418 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 10 49 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 3 [0x3])) mycc.l:49 90 {*movsi_internal}
     (nil))
(insn 10 418 11 49 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (const_int 37 [0x25])) mycc.l:50 92 {*movhi_internal}
     (nil))
(insn 11 10 12 49 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (const_int 7 [0x7])) mycc.l:50 92 {*movhi_internal}
     (nil))
(insn 12 11 1523 49 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (const_int 3 [0x3])) mycc.l:50 90 {*movsi_internal}
     (nil))
(jump_insn 1523 12 1524 49 (set (pc)
        (label_ref 396)) mycc.l:50 654 {jump}
     (nil)
 -> 396)
;;  succ:       16 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 1524 1523 421)
;; basic block 50, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 49, next block 51, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(code_label 421 1524 422 50 148 "" [1 uses])
(note 422 421 423 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f88bbbf2750 *.LC14>)) mycc.l:52 89 {*movdi_internal}
     (nil))
(insn 424 423 425 50 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:52 89 {*movdi_internal}
     (nil))
(call_insn 425 424 426 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f88bbf7aca8 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mycc.l:52 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f88bbf7aca8 fopen>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 426 425 427 50 (set (reg/f:DI 0 ax [orig:136 D.6778 ] [136])
        (reg:DI 0 ax)) mycc.l:52 89 {*movdi_internal}
     (nil))
(insn 427 426 428 50 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:136 D.6778 ] [136])) mycc.l:52 89 {*movdi_internal}
     (nil))
(insn 428 427 429 50 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) mycc.l:53 90 {*movsi_internal}
     (nil))
(insn 429 428 430 50 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:136 D.6778 ] [136])) mycc.l:53 89 {*movdi_internal}
     (nil))
(call_insn 430 429 431 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) mycc.l:53 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 431 430 432 50 (set (reg/f:DI 0 ax [orig:137 D.6782 ] [137])
        (reg:DI 0 ax)) mycc.l:53 89 {*movdi_internal}
     (nil))
(insn 432 431 433 50 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:137 D.6782 ] [137])) mycc.l:53 89 {*movdi_internal}
     (nil))
(call_insn 433 432 434 50 (call (mem:QI (symbol_ref:DI ("_Z19yypush_buffer_stateP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c5e8 yypush_buffer_state>) [0 yypush_buffer_state S1 A8])
        (const_int 0 [0])) mycc.l:53 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z19yypush_buffer_stateP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c5e8 yypush_buffer_state>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 434 433 13 50 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) mycc.l:54 90 {*movsi_internal}
     (nil))
(insn 13 434 14 50 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (const_int 0 [0])) mycc.l:56 92 {*movhi_internal}
     (nil))
(insn 14 13 15 50 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (const_int 0 [0])) mycc.l:56 92 {*movhi_internal}
     (nil))
(insn 15 14 1525 50 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (const_int 1 [0x1])) mycc.l:56 90 {*movsi_internal}
     (nil))
(jump_insn 1525 15 1526 50 (set (pc)
        (label_ref 396)) mycc.l:56 654 {jump}
     (nil)
 -> 396)
;;  succ:       16 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 1526 1525 437)
;; basic block 51, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 50, next block 52, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 437 1526 438 51 185 "" [3 uses])
(note 438 437 439 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(call_insn 439 438 440 51 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) mycc.l:58 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 440 439 441 51 (set (reg/f:DI 0 ax [orig:168 D.6780 ] [168])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) mycc.l:60 89 {*movdi_internal}
     (nil))
(insn 441 440 442 51 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:168 D.6780 ] [168])
            (const_int 0 [0]))) mycc.l:60 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 442 441 443 51 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1334)
            (pc))) mycc.l:60 612 {*jcc_1}
     (int_list:REG_BR_PROB 200 (nil))
 -> 1334)
;;  succ:       159 [2.0%]  (LOOP_EXIT)
;;              52 [98.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 7 [sp] 42 [r13]

;; basic block 52, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 51, next block 53, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       51 [98.0%]  (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 42 [r13]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(note 443 442 444 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 444 443 445 52 (set (reg:DI 1 dx [orig:422 yy_buffer_stack_top ] [422])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) mycc.l:60 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 445 444 446 52 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:422 yy_buffer_stack_top ] [422])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [orig:168 D.6780 ] [168])) [1 *_224+0 S8 A64])
            (const_int 0 [0]))) mycc.l:60 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 446 445 1528 52 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1527)
            (pc))) mycc.l:60 612 {*jcc_1}
     (int_list:REG_BR_PROB 9800 (nil))
 -> 1527)
;;  succ:       53 [2.0%]  (FALLTHRU)
;;              15 [98.0%] 
;; lr  out 	 7 [sp] 42 [r13]
;; live  out 	 7 [sp] 42 [r13]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       52 [2.0%]  (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 1528 446 1529 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1529 1528 1530 53 (set (pc)
        (label_ref 1338)) 654 {jump}
     (nil)
 -> 1338)
;;  succ:       160 [100.0%]  (LOOP_EXIT)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1530 1529 451)
;; basic block 54, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 53, next block 55, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 451 1530 452 54 149 "" [1 uses])
(note 452 451 453 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 453 452 454 54 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:109 89 {*movdi_internal}
     (nil))
(call_insn 454 453 455 54 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6lookupPKc") [flags 0x41]  <function_decl 0x7f88bc12e798 lookup>) [0 lookup S1 A8])
            (const_int 0 [0]))) mycc.l:109 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z6lookupPKc") [flags 0x41]  <function_decl 0x7f88bc12e798 lookup>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 455 454 456 54 (set (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
        (reg:DI 0 ax)) mycc.l:109 89 {*movdi_internal}
     (nil))
(insn 456 455 457 54 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.sym+0 S8 A64])
        (reg/f:DI 0 ax [orig:198 D.6792 ] [198])) mycc.l:109 89 {*movdi_internal}
     (nil))
(insn 457 456 458 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
            (const_int 0 [0]))) mycc.l:111 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 458 457 459 54 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 469)
            (pc))) mycc.l:111 612 {*jcc_1}
     (int_list:REG_BR_PROB 8987 (nil))
 -> 469)
;;  succ:       55 [10.1%]  (FALLTHRU)
;;              56 [89.9%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       54 [10.1%]  (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 459 458 460 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 460 459 461 55 (set (reg:SI 4 si)
        (const_int 258 [0x102])) mycc.l:113 90 {*movsi_internal}
     (nil))
(insn 461 460 462 55 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:113 89 {*movdi_internal}
     (nil))
(call_insn 462 461 463 55 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6insertPKci") [flags 0x41]  <function_decl 0x7f88bc12e870 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) mycc.l:113 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z6insertPKci") [flags 0x41]  <function_decl 0x7f88bc12e870 insert>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 463 462 464 55 (set (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
        (reg:DI 0 ax)) mycc.l:113 89 {*movdi_internal}
     (nil))
(insn 464 463 465 55 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.sym+0 S8 A64])
        (reg/f:DI 0 ax [orig:198 D.6792 ] [198])) mycc.l:113 89 {*movdi_internal}
     (nil))
(insn 465 464 466 55 (set (reg:SI 1 dx [orig:200 D.6777 ] [200])
        (mem/c:SI (symbol_ref:DI ("_ZL8localvar") [flags 0x2]  <var_decl 0x7f88bc119ab0 localvar>) [2 localvar+0 S4 A32])) mycc.l:114 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
                (const_int 12 [0xc])) [2 _284->localvar+0 S4 A32])
        (nil)))
(insn 466 465 467 55 (parallel [
            (set (reg:SI 2 cx [423])
                (plus:SI (reg:SI 1 dx [orig:200 D.6777 ] [200])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:114 217 {*addsi_1}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL8localvar") [flags 0x2]  <var_decl 0x7f88bc119ab0 localvar>) [2 localvar+0 S4 A32])
        (nil)))
(insn 467 466 468 55 (set (mem/c:SI (symbol_ref:DI ("_ZL8localvar") [flags 0x2]  <var_decl 0x7f88bc119ab0 localvar>) [2 localvar+0 S4 A32])
        (reg:SI 2 cx [423])) mycc.l:114 90 {*movsi_internal}
     (nil))
(insn 468 467 469 55 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
                (const_int 12 [0xc])) [2 _284->localvar+0 S4 A32])
        (reg:SI 1 dx [orig:200 D.6777 ] [200])) mycc.l:114 90 {*movsi_internal}
     (nil))
;;  succ:       56 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 56, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 55, next block 57, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       54 [89.9%] 
;;              55 [100.0%]  (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 469 468 470 56 190 "" [1 uses])
(note 470 469 471 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 471 470 1531 56 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
                (const_int 8 [0x8])) [2 _991->token+0 S4 A64])) mycc.l:117 90 {*movsi_internal}
     (nil))
(jump_insn 1531 471 1532 56 (set (pc)
        (label_ref 1225)) mycc.l:68 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1532 1531 474)
;; basic block 57, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 56, next block 58, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 474 1532 475 57 150 "" [1 uses])
(note 475 474 476 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 476 475 477 57 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:137 89 {*movdi_internal}
     (nil))
(insn 477 476 478 57 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f88bbbf27e0 *.LC15>)) mycc.l:137 89 {*movdi_internal}
     (nil))
(insn 478 477 479 57 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:137 89 {*movdi_internal}
     (nil))
(insn 479 478 480 57 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:137 93 {*movqi_internal}
     (nil))
(call_insn 480 479 482 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:137 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 482 480 483 57 (set (reg:SI 0 ax [orig:202 D.6785 ] [202])
        (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])) mycc.l:139 90 {*movsi_internal}
     (nil))
(insn 483 482 484 57 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:202 D.6785 ] [202])
            (const_int 127 [0x7f]))) mycc.l:139 7 {*cmpsi_1}
     (nil))
(jump_insn 484 483 508 57 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 488)
            (pc))) mycc.l:139 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 488)
;;  succ:       58 [39.0%]  (FALLTHRU)
;;              59 [61.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 58, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 57, next block 59, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       57 [39.0%]  (FALLTHRU)
;;              62 [39.0%] 
;;              65 [39.0%] 
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 508 484 485 58 193 "" [2 uses])
(note 485 508 37 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 37 485 1533 58 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 259 [0x103])) mycc.l:140 90 {*movsi_internal}
     (nil))
(jump_insn 1533 37 1534 58 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1534 1533 488)
;; basic block 59, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 58, next block 60, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       57 [61.0%] 
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 488 1534 489 59 191 "" [1 uses])
(note 489 488 490 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 490 489 491 59 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:202 D.6785 ] [202])
            (const_int 32367 [0x7e6f]))) mycc.l:142 7 {*cmpsi_1}
     (nil))
(jump_insn 491 490 512 59 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 495)
            (pc))) mycc.l:142 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 495)
;;  succ:       60 [39.0%]  (FALLTHRU)
;;              61 [61.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       59 [39.0%]  (FALLTHRU)
;;              64 [100.0%] 
;;              67 [100.0%] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 512 491 492 60 194 "" [2 uses])
(note 492 512 36 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 36 492 1535 60 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 260 [0x104])) mycc.l:143 90 {*movsi_internal}
     (nil))
(jump_insn 1535 36 1536 60 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1536 1535 495)
;; basic block 61, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 60, next block 62, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       59 [61.0%] 
;;              63 [61.0%] 
;;              66 [61.0%] 
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 495 1536 496 61 192 "" [3 uses])
(note 496 495 35 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 35 496 1537 61 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 261 [0x105])) mycc.l:145 90 {*movsi_internal}
     (nil))
(jump_insn 1537 35 1538 61 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1538 1537 499)
;; basic block 62, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 61, next block 63, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 499 1538 500 62 151 "" [1 uses])
(note 500 499 501 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 501 500 502 62 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 502 501 503 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f88bbbf2870 *.LC16>)) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 503 502 504 62 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 504 503 505 62 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:151 93 {*movqi_internal}
     (nil))
(call_insn 505 504 507 62 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:151 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 507 505 509 62 (set (reg:SI 0 ax [orig:203 D.6785 ] [203])
        (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])) mycc.l:153 90 {*movsi_internal}
     (nil))
(insn 509 507 510 62 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:203 D.6785 ] [203])
            (const_int 127 [0x7f]))) mycc.l:153 7 {*cmpsi_1}
     (nil))
(jump_insn 510 509 511 62 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 508)
            (pc))) mycc.l:153 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 508)
;;  succ:       58 [39.0%] 
;;              63 [61.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 63, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 62, next block 64, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       62 [61.0%]  (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 511 510 513 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 513 511 514 63 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:203 D.6785 ] [203])
            (const_int 32367 [0x7e6f]))) mycc.l:156 7 {*cmpsi_1}
     (nil))
(jump_insn 514 513 1539 63 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 495)
            (pc))) mycc.l:156 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 495)
;;  succ:       64 [39.0%]  (FALLTHRU)
;;              61 [61.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       63 [39.0%]  (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 1539 514 1540 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1540 1539 1541 64 (set (pc)
        (label_ref 512)) 654 {jump}
     (nil)
 -> 512)
;;  succ:       60 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1541 1540 518)
;; basic block 65, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 64, next block 66, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 518 1541 519 65 152 "" [1 uses])
(note 519 518 520 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 520 519 521 65 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:123 89 {*movdi_internal}
     (nil))
(insn 521 520 522 65 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f88bbbf2900 *.LC17>)) mycc.l:123 89 {*movdi_internal}
     (nil))
(insn 522 521 523 65 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:123 89 {*movdi_internal}
     (nil))
(insn 523 522 524 65 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:123 93 {*movqi_internal}
     (nil))
(call_insn 524 523 526 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 526 524 527 65 (set (reg:SI 0 ax [orig:204 D.6785 ] [204])
        (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])) mycc.l:125 90 {*movsi_internal}
     (nil))
(insn 527 526 528 65 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:204 D.6785 ] [204])
            (const_int 127 [0x7f]))) mycc.l:125 7 {*cmpsi_1}
     (nil))
(jump_insn 528 527 529 65 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 508)
            (pc))) mycc.l:125 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 508)
;;  succ:       58 [39.0%] 
;;              66 [61.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 66, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 65, next block 67, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       65 [61.0%]  (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 529 528 530 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 530 529 531 66 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:204 D.6785 ] [204])
            (const_int 32367 [0x7e6f]))) mycc.l:128 7 {*cmpsi_1}
     (nil))
(jump_insn 531 530 1542 66 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 495)
            (pc))) mycc.l:128 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 495)
;;  succ:       67 [39.0%]  (FALLTHRU)
;;              61 [61.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       66 [39.0%]  (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 1542 531 1543 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1543 1542 1544 67 (set (pc)
        (label_ref 512)) 654 {jump}
     (nil)
 -> 512)
;;  succ:       60 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1544 1543 535)
;; basic block 68, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 67, next block 69, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(code_label 535 1544 536 68 153 "" [1 uses])
(note 536 535 537 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(note 537 536 538 68 NOTE_INSN_DELETED)
(note 538 537 1667 68 NOTE_INSN_DELETED)
(insn 1667 538 539 68 (set (reg:DI 0 ax [579])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn 539 1667 1668 68 (parallel [
            (set (reg/f:DI 5 di [orig:428 D.6791 ] [428])
                (plus:DI (reg:DI 0 ax [579])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:167 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 1668 539 541 68 (set (reg:DI 1 dx [580])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 23 [0x17]))) mycc.l:167 214 {*leadi}
     (nil))
(insn 541 1668 543 68 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f88bbbf2990 *.LC18>)) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn 543 541 544 68 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:167 93 {*movqi_internal}
     (nil))
(call_insn 544 543 546 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:167 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 546 544 547 68 (set (reg:SI 0 ax [orig:431 c ] [431])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                    (const_int 23 [0x17])) [0 c+0 S1 A8]))) mycc.l:168 148 {extendqisi2}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])
        (nil)))
(insn 547 546 548 68 (set (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])
        (reg:SI 0 ax [orig:431 c ] [431])) mycc.l:168 90 {*movsi_internal}
     (nil))
(debug_insn 548 547 39 68 (var_location:QI c (clobber (const_int 0 [0]))) mycc.l:72 -1
     (nil))
(insn 39 548 1545 68 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 259 [0x103])) mycc.l:72 90 {*movsi_internal}
     (nil))
(jump_insn 1545 39 1546 68 (set (pc)
        (label_ref 1225)) mycc.l:72 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1546 1545 551)
;; basic block 69, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 68, next block 70, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di]
;; live  kill	
(code_label 551 1546 552 69 154 "" [1 uses])
(note 552 551 553 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 553 552 554 69 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 554 553 555 69 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f88bbbf2a20 *.LC19>)) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 555 554 556 69 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 556 555 557 69 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:176 93 {*movqi_internal}
     (nil))
(call_insn 557 556 40 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:176 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 40 557 1547 69 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 262 [0x106])) mycc.l:73 90 {*movsi_internal}
     (nil))
(jump_insn 1547 40 1548 69 (set (pc)
        (label_ref 1225)) mycc.l:73 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1548 1547 560)
;; basic block 70, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 69, next block 71, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 560 1548 561 70 155 "" [1 uses])
(note 561 560 562 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 563 70 (set (reg:DI 6 bp [orig:176 D.6781 ] [176])
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) mycc.l:184 89 {*movdi_internal}
     (nil))
(insn 563 562 565 70 (parallel [
            (set (reg:DI 5 di [orig:432 D.6781 ] [432])
                (plus:DI (reg:DI 6 bp [orig:176 D.6781 ] [176])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:184 218 {*adddi_1}
     (nil))
(call_insn 565 563 566 70 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mycc.l:184 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 566 565 568 70 (set (reg/f:DI 1 dx [433])
        (reg:DI 0 ax)) mycc.l:184 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 1 dx [433])
        (nil)))
(insn 568 566 38 70 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.str+0 S8 A64])
        (reg/f:DI 1 dx [433])) mycc.l:184 89 {*movdi_internal}
     (nil))
(insn 38 568 569 70 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 263 [0x107])) mycc.l:74 90 {*movsi_internal}
     (nil))
(insn 569 38 570 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 1 dx [433])
            (const_int 0 [0]))) mycc.l:186 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 570 569 571 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1225)
            (pc))) mycc.l:186 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 1225)
;;  succ:       71 [78.3%]  (FALLTHRU)
;;              161 [21.6%] 
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]

;; basic block 71, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 70, next block 72, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       70 [78.3%]  (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 571 570 572 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(debug_insn 572 571 573 71 (var_location:DI __dest (reg/f:DI 1 dx [433])) mycc.l:188 -1
     (nil))
(debug_insn 573 572 574 71 (var_location:DI __src (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (const_int 1 [0x1]))) mycc.l:188 -1
     (nil))
(note 574 573 1669 71 NOTE_INSN_DELETED)
(insn 1669 574 575 71 (set (reg:DI 0 ax [581])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (nil))
(insn 575 1669 577 71 (parallel [
            (set (reg/f:DI 4 si [orig:434 D.6791 ] [434])
                (plus:DI (reg:DI 0 ax [581])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:110 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 577 575 578 71 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [433])) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (nil))
(call_insn 578 577 1712 71 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f88bc2f4510 __builtin_strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/string3.h:110 669 {*call_value}
     (expr_list:REG_RETURNED (reg/f:DI 1 dx [433])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f88bc2f4510 __builtin_strcpy>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(note 1712 578 1704 71 NOTE_INSN_DELETED)
(insn 1704 1712 579 71 (set (reg/f:DI 1 dx [433])
        (reg:DI 0 ax)) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (nil))
(debug_insn 579 1704 580 71 (var_location:DI __dest (clobber (const_int 0 [0]))) mycc.l:188 -1
     (nil))
(debug_insn 580 579 581 71 (var_location:DI __src (clobber (const_int 0 [0]))) mycc.l:188 -1
     (nil))
(insn 581 580 1549 71 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 1 dx [433])
                    (reg:DI 6 bp [orig:176 D.6781 ] [176]))
                (const_int -2 [0xfffffffffffffffe])) [0 *_301+0 S1 A8])
        (const_int 0 [0])) mycc.l:189 93 {*movqi_internal}
     (nil))
(jump_insn 1549 581 1550 71 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1550 1549 584)
;; basic block 72, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 71, next block 73, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 584 1550 585 72 159 "" [1 uses])
(note 585 584 45 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 45 585 1551 72 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 279 [0x117])) mycc.l:78 90 {*movsi_internal}
     (nil))
(jump_insn 1551 45 1552 72 (set (pc)
        (label_ref 1225)) mycc.l:78 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1552 1551 588)
;; basic block 73, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 72, next block 74, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 588 1552 589 73 160 "" [1 uses])
(note 589 588 46 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 46 589 1553 73 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 280 [0x118])) mycc.l:79 90 {*movsi_internal}
     (nil))
(jump_insn 1553 46 1554 73 (set (pc)
        (label_ref 1225)) mycc.l:79 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1554 1553 592)
;; basic block 74, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 73, next block 75, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 592 1554 593 74 161 "" [1 uses])
(note 593 592 47 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 47 593 1555 74 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 281 [0x119])) mycc.l:80 90 {*movsi_internal}
     (nil))
(jump_insn 1555 47 1556 74 (set (pc)
        (label_ref 1225)) mycc.l:80 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1556 1555 596)
;; basic block 75, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 74, next block 76, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 596 1556 597 75 162 "" [1 uses])
(note 597 596 48 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 48 597 1557 75 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 282 [0x11a])) mycc.l:81 90 {*movsi_internal}
     (nil))
(jump_insn 1557 48 1558 75 (set (pc)
        (label_ref 1225)) mycc.l:81 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1558 1557 600)
;; basic block 76, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 75, next block 77, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 600 1558 601 76 163 "" [1 uses])
(note 601 600 49 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 49 601 1559 76 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 283 [0x11b])) mycc.l:82 90 {*movsi_internal}
     (nil))
(jump_insn 1559 49 1560 76 (set (pc)
        (label_ref 1225)) mycc.l:82 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1560 1559 604)
;; basic block 77, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 76, next block 78, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 604 1560 605 77 164 "" [1 uses])
(note 605 604 50 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 50 605 1561 77 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 284 [0x11c])) mycc.l:83 90 {*movsi_internal}
     (nil))
(jump_insn 1561 50 1562 77 (set (pc)
        (label_ref 1225)) mycc.l:83 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1562 1561 608)
;; basic block 78, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 77, next block 79, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 608 1562 609 78 165 "" [1 uses])
(note 609 608 51 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 51 609 1563 78 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 285 [0x11d])) mycc.l:84 90 {*movsi_internal}
     (nil))
(jump_insn 1563 51 1564 78 (set (pc)
        (label_ref 1225)) mycc.l:84 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1564 1563 612)
;; basic block 79, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 78, next block 80, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 612 1564 613 79 166 "" [1 uses])
(note 613 612 52 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 52 613 1565 79 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 286 [0x11e])) mycc.l:85 90 {*movsi_internal}
     (nil))
(jump_insn 1565 52 1566 79 (set (pc)
        (label_ref 1225)) mycc.l:85 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1566 1565 616)
;; basic block 80, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 79, next block 81, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 616 1566 617 80 167 "" [1 uses])
(note 617 616 53 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 53 617 1567 80 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 287 [0x11f])) mycc.l:86 90 {*movsi_internal}
     (nil))
(jump_insn 1567 53 1568 80 (set (pc)
        (label_ref 1225)) mycc.l:86 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1568 1567 620)
;; basic block 81, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 80, next block 82, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 620 1568 621 81 168 "" [1 uses])
(note 621 620 54 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 54 621 1569 81 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 288 [0x120])) mycc.l:87 90 {*movsi_internal}
     (nil))
(jump_insn 1569 54 1570 81 (set (pc)
        (label_ref 1225)) mycc.l:87 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1570 1569 624)
;; basic block 82, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 81, next block 83, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 624 1570 625 82 169 "" [1 uses])
(note 625 624 55 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 55 625 1571 82 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 289 [0x121])) mycc.l:88 90 {*movsi_internal}
     (nil))
(jump_insn 1571 55 1572 82 (set (pc)
        (label_ref 1225)) mycc.l:88 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1572 1571 628)
;; basic block 83, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 82, next block 84, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 628 1572 629 83 170 "" [1 uses])
(note 629 628 56 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 56 629 1573 83 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 290 [0x122])) mycc.l:89 90 {*movsi_internal}
     (nil))
(jump_insn 1573 56 1574 83 (set (pc)
        (label_ref 1225)) mycc.l:89 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1574 1573 632)
;; basic block 84, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 83, next block 85, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 632 1574 633 84 171 "" [1 uses])
(note 633 632 57 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 57 633 1575 84 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 291 [0x123])) mycc.l:90 90 {*movsi_internal}
     (nil))
(jump_insn 1575 57 1576 84 (set (pc)
        (label_ref 1225)) mycc.l:90 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1576 1575 636)
;; basic block 85, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 84, next block 86, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 636 1576 637 85 172 "" [1 uses])
(note 637 636 58 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 58 637 1577 85 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 292 [0x124])) mycc.l:91 90 {*movsi_internal}
     (nil))
(jump_insn 1577 58 1578 85 (set (pc)
        (label_ref 1225)) mycc.l:91 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1578 1577 640)
;; basic block 86, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 85, next block 87, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 640 1578 641 86 173 "" [1 uses])
(note 641 640 59 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 59 641 1579 86 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 293 [0x125])) mycc.l:92 90 {*movsi_internal}
     (nil))
(jump_insn 1579 59 1580 86 (set (pc)
        (label_ref 1225)) mycc.l:92 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1580 1579 644)
;; basic block 87, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 86, next block 88, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 644 1580 645 87 174 "" [1 uses])
(note 645 644 60 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 60 645 1581 87 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 294 [0x126])) mycc.l:93 90 {*movsi_internal}
     (nil))
(jump_insn 1581 60 1582 87 (set (pc)
        (label_ref 1225)) mycc.l:93 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1582 1581 648)
;; basic block 88, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 87, next block 89, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 648 1582 649 88 175 "" [1 uses])
(note 649 648 61 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 61 649 1583 88 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 295 [0x127])) mycc.l:94 90 {*movsi_internal}
     (nil))
(jump_insn 1583 61 1584 88 (set (pc)
        (label_ref 1225)) mycc.l:94 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1584 1583 652)
;; basic block 89, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 88, next block 90, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 652 1584 653 89 176 "" [1 uses])
(note 653 652 62 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 62 653 1585 89 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 296 [0x128])) mycc.l:95 90 {*movsi_internal}
     (nil))
(jump_insn 1585 62 1586 89 (set (pc)
        (label_ref 1225)) mycc.l:95 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1586 1585 656)
;; basic block 90, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 89, next block 91, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 656 1586 657 90 177 "" [1 uses])
(note 657 656 63 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 63 657 1587 90 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 123 [0x7b])) mycc.l:96 90 {*movsi_internal}
     (nil))
(jump_insn 1587 63 1588 90 (set (pc)
        (label_ref 1225)) mycc.l:96 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1588 1587 660)
;; basic block 91, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 90, next block 92, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 660 1588 661 91 178 "" [1 uses])
(note 661 660 64 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 64 661 1589 91 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 125 [0x7d])) mycc.l:97 90 {*movsi_internal}
     (nil))
(jump_insn 1589 64 1590 91 (set (pc)
        (label_ref 1225)) mycc.l:97 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1590 1589 664)
;; basic block 92, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 91, next block 93, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 664 1590 665 92 179 "" [1 uses])
(note 665 664 65 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 65 665 1591 92 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 91 [0x5b])) mycc.l:98 90 {*movsi_internal}
     (nil))
(jump_insn 1591 65 1592 92 (set (pc)
        (label_ref 1225)) mycc.l:98 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1592 1591 668)
;; basic block 93, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 92, next block 94, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 668 1592 669 93 180 "" [1 uses])
(note 669 668 66 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 66 669 1593 93 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 93 [0x5d])) mycc.l:99 90 {*movsi_internal}
     (nil))
(jump_insn 1593 66 1594 93 (set (pc)
        (label_ref 1225)) mycc.l:99 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1594 1593 672)
;; basic block 94, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 93, next block 95, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
(code_label 672 1594 673 94 181 "" [1 uses])
(note 673 672 674 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 674 673 675 94 (set (reg/f:DI 0 ax [orig:436 yytext ] [436])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:100 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (nil)))
(insn 675 674 1595 94 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (sign_extend:SI (mem:QI (reg/f:DI 0 ax [orig:436 yytext ] [436]) [0 *_238+0 S1 A8]))) mycc.l:100 148 {extendqisi2}
     (nil))
(jump_insn 1595 675 1596 94 (set (pc)
        (label_ref 1225)) mycc.l:100 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1596 1595 678)
;; basic block 95, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 94, next block 96, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di]
;; live  kill	
(code_label 678 1596 679 95 182 "" [1 uses])
(note 679 678 680 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 680 679 681 95 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f88bbbf2ab0 *.LC20>)) mycc.l:101 89 {*movdi_internal}
     (nil))
(call_insn 681 680 682 95 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7yyerrorPKc") [flags 0x41]  <function_decl 0x7f88bc13b0d8 yyerror>) [0 yyerror S1 A8])
            (const_int 0 [0]))) mycc.l:101 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z7yyerrorPKc") [flags 0x41]  <function_decl 0x7f88bc13b0d8 yyerror>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 682 681 684 95 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 684 682 685 95 (set (reg:DI 1 dx [orig:438 D.6777 ] [438])
        (sign_extend:DI (reg:SI 0 ax [orig:341 D.6777 ] [341]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 685 684 688 95 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:438 D.6777 ] [438])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 688 685 1597 95 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:438 D.6777 ] [438])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
(jump_insn 1597 688 1598 95 (set (pc)
        (label_ref 396)) mycc.l:102 654 {jump}
     (nil)
 -> 396)
;;  succ:       16 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 1598 1597 691)
;; basic block 96, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 95, next block 97, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(code_label 691 1598 692 96 183 "" [1 uses])
(note 692 691 693 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 693 692 694 96 (set (reg:DI 2 cx)
        (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 694 693 695 96 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 695 694 696 96 (set (reg:DI 4 si)
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 696 695 697 96 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(call_insn 697 696 698 96 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f88bc2ff0d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) mycc.l:103 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f88bc2ff0d8 fwrite>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 698 697 700 96 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 700 698 701 96 (set (reg:DI 1 dx [orig:442 D.6777 ] [442])
        (sign_extend:DI (reg:SI 0 ax [orig:341 D.6777 ] [341]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 701 700 704 96 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.6777 ] [442])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 704 701 1599 96 (set (reg:HI 1 dx [orig:321 D.6787 ] [321])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.6777 ] [442])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
(jump_insn 1599 704 1600 96 (set (pc)
        (label_ref 396)) 654 {jump}
     (nil)
 -> 396)
;;  succ:       16 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 1600 1599 707)
;; basic block 97, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 96, next block 98, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%] 
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 707 1600 708 97 184 "" [1 uses])
(note 708 707 709 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(debug_insn 709 708 1670 97 (var_location:SI yy_act (const_int 46 [0x2e])) -1
     (nil))
(insn 1670 709 710 97 (set (reg:DI 43 r14 [orig:445 D.6788 ] [445])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1140 89 {*movdi_internal}
     (nil))
(insn 710 1670 711 97 (parallel [
            (set (reg:DI 43 r14 [orig:445 D.6788 ] [445])
                (minus:DI (reg:DI 43 r14 [orig:445 D.6788 ] [445])
                    (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1140 261 {*subdi_1}
     (nil))
(insn 711 710 1672 97 (parallel [
            (set (reg/v:SI 0 ax [orig:147 yy_amount_of_matched_text ] [147])
                (plus:SI (reg:SI 43 r14 [orig:445 D.6788 ] [445])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1140 217 {*addsi_1}
     (nil))
(insn 1672 711 712 97 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [9 %sfp+-24 S4 A32])
        (reg/v:SI 0 ax [orig:147 yy_amount_of_matched_text ] [147])) lex.yy.c:1140 90 {*movsi_internal}
     (nil))
(debug_insn 712 1672 713 97 (var_location:SI yy_amount_of_matched_text (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 8 [0x8])) [9 %sfp+-24 S4 A32])) lex.yy.c:1140 -1
     (nil))
(insn 713 712 714 97 (set (reg:QI 0 ax [orig:446 yy_hold_char ] [446])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1143 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 714 713 715 97 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])
        (reg:QI 0 ax [orig:446 yy_hold_char ] [446])) lex.yy.c:1143 93 {*movqi_internal}
     (nil))
(insn 715 714 716 97 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(note 716 715 717 97 NOTE_INSN_DELETED)
(insn 717 716 718 97 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn 718 717 719 97 (set (reg/f:DI 44 r15 [orig:152 D.6780 ] [152])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1146 214 {*leadi}
     (nil))
(insn 719 718 720 97 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn 720 719 721 97 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                    (const_int 60 [0x3c])) [2 _143->yy_buffer_status+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:1146 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 721 720 722 97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 726)
            (pc))) lex.yy.c:1146 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 726)
;;  succ:       99 [50.0%] 
;;              98 [50.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 98, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 97, next block 99, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       97 [50.0%]  (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 722 721 723 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 723 722 1601 98 (set (reg:SI 0 ax [orig:154 D.6777 ] [154])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 1601 723 1602 98 (set (pc)
        (label_ref 734)) 654 {jump}
     (nil)
 -> 734)
;;  succ:       100 [100.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1602 1601 726)
;; basic block 99, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 98, next block 100, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       97 [50.0%] 
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 5 [di] 43 [r14]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 43 [r14]
;; live  kill	
(code_label 726 1602 727 99 195 "" [1 uses])
(note 727 726 728 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 728 727 729 99 (set (reg:SI 0 ax [orig:154 D.6777 ] [154])
        (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 32 [0x20])) [2 _143->yy_n_chars+0 S4 A64])) lex.yy.c:1157 90 {*movsi_internal}
     (nil))
(insn 729 728 730 99 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 0 ax [orig:154 D.6777 ] [154])) lex.yy.c:1157 90 {*movsi_internal}
     (nil))
(insn 730 729 731 99 (set (reg/f:DI 5 di [orig:450 yyin ] [450])
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1158 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 731 730 732 99 (set (mem/f:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245]) [1 _143->yy_input_file+0 S8 A64])
        (reg/f:DI 5 di [orig:450 yyin ] [450])) lex.yy.c:1158 89 {*movdi_internal}
     (nil))
(insn 732 731 733 99 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) lex.yy.c:1159 89 {*movdi_internal}
     (nil))
(insn 733 732 734 99 (set (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 60 [0x3c])) [2 _162->yy_buffer_status+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1159 90 {*movsi_internal}
     (nil))
;;  succ:       100 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 100, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 99, next block 101, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       99 [100.0%]  (FALLTHRU)
;;              98 [100.0%] 
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
(code_label 734 733 735 100 196 "" [1 uses])
(note 735 734 736 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 736 735 737 100 (set (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
        (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _927->yy_ch_buf+0 S8 A64])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
(insn 737 736 738 100 (set (reg:DI 39 r10 [orig:157 D.6790 ] [157])
        (sign_extend:DI (reg:SI 0 ax [orig:154 D.6777 ] [154]))) lex.yy.c:1169 142 {*extendsidi2_rex64}
     (nil))
(insn 738 737 739 100 (parallel [
            (set (reg/f:DI 6 bp [orig:158 D.6783 ] [158])
                (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
                    (reg:DI 39 r10 [orig:157 D.6790 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1169 218 {*adddi_1}
     (nil))
(insn 739 738 740 100 (set (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
(insn 740 739 741 100 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 6 bp [orig:158 D.6783 ] [158])
            (reg/f:DI 0 ax [orig:244 D.6783 ] [244]))) lex.yy.c:1169 8 {*cmpdi_1}
     (nil))
(jump_insn 741 740 742 100 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 825)
            (pc))) lex.yy.c:1169 612 {*jcc_1}
     (int_list:REG_BR_PROB 9800 (nil))
 -> 825)
;;  succ:       101 [2.0%]  (FALLTHRU,LOOP_EXIT)
;;              108 [98.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 102, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       100 [2.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(note 742 741 1673 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(note 1673 742 1711 101 NOTE_INSN_DELETED)
(note 1711 1673 743 101 NOTE_INSN_DELETED)
(insn 743 1711 744 101 (set (reg:DI 3 bx [orig:451 D.6790 ] [451])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [9 %sfp+-24 S4 A32]))) lex.yy.c:1173 142 {*extendsidi2_rex64}
     (nil))
(note 744 743 745 101 NOTE_INSN_DELETED)
(insn 745 744 746 101 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg:DI 3 bx [orig:451 D.6790 ] [451])
                    (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1173 218 {*adddi_1}
     (nil))
(insn 746 745 747 101 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1173 89 {*movdi_internal}
     (nil))
(call_insn 747 746 1407 101 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1175 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(debug_insn 1407 747 748 101 (var_location:SI D#22 (reg:SI 0 ax)) -1
     (nil))
(insn 748 1407 749 101 (set (reg/v:SI 0 ax [orig:193 yy_current_state ] [193])
        (reg:SI 0 ax)) lex.yy.c:1175 90 {*movsi_internal}
     (nil))
(debug_insn 749 748 750 101 (var_location:SI yy_current_state (debug_expr:SI D#22)) lex.yy.c:1175 -1
     (nil))
(debug_insn 750 749 751 101 (var_location:SI yy_current_state (debug_expr:SI D#22)) lex.yy.c:1175 -1
     (nil))
(debug_insn 751 750 752 101 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1443 -1
     (nil))
(debug_insn 752 751 754 101 (var_location:QI yy_c (const_int 1 [0x1])) lex.yy.c:1445 -1
     (nil))
(insn 754 752 755 101 (set (reg:DI 4 si [orig:543 yy_current_state ] [543])
        (sign_extend:DI (reg/v:SI 0 ax [orig:193 yy_current_state ] [193]))) lex.yy.c:1446 142 {*extendsidi2_rex64}
     (nil))
(insn 755 754 756 101 (set (reg:HI 1 dx [orig:186 D.6786 ] [186])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) lex.yy.c:1446 92 {*movhi_internal}
     (nil))
(insn 756 755 757 101 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 1 dx [orig:186 D.6786 ] [186])
            (const_int 0 [0]))) lex.yy.c:1446 2 {*cmphi_ccno_1}
     (nil))
(jump_insn 757 756 758 101 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 761)
            (pc))) lex.yy.c:1446 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 761)
;;  succ:       102 [50.0%]  (FALLTHRU)
;;              103 [50.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 102, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 101, next block 103, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       101 [50.0%]  (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	
;; live  kill	
(note 758 757 759 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 759 758 760 102 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg/v:SI 0 ax [orig:193 yy_current_state ] [193])) lex.yy.c:1448 90 {*movsi_internal}
     (nil))
(insn 760 759 761 102 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1449 89 {*movdi_internal}
     (nil))
;;  succ:       103 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 103, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 102, next block 104, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       101 [50.0%] 
;;              102 [100.0%]  (FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 2 [cx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 761 760 762 103 198 "" [1 uses])
(note 762 761 763 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(debug_insn 763 762 764 103 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 764 763 767 103 (var_location:SI yy_current_state (debug_expr:SI D#22)) -1
     (nil))
(note 767 764 769 103 NOTE_INSN_DELETED)
(insn 769 767 770 103 (set (reg:SI 2 cx [orig:542 D.6785 ] [542])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) lex.yy.c:1451 139 {*zero_extendhisi2}
     (nil))
(insn 770 769 771 103 (parallel [
            (set (reg:SI 5 di [orig:459 D.6777 ] [459])
                (plus:SI (reg:SI 2 cx [orig:542 D.6785 ] [542])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1451 217 {*addsi_1}
     (nil))
(insn 771 770 772 103 (set (reg:DI 5 di [orig:460 D.6777 ] [460])
        (sign_extend:DI (reg:SI 5 di [orig:459 D.6777 ] [459]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn 772 771 773 103 (set (reg:SI 5 di [orig:461 D.6777 ] [461])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 5 di [orig:460 D.6777 ] [460])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:1451 146 {extendhisi2}
     (nil))
(insn 773 772 774 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:193 yy_current_state ] [193])
            (reg:SI 5 di [orig:461 D.6777 ] [461]))) lex.yy.c:1451 7 {*cmpsi_1}
     (nil))
(jump_insn 774 773 789 103 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 797)
            (pc))) lex.yy.c:1451 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 797)
;;  succ:       105 [9.0%] 
;;              104 [91.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 104, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       103 [91.0%]  (FALLTHRU)
;;              104 [91.0%]  (DFS_BACK)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 789 774 776 104 200 "" [1 uses])
(note 776 789 777 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(debug_insn 777 776 778 104 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 778 777 781 104 (var_location:SI yy_current_state (debug_expr:SI D#22)) -1
     (nil))
(note 781 778 1406 104 NOTE_INSN_DELETED)
(debug_insn 1406 781 782 104 (var_location:SI D#22 (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) -1
     (nil))
(insn 782 1406 784 104 (set (reg/v:SI 0 ax [orig:193 yy_current_state ] [193])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) lex.yy.c:1453 146 {extendhisi2}
     (nil))
(debug_insn 784 782 785 104 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 785 784 787 104 (var_location:SI yy_current_state (debug_expr:SI D#22)) -1
     (nil))
(insn 787 785 788 104 (set (reg:DI 4 si [orig:543 yy_current_state ] [543])
        (sign_extend:DI (reg/v:SI 0 ax [orig:193 yy_current_state ] [193]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(note 788 787 791 104 NOTE_INSN_DELETED)
(insn 791 788 792 104 (set (reg:SI 2 cx [orig:542 D.6785 ] [542])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) lex.yy.c:1451 139 {*zero_extendhisi2}
     (nil))
(insn 792 791 793 104 (parallel [
            (set (reg:SI 5 di [orig:468 D.6777 ] [468])
                (plus:SI (reg:SI 2 cx [orig:542 D.6785 ] [542])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1451 217 {*addsi_1}
     (nil))
(insn 793 792 794 104 (set (reg:DI 5 di [orig:469 D.6777 ] [469])
        (sign_extend:DI (reg:SI 5 di [orig:468 D.6777 ] [468]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn 794 793 795 104 (set (reg:SI 5 di [orig:470 D.6777 ] [470])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 5 di [orig:469 D.6777 ] [469])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:1451 146 {extendhisi2}
     (nil))
(insn 795 794 796 104 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 5 di [orig:470 D.6777 ] [470])
            (reg/v:SI 0 ax [orig:193 yy_current_state ] [193]))) lex.yy.c:1451 7 {*cmpsi_1}
     (nil))
(jump_insn 796 795 797 104 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 789)
            (pc))) lex.yy.c:1451 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 789)
;;  succ:       105 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              104 [91.0%]  (DFS_BACK)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 105, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       104 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              103 [9.0%] 
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(code_label 797 796 798 105 199 "" [1 uses])
(note 798 797 801 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 801 798 802 105 (parallel [
            (set (reg:SI 0 ax [orig:473 D.6785 ] [473])
                (plus:SI (reg:SI 2 cx [orig:542 D.6785 ] [542])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1457 217 {*addsi_1}
     (nil))
(insn 802 801 803 105 (set (reg:DI 0 ax [orig:474 D.6785 ] [474])
        (zero_extend:DI (reg:SI 0 ax [orig:473 D.6785 ] [473]))) lex.yy.c:1457 133 {*zero_extendsidi2}
     (nil))
(insn 803 802 804 105 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:474 D.6785 ] [474])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) [3 yy_nxt S2 A16]))) lex.yy.c:1457 139 {*zero_extendhisi2}
     (nil))
(debug_insn 804 803 805 105 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:1457 -1
     (nil))
(debug_insn 805 804 806 105 (var_location:QI D#1 (eq:QI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (const_int 101 [0x65]))) lex.yy.c:1458 -1
     (nil))
(debug_insn 806 805 1235 105 (var_location:SI yy_is_jam (zero_extend:SI (debug_expr:QI D#1))) lex.yy.c:1458 -1
     (nil))
(insn 1235 806 807 105 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1188 89 {*movdi_internal}
     (nil))
(insn 807 1235 808 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (const_int 101 [0x65]))) lex.yy.c:1460 7 {*cmpsi_1}
     (nil))
(jump_insn 808 807 809 105 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 278)
            (pc))) lex.yy.c:1460 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 278)
;;  succ:       106 [72.0%]  (FALLTHRU)
;;              33 [28.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       105 [72.0%]  (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 42 [r13]
;; live  gen 	 17 [flags] 41 [r12]
;; live  kill	
(note 809 808 810 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(debug_insn 810 809 811 106 (var_location:SI yy_current_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 811 810 812 106 (var_location:DI yy_cp (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 812 811 813 106 (var_location:SI yy_next_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(insn 813 812 814 106 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1188 89 {*movdi_internal}
     (nil))
(debug_insn 814 813 815 106 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:1188 -1
     (nil))
(insn 815 814 816 106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (const_int 0 [0]))) lex.yy.c:1190 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 816 815 817 106 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 278)
            (pc))) lex.yy.c:1190 612 {*jcc_1}
     (int_list:REG_BR_PROB 9800 (nil))
 -> 278)
;;  succ:       107 [2.0%]  (FALLTHRU,LOOP_EXIT)
;;              33 [98.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 107, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       106 [2.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
(note 817 816 818 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 818 817 819 107 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1193 218 {*adddi_1}
     (nil))
(insn 819 818 820 107 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1193 89 {*movdi_internal}
     (nil))
(debug_insn 820 819 821 107 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1193 -1
     (nil))
(debug_insn 821 820 1603 107 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:1194 -1
     (nil))
(jump_insn 1603 821 1604 107 (set (pc)
        (label_ref 822)) lex.yy.c:1195 654 {jump}
     (nil)
 -> 822)
;;  succ:       19 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 1604 1603 825)
;; basic block 108, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 107, next block 109, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       100 [98.0%] 
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 39 [r10] 40 [r11]
;; lr  def 	 5 [di] 17 [flags] 39 [r10]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags] 39 [r10]
;; live  kill	
(code_label 825 1604 826 108 197 "" [1 uses])
(note 826 825 827 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(debug_insn 827 826 828 108 (var_location:DI dest (reg/v/f:DI 40 r11 [orig:156 dest ] [156])) lex.yy.c:1276 -1
     (nil))
(insn 828 827 829 108 (set (reg/v/f:DI 5 di [orig:213 source ] [213])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1277 89 {*movdi_internal}
     (nil))
(debug_insn 829 828 830 108 (var_location:DI source (reg/v/f:DI 5 di [orig:213 source ] [213])) lex.yy.c:1277 -1
     (nil))
(note 830 829 831 108 NOTE_INSN_DELETED)
(insn 831 830 832 108 (set (reg:DI 39 r10 [orig:476 D.6783 ] [476])
        (plus:DI (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
                (reg:DI 39 r10 [orig:157 D.6790 ] [157]))
            (const_int 1 [0x1]))) lex.yy.c:1281 214 {*leadi}
     (nil))
(insn 832 831 833 108 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
            (reg:DI 39 r10 [orig:476 D.6783 ] [476]))) lex.yy.c:1281 8 {*cmpdi_1}
     (nil))
(jump_insn 833 832 834 108 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 838)
            (pc))) lex.yy.c:1281 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 838)
;;  succ:       109 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              110 [100.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 108, next block 110, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       108 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(note 834 833 835 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 835 834 836 109 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f88bbbf2b40 *.LC21>)) lex.yy.c:1283 89 {*movdi_internal}
     (nil))
(call_insn 836 835 837 109 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1283 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 837 836 838)
;; basic block 110, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 109, next block 111, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       108 [100.0%] 
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 838 837 839 110 203 "" [1 uses])
(note 839 838 840 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 840 839 841 110 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                    (const_int 56 [0x38])) [2 _927->yy_fill_buffer+0 S4 A64])
            (const_int 0 [0]))) lex.yy.c:1285 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 841 840 842 110 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 849)
            (pc))) lex.yy.c:1285 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 849)
;;  succ:       111 [50.0%]  (FALLTHRU)
;;              113 [50.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 111, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 110, next block 112, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       110 [50.0%]  (FALLTHRU)
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(note 842 841 843 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(insn 843 842 844 111 (parallel [
            (set (reg:DI 0 ax [orig:477 D.6788 ] [477])
                (minus:DI (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
                    (reg/v/f:DI 5 di [orig:213 source ] [213])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1287 261 {*subdi_1}
     (nil))
(insn 844 843 845 111 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:477 D.6788 ] [477])
            (const_int 1 [0x1]))) lex.yy.c:1287 8 {*cmpdi_1}
     (nil))
(jump_insn 845 844 848 111 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1344)
            (pc))) lex.yy.c:1287 612 {*jcc_1}
     (int_list:REG_BR_PROB 1608 (nil))
 -> 1344)
;;  succ:       152 [16.1%] 
;;              112 [83.9%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 112, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 111, next block 113, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       111 [83.9%]  (FALLTHRU,LOOP_EXIT)
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	 3 [bx]
;; live  kill	
(note 848 845 34 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn 34 848 1605 112 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (reg/f:DI 6 bp [orig:158 D.6783 ] [158])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
(jump_insn 1605 34 1606 112 (set (pc)
        (label_ref 1184)) 654 {jump}
     (nil)
 -> 1184)
;;  succ:       155 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 42 [r13]

(barrier 1606 1605 849)
;; basic block 113, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 112, next block 114, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       110 [50.0%] 
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 849 1606 850 113 204 "" [1 uses])
(note 850 849 1674 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 1674 850 851 113 (set (reg:DI 6 bp [orig:478 D.6788 ] [478])
        (reg/f:DI 0 ax [orig:244 D.6783 ] [244])) lex.yy.c:1307 89 {*movdi_internal}
     (nil))
(insn 851 1674 852 113 (parallel [
            (set (reg:DI 6 bp [orig:478 D.6788 ] [478])
                (minus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
                    (reg/v/f:DI 5 di [orig:213 source ] [213])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1307 261 {*subdi_1}
     (nil))
(note 852 851 853 113 NOTE_INSN_DELETED)
(debug_insn 853 852 855 113 (var_location:DI number_to_move (plus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
        (const_int -1 [0xffffffffffffffff]))) lex.yy.c:1307 -1
     (nil))
(debug_insn 855 853 856 113 (var_location:DI i (const_int 0 [0])) -1
     (nil))
(debug_insn 856 855 857 113 (var_location:DI source (reg/v/f:DI 5 di [orig:213 source ] [213])) -1
     (nil))
(debug_insn 857 856 858 113 (var_location:DI dest (reg/v/f:DI 40 r11 [orig:156 dest ] [156])) -1
     (nil))
(insn 858 857 859 113 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg/v:DI 6 bp [orig:224 number_to_move ] [224])
                (plus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
                    (const_int -1 [0xffffffffffffffff])))
        ]) lex.yy.c:1309 226 {*adddi_2}
     (nil))
(jump_insn 859 858 1345 113 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 880)
            (pc))) lex.yy.c:1309 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 880)
;;  succ:       117 [9.0%] 
;;              114 [91.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 114, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 113, next block 115, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       113 [91.0%]  (FALLTHRU)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx]
;; live  kill	
(note 1345 859 25 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 25 1345 875 114 (set (reg/v:DI 1 dx [orig:227 i ] [227])
        (const_int 0 [0])) lex.yy.c:1309 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       115 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]

;; basic block 115, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 114, next block 116, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       114 [100.0%]  (FALLTHRU)
;;              115 [91.0%]  (DFS_BACK)
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 1 [dx] 5 [di] 6 [bp] 7 [sp] 40 [r11]
;; lr  def 	 1 [dx] 17 [flags] 39 [r10]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(code_label 875 25 860 115 208 "" [1 uses])
(note 860 875 861 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(debug_insn 861 860 864 115 (var_location:DI i (reg/v:DI 1 dx [orig:227 i ] [227])) -1
     (nil))
(debug_insn 864 861 865 115 (var_location:DI D#17 (plus:DI (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
            (reg/v:DI 1 dx [orig:227 i ] [227]))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 865 864 866 115 (var_location:DI dest (debug_expr:DI D#17)) lex.yy.c:1310 -1
     (nil))
(debug_insn 866 865 867 115 (var_location:DI D#18 (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:213 source ] [213])
            (reg/v:DI 1 dx [orig:227 i ] [227]))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 867 866 868 115 (var_location:DI source (debug_expr:DI D#18)) lex.yy.c:1310 -1
     (nil))
(insn 868 867 869 115 (set (reg:QI 39 r10 [orig:226 D.6789 ] [226])
        (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:213 source ] [213])
                (reg/v:DI 1 dx [orig:227 i ] [227])) [0 MEM[base: source_307, index: i_563, offset: 0B]+0 S1 A8])) lex.yy.c:1310 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:213 source ] [213])
                (reg/v:DI 1 dx [orig:227 i ] [227])) [0 MEM[base: source_307, index: i_563, offset: 0B]+0 S1 A8])
        (nil)))
(insn 869 868 870 115 (set (mem:QI (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
                (reg/v:DI 1 dx [orig:227 i ] [227])) [0 MEM[base: dest_168, index: i_563, offset: 0B]+0 S1 A8])
        (reg:QI 39 r10 [orig:226 D.6789 ] [226])) lex.yy.c:1310 93 {*movqi_internal}
     (nil))
(insn 870 869 872 115 (parallel [
            (set (reg/v:DI 1 dx [orig:227 i ] [227])
                (plus:DI (reg/v:DI 1 dx [orig:227 i ] [227])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1309 218 {*adddi_1}
     (nil))
(debug_insn 872 870 873 115 (var_location:DI i (reg/v:DI 1 dx [orig:227 i ] [227])) -1
     (nil))
(debug_insn 873 872 874 115 (var_location:DI source (debug_expr:DI D#18)) -1
     (nil))
(debug_insn 874 873 876 115 (var_location:DI dest (debug_expr:DI D#17)) -1
     (nil))
(insn 876 874 877 115 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 6 bp [orig:224 number_to_move ] [224])
            (reg/v:DI 1 dx [orig:227 i ] [227]))) lex.yy.c:1309 8 {*cmpdi_1}
     (nil))
(jump_insn 877 876 878 115 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 875)
            (pc))) lex.yy.c:1309 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 875)
;;  succ:       116 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              115 [91.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]

;; basic block 116, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 115, next block 117, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       115 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 43 [r14]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 43 [r14]
;; live  kill	
(note 878 877 879 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 879 878 880 116 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       117 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 117, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 116, next block 118, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       116 [100.0%]  (FALLTHRU)
;;              113 [9.0%] 
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 880 879 881 117 207 "" [1 uses])
(note 881 880 882 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 882 881 883 117 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                    (const_int 60 [0x3c])) [2 _944->yy_buffer_status+0 S4 A32])
            (const_int 2 [0x2]))) lex.yy.c:1312 7 {*cmpsi_1}
     (nil))
(jump_insn 883 882 884 117 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 889)
            (pc))) lex.yy.c:1312 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 889)
;;  succ:       118 [28.0%]  (FALLTHRU)
;;              119 [72.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 118, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 117, next block 119, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       117 [28.0%]  (FALLTHRU)
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	
(note 884 883 885 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 885 884 886 118 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1316 90 {*movsi_internal}
     (nil))
(insn 886 885 1607 118 (set (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 32 [0x20])) [2 _944->yy_n_chars+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1316 90 {*movsi_internal}
     (nil))
(jump_insn 1607 886 1608 118 (set (pc)
        (label_ref 1052)) 654 {jump}
     (nil)
 -> 1052)
;;  succ:       142 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 1608 1607 889)
;; basic block 119, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 118, next block 120, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       117 [72.0%] 
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 889 1608 890 119 209 "" [1 uses])
(note 890 889 891 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(note 891 890 1676 119 NOTE_INSN_DELETED)
(insn 1676 891 892 119 (set (reg:DI 1 dx [orig:479 D.6781 ] [479])
        (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) lex.yy.c:1321 89 {*movdi_internal}
     (nil))
(insn 892 1676 893 119 (set (reg:DI 1 dx [orig:479 D.6781 ] [479])
        (not:DI (reg:DI 1 dx [orig:479 D.6781 ] [479]))) lex.yy.c:1321 494 {*one_cmpldi2_1}
     (nil))
(note 893 892 895 119 NOTE_INSN_DELETED)
(debug_insn 895 893 896 119 (var_location:DI num_to_read (plus:DI (reg:DI 1 dx [orig:479 D.6781 ] [479])
        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _944->yy_buf_size+0 S8 A64]))) -1
     (nil))
(insn 896 895 897 119 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:DI (reg:DI 1 dx [orig:479 D.6781 ] [479])
                        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                                (const_int 24 [0x18])) [4 _944->yy_buf_size+0 S8 A64]))
                    (const_int 0 [0])))
            (set (reg/v:DI 1 dx [orig:230 num_to_read ] [230])
                (plus:DI (reg:DI 1 dx [orig:479 D.6781 ] [479])
                    (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                            (const_int 24 [0x18])) [4 _944->yy_buf_size+0 S8 A64])))
        ]) lex.yy.c:1323 226 {*adddi_2}
     (nil))
(jump_insn 897 896 964 119 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 967)
            (pc))) lex.yy.c:1323 612 {*jcc_1}
     (int_list:REG_BR_PROB 450 (nil))
 -> 967)
;;  succ:       129 [4.5%] 
;;              120 [95.5%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 120, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 119, next block 121, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       119 [95.5%]  (FALLTHRU)
;;              128 [95.5%] 
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 964 897 899 120 217 "" [1 uses])
(note 899 964 900 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(debug_insn 900 899 901 120 (var_location:DI num_to_read (const_int 0 [0])) -1
     (nil))
(debug_insn 901 900 902 120 (var_location:DI D#14 (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 902 901 903 120 (var_location:DI D#13 (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 903 902 904 120 (var_location:DI D#12 (ashift:DI (debug_expr:DI D#13)
        (const_int 3 [0x3]))) lex.yy.c:1327 -1
     (nil))
(debug_insn 904 903 905 120 (var_location:DI D#11 (plus:DI (debug_expr:DI D#14)
        (debug_expr:DI D#12))) lex.yy.c:1327 -1
     (nil))
(debug_insn 905 904 906 120 (var_location:DI D#10 (mem/f:DI (debug_expr:DI D#11) [0 +0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 906 905 907 120 (var_location:DI b (debug_expr:DI D#10)) lex.yy.c:1327 -1
     (nil))
(insn 907 906 1678 120 (set (reg/f:DI 5 di [orig:232 D.6783 ] [232])
        (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])) lex.yy.c:1330 89 {*movdi_internal}
     (nil))
(insn 1678 907 908 120 (set (reg:DI 0 ax [orig:481 D.6788 ] [481])
        (reg/f:DI 0 ax [orig:244 D.6783 ] [244])) lex.yy.c:1330 89 {*movdi_internal}
     (nil))
(insn 908 1678 1679 120 (parallel [
            (set (reg:DI 0 ax [orig:481 D.6788 ] [481])
                (minus:DI (reg:DI 0 ax [orig:481 D.6788 ] [481])
                    (reg/f:DI 5 di [orig:232 D.6783 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1330 261 {*subdi_1}
     (nil))
(insn 1679 908 910 120 (set (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])
        (reg:DI 0 ax [orig:481 D.6788 ] [481])) lex.yy.c:1330 89 {*movdi_internal}
     (nil))
(debug_insn 910 1679 911 120 (var_location:SI yy_c_buf_p_offset (mem/c:SI (reg/f:DI 7 sp) [9 %sfp+-32 S4 A64])) lex.yy.c:1330 -1
     (nil))
(insn 911 910 912 120 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                    (const_int 36 [0x24])) [2 _986->yy_is_our_buffer+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:1332 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 912 911 913 120 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 945)
            (pc))) lex.yy.c:1332 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 945)
;;  succ:       121 [50.0%]  (FALLTHRU)
;;              126 [50.0%]  (LOOP_EXIT)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 121, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 120, next block 122, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       120 [50.0%]  (FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
(note 913 912 914 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 914 913 915 121 (set (reg:DI 2 cx [orig:237 D.6781 ] [237])
        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])) lex.yy.c:1334 89 {*movdi_internal}
     (nil))
(note 915 914 916 121 NOTE_INSN_DELETED)
(debug_insn 916 915 1680 121 (var_location:DI new_size (ashift:DI (reg:DI 2 cx [orig:237 D.6781 ] [237])
        (const_int 1 [0x1]))) lex.yy.c:1334 -1
     (nil))
(insn 1680 916 917 121 (set (reg/v:DI 0 ax [orig:238 new_size ] [238])
        (reg:DI 2 cx [orig:237 D.6781 ] [237])) lex.yy.c:1336 89 {*movdi_internal}
     (nil))
(insn 917 1680 1681 121 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ashift:DI (reg/v:DI 0 ax [orig:238 new_size ] [238])
                        (const_int 1 [0x1]))
                    (const_int 0 [0])))
            (set (reg/v:DI 0 ax [orig:238 new_size ] [238])
                (ashift:DI (reg/v:DI 0 ax [orig:238 new_size ] [238])
                    (const_int 1 [0x1])))
        ]) lex.yy.c:1336 521 {*ashldi3_cmp}
     (nil))
(insn 1681 917 918 121 (set (reg/v:DI 0 ax [orig:238 new_size ] [238])
        (reg/v:DI 0 ax [orig:238 new_size ] [238])) lex.yy.c:1336 89 {*movdi_internal}
     (nil))
(jump_insn 918 1681 919 121 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 925)
            (pc))) lex.yy.c:1336 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 925)
;;  succ:       122 [50.0%]  (FALLTHRU)
;;              123 [50.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 122, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 121, next block 123, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       121 [50.0%]  (FALLTHRU)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 919 918 1682 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 1682 919 920 122 (set (reg:DI 0 ax [orig:482 D.6781 ] [482])
        (reg:DI 2 cx [orig:237 D.6781 ] [237])) lex.yy.c:1337 89 {*movdi_internal}
     (nil))
(insn 920 1682 1683 122 (parallel [
            (set (reg:DI 0 ax [orig:482 D.6781 ] [482])
                (lshiftrt:DI (reg:DI 0 ax [orig:482 D.6781 ] [482])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1337 546 {*lshrdi3_1}
     (nil))
(insn 1683 920 921 122 (set (reg:DI 0 ax [orig:482 D.6781 ] [482])
        (reg:DI 0 ax [orig:482 D.6781 ] [482])) lex.yy.c:1337 89 {*movdi_internal}
     (nil))
(insn 921 1683 922 122 (parallel [
            (set (reg:DI 0 ax [orig:240 D.6781 ] [240])
                (plus:DI (reg:DI 0 ax [orig:482 D.6781 ] [482])
                    (reg:DI 2 cx [orig:237 D.6781 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1337 218 {*adddi_1}
     (nil))
(insn 922 921 1609 122 (set (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])
        (reg:DI 0 ax [orig:240 D.6781 ] [240])) lex.yy.c:1337 89 {*movdi_internal}
     (nil))
(jump_insn 1609 922 1610 122 (set (pc)
        (label_ref 928)) 654 {jump}
     (nil)
 -> 928)
;;  succ:       124 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1610 1609 925)
;; basic block 123, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 122, next block 124, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       121 [50.0%] 
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 925 1610 926 123 213 "" [1 uses])
(note 926 925 927 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 927 926 26 123 (set (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])
        (reg/v:DI 0 ax [orig:238 new_size ] [238])) lex.yy.c:1339 89 {*movdi_internal}
     (nil))
(insn 26 927 928 123 (set (reg:DI 0 ax [orig:240 D.6781 ] [240])
        (reg/v:DI 0 ax [orig:238 new_size ] [238])) lex.yy.c:1339 89 {*movdi_internal}
     (nil))
;;  succ:       124 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 124, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 123, next block 125, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       123 [100.0%]  (FALLTHRU)
;;              122 [100.0%] 
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 5 [di] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 928 26 929 124 214 "" [1 uses])
(note 929 928 930 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(debug_insn 930 929 931 124 (var_location:DI ptr (reg/f:DI 5 di [orig:232 D.6783 ] [232])) lex.yy.c:1343 -1
     (nil))
(debug_insn 931 930 932 124 (var_location:DI size (plus:DI (reg:DI 0 ax [orig:240 D.6781 ] [240])
        (const_int 2 [0x2]))) lex.yy.c:1343 -1
     (nil))
(insn 932 931 935 124 (parallel [
            (set (reg:DI 4 si [orig:483 D.6781 ] [483])
                (plus:DI (reg:DI 0 ax [orig:240 D.6781 ] [240])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 218 {*adddi_1}
     (nil))
(call_insn 935 932 936 124 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 936 935 937 124 (set (reg/f:DI 0 ax [orig:242 D.6793 ] [242])
        (reg:DI 0 ax)) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(debug_insn 937 936 938 124 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1343 -1
     (nil))
(debug_insn 938 937 939 124 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1343 -1
     (nil))
(insn 939 938 940 124 (set (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])
        (reg/f:DI 0 ax [orig:242 D.6793 ] [242])) lex.yy.c:1343 89 {*movdi_internal}
     (nil))
(insn 940 939 941 124 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:242 D.6793 ] [242])
            (const_int 0 [0]))) lex.yy.c:1349 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 941 940 1612 124 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1611)
            (pc))) lex.yy.c:1349 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 1611)
;;  succ:       125 (FALLTHRU)
;;              128 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 125, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 124, next block 126, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       124 (FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 1612 941 1613 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1613 1612 1614 125 (set (pc)
        (label_ref 948)) 654 {jump}
     (nil)
 -> 948)
;;  succ:       127 [100.0%]  (LOOP_EXIT)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1614 1613 945)
;; basic block 126, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 125, next block 127, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       120 [50.0%]  (LOOP_EXIT)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 7 [sp] 43 [r14]
;; live  gen 	
;; live  kill	
(code_label 945 1614 946 126 212 "" [1 uses])
(note 946 945 947 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn 947 946 948 126 (set (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1347 89 {*movdi_internal}
     (nil))
;;  succ:       127 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 127, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 126, next block 128, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       126 [100.0%]  (FALLTHRU)
;;              125 [100.0%]  (LOOP_EXIT)
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 948 947 949 127 215 "" [1 uses])
(note 949 948 950 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 950 949 951 127 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f88bbbf2bd0 *.LC22>)) lex.yy.c:1351 89 {*movdi_internal}
     (nil))
(call_insn 951 950 952 127 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1351 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 952 951 1611)
;; basic block 128, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 127, next block 129, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       124 [100.0%] 
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags] 43 [r14]
;; live  kill	 17 [flags]
(code_label 1611 952 954 128 281 "" [1 uses])
(note 954 1611 955 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 955 954 956 128 (set (reg:DI 1 dx [orig:484 D.6790 ] [484])
        (sign_extend:DI (mem/c:SI (reg/f:DI 7 sp) [9 %sfp+-32 S4 A64]))) lex.yy.c:1353 142 {*extendsidi2_rex64}
     (nil))
(insn 956 955 957 128 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
                (plus:DI (reg/f:DI 0 ax [orig:242 D.6793 ] [242])
                    (reg:DI 1 dx [orig:484 D.6790 ] [484])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1353 218 {*adddi_1}
     (nil))
(insn 957 956 958 128 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:244 D.6783 ] [244])) lex.yy.c:1353 89 {*movdi_internal}
     (nil))
(insn 958 957 959 128 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) lex.yy.c:1355 89 {*movdi_internal}
     (nil))
(note 959 958 1684 128 NOTE_INSN_DELETED)
(insn 1684 959 960 128 (set (reg:DI 1 dx [orig:485 D.6781 ] [485])
        (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) lex.yy.c:1356 89 {*movdi_internal}
     (nil))
(insn 960 1684 961 128 (set (reg:DI 1 dx [orig:485 D.6781 ] [485])
        (not:DI (reg:DI 1 dx [orig:485 D.6781 ] [485]))) lex.yy.c:1356 494 {*one_cmpldi2_1}
     (nil))
(note 961 960 963 128 NOTE_INSN_DELETED)
(debug_insn 963 961 965 128 (var_location:DI num_to_read (plus:DI (reg:DI 1 dx [orig:485 D.6781 ] [485])
        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _361->yy_buf_size+0 S8 A64]))) -1
     (nil))
(insn 965 963 966 128 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:DI (reg:DI 1 dx [orig:485 D.6781 ] [485])
                        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                                (const_int 24 [0x18])) [4 _361->yy_buf_size+0 S8 A64]))
                    (const_int 0 [0])))
            (set (reg/v:DI 1 dx [orig:230 num_to_read ] [230])
                (plus:DI (reg:DI 1 dx [orig:485 D.6781 ] [485])
                    (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                            (const_int 24 [0x18])) [4 _361->yy_buf_size+0 S8 A64])))
        ]) lex.yy.c:1323 226 {*adddi_2}
     (nil))
(jump_insn 966 965 967 128 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 964)
            (pc))) lex.yy.c:1323 612 {*jcc_1}
     (int_list:REG_BR_PROB 9550 (nil))
 -> 964)
;;  succ:       129 [4.5%]  (FALLTHRU,LOOP_EXIT)
;;              120 [95.5%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 129, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 128, next block 130, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       128 [4.5%]  (FALLTHRU,LOOP_EXIT)
;;              119 [4.5%] 
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(code_label 967 966 968 129 211 "" [1 uses])
(note 968 967 969 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn 969 968 1688 129 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 1 dx [orig:230 num_to_read ] [230])
            (const_int 8192 [0x2000]))) 8 {*cmpdi_1}
     (nil))
(insn 1688 969 971 129 (set (reg:DI 0 ax [592])
        (const_int 8192 [0x2000])) 89 {*movdi_internal}
     (nil))
(insn 971 1688 1687 129 (set (reg/v:DI 1 dx [orig:309 num_to_read ] [309])
        (if_then_else:DI (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (reg/v:DI 1 dx [orig:309 num_to_read ] [309])
            (reg:DI 0 ax [592]))) 954 {*movdicc_noc}
     (expr_list:REG_EQUAL (if_then_else:DI (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (reg/v:DI 1 dx [orig:230 num_to_read ] [230])
            (const_int 8192 [0x2000]))
        (nil)))
(insn 1687 971 972 129 (set (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])
        (reg/v:DI 1 dx [orig:309 num_to_read ] [309])) 89 {*movdi_internal}
     (nil))
(debug_insn 972 1687 973 129 (var_location:DI num_to_read (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) -1
     (nil))
(insn 973 972 974 129 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                    (const_int 40 [0x28])) [2 _961->yy_is_interactive+0 S4 A64])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 974 973 975 129 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1000)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1000)
;;  succ:       130 [50.0%]  (FALLTHRU)
;;              136 [50.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 130, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 129, next block 131, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       129 [50.0%]  (FALLTHRU)
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 43 [r14]
;; live  kill	
(note 975 974 27 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 27 975 1256 130 (set (reg/v:DI 43 r14 [orig:212 n ] [212])
        (const_int 0 [0])) lex.yy.c:1364 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       131 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 131, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 130, next block 132, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       130 [100.0%]  (FALLTHRU)
;;              163 [88.0%]  (DFS_BACK)
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 1256 27 976 131 232 "" [1 uses])
(note 976 1256 977 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(debug_insn 977 976 978 131 (var_location:DI n (reg/v:DI 43 r14 [orig:212 n ] [212])) -1
     (nil))
(debug_insn 978 977 979 131 (var_location:SI c (const_int 42 [0x2a])) -1
     (nil))
(insn 979 978 980 131 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 980 979 1355 131 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f88bbf40510 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f88bbf40510 _IO_getc>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 1355 980 981 131 (var_location:SI D#20 (reg:SI 0 ax)) -1
     (nil))
(insn 981 1355 982 131 (set (reg/v:SI 0 ax [orig:251 c ] [251])
        (reg:SI 0 ax)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(debug_insn 982 981 983 131 (var_location:SI c (debug_expr:SI D#20)) lex.yy.c:1364 -1
     (nil))
(insn 983 982 984 131 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:251 c ] [251])
            (const_int -1 [0xffffffffffffffff]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn 984 983 985 131 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1299)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 2799 (nil))
 -> 1299)
;;  succ:       132 [72.0%]  (FALLTHRU)
;;              169 [28.0%]  (LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 132, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 131, next block 133, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       131 [72.0%]  (FALLTHRU)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(note 985 984 986 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 986 985 987 132 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:251 c ] [251])
            (const_int 10 [0xa]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn 987 986 1615 132 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1239)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 1239)
;;  succ:       163 [72.0%] 
;;              133 [28.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 133, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 132, next block 134, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       132 [28.0%]  (FALLTHRU)
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	
(note 1615 987 1617 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1617 1615 1618 133 (set (pc)
        (label_ref 1616)) 654 {jump}
     (nil)
 -> 1616)
;;  succ:       168 [100.0%]  (LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 1618 1617 1273)
;; basic block 134, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 133, next block 135, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       169 [50.0%]  (LOOP_EXIT)
;;              167 [100.0%]  (LOOP_EXIT)
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 1273 1618 991 134 234 "" [2 uses])
(note 991 1273 992 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 992 991 993 134 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f88bbbf2c60 *.LC23>)) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 993 992 994 134 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1364 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 994 993 1260)
;; basic block 135, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 134, next block 136, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       164 [100.0%]  (LOOP_EXIT)
;;              168 [100.0%] 
;;              170 [100.0%] 
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 1260 994 995 135 233 "" [3 uses])
(note 995 1260 996 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(insn 996 995 997 135 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (reg:SI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 997 996 1619 135 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(jump_insn 1619 997 1620 135 (set (pc)
        (label_ref 1046)) 654 {jump}
     (nil)
 -> 1046)
;;  succ:       141 [100.0%] 
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

(barrier 1620 1619 1000)
;; basic block 136, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 135, next block 137, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       129 [50.0%] 
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 44 [r15]
;; live  kill	
(code_label 1000 1620 1001 136 218 "" [1 uses])
(note 1001 1000 1002 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 1002 1001 1003 136 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 1003 1002 1004 136 (set (reg/f:DI 44 r15 [orig:270 D.6794 ] [270])
        (reg:DI 0 ax)) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1004 1003 1043 136 (set (mem:SI (reg/f:DI 44 r15 [orig:270 D.6794 ] [270]) [2 *_402+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
;;  succ:       137 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 137, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 136, next block 138, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       136 [100.0%]  (FALLTHRU)
;;              140 [100.0%]  (DFS_BACK)
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 1043 1004 1005 137 225 "" [1 uses])
(note 1005 1043 1006 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1006 1005 1007 137 (var_location:DI __ptr (plus:DI (mem/f/j:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [0 _971->yy_ch_buf+0 S8 A64])
        (reg/v:DI 6 bp [orig:224 number_to_move ] [224]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1007 1006 1008 137 (var_location:DI __size (const_int 1 [0x1])) lex.yy.c:1364 -1
     (nil))
(debug_insn 1008 1007 1009 137 (var_location:DI __n (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) lex.yy.c:1364 -1
     (nil))
(debug_insn 1009 1008 1010 137 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 -1
     (nil))
(note 1010 1009 1689 137 NOTE_INSN_DELETED)
(insn 1689 1010 1011 137 (set (reg:DI 5 di [orig:488 D.6783 ] [488])
        (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1011 1689 1012 137 (parallel [
            (set (reg:DI 5 di [orig:488 D.6783 ] [488])
                (plus:DI (reg:DI 5 di [orig:488 D.6783 ] [488])
                    (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                            (const_int 8 [0x8])) [1 _971->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 218 {*adddi_1}
     (nil))
(insn 1012 1011 1013 137 (set (reg:DI 2 cx)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1013 1012 1014 137 (set (reg:DI 1 dx)
        (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1014 1013 1016 137 (set (reg:DI 4 si)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(call_insn 1016 1014 1017 137 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*fread") [flags 0x41]  <function_decl 0x7f88bbfb8870 __fread_alias>) [0 __fread_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*fread") [flags 0x41]  <function_decl 0x7f88bbfb8870 __fread_alias>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 1017 1016 1018 137 (set (reg:DI 0 ax [orig:274 D.6781 ] [274])
        (reg:DI 0 ax)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(debug_insn 1018 1017 1019 137 (var_location:DI __ptr (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1019 1018 1020 137 (var_location:DI __size (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1020 1019 1021 137 (var_location:DI __n (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1021 1020 1022 137 (var_location:DI __stream (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(insn 1022 1021 1023 137 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (reg:SI 0 ax [orig:274 D.6781 ] [274])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1023 1022 1024 137 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 0 ax [orig:274 D.6781 ] [274])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1024 1023 1025 137 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:274 D.6781 ] [274])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1025 1024 1026 137 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1263)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 1263)
;;  succ:       138 [29.0%]  (FALLTHRU)
;;              165 [71.0%]  (LOOP_EXIT)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 138, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 137, next block 139, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       137 [29.0%]  (FALLTHRU)
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(note 1026 1025 1027 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(insn 1027 1026 1028 138 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 1028 1027 1029 138 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1029 1028 1030 138 (set (reg:SI 0 ax [orig:277 D.6777 ] [277])
        (reg:SI 0 ax)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1030 1029 1031 138 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:277 D.6777 ] [277])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1031 1030 1032 138 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1271)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1271)
;;  succ:       166 [50.0%] 
;;              139 [50.0%]  (FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 139, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 138, next block 140, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       138 [50.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(note 1032 1031 1033 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(insn 1033 1032 1621 139 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 1621 1033 1622 139 (set (pc)
        (label_ref 1263)) 654 {jump}
     (nil)
 -> 1263)
;;  succ:       165 [100.0%] 
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 1622 1621 1651)
;; basic block 140, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 139, next block 141, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       166 [100.0%] 
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 43 [r14]
;; live  kill	
(code_label 1651 1622 1036 140 285 "" [1 uses])
(note 1036 1651 1037 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(insn 1037 1036 1038 140 (set (mem:SI (reg/f:DI 44 r15 [orig:270 D.6794 ] [270]) [2 *_402+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1038 1037 1039 140 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 1039 1038 1041 140 (call (mem:QI (symbol_ref:DI ("clearerr") [flags 0x41]  <function_decl 0x7f88bbf95510 clearerr>) [0 clearerr S1 A8])
        (const_int 0 [0])) lex.yy.c:1364 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("clearerr") [flags 0x41]  <function_decl 0x7f88bbf95510 clearerr>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1041 1039 1660 140 (set (reg/f:DI 0 ax [orig:491 yy_buffer_stack ] [491])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 1660 1041 1042 140 (set (reg:DI 1 dx [orig:490 yy_buffer_stack_top ] [490])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 1042 1660 1623 140 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:490 yy_buffer_stack_top ] [490])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:491 yy_buffer_stack ] [491])) [1 *_969+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 1623 1042 1624 140 (set (pc)
        (label_ref 1043)) 654 {jump}
     (nil)
 -> 1043)
;;  succ:       137 [100.0%]  (DFS_BACK)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1624 1623 1046)
;; basic block 141, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 140, next block 142, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       135 [100.0%] 
;;              165 [100.0%] 
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 1 [dx] 7 [sp] 44 [r15]
;; lr  def 	 17 [flags] 39 [r10] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags] 39 [r10] 43 [r14]
;; live  kill	
(code_label 1046 1624 1047 141 222 "" [2 uses])
(note 1047 1046 1048 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(insn 1048 1047 1049 141 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_1064+0 S8 A64])) lex.yy.c:1367 89 {*movdi_internal}
     (nil))
(insn 1049 1048 29 141 (set (mem:SI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 32 [0x20])) [2 _429->yy_n_chars+0 S4 A64])
        (reg:SI 1 dx [orig:275 D.6777 ] [275])) lex.yy.c:1367 90 {*movsi_internal}
     (nil))
(insn 29 1049 1050 141 (set (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
        (const_int 0 [0])) lex.yy.c:1387 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 1050 29 1051 141 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:275 D.6777 ] [275])
            (const_int 0 [0]))) lex.yy.c:1370 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1051 1050 1052 141 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1078)
            (pc))) lex.yy.c:1370 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1078)
;;  succ:       142 [50.0%]  (FALLTHRU)
;;              145 [50.0%] 
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 142, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 141, next block 143, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       141 [50.0%]  (FALLTHRU)
;;              118 [100.0%] 
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1052 1051 1053 142 210 "" [1 uses])
(note 1053 1052 1054 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(insn 1054 1053 1055 142 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 6 bp [orig:224 number_to_move ] [224])
            (const_int 0 [0]))) lex.yy.c:1372 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1055 1054 1056 142 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1068)
            (pc))) lex.yy.c:1372 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 1068)
;;  succ:       143 [29.0%]  (FALLTHRU)
;;              144 [71.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 143, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 142, next block 144, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       142 [29.0%]  (FALLTHRU)
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
(note 1056 1055 1057 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1057 1056 1058 143 (var_location:SI ret_val (const_int 1 [0x1])) lex.yy.c:1374 -1
     (nil))
(insn 1058 1057 1059 143 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1375 89 {*movdi_internal}
     (nil))
(call_insn 1059 1058 1060 143 (call (mem:QI (symbol_ref:DI ("_Z9yyrestartP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c1b0 yyrestart>) [0 yyrestart S1 A8])
        (const_int 0 [0])) lex.yy.c:1375 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z9yyrestartP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c1b0 yyrestart>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1060 1059 1062 143 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(note 1062 1060 1063 143 NOTE_INSN_DELETED)
(insn 1063 1062 1659 143 (set (reg/f:DI 0 ax [orig:494 yy_buffer_stack ] [494])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 1659 1063 1064 143 (set (reg:DI 2 cx [orig:493 yy_buffer_stack_top ] [493])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 1064 1659 1065 143 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 2 cx [orig:493 yy_buffer_stack_top ] [493])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:494 yy_buffer_stack ] [494]))) 214 {*leadi}
     (nil))
(insn 1065 1064 30 143 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_954+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 30 1065 1625 143 (set (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
        (const_int 1 [0x1])) lex.yy.c:1374 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn 1625 30 1626 143 (set (pc)
        (label_ref 1078)) 654 {jump}
     (nil)
 -> 1078)
;;  succ:       145 [100.0%] 
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1626 1625 1068)
;; basic block 144, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 143, next block 145, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       142 [71.0%] 
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 39 [r10] 43 [r14] 44 [r15]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
(code_label 1068 1626 1069 144 227 "" [1 uses])
(note 1069 1068 1070 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1070 1069 1072 144 (var_location:SI ret_val (const_int 2 [0x2])) lex.yy.c:1380 -1
     (nil))
(note 1072 1070 1074 144 NOTE_INSN_DELETED)
(insn 1074 1072 1075 144 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1381 214 {*leadi}
     (nil))
(insn 1075 1074 1076 144 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_436+0 S8 A64])) lex.yy.c:1381 89 {*movdi_internal}
     (nil))
(insn 1076 1075 1077 144 (set (mem:SI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 60 [0x3c])) [2 _437->yy_buffer_status+0 S4 A32])
        (const_int 2 [0x2])) lex.yy.c:1382 90 {*movsi_internal}
     (nil))
(insn 1077 1076 31 144 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 31 1077 1078 144 (set (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
        (const_int 2 [0x2])) lex.yy.c:1380 90 {*movsi_internal}
     (nil))
;;  succ:       145 [100.0%]  (FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 145, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 144, next block 146, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       141 [50.0%] 
;;              144 [100.0%]  (FALLTHRU)
;;              143 [100.0%] 
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 39 [r10]
;; lr  def 	 2 [cx] 6 [bp] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 1078 31 1079 145 226 "" [2 uses])
(note 1079 1078 1080 145 [bb 145] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1080 1079 1081 145 (var_location:SI ret_val (reg/v:SI 43 r14 [orig:308 ret_val ] [308])) -1
     (nil))
(insn 1081 1080 1083 145 (parallel [
            (set (reg:SI 2 cx [orig:287 D.6795 ] [287])
                (plus:SI (reg:SI 1 dx [orig:275 D.6777 ] [275])
                    (reg:SI 6 bp [orig:224 number_to_move ] [224])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1389 217 {*addsi_1}
     (nil))
(insn 1083 1081 1084 145 (set (reg:DI 6 bp [orig:289 D.6781 ] [289])
        (sign_extend:DI (reg:SI 2 cx [orig:287 D.6795 ] [287]))) lex.yy.c:1389 142 {*extendsidi2_rex64}
     (nil))
(insn 1084 1083 1085 145 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 6 bp [orig:289 D.6781 ] [289])
            (mem:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                    (const_int 24 [0x18])) [4 _957->yy_buf_size+0 S8 A64]))) lex.yy.c:1389 8 {*cmpdi_1}
     (nil))
(jump_insn 1085 1084 1086 145 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1109)
            (pc))) lex.yy.c:1389 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 1109)
;;  succ:       146 [29.0%]  (FALLTHRU)
;;              148 [71.0%] 
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 146, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 145, next block 147, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       145 [29.0%]  (FALLTHRU)
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 39 [r10] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(note 1086 1085 1087 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1087 1086 1088 146 (var_location:SI new_size (plus:SI (ashiftrt:SI (reg:SI 1 dx [orig:275 D.6777 ] [275])
            (const_int 1 [0x1]))
        (reg:SI 2 cx [orig:287 D.6795 ] [287]))) lex.yy.c:1391 -1
     (nil))
(debug_insn 1088 1087 1089 146 (var_location:DI ptr (mem/f/j:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
            (const_int 8 [0x8])) [0 _957->yy_ch_buf+0 S8 A64])) lex.yy.c:1392 -1
     (nil))
(debug_insn 1089 1088 1691 146 (var_location:DI size (sign_extend:DI (plus:SI (ashiftrt:SI (reg:SI 1 dx [orig:275 D.6777 ] [275])
                (const_int 1 [0x1]))
            (reg:SI 2 cx [orig:287 D.6795 ] [287])))) lex.yy.c:1392 -1
     (nil))
(insn 1691 1089 1090 146 (set (reg:SI 4 si [orig:498 D.6777 ] [498])
        (reg:SI 1 dx [orig:275 D.6777 ] [275])) lex.yy.c:2136 90 {*movsi_internal}
     (nil))
(insn 1090 1691 1091 146 (parallel [
            (set (reg:SI 4 si [orig:498 D.6777 ] [498])
                (ashiftrt:SI (reg:SI 4 si [orig:498 D.6777 ] [498])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 545 {*ashrsi3_1}
     (nil))
(insn 1091 1090 1707 146 (parallel [
            (set (reg:SI 4 si [orig:499 D.6795 ] [499])
                (plus:SI (reg:SI 4 si [orig:498 D.6777 ] [498])
                    (reg:SI 2 cx [orig:287 D.6795 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 217 {*addsi_1}
     (nil))
(insn 1707 1091 1092 146 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [9 %sfp+-20 S4 A32])
        (reg:SI 2 cx [orig:287 D.6795 ] [287])) lex.yy.c:2136 90 {*movsi_internal}
     (nil))
(insn 1092 1707 1093 146 (set (reg:DI 4 si [orig:500 D.6781 ] [500])
        (sign_extend:DI (reg:SI 4 si [orig:499 D.6795 ] [499]))) lex.yy.c:2136 142 {*extendsidi2_rex64}
     (nil))
(insn 1093 1092 1705 146 (set (reg/f:DI 5 di [orig:501 _957->yy_ch_buf ] [501])
        (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])) lex.yy.c:2136 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])
        (nil)))
(insn 1705 1093 1096 146 (set (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])
        (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(call_insn 1096 1705 1097 146 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1097 1096 1098 146 (set (reg/f:DI 0 ax [orig:297 D.6793 ] [297])
        (reg:DI 0 ax)) lex.yy.c:2136 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])
        (nil)))
(debug_insn 1098 1097 1099 146 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1392 -1
     (nil))
(debug_insn 1099 1098 1706 146 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1392 -1
     (nil))
(insn 1706 1099 1100 146 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) lex.yy.c:1392 89 {*movdi_internal}
     (nil))
(insn 1100 1706 1101 146 (set (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])
        (reg/f:DI 0 ax [orig:297 D.6793 ] [297])) lex.yy.c:1392 89 {*movdi_internal}
     (nil))
(insn 1101 1100 1102 146 (set (reg/f:DI 0 ax [orig:502 *_955 ] [502])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) lex.yy.c:1393 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])
        (nil)))
(insn 1102 1101 1103 146 (set (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:502 *_955 ] [502])
                (const_int 8 [0x8])) [1 _457->yy_ch_buf+0 S8 A64])) lex.yy.c:1393 89 {*movdi_internal}
     (nil))
(insn 1103 1102 1708 146 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
            (const_int 0 [0]))) lex.yy.c:1393 4 {*cmpdi_ccno_1}
     (nil))
(insn 1708 1103 1104 146 (set (reg:SI 2 cx [orig:287 D.6795 ] [287])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [9 %sfp+-20 S4 A32])) lex.yy.c:1393 90 {*movsi_internal}
     (nil))
(jump_insn 1104 1708 1105 146 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1112)
            (pc))) lex.yy.c:1393 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 1112)
;;  succ:       147 [0.0%]  (FALLTHRU,LOOP_EXIT)
;;              149 [100.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 147, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 146, next block 148, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       146 [0.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(note 1105 1104 1106 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(insn 1106 1105 1107 147 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f88bbbf2cf0 *.LC24>)) lex.yy.c:1394 89 {*movdi_internal}
     (nil))
(call_insn 1107 1106 1108 147 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1394 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1108 1107 1109)
;; basic block 148, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 147, next block 149, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       145 [71.0%] 
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 0 [ax]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1109 1108 1110 148 228 "" [1 uses])
(note 1110 1109 1111 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn 1111 1110 1112 148 (set (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
        (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       149 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 149, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 148, next block 150, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       148 [100.0%]  (FALLTHRU)
;;              146 [100.0%] 
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 2 [cx] 6 [bp] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 1112 1111 1113 149 229 "" [1 uses])
(note 1113 1112 1114 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(insn 1114 1113 1115 149 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:287 D.6795 ] [287])) lex.yy.c:1397 90 {*movsi_internal}
     (nil))
(insn 1115 1114 1116 149 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
                (reg:DI 6 bp [orig:289 D.6781 ] [289])) [0 *_461+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1398 93 {*movqi_internal}
     (nil))
(insn 1116 1115 1117 149 (set (reg/f:DI 0 ax [orig:503 *_955 ] [503])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) lex.yy.c:1399 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])
        (nil)))
(insn 1117 1116 1118 149 (set (reg/f:DI 0 ax [orig:504 _462->yy_ch_buf ] [504])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:503 *_955 ] [503])
                (const_int 8 [0x8])) [1 _462->yy_ch_buf+0 S8 A64])) lex.yy.c:1399 89 {*movdi_internal}
     (nil))
(insn 1118 1117 1119 149 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 0 ax [orig:504 _462->yy_ch_buf ] [504])
                    (reg:DI 6 bp [orig:289 D.6781 ] [289]))
                (const_int 1 [0x1])) [0 *_465+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1399 93 {*movqi_internal}
     (nil))
(insn 1119 1118 1120 149 (set (reg/f:DI 0 ax [orig:505 *_955 ] [505])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) lex.yy.c:1401 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])
        (nil)))
(insn 1120 1119 1121 149 (set (reg/f:DI 0 ax [orig:306 D.6783 ] [306])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:505 *_955 ] [505])
                (const_int 8 [0x8])) [1 _466->yy_ch_buf+0 S8 A64])) lex.yy.c:1401 89 {*movdi_internal}
     (nil))
(insn 1121 1120 1122 149 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 0 ax [orig:306 D.6783 ] [306])) lex.yy.c:1401 89 {*movdi_internal}
     (nil))
(debug_insn 1122 1121 1123 149 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1123 1122 1124 149 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1124 1123 1125 149 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1125 1124 1126 149 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1126 1125 1127 149 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1127 1126 1128 149 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1128 1127 1129 149 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1129 1128 1130 149 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1130 1129 1131 149 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1131 1130 1132 149 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1132 1131 1133 149 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1133 1132 1134 149 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(insn 1134 1133 1135 149 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
            (const_int 1 [0x1]))) lex.yy.c:1205 7 {*cmpsi_1}
     (nil))
(jump_insn 1135 1134 1351 149 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1147)
            (pc))) lex.yy.c:1205 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 1147)
;;  succ:       153 [100.0%] 
;;              150 (FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 150, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 149, next block 151, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       149 (FALLTHRU,LOOP_EXIT)
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1351 1135 1136 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(insn 1136 1351 1137 150 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
            (const_int 2 [0x2]))) lex.yy.c:1205 7 {*cmpsi_1}
     (nil))
(jump_insn 1137 1136 1141 150 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1627)
            (pc))) lex.yy.c:1205 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 1627)
;;  succ:       151 [29.0%]  (FALLTHRU)
;;              154 [71.0%]  (LOOP_EXIT)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]

;; basic block 151, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 150, next block 152, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       150 [29.0%]  (FALLTHRU)
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	 17 [flags]
(note 1141 1137 1142 151 [bb 151] NOTE_INSN_BASIC_BLOCK)
(insn 1142 1141 1143 151 (set (reg/f:DI 0 ax [orig:506 *_955 ] [506])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(note 1143 1142 1144 151 NOTE_INSN_DELETED)
(note 1144 1143 1693 151 NOTE_INSN_DELETED)
(insn 1693 1144 33 151 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (reg:DI 6 bp [orig:289 D.6781 ] [289])) lex.yy.c:1205 89 {*movdi_internal}
     (nil))
(insn 33 1693 1628 151 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                    (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:506 *_955 ] [506])
                            (const_int 8 [0x8])) [1 _934->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1205 218 {*adddi_1}
     (nil))
(jump_insn 1628 33 1629 151 (set (pc)
        (label_ref 1184)) 654 {jump}
     (nil)
 -> 1184)
;;  succ:       155 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 42 [r13]

(barrier 1629 1628 1344)
;; basic block 152, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 151, next block 153, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       111 [16.1%] 
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1344 1629 1343 152 242 "" [1 uses])
(note 1343 1344 32 152 [bb 152] NOTE_INSN_BASIC_BLOCK)
(insn 32 1343 1147 152 (set (reg/f:DI 0 ax [orig:306 D.6783 ] [306])
        (reg/v/f:DI 5 di [orig:213 source ] [213])) lex.yy.c:1277 89 {*movdi_internal}
     (nil))
;;  succ:       153 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 153, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 152, next block 154, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       152 [100.0%]  (FALLTHRU)
;;              149 [100.0%] 
;; bb 153 artificial_defs: { }
;; bb 153 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(code_label 1147 32 1148 153 205 "" [1 uses])
(note 1148 1147 1149 153 [bb 153] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1149 1148 1150 153 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1150 1149 1151 153 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1151 1150 1152 153 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1152 1151 1153 153 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1153 1152 1154 153 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1154 1153 1155 153 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1155 1154 1156 153 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1156 1155 1157 153 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1157 1156 1158 153 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1158 1157 1159 153 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1159 1158 1160 153 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1160 1159 1161 153 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(insn 1161 1160 1162 153 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:306 D.6783 ] [306])) lex.yy.c:1222 89 {*movdi_internal}
     (nil))
(note 1162 1161 1695 153 NOTE_INSN_DELETED)
(insn 1695 1162 1163 153 (set (reg:SI 0 ax [596])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:1224 90 {*movsi_internal}
     (nil))
(insn 1163 1695 1696 153 (parallel [
            (set (reg:SI 0 ax [orig:508 D.6777 ] [508])
                (plus:SI (reg:SI 0 ax [596])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 1696 1163 1164 153 (set (reg:SI 1 dx [511])
        (reg:SI 0 ax [orig:508 D.6777 ] [508])) lex.yy.c:1224 90 {*movsi_internal}
     (nil))
(insn 1164 1696 1165 153 (parallel [
            (set (reg:SI 1 dx [511])
                (lshiftrt:SI (reg:SI 1 dx [511])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 544 {*lshrsi3_1}
     (nil))
(insn 1165 1164 1166 153 (parallel [
            (set (reg:SI 1 dx [512])
                (plus:SI (reg:SI 1 dx [511])
                    (reg:SI 0 ax [orig:508 D.6777 ] [508])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (nil))
(insn 1166 1165 1167 153 (parallel [
            (set (reg:SI 1 dx [orig:513 D.6777 ] [513])
                (ashiftrt:SI (reg:SI 1 dx [512])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 545 {*ashrsi3_1}
     (nil))
(insn 1167 1166 1168 153 (parallel [
            (set (reg/v:SI 1 dx [orig:90 yy_act ] [90])
                (plus:SI (reg:SI 1 dx [orig:513 D.6777 ] [513])
                    (const_int 47 [0x2f])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (nil))
(debug_insn 1168 1167 1630 153 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) lex.yy.c:1224 -1
     (nil))
(jump_insn 1630 1168 1631 153 (set (pc)
        (label_ref 347)) lex.yy.c:1225 654 {jump}
     (nil)
 -> 347)
;;  succ:       41 [100.0%]  (DFS_BACK)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 1631 1630 1627)
;; basic block 154, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 153, next block 155, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       150 [71.0%]  (LOOP_EXIT)
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 3 [bx] 41 [r12]
;; live  kill	 17 [flags]
(code_label 1627 1631 1172 154 283 "" [1 uses])
(note 1172 1627 1698 154 [bb 154] NOTE_INSN_BASIC_BLOCK)
(note 1698 1172 1710 154 NOTE_INSN_DELETED)
(note 1710 1698 1173 154 NOTE_INSN_DELETED)
(insn 1173 1710 1174 154 (set (reg:DI 3 bx [orig:514 D.6790 ] [514])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [9 %sfp+-24 S4 A32]))) lex.yy.c:1238 142 {*extendsidi2_rex64}
     (nil))
(insn 1174 1173 1175 154 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg:DI 3 bx [orig:514 D.6790 ] [514])
                    (reg/f:DI 0 ax [orig:306 D.6783 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1238 218 {*adddi_1}
     (nil))
(insn 1175 1174 1176 154 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1238 89 {*movdi_internal}
     (nil))
(call_insn 1176 1175 1177 154 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1240 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 1177 1176 1178 154 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (reg:SI 0 ax)) lex.yy.c:1240 90 {*movsi_internal}
     (nil))
(debug_insn 1178 1177 1179 154 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:1240 -1
     (nil))
(debug_insn 1179 1178 1180 154 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1242 -1
     (nil))
(insn 1180 1179 1181 154 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1243 89 {*movdi_internal}
     (nil))
(debug_insn 1181 1180 1632 154 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:1243 -1
     (nil))
(jump_insn 1632 1181 1633 154 (set (pc)
        (label_ref 822)) lex.yy.c:1244 654 {jump}
     (nil)
 -> 822)
;;  succ:       19 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 1633 1632 1184)
;; basic block 155, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 154, next block 156, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       112 [100.0%] 
;;              151 [100.0%] 
;; bb 155 artificial_defs: { }
;; bb 155 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 41 [r12]
;; live  kill	
(code_label 1184 1633 1185 155 206 "" [2 uses])
(note 1185 1184 1186 155 [bb 155] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1186 1185 1187 155 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1187 1186 1188 155 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1188 1187 1189 155 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1189 1188 1190 155 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1190 1189 1191 155 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1191 1190 1192 155 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1192 1191 1193 155 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1193 1192 1194 155 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1194 1193 1195 155 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1195 1194 1196 155 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1196 1195 1197 155 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1197 1196 1198 155 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1198 1197 1199 155 (var_location:DI D#9 (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1199 1198 1200 155 (var_location:DI D#8 (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1200 1199 1201 155 (var_location:DI D#7 (ashift:DI (debug_expr:DI D#8)
        (const_int 3 [0x3]))) lex.yy.c:1248 -1
     (nil))
(debug_insn 1201 1200 1202 155 (var_location:DI D#6 (plus:DI (debug_expr:DI D#9)
        (debug_expr:DI D#7))) lex.yy.c:1248 -1
     (nil))
(debug_insn 1202 1201 1203 155 (var_location:DI D#5 (mem/f:DI (debug_expr:DI D#6) [0 +0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1203 1202 1204 155 (var_location:DI D#4 (mem/f/j:DI (plus:DI (debug_expr:DI D#5)
            (const_int 8 [0x8])) [0 D#5->yy_ch_buf+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1204 1203 1205 155 (var_location:SI D#3 (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1205 1204 1206 155 (var_location:DI D#2 (sign_extend:DI (debug_expr:SI D#3))) lex.yy.c:1248 -1
     (nil))
(insn 1206 1205 1207 155 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1248 89 {*movdi_internal}
     (nil))
(call_insn 1207 1206 1208 155 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1250 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 1208 1207 1209 155 (set (reg/v:SI 0 ax [orig:160 yy_current_state ] [160])
        (reg:SI 0 ax)) lex.yy.c:1250 90 {*movsi_internal}
     (nil))
(debug_insn 1209 1208 1210 155 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:160 yy_current_state ] [160])) lex.yy.c:1250 -1
     (nil))
(debug_insn 1210 1209 1211 155 (var_location:DI yy_cp (plus:DI (debug_expr:DI D#4)
        (debug_expr:DI D#2))) lex.yy.c:1252 -1
     (nil))
(insn 1211 1210 1212 155 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1253 89 {*movdi_internal}
     (nil))
(debug_insn 1212 1211 1214 155 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:1253 -1
     (nil))
(insn 1214 1212 1215 155 (set (reg:DI 0 ax [orig:516 yy_current_state ] [516])
        (sign_extend:DI (reg/v:SI 0 ax [orig:160 yy_current_state ] [160]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 1215 1214 1634 155 (set (reg:HI 1 dx [orig:186 D.6786 ] [186])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:516 yy_current_state ] [516])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(jump_insn 1634 1215 1635 155 (set (pc)
        (label_ref 278)) lex.yy.c:1254 654 {jump}
     (nil)
 -> 278)
;;  succ:       33 [100.0%]  (DFS_BACK)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 1635 1634 1218)
;; basic block 156, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 155, next block 157, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       41 [2.2%]  (LOOP_EXIT)
;; bb 156 artificial_defs: { }
;; bb 156 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 1218 1635 1219 156 140 "" [1 uses])
(note 1219 1218 1220 156 [bb 156] NOTE_INSN_BASIC_BLOCK)
(insn 1220 1219 1221 156 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f88bbbf2d80 *.LC25>)) lex.yy.c:1261 89 {*movdi_internal}
     (nil))
(call_insn 1221 1220 1222 156 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1261 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1222 1221 1223)
;; basic block 157, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 156, next block 158, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 157 artificial_defs: { }
;; bb 157 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 1223 1222 1224 157 156 "" [1 uses])
(note 1224 1223 42 157 [bb 157] NOTE_INSN_BASIC_BLOCK)
(insn 42 1224 1636 157 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 276 [0x114])) mycc.l:75 90 {*movsi_internal}
     (nil))
(jump_insn 1636 42 1637 157 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1637 1636 1330)
;; basic block 158, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 157, next block 159, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       42 [2.3%]  (LOOP_EXIT)
;; bb 158 artificial_defs: { }
;; bb 158 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 1330 1637 1329 158 238 "" [1 uses])
(note 1329 1330 43 158 [bb 158] NOTE_INSN_BASIC_BLOCK)
(insn 43 1329 1638 158 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 277 [0x115])) mycc.l:76 90 {*movsi_internal}
     (nil))
(jump_insn 1638 43 1639 158 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1639 1638 1334)
;; basic block 159, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 158, next block 160, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       51 [2.0%]  (LOOP_EXIT)
;; bb 159 artificial_defs: { }
;; bb 159 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 1334 1639 1333 159 239 "" [1 uses])
(note 1333 1334 68 159 [bb 159] NOTE_INSN_BASIC_BLOCK)
(insn 68 1333 1640 159 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 0 [0])) mycc.l:62 90 {*movsi_internal}
     (nil))
(jump_insn 1640 68 1641 159 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       161 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 1641 1640 1338)
;; basic block 160, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 159, next block 161, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       53 [100.0%]  (LOOP_EXIT)
;; bb 160 artificial_defs: { }
;; bb 160 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 1338 1641 1337 160 240 "" [1 uses])
(note 1337 1338 67 160 [bb 160] NOTE_INSN_BASIC_BLOCK)
(insn 67 1337 1225 160 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 0 [0])) mycc.l:62 90 {*movsi_internal}
     (nil))
;;  succ:       161 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 161, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 160, next block 162, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       60 [100.0%] 
;;              43 [100.0%] 
;;              58 [100.0%] 
;;              56 [100.0%] 
;;              70 [21.6%] 
;;              61 [100.0%] 
;;              68 [100.0%] 
;;              69 [100.0%] 
;;              157 [100.0%] 
;;              94 [100.0%] 
;;              160 [100.0%]  (FALLTHRU)
;;              71 [100.0%] 
;;              72 [100.0%] 
;;              73 [100.0%] 
;;              74 [100.0%] 
;;              75 [100.0%] 
;;              76 [100.0%] 
;;              77 [100.0%] 
;;              78 [100.0%] 
;;              79 [100.0%] 
;;              80 [100.0%] 
;;              81 [100.0%] 
;;              82 [100.0%] 
;;              83 [100.0%] 
;;              84 [100.0%] 
;;              85 [100.0%] 
;;              86 [100.0%] 
;;              87 [100.0%] 
;;              88 [100.0%] 
;;              89 [100.0%] 
;;              90 [100.0%] 
;;              91 [100.0%] 
;;              92 [100.0%] 
;;              93 [100.0%] 
;;              158 [100.0%] 
;;              159 [100.0%] 
;; bb 161 artificial_defs: { }
;; bb 161 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 5 [di]
(code_label 1225 67 1226 161 157 "" [35 uses])
(note 1226 1225 1319 161 [bb 161] NOTE_INSN_BASIC_BLOCK)
(insn 1319 1226 1320 161 (set (reg/i:SI 0 ax)
        (reg:SI 3 bx [orig:92 D.6777 ] [92])) lex.yy.c:1265 90 {*movsi_internal}
     (nil))
(insn 1320 1319 1321 161 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 24 [0x18])) [1 D.6797+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 5 di [577]))
        ]) lex.yy.c:1265 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1321 1320 1642 161 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1324)
            (pc))) lex.yy.c:1265 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 1324)
;;  succ:       172 [100.0%] 
;;              162 [0.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 162, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 161, next block 163, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       161 [0.0%]  (FALLTHRU)
;; bb 162 artificial_defs: { }
;; bb 162 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 1642 1321 1644 162 [bb 162] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1644 1642 1645 162 (set (pc)
        (label_ref 1643)) 654 {jump}
     (nil)
 -> 1643)
;;  succ:       171 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1645 1644 1239)
;; basic block 163, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 162, next block 164, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       132 [72.0%] 
;; bb 163 artificial_defs: { }
;; bb 163 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 1239 1645 1240 163 220 "" [1 uses])
(note 1240 1239 1242 163 [bb 163] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1242 1240 1243 163 (var_location:SI c (debug_expr:SI D#20)) -1
     (nil))
(insn 1243 1242 1244 163 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(note 1244 1243 1245 163 NOTE_INSN_DELETED)
(insn 1245 1244 1246 163 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1246 1245 1247 163 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1364 214 {*leadi}
     (nil))
(insn 1247 1246 1248 163 (set (reg/f:DI 1 dx [orig:521 *_379 ] [521])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_379+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_379+0 S8 A64])
        (nil)))
(note 1248 1247 1699 163 NOTE_INSN_DELETED)
(insn 1699 1248 1249 163 (set (reg:DI 5 di [523])
        (reg/v:DI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1249 1699 1700 163 (parallel [
            (set (reg:DI 5 di [523])
                (plus:DI (reg:DI 5 di [523])
                    (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:521 *_379 ] [521])
                            (const_int 8 [0x8])) [1 _380->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(insn 1700 1249 1250 163 (set (reg:DI 1 dx [523])
        (reg:DI 5 di [523])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(note 1250 1700 1251 163 NOTE_INSN_DELETED)
(insn 1251 1250 1252 163 (set (mem:QI (plus:DI (reg:DI 1 dx [523])
                (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) [0 *_383+0 S1 A8])
        (reg:QI 0 ax [orig:251 c ] [251])) lex.yy.c:1364 93 {*movqi_internal}
     (nil))
(insn 1252 1251 1254 163 (parallel [
            (set (reg/v:DI 43 r14 [orig:212 n ] [212])
                (plus:DI (reg/v:DI 43 r14 [orig:212 n ] [212])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(debug_insn 1254 1252 1255 163 (var_location:DI n (reg/v:DI 43 r14 [orig:212 n ] [212])) -1
     (nil))
(debug_insn 1255 1254 1701 163 (var_location:SI c (debug_expr:SI D#20)) -1
     (nil))
(note 1701 1255 1709 163 NOTE_INSN_DELETED)
(note 1709 1701 1257 163 NOTE_INSN_DELETED)
(insn 1257 1709 1258 163 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 43 r14 [orig:212 n ] [212])
            (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64]))) lex.yy.c:1364 8 {*cmpdi_1}
     (nil))
(jump_insn 1258 1257 1646 163 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1256)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 8800 (nil))
 -> 1256)
;;  succ:       131 [88.0%]  (DFS_BACK)
;;              164 [12.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 164, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 163, next block 165, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       163 [12.0%]  (FALLTHRU)
;; bb 164 artificial_defs: { }
;; bb 164 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1646 1258 1647 164 [bb 164] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1647 1646 1648 164 (set (pc)
        (label_ref 1260)) 654 {jump}
     (nil)
 -> 1260)
;;  succ:       135 [100.0%]  (LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1648 1647 1263)
;; basic block 165, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 164, next block 166, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       137 [71.0%]  (LOOP_EXIT)
;;              139 [100.0%] 
;; bb 165 artificial_defs: { }
;; bb 165 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 44 [r15]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 4 [si] 44 [r15]
;; live  kill	
(code_label 1263 1648 1264 165 223 "" [2 uses])
(note 1264 1263 1265 165 [bb 165] NOTE_INSN_BASIC_BLOCK)
(insn 1265 1264 1266 165 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(note 1266 1265 1267 165 NOTE_INSN_DELETED)
(insn 1267 1266 1268 165 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1268 1267 1649 165 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) 214 {*leadi}
     (nil))
(jump_insn 1649 1268 1650 165 (set (pc)
        (label_ref 1046)) 654 {jump}
     (nil)
 -> 1046)
;;  succ:       141 [100.0%] 
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

(barrier 1650 1649 1271)
;; basic block 166, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 165, next block 167, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       138 [50.0%] 
;; bb 166 artificial_defs: { }
;; bb 166 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1271 1650 1272 166 224 "" [1 uses])
(note 1272 1271 1274 166 [bb 166] NOTE_INSN_BASIC_BLOCK)
(insn 1274 1272 1275 166 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/f:DI 44 r15 [orig:270 D.6794 ] [270]) [2 *_402+0 S4 A32])
            (const_int 4 [0x4]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn 1275 1274 1652 166 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1651)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 1651)
;;  succ:       167 [0.0%]  (FALLTHRU)
;;              140 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 167, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 166, next block 168, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       166 [0.0%]  (FALLTHRU)
;; bb 167 artificial_defs: { }
;; bb 167 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 1652 1275 1653 167 [bb 167] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1653 1652 1654 167 (set (pc)
        (label_ref 1273)) 654 {jump}
     (nil)
 -> 1273)
;;  succ:       134 [100.0%]  (LOOP_EXIT)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1654 1653 1616)
;; basic block 168, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 167, next block 169, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       133 [100.0%]  (LOOP_EXIT)
;; bb 168 artificial_defs: { }
;; bb 168 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 1616 1654 1281 168 282 "" [1 uses])
(note 1281 1616 1284 168 [bb 168] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1284 1281 1285 168 (var_location:SI c (const_int 10 [0xa])) -1
     (nil))
(insn 1285 1284 1286 168 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(note 1286 1285 1287 168 NOTE_INSN_DELETED)
(insn 1287 1286 1288 168 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1288 1287 1289 168 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1364 214 {*leadi}
     (nil))
(note 1289 1288 1290 168 NOTE_INSN_DELETED)
(debug_insn 1290 1289 1291 168 (var_location:DI n (plus:DI (reg/v:DI 43 r14 [orig:212 n ] [212])
        (const_int 1 [0x1]))) lex.yy.c:1364 -1
     (nil))
(insn 1291 1290 1292 168 (set (reg/f:DI 0 ax [orig:531 *_390 ] [531])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_390+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_390+0 S8 A64])
        (nil)))
(note 1292 1291 1702 168 NOTE_INSN_DELETED)
(insn 1702 1292 1293 168 (set (reg:DI 5 di [533])
        (reg/v:DI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1293 1702 1703 168 (parallel [
            (set (reg:DI 5 di [533])
                (plus:DI (reg:DI 5 di [533])
                    (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:531 *_390 ] [531])
                            (const_int 8 [0x8])) [1 _391->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(insn 1703 1293 1294 168 (set (reg:DI 0 ax [533])
        (reg:DI 5 di [533])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(note 1294 1703 1295 168 NOTE_INSN_DELETED)
(insn 1295 1294 1296 168 (set (mem:QI (plus:DI (reg:DI 0 ax [533])
                (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) [0 *_395+0 S1 A8])
        (const_int 10 [0xa])) lex.yy.c:1364 93 {*movqi_internal}
     (nil))
(debug_insn 1296 1295 28 168 (var_location:DI n (plus:DI (reg/v:DI 43 r14 [orig:212 n ] [212])
        (const_int 1 [0x1]))) -1
     (nil))
(insn 28 1296 1655 168 (set (reg/v:DI 43 r14 [orig:212 n ] [212])
        (plus:DI (reg/v:DI 43 r14 [orig:212 n ] [212])
            (const_int 1 [0x1]))) lex.yy.c:1364 214 {*leadi}
     (nil))
(jump_insn 1655 28 1656 168 (set (pc)
        (label_ref 1260)) 654 {jump}
     (nil)
 -> 1260)
;;  succ:       135 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1656 1655 1299)
;; basic block 169, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 168, next block 170, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       131 [28.0%]  (LOOP_EXIT)
;; bb 169 artificial_defs: { }
;; bb 169 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 1299 1656 1300 169 219 "" [1 uses])
(note 1300 1299 1303 169 [bb 169] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1303 1300 1304 169 (var_location:SI c (const_int -1 [0xffffffffffffffff])) -1
     (nil))
(debug_insn 1304 1303 1305 169 (var_location:DI n (reg/v:DI 43 r14 [orig:212 n ] [212])) -1
     (nil))
(insn 1305 1304 1306 169 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 1306 1305 1307 169 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1307 1306 1308 169 (set (reg:SI 0 ax [orig:268 D.6777 ] [268])
        (reg:SI 0 ax)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1308 1307 1309 169 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:268 D.6777 ] [268])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1309 1308 1310 169 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1273)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1273)
;;  succ:       134 [50.0%]  (LOOP_EXIT)
;;              170 [50.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 170, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 169, next block 171, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       169 [50.0%]  (FALLTHRU)
;; bb 170 artificial_defs: { }
;; bb 170 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 4 [si] 44 [r15]
;; live  kill	
(note 1310 1309 1311 170 [bb 170] NOTE_INSN_BASIC_BLOCK)
(insn 1311 1310 1312 170 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(note 1312 1311 1313 170 NOTE_INSN_DELETED)
(insn 1313 1312 1314 170 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1314 1313 1657 170 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) 214 {*leadi}
     (nil))
(jump_insn 1657 1314 1658 170 (set (pc)
        (label_ref 1260)) 654 {jump}
     (nil)
 -> 1260)
;;  succ:       135 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1658 1657 1643)
;; basic block 171, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 170, next block 172, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       162 [100.0%] 
;; bb 171 artificial_defs: { }
;; bb 171 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 1643 1658 1353 171 284 "" [1 uses])
(note 1353 1643 1322 171 [bb 171] NOTE_INSN_BASIC_BLOCK)
(call_insn 1322 1353 1323 171 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f88bbdacaf8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) lex.yy.c:1265 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f88bbdacaf8 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1323 1322 1324)
;; basic block 172, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 171, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       161 [100.0%] 
;; bb 172 artificial_defs: { }
;; bb 172 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 1324 1323 1354 172 237 "" [1 uses])
(note 1354 1324 1325 172 [bb 172] NOTE_INSN_BASIC_BLOCK)
(insn 1325 1354 1664 172 (use (reg/i:SI 0 ax)) lex.yy.c:1265 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 1664 1325 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_scan_buffer(char*, yy_size_t) (_Z14yy_scan_bufferPcm, funcdef_no=101, decl_uid=4272, cgraph_uid=101, symbol_order=128)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 14:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 6
   Insn 32: point = 0
   Insn 31: point = 0
  BB 11
   Insn 55: point = 0
   Insn 54: point = 0
  BB 9
   Insn 73: point = 2
   Insn 5: point = 2
  BB 8
   Insn 71: point = 3
   Insn 7: point = 3
  BB 10
   Insn 8: point = 4
  BB 7
   Insn 69: point = 5
   Insn 6: point = 5
   Insn 47: point = 7
   Insn 46: point = 7
   Insn 45: point = 7
   Insn 44: point = 7
   Insn 43: point = 7
   Insn 42: point = 7
   Insn 41: point = 7
   Insn 40: point = 8
   Insn 39: point = 8
   Insn 38: point = 8
   Insn 37: point = 9
   Insn 36: point = 9
  BB 5
   Insn 29: point = 10
   Insn 28: point = 10
   Insn 24: point = 10
   Insn 23: point = 11
   Insn 22: point = 11
   Insn 75: point = 11
  BB 4
   Insn 19: point = 14
   Insn 18: point = 14
  BB 3
   Insn 16: point = 16
   Insn 15: point = 16
   Insn 14: point = 16
  BB 2
   Insn 12: point = 18
   Insn 11: point = 18
   Insn 3: point = 18
   Insn 2: point = 19
Compressing live ranges: from 20 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 5
changing reg in insn 7
changing reg in insn 54
changing reg in insn 14
changing reg in insn 36
changing reg in insn 2
changing reg in insn 75
changing reg in insn 15
changing reg in insn 18
changing reg in insn 3
changing reg in insn 15
changing reg in insn 18
changing reg in insn 14
changing reg in insn 11
changing reg in insn 24
changing reg in insn 37
changing reg in insn 38
changing reg in insn 46
changing reg in insn 45
changing reg in insn 44
changing reg in insn 43
changing reg in insn 42
changing reg in insn 41
changing reg in insn 40
changing reg in insn 39
changing reg in insn 36
changing reg in insn 28
changing reg in insn 6
changing reg in insn 75
changing reg in insn 37
changing reg in insn 38
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 14 count 12 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 14 count 12 (    1)


yy_buffer_state* yy_scan_buffer(char*, yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={9d,4u} r1={4d} r2={4d} r3={1d,13u} r4={4d,4u} r5={7d,6u} r6={1d,2u} r7={1d,14u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={8d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r41={1d,2u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 297{248d,49u,0e} in 39{36 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 9 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 9 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 4 12 2 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 4 si [orig:98 size ] [98])
            (const_int 1 [0x1]))) lex.yy.c:1860 8 {*cmpdi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 60)
            (pc))) lex.yy.c:1860 612 {*jcc_1}
     (int_list:REG_BR_PROB 395 (nil))
 -> 60)
;;  succ:       8 [4.0%] 
;;              3 [96.0%]  (FALLTHRU)
;; lr  out 	 4 [si] 5 [di] 7 [sp]
;; live  out 	 4 [si] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 9605, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [96.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags] 41 [r12]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (parallel [
            (set (reg:DI 41 r12 [orig:88 D.6819 ] [88])
                (plus:DI (reg/v:DI 4 si [orig:98 size ] [98])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1861 218 {*adddi_1}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:97 base ] [97])
                        (reg/v:DI 4 si [orig:98 size ] [98]))
                    (const_int -2 [0xfffffffffffffffe])) [0 *_6+0 S1 A8])
            (const_int 0 [0]))) lex.yy.c:1860 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 64)
            (pc))) lex.yy.c:1860 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 64)
;;  succ:       9 [10.0%] 
;;              4 [90.0%]  (FALLTHRU)
;; lr  out 	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; live  out 	 4 [si] 5 [di] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 8644, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [90.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:97 base ] [97])
                        (reg/v:DI 4 si [orig:98 size ] [98]))
                    (const_int -1 [0xffffffffffffffff])) [0 *_10+0 S1 A8])
            (const_int 0 [0]))) lex.yy.c:1861 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) lex.yy.c:1861 612 {*jcc_1}
     (int_list:REG_BR_PROB 2139 (nil))
 -> 68)
;;  succ:       10 [21.4%] 
;;              5 [78.6%]  (FALLTHRU)
;; lr  out 	 5 [di] 7 [sp] 41 [r12]
;; live  out 	 5 [di] 7 [sp] 41 [r12]

;; basic block 5, loop depth 0, count 0, freq 6795, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [78.6%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 41 [r12]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(note 20 19 75 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 75 20 21 5 (set (reg/v/f:DI 6 bp [orig:97 base ] [97])
        (reg/v/f:DI 5 di [orig:97 base ] [97])) 89 {*movdi_internal}
     (nil))
(debug_insn 21 75 22 5 (var_location:DI size (const_int 64 [0x40])) -1
     (nil))
(insn 22 21 23 5 (set (reg:DI 5 di)
        (const_int 64 [0x40])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 23 22 24 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 26 5 (set (reg/f:DI 3 bx [99])
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [99])
        (nil)))
(debug_insn 26 24 27 5 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1866 -1
     (nil))
(debug_insn 27 26 28 5 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1866 -1
     (nil))
(insn 28 27 29 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 3 bx [99])
            (const_int 0 [0]))) lex.yy.c:1867 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) lex.yy.c:1867 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 34)
;;  succ:       6 [0.0%]  (FALLTHRU)
;;              7 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 6, loop depth 0, count 0, freq 3
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [0.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f88bbca4bd0 *.LC27>)) lex.yy.c:1868 89 {*movdi_internal}
     (nil))
(call_insn 32 31 33 6 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1868 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 33 32 34)
;; basic block 7, loop depth 0, count 0, freq 6793, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(code_label 34 33 35 7 319 "" [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (mem:DI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 24 [0x18])) [4 MEM[(struct yy_buffer_state *)_26].yy_buf_size+0 S8 A64])
        (reg:DI 41 r12 [orig:88 D.6819 ] [88])) lex.yy.c:1870 89 {*movdi_internal}
     (nil))
(insn 37 36 38 7 (set (mem/f:DI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 8 [0x8])) [1 MEM[(struct yy_buffer_state *)_26].yy_ch_buf+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:97 base ] [97])) lex.yy.c:1871 89 {*movdi_internal}
     (nil))
(insn 38 37 39 7 (set (mem/f:DI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 16 [0x10])) [1 MEM[(struct yy_buffer_state *)_26].yy_buf_pos+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:97 base ] [97])) lex.yy.c:1871 89 {*movdi_internal}
     (nil))
(insn 39 38 40 7 (set (mem:SI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 36 [0x24])) [2 MEM[(struct yy_buffer_state *)_26].yy_is_our_buffer+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1872 90 {*movsi_internal}
     (nil))
(insn 40 39 41 7 (set (mem/f:DI (reg/f:DI 3 bx [99]) [1 MEM[(struct yy_buffer_state *)_26].yy_input_file+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1873 89 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (set (mem:SI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 32 [0x20])) [2 MEM[(struct yy_buffer_state *)_26].yy_n_chars+0 S4 A64])
        (reg:SI 41 r12 [orig:88 D.6819 ] [88])) lex.yy.c:1874 90 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (mem:SI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 40 [0x28])) [2 MEM[(struct yy_buffer_state *)_26].yy_is_interactive+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1875 90 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (mem:SI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 44 [0x2c])) [2 MEM[(struct yy_buffer_state *)_26].yy_at_bol+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1876 90 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (mem:SI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 56 [0x38])) [2 MEM[(struct yy_buffer_state *)_26].yy_fill_buffer+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1877 90 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (mem:SI (plus:DI (reg/f:DI 3 bx [99])
                (const_int 60 [0x3c])) [2 MEM[(struct yy_buffer_state *)_26].yy_buffer_status+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1878 90 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [99])) lex.yy.c:1880 89 {*movdi_internal}
     (nil))
(call_insn 47 46 6 7 (call (mem:QI (symbol_ref:DI ("_Z19yy_switch_to_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c288 yy_switch_to_buffer>) [0 yy_switch_to_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1880 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z19yy_switch_to_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c288 yy_switch_to_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 6 47 69 7 (set (reg/f:DI 0 ax [orig:87 D.6818 ] [87])
        (reg/f:DI 3 bx [99])) lex.yy.c:1882 89 {*movdi_internal}
     (nil))
(jump_insn 69 6 70 7 (set (pc)
        (label_ref 48)) lex.yy.c:1882 654 {jump}
     (nil)
 -> 48)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 70 69 60)
;; basic block 8, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [4.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 60 70 59 8 320 "" [1 uses])
(note 59 60 7 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 7 59 71 8 (set (reg/f:DI 0 ax [orig:87 D.6818 ] [87])
        (const_int 0 [0])) lex.yy.c:1864 89 {*movdi_internal}
     (nil))
(jump_insn 71 7 72 8 (set (pc)
        (label_ref 48)) 654 {jump}
     (nil)
 -> 48)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 72 71 64)
;; basic block 9, loop depth 0, count 0, freq 961, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [10.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 64 72 63 9 321 "" [1 uses])
(note 63 64 5 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 5 63 73 9 (set (reg/f:DI 0 ax [orig:87 D.6818 ] [87])
        (const_int 0 [0])) lex.yy.c:1864 89 {*movdi_internal}
     (nil))
(jump_insn 73 5 74 9 (set (pc)
        (label_ref 48)) 654 {jump}
     (nil)
 -> 48)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 74 73 68)
;; basic block 10, loop depth 0, count 0, freq 1849, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [21.4%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 68 74 67 10 322 "" [1 uses])
(note 67 68 8 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 8 67 48 10 (set (reg/f:DI 0 ax [orig:87 D.6818 ] [87])
        (const_int 0 [0])) lex.yy.c:1864 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 11, loop depth 0, count 0, freq 9997, maybe hot
;;  prev block 10, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%] 
;;              10 [100.0%]  (FALLTHRU)
;;              8 [100.0%] 
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 48 8 49 11 318 "" [3 uses])
(note 49 48 54 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 54 49 55 11 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:87 D.6818 ] [87])) lex.yy.c:1883 89 {*movdi_internal}
     (nil))
(insn 55 54 76 11 (use (reg/i:DI 0 ax)) lex.yy.c:1883 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 76 55 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_scan_bytes(const char*, yy_size_t) (_Z13yy_scan_bytesPKcm, funcdef_no=103, decl_uid=4277, cgraph_uid=103, symbol_order=130)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 25:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rBwBz {*call}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 46:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) rm  (1) re {*cmpdi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 6
   Insn 39: point = 0
   Insn 38: point = 0
  BB 9
   Insn 60: point = 0
   Insn 59: point = 0
  BB 5
   Insn 79: point = 0
  BB 10
   Insn 70: point = 0
   Insn 69: point = 0
   Insn 64: point = 1
  BB 4
   Insn 32: point = 2
   Insn 31: point = 2
   Insn 29: point = 2
   Insn 28: point = 3
   Insn 27: point = 3
   Insn 26: point = 4
   Insn 25: point = 5
   Insn 24: point = 6
  BB 8
   Insn 82: point = 7
  BB 7
   Insn 52: point = 8
   Insn 51: point = 8
   Insn 47: point = 8
   Insn 46: point = 8
   Insn 45: point = 9
  BB 3
   Insn 22: point = 11
   Insn 21: point = 11
   Insn 5: point = 11
  BB 2
   Insn 18: point = 13
   Insn 17: point = 13
   Insn 13: point = 13
   Insn 12: point = 14
   Insn 11: point = 14
   Insn 8: point = 14
   Insn 3: point = 15
   Insn 2: point = 16
Compressing live ranges: from 17 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 8
changing reg in insn 26
changing reg in insn 11
changing reg in insn 10
changing reg in insn 9
changing reg in insn 47
changing reg in insn 5
changing reg in insn 51
changing reg in insn 49
changing reg in insn 47
changing reg in insn 46
changing reg in insn 45
changing reg in insn 44
changing reg in insn 45
changing reg in insn 29
changing reg in insn 69
changing reg in insn 64
changing reg in insn 31
changing reg in insn 30
changing reg in insn 13
changing reg in insn 46
changing reg in insn 27
changing reg in insn 25
changing reg in insn 24
changing reg in insn 17
changing reg in insn 2
changing reg in insn 45
changing reg in insn 45
changing reg in insn 3
changing reg in insn 51
changing reg in insn 25
changing reg in insn 24
changing reg in insn 21
changing reg in insn 8
changing reg in insn 45
changing reg in insn 46


try_optimize_cfg iteration 1

Forwarding edge 4->5 to 9 failed.
Forwarding edge 7->8 to 4 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 60.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 12 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 12 (  1.1)


yy_buffer_state* yy_scan_bytes(const char*, yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={8d,13u} r1={7d,6u,1e} r2={6d,1u} r3={1d,5u} r4={6d,2u} r5={9d,5u} r6={1d,1u,1e} r7={1d,14u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={10d,4u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={1d,4u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 381{324d,55u,2e} in 41{37 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 6 bp [orig:96 yybytes ] [96])
        (reg:DI 5 di [ yybytes ])) lex.yy.c:1907 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
        (reg:DI 4 si [ _yybytes_len ])) lex.yy.c:1907 89 {*movdi_internal}
     (nil))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (parallel [
            (set (reg/v:DI 41 r12 [orig:87 n ] [87])
                (plus:DI (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1914 218 {*adddi_1}
     (nil))
(debug_insn 9 8 10 2 (var_location:DI n (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:1914 -1
     (nil))
(debug_insn 10 9 11 2 (var_location:DI size (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:1914 -1
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 15 2 (set (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 98)
        (nil)))
(debug_insn 15 13 16 2 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1915 -1
     (nil))
(debug_insn 16 15 17 2 (var_location:DI buf (clobber (const_int 0 [0]))) lex.yy.c:1915 -1
     (nil))
(insn 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
            (const_int 0 [0]))) lex.yy.c:1916 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) lex.yy.c:1916 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 36)
;;  succ:       6 [0.0%] 
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 20 19 5 3 (var_location:DI i (const_int 0 [0])) -1
     (nil))
(insn 5 20 21 3 (set (reg/v:DI 1 dx [orig:89 i ] [89])
        (const_int 0 [0])) lex.yy.c:1919 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 21 5 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
            (const_int 0 [0]))) lex.yy.c:1919 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 22 21 50 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 75)
            (pc))) lex.yy.c:1919 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 75)
;;  succ:       4 [9.0%]  (FALLTHRU)
;;              7 [91.0%] 
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [9.0%]  (FALLTHRU)
;;              8 [100.0%]  (LOOP_EXIT)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 50 22 23 4 330 "" [1 uses])
(note 23 50 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
                    (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97]))
                (const_int 1 [0x1])) [0 *_16+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1922 93 {*movqi_internal}
     (nil))
(insn 25 24 26 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
                (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])) [0 *_14+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1922 93 {*movqi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 4 si)
        (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:1924 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 D.6837 ] [94])) lex.yy.c:1924 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z14yy_scan_bufferPcm") [flags 0x3]  <function_decl 0x7f88bc07ca20 yy_scan_buffer>) [0 yy_scan_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:1924 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z14yy_scan_bufferPcm") [flags 0x3]  <function_decl 0x7f88bc07ca20 yy_scan_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 29 28 30 4 (set (reg/v/f:DI 0 ax [orig:93 b ] [93])
        (reg:DI 0 ax)) lex.yy.c:1924 89 {*movdi_internal}
     (nil))
(debug_insn 30 29 31 4 (var_location:DI b (reg/v/f:DI 0 ax [orig:93 b ] [93])) lex.yy.c:1924 -1
     (nil))
(insn 31 30 32 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 0 ax [orig:93 b ] [93])
            (const_int 0 [0]))) lex.yy.c:1925 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 32 31 78 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 77)
            (pc))) lex.yy.c:1925 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 77)
;;  succ:       5 [0.0%]  (FALLTHRU)
;;              10 [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [0.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 78 32 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 79 78 80 5 (set (pc)
        (label_ref 57)) 654 {jump}
     (nil)
 -> 57)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 80 79 36)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [0.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 36 80 37 6 326 "" [1 uses])
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f88bbcc7a20 *.LC29>)) lex.yy.c:1917 89 {*movdi_internal}
     (nil))
(call_insn 39 38 40 6 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1917 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 40 39 75)
;; basic block 7, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [91.0%] 
;;              7 [91.0%]  (DFS_BACK)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 75 40 74 7 332 "" [2 uses])
(note 74 75 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 44 74 45 7 (var_location:DI i (reg/v:DI 1 dx [orig:89 i ] [89])) -1
     (nil))
(insn 45 44 46 7 (set (reg:QI 2 cx [orig:99 MEM[base: yybytes_9(D), index: i_27, offset: 0B] ] [99])
        (mem:QI (plus:DI (reg/v/f:DI 6 bp [orig:96 yybytes ] [96])
                (reg/v:DI 1 dx [orig:89 i ] [89])) [0 MEM[base: yybytes_9(D), index: i_27, offset: 0B]+0 S1 A8])) lex.yy.c:1920 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (plus:DI (reg/v/f:DI 6 bp [orig:96 yybytes ] [96])
                (reg/v:DI 1 dx [orig:89 i ] [89])) [0 MEM[base: yybytes_9(D), index: i_27, offset: 0B]+0 S1 A8])
        (nil)))
(insn 46 45 47 7 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
                (reg/v:DI 1 dx [orig:89 i ] [89])) [0 MEM[base: _24, index: i_27, offset: 0B]+0 S1 A8])
        (reg:QI 2 cx [orig:99 MEM[base: yybytes_9(D), index: i_27, offset: 0B] ] [99])) lex.yy.c:1920 93 {*movqi_internal}
     (nil))
(insn 47 46 49 7 (parallel [
            (set (reg/v:DI 1 dx [orig:89 i ] [89])
                (plus:DI (reg/v:DI 1 dx [orig:89 i ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1919 218 {*adddi_1}
     (nil))
(debug_insn 49 47 51 7 (var_location:DI i (reg/v:DI 1 dx [orig:89 i ] [89])) -1
     (nil))
(insn 51 49 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
            (reg/v:DI 1 dx [orig:89 i ] [89]))) lex.yy.c:1919 8 {*cmpdi_1}
     (nil))
(jump_insn 52 51 81 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 75)
            (pc))) lex.yy.c:1919 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 75)
;;  succ:       8 [9.0%]  (FALLTHRU)
;;              7 [91.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [9.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
(note 81 52 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 82 81 83 8 (set (pc)
        (label_ref 50)) 654 {jump}
     (nil)
 -> 50)
;;  succ:       4 [100.0%]  (LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12]

(barrier 83 82 57)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 57 83 58 9 328 "" [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f88bbcc7ab0 *.LC30>)) lex.yy.c:1926 89 {*movdi_internal}
     (nil))
(call_insn 60 59 61 9 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1926 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 61 60 77)
;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 77 61 63 10 333 "" [1 uses])
(note 63 77 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 69 10 (set (mem:SI (plus:DI (reg/v/f:DI 0 ax [orig:93 b ] [93])
                (const_int 36 [0x24])) [2 b_20->yy_is_our_buffer+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1931 90 {*movsi_internal}
     (nil))
(insn 69 64 70 10 (set (reg/i:DI 0 ax)
        (reg/v/f:DI 0 ax [orig:93 b ] [93])) lex.yy.c:1934 89 {*movdi_internal}
     (nil))
(insn 70 69 84 10 (use (reg/i:DI 0 ax)) lex.yy.c:1934 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 84 70 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_scan_string(const char*) (_Z14yy_scan_stringPKc, funcdef_no=102, decl_uid=4274, cgraph_uid=102, symbol_order=129)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0
   Insn 12: point = 0
   Insn 11: point = 1
   Insn 8: point = 2
   Insn 7: point = 3
   Insn 6: point = 3
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 12
changing reg in insn 6
changing reg in insn 8
changing reg in insn 11


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


yy_buffer_state* yy_scan_string(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={4d,3u} r1={3d} r2={3d} r3={1d,2u} r4={4d,1u} r5={5d,3u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 178{165d,13u,0e} in 7{5 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 3 bx [orig:90 yystr ] [90])
        (reg:DI 5 di [ yystr ])) lex.yy.c:1894 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:90 yystr ] [90])) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(call_insn/i 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f88bc2f60d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) lex.yy.c:1896 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f88bc2f60d8 strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 11 2 (set (reg:DI 0 ax [92])
        (reg:DI 0 ax)) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(insn 11 8 12 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [92])) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:90 yystr ] [90])) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(call_insn/j 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z13yy_scan_bytesPKcm") [flags 0x3]  <function_decl 0x7f88bc07cbd0 yy_scan_bytes>) [0 yy_scan_bytes S1 A8])
            (const_int 0 [0]))) lex.yy.c:1896 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z13yy_scan_bytesPKcm") [flags 0x3]  <function_decl 0x7f88bc07cbd0 yy_scan_bytes>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 14 13 20)
(note 20 14 0 NOTE_INSN_DELETED)

;; Function int yyget_lineno() (_Z12yyget_linenov, funcdef_no=105, decl_uid=5475, cgraph_uid=105, symbol_order=132)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


int yyget_lineno()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 2 11 2 (set (reg/i:SI 0 ax)
        (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])) lex.yy.c:1972 90 {*movsi_internal}
     (nil))
(insn 11 10 13 2 (use (reg/i:SI 0 ax)) lex.yy.c:1972 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 13 11 0 NOTE_INSN_DELETED)

;; Function FILE* yyget_in() (_Z8yyget_inv, funcdef_no=106, decl_uid=5467, cgraph_uid=106, symbol_order=133)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


FILE* yyget_in()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1980 89 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (use (reg/i:DI 0 ax)) lex.yy.c:1980 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 13 11 0 NOTE_INSN_DELETED)

;; Function FILE* yyget_out() (_Z9yyget_outv, funcdef_no=107, decl_uid=5470, cgraph_uid=107, symbol_order=134)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


FILE* yyget_out()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])) lex.yy.c:1988 89 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (use (reg/i:DI 0 ax)) lex.yy.c:1988 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 13 11 0 NOTE_INSN_DELETED)

;; Function yy_size_t yyget_leng() (_Z10yyget_lengv, funcdef_no=108, decl_uid=5473, cgraph_uid=108, symbol_order=135)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


yy_size_t yyget_leng()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) lex.yy.c:1996 89 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (use (reg/i:DI 0 ax)) lex.yy.c:1996 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 13 11 0 NOTE_INSN_DELETED)

;; Function char* yyget_text() (_Z10yyget_textv, funcdef_no=109, decl_uid=5474, cgraph_uid=109, symbol_order=136)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


char* yyget_text()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:2005 89 {*movdi_internal}
     (nil))
(insn 11 10 13 2 (use (reg/i:DI 0 ax)) lex.yy.c:2005 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 13 11 0 NOTE_INSN_DELETED)

;; Function void yyset_lineno(int) (_Z12yyset_linenoi, funcdef_no=110, decl_uid=5477, cgraph_uid=110, symbol_order=137)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void yyset_lineno(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 9 2 (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
        (reg/v:SI 5 di [orig:87 _line_number ] [87])) lex.yy.c:2014 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 9 6 0 NOTE_INSN_DELETED)

;; Function void yyset_in(FILE*) (_Z8yyset_inP8_IO_FILE, funcdef_no=111, decl_uid=5469, cgraph_uid=111, symbol_order=138)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void yyset_in(FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 9 2 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/v/f:DI 5 di [orig:87 _in_str ] [87])) lex.yy.c:2025 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 9 6 0 NOTE_INSN_DELETED)

;; Function void yyset_out(FILE*) (_Z9yyset_outP8_IO_FILE, funcdef_no=112, decl_uid=5472, cgraph_uid=112, symbol_order=139)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void yyset_out(FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 9 2 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (reg/v/f:DI 5 di [orig:87 _out_str ] [87])) lex.yy.c:2030 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 9 6 0 NOTE_INSN_DELETED)

;; Function int yyget_debug() (_Z11yyget_debugv, funcdef_no=113, decl_uid=5461, cgraph_uid=113, symbol_order=140)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


int yyget_debug()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 2 11 2 (set (reg/i:SI 0 ax)
        (mem/c:SI (symbol_ref:DI ("yy_flex_debug") [flags 0x2]  <var_decl 0x7f88bc080ab0 yy_flex_debug>) [2 yy_flex_debug+0 S4 A32])) lex.yy.c:2036 90 {*movsi_internal}
     (nil))
(insn 11 10 13 2 (use (reg/i:SI 0 ax)) lex.yy.c:2036 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 13 11 0 NOTE_INSN_DELETED)

;; Function void yyset_debug(int) (_Z11yyset_debugi, funcdef_no=114, decl_uid=5463, cgraph_uid=114, symbol_order=141)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void yyset_debug(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 9 2 (set (mem/c:SI (symbol_ref:DI ("yy_flex_debug") [flags 0x2]  <var_decl 0x7f88bc080ab0 yy_flex_debug>) [2 yy_flex_debug+0 S4 A32])
        (reg/v:SI 5 di [orig:87 _bdebug ] [87])) lex.yy.c:2040 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 9 6 0 NOTE_INSN_DELETED)

;; Function int yylex_destroy() (_Z13yylex_destroyv, funcdef_no=116, decl_uid=5460, cgraph_uid=116, symbol_order=143)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) Ts {*leadi}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 47:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 56:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 9
   Insn 62: point = 0
   Insn 61: point = 0
  BB 6
   Insn 84: point = 0
   Insn 39: point = 0
   Insn 38: point = 0
   Insn 37: point = 0
   Insn 36: point = 0
   Insn 35: point = 0
   Insn 34: point = 0
   Insn 33: point = 0
   Insn 32: point = 0
   Insn 31: point = 0
   Insn 29: point = 0
   Insn 28: point = 0
  BB 4
   Insn 81: point = 2
  BB 5
   Insn 24: point = 3
   Insn 23: point = 3
   Insn 22: point = 3
   Insn 21: point = 4
   Insn 90: point = 6
  BB 8
   Insn 88: point = 8
   Insn 57: point = 8
   Insn 56: point = 8
   Insn 55: point = 9
   Insn 54: point = 9
  BB 3
   Insn 14: point = 11
   Insn 13: point = 11
   Insn 12: point = 11
   Insn 11: point = 12
   Insn 91: point = 14
  BB 7
   Insn 86: point = 16
   Insn 48: point = 16
   Insn 47: point = 16
   Insn 46: point = 17
   Insn 45: point = 17
  BB 2
   Insn 7: point = 19
   Insn 6: point = 19
   Insn 5: point = 19
Compressing live ranges: from 20 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 21
changing reg in insn 47
changing reg in insn 22
changing reg in insn 22
changing reg in insn 45
changing reg in insn 23
changing reg in insn 5
changing reg in insn 21
changing reg in insn 11
changing reg in insn 28
changing reg in insn 27
changing reg in insn 6
changing reg in insn 11
changing reg in insn 56
changing reg in insn 12
changing reg in insn 12
changing reg in insn 54
changing reg in insn 13
changing reg in insn 91
changing reg in insn 11
changing reg in insn 90
changing reg in insn 21
deleting insn with uid = 45.
deleting insn with uid = 54.


try_optimize_cfg iteration 1

Forwarding edge 3->4 to 6 failed.
changing bb of uid 93
  unscanned insn
Moved block 6 before 9 and merged.
Merging block 9 into block 6...
deleting insn with uid = 84.
changing bb of uid 61
  from 9 to 6
changing bb of uid 62
  from 9 to 6
Merged blocks 6 and 9.
Simplifying condjump 24 around jump 94
deleting insn with uid = 94.
deleting block 10
Deleted label in block 7.


try_optimize_cfg iteration 2

Forwarding edge 3->4 to 6 failed.


try_optimize_cfg iteration 1

Forwarding edge 3->4 to 6 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 9 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 11 (  1.2)


int yylex_destroy()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={9d,4u} r1={6d} r2={6d} r3={2d,4u} r4={6d} r5={9d,5u} r6={1d,5u} r7={1d,13u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={8d,3u} r18={5d} r19={5d} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 422{388d,34u,0e} in 37{32 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 6 bp [orig:91 D.6873 ] [91])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 6 bp [orig:91 D.6873 ] [91])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (int_list:REG_BR_PROB 450 (nil))
 -> 25)
;;  succ:       6 [4.5%] 
;;              3 [95.5%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [95.5%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 8 7 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 10 8 91 3 NOTE_INSN_DELETED)
(insn 91 10 11 3 (set (reg:DI 0 ax [orig:98 yy_buffer_stack_top ] [98])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 11 91 12 3 (set (reg/f:DI 3 bx [orig:92 D.6873 ] [92])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:98 yy_buffer_stack_top ] [98])
                (const_int 8 [0x8]))
            (reg/f:DI 6 bp [orig:91 D.6873 ] [91]))) lex.yy.c:2079 214 {*leadi}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 5 di [orig:95 D.6874 ] [95])
        (mem/f:DI (reg/f:DI 3 bx [orig:92 D.6873 ] [92]) [1 *_12+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:95 D.6874 ] [95])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 80 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 79)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (int_list:REG_BR_PROB 9550 (nil))
 -> 79)
;;  succ:       4 [4.5%]  (FALLTHRU)
;;              8 [95.5%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 38, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [4.5%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 80 14 81 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 81 80 82 4 (set (pc)
        (label_ref 25)) 654 {jump}
     (nil)
 -> 25)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 82 81 49)
;; basic block 5, loop depth 0, count 0, freq 8710, maybe hot
;; Invalid sum of incoming frequencies 9120, should be 8710
;;  prev block 4, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (DFS_BACK)
;;              8 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label 49 82 18 5 353 "" [2 uses])
(note 18 49 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 20 18 90 5 NOTE_INSN_DELETED)
(insn 90 20 21 5 (set (reg:DI 0 ax [orig:100 yy_buffer_stack_top ] [100])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 21 90 22 5 (set (reg/f:DI 3 bx [orig:89 D.6873 ] [89])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:100 yy_buffer_stack_top ] [100])
                (const_int 8 [0x8]))
            (reg/f:DI 6 bp [orig:91 D.6873 ] [91]))) lex.yy.c:2079 214 {*leadi}
     (nil))
(insn 22 21 23 5 (set (reg/f:DI 5 di [orig:90 D.6874 ] [90])
        (mem/f:DI (reg/f:DI 3 bx [orig:89 D.6873 ] [89]) [1 *_7+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:90 D.6874 ] [90])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 24 23 44 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (int_list:REG_BR_PROB 450 (nil))
 -> 25)
;;  succ:       6 [4.5%] 
;;              7 [95.5%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 8318, maybe hot
;;  prev block 5, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [95.5%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 44 24 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 46 44 47 7 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:2080 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 47 46 48 7 (set (mem/f:DI (reg/f:DI 3 bx [orig:89 D.6873 ] [89]) [1 *_7+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2081 89 {*movdi_internal}
     (nil))
(call_insn 48 47 86 7 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) lex.yy.c:2082 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(jump_insn 86 48 87 7 (set (pc)
        (label_ref 49)) 654 {jump}
     (nil)
 -> 49)
;;  succ:       5 [100.0%]  (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 87 86 79)
;; basic block 8, loop depth 0, count 0, freq 802, maybe hot
;;  prev block 7, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [95.5%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 79 87 53 8 360 "" [1 uses])
(note 53 79 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 55 53 56 8 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:2080 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 56 55 57 8 (set (mem/f:DI (reg/f:DI 3 bx [orig:92 D.6873 ] [92]) [1 *_12+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2081 89 {*movdi_internal}
     (nil))
(call_insn 57 56 88 8 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) lex.yy.c:2082 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(jump_insn 88 57 89 8 (set (pc)
        (label_ref 49)) 654 {jump}
     (nil)
 -> 49)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 89 88 25)
;; basic block 6, loop depth 0, count 0, freq 880, maybe hot
;; Invalid sum of incoming frequencies 470, should be 880
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [4.5%] 
;;              4 [100.0%] 
;;              5 [4.5%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(code_label 25 89 26 6 350 "" [3 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 27 26 28 6 (var_location:DI ptr (reg/f:DI 6 bp [orig:91 D.6873 ] [91])) lex.yy.c:2086 -1
     (nil))
(insn 28 27 29 6 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [orig:91 D.6873 ] [91])) lex.yy.c:2141 89 {*movdi_internal}
     (nil))
(call_insn 29 28 30 6 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 30 29 31 6 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:2086 -1
     (nil))
(insn 31 30 32 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2087 89 {*movdi_internal}
     (nil))
(insn 32 31 33 6 (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:2050 90 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2053 89 {*movdi_internal}
     (nil))
(insn 34 33 35 6 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2054 89 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2055 89 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:2056 90 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:2057 90 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2064 89 {*movdi_internal}
     (nil))
(insn 39 38 61 6 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2065 89 {*movdi_internal}
     (nil))
(insn 61 39 62 6 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) lex.yy.c:2094 90 {*movsi_internal}
     (nil))
(insn 62 61 92 6 (use (reg/i:SI 0 ax)) lex.yy.c:2094 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 92 62 0 NOTE_INSN_DELETED)

;; Function void* yyalloc(yy_size_t) (_Z7yyallocm, funcdef_no=117, decl_uid=4279, cgraph_uid=117, symbol_order=144)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void* yyalloc(yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={2d,1u} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 93{88d,5u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 7 3 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 8 7 14)
(note 14 8 0 NOTE_INSN_DELETED)

;; Function void* yyrealloc(void*, yy_size_t) (_Z9yyreallocPvm, funcdef_no=118, decl_uid=4282, cgraph_uid=118, symbol_order=145)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 9: point = 0
   Insn 8: point = 0
   Insn 7: point = 1
   Insn 3: point = 2
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 8
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 7.
deleting insn with uid = 8.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void* yyrealloc(void*, yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={2d,1u} r1={2d} r2={2d} r4={2d,1u} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 94{88d,6u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 9 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 9 4 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 10 9 16)
(note 16 10 0 NOTE_INSN_DELETED)

;; Function void yyfree(void*) (_Z6yyfreePv, funcdef_no=119, decl_uid=4284, cgraph_uid=119, symbol_order=146)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void yyfree(void*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 92{88d,4u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 7 3 8 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)
