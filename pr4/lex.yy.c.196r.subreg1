
;; Function yy_state_type yy_get_previous_state() (_ZL21yy_get_previous_statev, funcdef_no=87, decl_uid=4292, cgraph_uid=87, symbol_order=114) (unlikely executed)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 23 0 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 15 23 25 2 NOTE_INSN_FUNCTION_BEG)
(insn 25 15 26 2 (set (reg/v:SI 100 [ yy_current_state ])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:1413 90 {*movsi_internal}
     (nil))
(debug_insn 26 25 27 2 (var_location:SI yy_current_state (reg/v:SI 100 [ yy_current_state ])) lex.yy.c:1413 -1
     (nil))
(insn 27 26 28 2 (set (reg/v/f:DI 101 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1415 89 {*movdi_internal}
     (nil))
(debug_insn 28 27 29 2 (var_location:DI yy_cp (reg/v/f:DI 101 [ yy_cp ])) lex.yy.c:1415 -1
     (nil))
(insn 29 28 30 2 (set (reg/f:DI 103 [ D.6587 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1415 89 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 123 [ yy_last_accepting_state_lsm.160 ])
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 31 30 16 2 (set (reg/f:DI 121 [ yy_last_accepting_cpos_lsm.162 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 16 31 17 2 (set (reg:QI 120 [ yy_last_accepting_cpos_lsm.163 ])
        (const_int 0 [0])) lex.yy.c:1415 93 {*movqi_internal}
     (nil))
(insn 17 16 102 2 (set (reg:QI 122 [ yy_last_accepting_state_lsm.161 ])
        (const_int 0 [0])) lex.yy.c:1415 93 {*movqi_internal}
     (nil))
;;  succ:       3 [100.0%]  (FALLTHRU)

;; basic block 3, loop depth 1, count 0, freq 989, probably never executed
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              14 [100.0%]  (FALLTHRU)
(code_label 102 17 32 3 8 "" [0 uses])
(note 32 102 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 33 32 34 3 (var_location:DI yy_cp (reg/v/f:DI 101 [ yy_cp ])) -1
     (nil))
(debug_insn 34 33 35 3 (var_location:SI yy_current_state (reg/v:SI 100 [ yy_current_state ])) -1
     (nil))
(insn 35 34 36 3 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 101 [ yy_cp ])
            (reg/f:DI 103 [ D.6587 ]))) lex.yy.c:1415 8 {*cmpdi_1}
     (nil))
(jump_insn 36 35 37 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 105)
            (pc))) lex.yy.c:1415 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 105)
;;  succ:       15 [9.0%] 
;;              4 [91.0%]  (FALLTHRU)

;; basic block 4, loop depth 1, count 0, freq 900, probably never executed
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [91.0%]  (FALLTHRU)
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 4 (set (reg:QI 104 [ D.6588 ])
        (mem:QI (reg/v/f:DI 101 [ yy_cp ]) [0 MEM[base: yy_cp_3, offset: 0B]+0 S1 A8])) lex.yy.c:1417 93 {*movqi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 104 [ D.6588 ])
            (const_int 0 [0]))) lex.yy.c:1417 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 40 39 41 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 129)
            (pc))) lex.yy.c:1417 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 129)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 

;; basic block 5, loop depth 1, count 0, freq 450, probably never executed
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [50.0%]  (FALLTHRU)
(note 41 40 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg/f:DI 125)
        (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) lex.yy.c:1417 89 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:SI 126 [ D.6590 ])
        (zero_extend:SI (reg:QI 104 [ D.6588 ]))) lex.yy.c:1417 138 {*zero_extendqisi2}
     (nil))
(insn 44 43 45 5 (set (reg:DI 127)
        (zero_extend:DI (reg:SI 126 [ D.6590 ]))) lex.yy.c:1417 133 {*zero_extendsidi2}
     (nil))
(insn 45 44 129 5 (set (reg/v:QI 102 [ yy_c ])
        (mem/u/j:QI (plus:DI (reg/f:DI 125)
                (reg:DI 127)) [0 yy_ec S1 A8])) lex.yy.c:1417 93 {*movqi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 1, count 0, freq 450, probably never executed
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [50.0%] 
(code_label 129 45 128 6 11 "" [1 uses])
(note 128 129 18 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 18 128 46 6 (set (reg/v:QI 102 [ yy_c ])
        (const_int 1 [0x1])) lex.yy.c:1417 93 {*movqi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 900, probably never executed
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
(code_label 46 18 47 7 3 "" [0 uses])
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 48 47 49 7 (var_location:QI yy_c (reg/v:QI 102 [ yy_c ])) lex.yy.c:1417 -1
     (nil))
(insn 49 48 50 7 (set (reg/f:DI 128)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) lex.yy.c:1418 89 {*movdi_internal}
     (nil))
(insn 50 49 51 7 (set (reg:DI 129)
        (sign_extend:DI (reg/v:SI 100 [ yy_current_state ]))) lex.yy.c:1418 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/u:HI (plus:DI (mult:DI (reg:DI 129)
                        (const_int 2 [0x2]))
                    (reg/f:DI 128)) [3 yy_accept S2 A16])
            (const_int 0 [0]))) lex.yy.c:1418 2 {*cmphi_ccno_1}
     (nil))
(jump_insn 52 51 53 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) lex.yy.c:1418 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 54)
;;  succ:       8 [50.0%]  (FALLTHRU)
;;              9 [50.0%] 

;; basic block 8, loop depth 1, count 0, freq 450, probably never executed
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [50.0%]  (FALLTHRU)
(note 53 52 19 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 19 53 20 8 (set (reg/f:DI 121 [ yy_last_accepting_cpos_lsm.162 ])
        (reg/v/f:DI 101 [ yy_cp ])) lex.yy.c:1418 89 {*movdi_internal}
     (nil))
(insn 20 19 21 8 (set (reg:SI 123 [ yy_last_accepting_state_lsm.160 ])
        (reg/v:SI 100 [ yy_current_state ])) lex.yy.c:1418 90 {*movsi_internal}
     (nil))
(insn 21 20 22 8 (set (reg:QI 120 [ yy_last_accepting_cpos_lsm.163 ])
        (const_int 1 [0x1])) lex.yy.c:1418 93 {*movqi_internal}
     (nil))
(insn 22 21 54 8 (set (reg:QI 122 [ yy_last_accepting_state_lsm.161 ])
        (const_int 1 [0x1])) lex.yy.c:1418 93 {*movqi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 1, count 0, freq 900, probably never executed
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              7 [50.0%] 
(code_label 54 22 55 9 4 "" [1 uses])
(note 55 54 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 2, count 0, freq 9100, probably never executed
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       12 [50.0%] 
;;              13 [100.0%]  (FALLTHRU)
(code_label 80 55 58 10 7 "" [1 uses])
(note 58 80 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
;;  succ:       11 [100.0%]  (FALLTHRU,DFS_BACK)

;; basic block 11, loop depth 2, count 0, freq 10000, probably never executed
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              10 [100.0%]  (FALLTHRU,DFS_BACK)
(code_label 59 58 60 11 5 "" [0 uses])
(note 60 59 61 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 61 60 62 11 (var_location:QI yy_c (reg/v:QI 102 [ yy_c ])) -1
     (nil))
(debug_insn 62 61 63 11 (var_location:SI yy_current_state (reg/v:SI 100 [ yy_current_state ])) -1
     (nil))
(insn 63 62 64 11 (set (reg/f:DI 130)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) lex.yy.c:1423 89 {*movdi_internal}
     (nil))
(insn 64 63 65 11 (set (reg:DI 131)
        (sign_extend:DI (reg/v:SI 100 [ yy_current_state ]))) lex.yy.c:1423 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 11 (set (reg:HI 108 [ D.6592 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 131)
                    (const_int 2 [0x2]))
                (reg/f:DI 130)) [3 yy_base S2 A16])) lex.yy.c:1423 92 {*movhi_internal}
     (nil))
(insn 66 65 67 11 (set (reg/f:DI 132)
        (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) lex.yy.c:1423 89 {*movdi_internal}
     (nil))
(insn 67 66 68 11 (set (reg:SI 133 [ D.6593 ])
        (zero_extend:SI (reg:HI 108 [ D.6592 ]))) lex.yy.c:1423 139 {*zero_extendhisi2}
     (nil))
(insn 68 67 69 11 (set (reg:SI 134 [ D.6593 ])
        (zero_extend:SI (reg/v:QI 102 [ yy_c ]))) lex.yy.c:1423 138 {*zero_extendqisi2}
     (nil))
(insn 69 68 70 11 (parallel [
            (set (reg:SI 135 [ D.6593 ])
                (plus:SI (reg:SI 133 [ D.6593 ])
                    (reg:SI 134 [ D.6593 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1423 217 {*addsi_1}
     (nil))
(insn 70 69 71 11 (set (reg:DI 136)
        (sign_extend:DI (reg:SI 135 [ D.6593 ]))) lex.yy.c:1423 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 11 (set (reg:SI 137 [ D.6593 ])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 136)
                        (const_int 2 [0x2]))
                    (reg/f:DI 132)) [3 yy_chk S2 A16]))) lex.yy.c:1423 146 {extendhisi2}
     (nil))
(insn 72 71 73 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 100 [ yy_current_state ])
            (reg:SI 137 [ D.6593 ]))) lex.yy.c:1423 7 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) lex.yy.c:1423 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 91)
;;  succ:       14 [9.0%] 
;;              12 [91.0%]  (FALLTHRU)

;; basic block 12, loop depth 2, count 0, freq 9100, probably never executed
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [91.0%]  (FALLTHRU)
(note 74 73 75 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 12 (set (reg/f:DI 138)
        (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) lex.yy.c:1425 89 {*movdi_internal}
     (nil))
(insn 76 75 77 12 (set (reg:DI 139)
        (sign_extend:DI (reg/v:SI 100 [ yy_current_state ]))) lex.yy.c:1425 142 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 12 (set (reg:HI 114 [ D.6591 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 139)
                    (const_int 2 [0x2]))
                (reg/f:DI 138)) [3 yy_def S2 A16])) lex.yy.c:1425 92 {*movhi_internal}
     (nil))
(insn 78 77 79 12 (set (reg/v:SI 100 [ yy_current_state ])
        (sign_extend:SI (reg:HI 114 [ D.6591 ]))) lex.yy.c:1425 146 {extendhisi2}
     (nil))
(debug_insn 79 78 81 12 (var_location:SI yy_current_state (reg/v:SI 100 [ yy_current_state ])) lex.yy.c:1425 -1
     (nil))
(insn 81 79 82 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 100 [ yy_current_state ])
            (const_int 101 [0x65]))) lex.yy.c:1426 7 {*cmpsi_1}
     (nil))
(jump_insn 82 81 83 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) lex.yy.c:1426 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 80)
;;  succ:       13 [50.0%]  (FALLTHRU)
;;              10 [50.0%] 

;; basic block 13, loop depth 2, count 0, freq 4550, probably never executed
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 [50.0%]  (FALLTHRU)
(note 83 82 84 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 13 (set (reg:SI 115 [ D.6590 ])
        (zero_extend:SI (reg/v:QI 102 [ yy_c ]))) lex.yy.c:1427 138 {*zero_extendqisi2}
     (nil))
(insn 85 84 86 13 (set (reg/f:DI 140)
        (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) lex.yy.c:1427 89 {*movdi_internal}
     (nil))
(insn 86 85 87 13 (set (reg:DI 141)
        (zero_extend:DI (reg:SI 115 [ D.6590 ]))) lex.yy.c:1427 133 {*zero_extendsidi2}
     (nil))
(insn 87 86 88 13 (set (reg/v:QI 102 [ yy_c ])
        (mem/u/j:QI (plus:DI (reg/f:DI 140)
                (reg:DI 141)) [0 yy_meta S1 A8])) lex.yy.c:1427 93 {*movqi_internal}
     (nil))
(debug_insn 88 87 91 13 (var_location:QI yy_c (reg/v:QI 102 [ yy_c ])) lex.yy.c:1427 -1
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)

;; basic block 14, loop depth 1, count 0, freq 900, probably never executed
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       11 [9.0%] 
(code_label 91 88 92 14 6 "" [1 uses])
(note 92 91 93 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 14 (set (reg/f:DI 142)
        (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) lex.yy.c:1429 89 {*movdi_internal}
     (nil))
(insn 94 93 95 14 (set (reg:SI 143 [ D.6590 ])
        (zero_extend:SI (reg:HI 108 [ D.6592 ]))) lex.yy.c:1429 139 {*zero_extendhisi2}
     (nil))
(insn 95 94 96 14 (set (reg:SI 144 [ D.6590 ])
        (zero_extend:SI (reg/v:QI 102 [ yy_c ]))) lex.yy.c:1429 138 {*zero_extendqisi2}
     (nil))
(insn 96 95 97 14 (parallel [
            (set (reg:SI 145 [ D.6590 ])
                (plus:SI (reg:SI 143 [ D.6590 ])
                    (reg:SI 144 [ D.6590 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1429 217 {*addsi_1}
     (nil))
(insn 97 96 98 14 (set (reg:DI 146)
        (zero_extend:DI (reg:SI 145 [ D.6590 ]))) lex.yy.c:1429 133 {*zero_extendsidi2}
     (nil))
(insn 98 97 99 14 (set (reg/v:SI 100 [ yy_current_state ])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 146)
                        (const_int 2 [0x2]))
                    (reg/f:DI 142)) [3 yy_nxt S2 A16]))) lex.yy.c:1429 139 {*zero_extendhisi2}
     (nil))
(debug_insn 99 98 100 14 (var_location:SI yy_current_state (reg/v:SI 100 [ yy_current_state ])) lex.yy.c:1429 -1
     (nil))
(insn 100 99 101 14 (parallel [
            (set (reg/v/f:DI 101 [ yy_cp ])
                (plus:DI (reg/v/f:DI 101 [ yy_cp ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1415 218 {*adddi_1}
     (nil))
(debug_insn 101 100 105 14 (var_location:DI yy_cp (reg/v/f:DI 101 [ yy_cp ])) lex.yy.c:1415 -1
     (nil))
;;  succ:       3 [100.0%]  (FALLTHRU)

;; basic block 15, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       3 [9.0%] 
(code_label 105 101 106 15 2 "" [1 uses])
(note 106 105 107 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 122 [ yy_last_accepting_state_lsm.161 ])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 108 107 109 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 111)
;;  succ:       17 [100.0%] 
;;              16 (FALLTHRU)

;; basic block 16, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
(note 109 108 110 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 16 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg:SI 123 [ yy_last_accepting_state_lsm.160 ])) 90 {*movsi_internal}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)

;; basic block 17, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 [100.0%]  (FALLTHRU)
;;              15 [100.0%] 
(code_label 111 110 112 17 9 "" [1 uses])
(note 112 111 113 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 120 [ yy_last_accepting_cpos_lsm.163 ])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 114 113 115 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 117)
;;  succ:       19 [100.0%] 
;;              18 (FALLTHRU)

;; basic block 18, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
(note 115 114 116 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 18 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/f:DI 121 [ yy_last_accepting_cpos_lsm.162 ])) 89 {*movdi_internal}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)

;; basic block 19, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 18, next block 1, flags: (RTL)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              17 [100.0%] 
(code_label 117 116 118 19 10 "" [1 uses])
(note 118 117 119 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 123 19 (set (reg:SI 124 [ <retval> ])
        (reg/v:SI 100 [ yy_current_state ])) lex.yy.c:1432 90 {*movsi_internal}
     (nil))
(insn 123 119 124 19 (set (reg/i:SI 0 ax)
        (reg:SI 124 [ <retval> ])) lex.yy.c:1433 90 {*movsi_internal}
     (nil))
(insn 124 123 0 19 (use (reg/i:SI 0 ax)) lex.yy.c:1433 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yy_fatal_error(const char*) (_ZL14yy_fatal_errorPKc, funcdef_no=104, decl_uid=4297, cgraph_uid=104, symbol_order=131) (executed once)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 88 [ msg ])
        (reg:DI 5 di [ msg ])) lex.yy.c:1941 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 6 3 7 2 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f88bc3c9ea0 stderr>) [1 stderr+0 S8 A64])) lex.yy.c:1942 -1
     (nil))
(debug_insn 7 6 8 2 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f88bbed7240 *.LC1>)) lex.yy.c:1942 -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 88 [ msg ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f88bbed7240 *.LC1>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f88bc3c9ea0 stderr>) [1 stderr+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 93 {*movqi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f88bc333948 __fprintf_chk>) [0 __builtin___fprintf_chk S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f88bc333948 __fprintf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(debug_insn 14 13 15 2 (var_location:DI __stream (clobber (const_int 0 [0]))) lex.yy.c:1942 -1
     (nil))
(debug_insn 15 14 16 2 (var_location:DI __fmt (clobber (const_int 0 [0]))) lex.yy.c:1942 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 5 di)
        (const_int 2 [0x2])) lex.yy.c:1943 90 {*movsi_internal}
     (nil))
(call_insn 17 16 0 2 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f88bc31bca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) lex.yy.c:1943 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f88bc31bca8 exit>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      


;; Function void yyensure_buffer_stack() (_ZL21yyensure_buffer_stackv, funcdef_no=100, decl_uid=4265, cgraph_uid=100, symbol_order=127)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 87 [ D.6619 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1811 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ D.6619 ])
            (const_int 0 [0]))) lex.yy.c:1811 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) lex.yy.c:1811 612 {*jcc_1}
     (int_list:REG_BR_PROB 9328 (nil))
 -> 36)
;;  succ:       3 [6.7%]  (FALLTHRU)
;;              6 [93.3%] 

;; basic block 3, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [6.7%]  (FALLTHRU)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 9 8 10 3 (var_location:DI num_to_alloc (const_int 1 [0x1])) lex.yy.c:1817 -1
     (nil))
(debug_insn 10 9 11 3 (var_location:DI size (const_int 8 [0x8])) lex.yy.c:1819 -1
     (nil))
(insn 11 10 12 3 (set (reg:DI 4 si)
        (const_int 1 [0x1])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 5 di)
        (const_int 8 [0x8])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 13 12 14 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f88bc316438 __builtin_calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f88bc316438 __builtin_calloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 14 13 15 3 (set (reg/f:DI 97)
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 97)
        (nil)))
(insn 15 14 16 3 (set (reg/f:DI 96 [ D.6620 ])
        (reg/f:DI 97)) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(debug_insn 16 15 17 3 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1819 -1
     (nil))
(insn 17 16 18 3 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (reg/f:DI 96 [ D.6620 ])) lex.yy.c:1820 89 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 96 [ D.6620 ])
            (const_int 0 [0]))) lex.yy.c:1821 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 56 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) lex.yy.c:1821 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 24)
;;  succ:       4 [0.0%]  (FALLTHRU)
;;              5 [100.0%] 

;; basic block 4, loop depth 0, count 0, freq 1
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [0.0%]  (FALLTHRU)
;;              7 [0.0%] 
(code_label 56 19 20 4 27 "" [1 uses])
(note 20 56 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f88bbee21b0 *.LC3>)) lex.yy.c:1822 89 {*movdi_internal}
     (nil))
(call_insn 22 21 24 4 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1822 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 5, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [100.0%] 
(code_label 24 22 25 5 25 "" [1 uses])
(note 25 24 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 29 25 30 5 (var_location:DI __dest (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(debug_insn 30 29 31 5 (var_location:SI __ch (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(debug_insn 31 30 32 5 (var_location:DI __len (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(insn 32 31 33 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (const_int 1 [0x1])) lex.yy.c:1826 89 {*movdi_internal}
     (nil))
(insn 33 32 36 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1827 89 {*movdi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       2 [93.3%] 
(code_label 36 33 37 6 24 "" [1 uses])
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:DI 89 [ D.6621 ])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])) lex.yy.c:1831 89 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (parallel [
            (set (reg:DI 98 [ D.6621 ])
                (plus:DI (reg:DI 89 [ D.6621 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1831 218 {*adddi_1}
     (nil))
(insn 40 39 41 6 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 98 [ D.6621 ])
            (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64]))) lex.yy.c:1831 8 {*cmpdi_1}
     (nil))
(jump_insn 41 40 42 6 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 75)
            (pc))) lex.yy.c:1831 612 {*jcc_1}
     (int_list:REG_BR_PROB 6102 (nil))
 -> 75)
;;  succ:       7 [39.0%]  (FALLTHRU)
;;              9 [61.0%] 

;; basic block 7, loop depth 0, count 0, freq 3636, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [39.0%]  (FALLTHRU)
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 43 42 44 7 (var_location:DI grow_size (const_int 8 [0x8])) lex.yy.c:1834 -1
     (nil))
(insn 44 43 45 7 (parallel [
            (set (reg/v:DI 92 [ num_to_alloc ])
                (plus:DI (reg:DI 89 [ D.6621 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1836 218 {*adddi_1}
     (nil))
(debug_insn 45 44 46 7 (var_location:DI num_to_alloc (reg/v:DI 92 [ num_to_alloc ])) lex.yy.c:1836 -1
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:DI 93 [ D.6621 ])
                (ashift:DI (reg/v:DI 92 [ num_to_alloc ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1838 512 {*ashldi3_1}
     (nil))
(debug_insn 47 46 48 7 (var_location:DI ptr (reg/f:DI 87 [ D.6619 ])) lex.yy.c:1838 -1
     (nil))
(debug_insn 48 47 49 7 (var_location:DI size (reg:DI 93 [ D.6621 ])) lex.yy.c:1838 -1
     (nil))
(insn 49 48 50 7 (set (reg:DI 4 si)
        (reg:DI 93 [ D.6621 ])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(insn 50 49 51 7 (set (reg:DI 5 di)
        (reg/f:DI 87 [ D.6619 ])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(call_insn 51 50 52 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 52 51 53 7 (set (reg/f:DI 88 [ D.6620 ])
        (reg:DI 0 ax)) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(debug_insn 53 52 54 7 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1838 -1
     (nil))
(debug_insn 54 53 55 7 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1838 -1
     (nil))
(insn 55 54 57 7 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (reg/f:DI 88 [ D.6620 ])) lex.yy.c:1840 89 {*movdi_internal}
     (nil))
(insn 57 55 58 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 88 [ D.6620 ])
            (const_int 0 [0]))) lex.yy.c:1841 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 58 57 59 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) lex.yy.c:1841 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 56)
;;  succ:       4 [0.0%] 
;;              8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 3635, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 60 59 61 8 (var_location:DI __dest (plus:DI (plus:DI (reg/f:DI 88 [ D.6620 ])
            (reg:DI 93 [ D.6621 ]))
        (const_int -64 [0xffffffffffffffc0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 61 60 62 8 (var_location:SI __ch (const_int 0 [0])) lex.yy.c:1845 -1
     (nil))
(debug_insn 62 61 63 8 (var_location:DI __len (const_int 64 [0x40])) lex.yy.c:1845 -1
     (nil))
(insn 63 62 64 8 (parallel [
            (set (reg:DI 99 [ D.6621 ])
                (plus:DI (reg:DI 93 [ D.6621 ])
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:90 218 {*adddi_1}
     (nil))
(insn 64 63 65 8 (parallel [
            (set (reg:DI 100 [ D.6619 ])
                (plus:DI (reg/f:DI 88 [ D.6620 ])
                    (reg:DI 99 [ D.6621 ])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:90 218 {*adddi_1}
     (nil))
(insn 65 64 66 8 (set (reg/f:DI 101)
        (reg:DI 100 [ D.6619 ])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (nil))
(insn 66 65 67 8 (set (reg:DI 102)
        (const_int 0 [0])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (nil))
(insn 67 66 68 8 (set (reg:DI 103)
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (nil))
(insn 68 67 69 8 (parallel [
            (set (reg:DI 103)
                (const_int 0 [0]))
            (set (reg/f:DI 101)
                (plus:DI (ashift:DI (reg:DI 103)
                        (const_int 3 [0x3]))
                    (reg/f:DI 101)))
            (set (mem:BLK (reg/f:DI 101) [0 MEM[(void *)_13]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 102))
            (use (reg:DI 103))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:90 935 {*rep_stosdi_rex64}
     (nil))
(debug_insn 69 68 70 8 (var_location:DI __dest (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 70 69 71 8 (var_location:SI __ch (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 71 70 72 8 (var_location:DI __len (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(insn 72 71 75 8 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (reg/v:DI 92 [ num_to_alloc ])) lex.yy.c:1846 89 {*movdi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 1, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
;;              6 [61.0%] 
(code_label 75 72 76 9 23 "" [1 uses])
(note 76 75 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yy_switch_to_buffer(YY_BUFFER_STATE) (_Z19yy_switch_to_bufferP15yy_buffer_state, funcdef_no=92, decl_uid=4254, cgraph_uid=92, symbol_order=119)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 104 [ new_buffer ])
        (reg:DI 5 di [ new_buffer ])) lex.yy.c:1610 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1617 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg/f:DI 88 [ D.6626 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 88 [ D.6626 ])
            (const_int 0 [0]))) lex.yy.c:1618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 46)
;;  succ:       3 [85.0%]  (FALLTHRU)
;;              7 [15.0%] 

;; basic block 3, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [85.0%]  (FALLTHRU)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:DI 106)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (parallel [
            (set (reg:DI 105 [ D.6625 ])
                (ashift:DI (reg:DI 106)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1618 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 13 12 14 3 (parallel [
            (set (reg/f:DI 91 [ D.6626 ])
                (plus:DI (reg/f:DI 88 [ D.6626 ])
                    (reg:DI 105 [ D.6625 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1618 218 {*adddi_1}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 92 [ D.6627 ])
        (mem/f:DI (reg/f:DI 91 [ D.6626 ]) [1 *_9+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 92 [ D.6627 ])
            (reg/v/f:DI 104 [ new_buffer ]))) lex.yy.c:1618 8 {*cmpdi_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 55)
;;  succ:       9 [10.1%] 
;;              4 [89.9%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [89.9%]  (FALLTHRU)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 92 [ D.6627 ])
            (const_int 0 [0]))) lex.yy.c:1621 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) lex.yy.c:1621 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 29)
;;  succ:       5 [85.0%]  (FALLTHRU)
;;              6 [15.0%] 

;; basic block 5, loop depth 0, count 0, freq 6492, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [85.0%]  (FALLTHRU)
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg/f:DI 93 [ D.6628 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1624 89 {*movdi_internal}
     (nil))
(insn 22 21 23 5 (set (reg:QI 107)
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1624 93 {*movqi_internal}
     (nil))
(insn 23 22 24 5 (set (mem:QI (reg/f:DI 93 [ D.6628 ]) [0 *_16+0 S1 A8])
        (reg:QI 107)) lex.yy.c:1624 93 {*movqi_internal}
     (nil))
(insn 24 23 25 5 (set (reg/f:DI 95 [ D.6630 ])
        (mem/f:DI (reg/f:DI 91 [ D.6626 ]) [1 *_9+0 S8 A64])) lex.yy.c:1625 89 {*movdi_internal}
     (nil))
(insn 25 24 26 5 (set (mem/f:DI (plus:DI (reg/f:DI 95 [ D.6630 ])
                (const_int 16 [0x10])) [1 _19->yy_buf_pos+0 S8 A64])
        (reg/f:DI 93 [ D.6628 ])) lex.yy.c:1625 89 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg/f:DI 108)
        (mem/f:DI (reg/f:DI 91 [ D.6626 ]) [1 *_9+0 S8 A64])) lex.yy.c:1626 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:SI 109)
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1626 90 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (mem:SI (plus:DI (reg/f:DI 108)
                (const_int 32 [0x20])) [2 _21->yy_n_chars+0 S4 A64])
        (reg:SI 109)) lex.yy.c:1626 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              4 [15.0%] 
;;              5 [100.0%]  (FALLTHRU)
(code_label 29 28 30 6 37 "" [1 uses])
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (mem/f:DI (reg/f:DI 91 [ D.6626 ]) [1 *_29+0 S8 A64])
        (reg/v/f:DI 104 [ new_buffer ])) lex.yy.c:1629 89 {*movdi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:SI 110)
        (mem:SI (plus:DI (reg/v/f:DI 104 [ new_buffer ])
                (const_int 32 [0x20])) [2 new_buffer_11(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 110)) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (reg/f:DI 99 [ D.6628 ])
        (mem/f:DI (plus:DI (reg/v/f:DI 104 [ new_buffer ])
                (const_int 16 [0x10])) [1 new_buffer_11(D)->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 99 [ D.6628 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 99 [ D.6628 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:DI 111)
        (mem/f:DI (reg/f:DI 91 [ D.6626 ]) [1 *_29+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 38 37 39 6 (set (reg/f:DI 112)
        (mem/f:DI (reg/f:DI 111) [1 _32->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 39 38 40 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 112)) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 40 39 41 6 (set (reg:QI 113)
        (mem:QI (reg/f:DI 99 [ D.6628 ]) [0 *_31+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(insn 41 40 46 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 113)) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 1500, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       2 [15.0%] 
(code_label 46 41 47 7 35 "" [1 uses])
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 104 [ new_buffer ])
            (const_int 0 [0]))) lex.yy.c:1618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 49 48 50 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 55)
;;  succ:       9 [10.1%] 
;;              8 [89.9%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [89.9%]  (FALLTHRU)
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (set (reg:DI 114)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 52 51 55 8 (parallel [
            (set (reg/f:DI 91 [ D.6626 ])
                (ashift:DI (reg:DI 114)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 1, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              3 [10.1%] 
;;              7 [10.1%] 
(code_label 55 52 56 9 34 "" [2 uses])
(note 56 55 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yy_delete_buffer(YY_BUFFER_STATE) (_Z16yy_delete_bufferP15yy_buffer_state, funcdef_no=95, decl_uid=4259, cgraph_uid=95, symbol_order=122)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 94 [ b ])
        (reg:DI 5 di [ b ])) lex.yy.c:1683 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 94 [ b ])
            (const_int 0 [0]))) lex.yy.c:1685 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 37)
            (pc))) lex.yy.c:1685 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 37)
;;  succ:       9 [10.1%] 
;;              3 [89.9%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [89.9%]  (FALLTHRU)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:DI 87 [ D.6635 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1688 89 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ D.6635 ])
            (const_int 0 [0]))) lex.yy.c:1688 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) lex.yy.c:1688 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 20)
;;  succ:       4 [85.0%]  (FALLTHRU)
;;              6 [15.0%] 

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [85.0%]  (FALLTHRU)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 96)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1688 89 {*movdi_internal}
     (nil))
(insn 14 13 15 4 (parallel [
            (set (reg:DI 95 [ D.6636 ])
                (ashift:DI (reg:DI 96)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1688 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 15 14 16 4 (parallel [
            (set (reg/f:DI 90 [ D.6635 ])
                (plus:DI (reg/f:DI 87 [ D.6635 ])
                    (reg:DI 95 [ D.6636 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1688 218 {*adddi_1}
     (nil))
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 94 [ b ])
            (mem/f:DI (reg/f:DI 90 [ D.6635 ]) [1 *_10+0 S8 A64]))) lex.yy.c:1688 8 {*cmpdi_1}
     (nil))
(jump_insn 17 16 18 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) lex.yy.c:1688 612 {*jcc_1}
     (int_list:REG_BR_PROB 8235 (nil))
 -> 20)
;;  succ:       5 [17.6%]  (FALLTHRU)
;;              6 [82.3%] 

;; basic block 5, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [17.6%]  (FALLTHRU)
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (mem/f:DI (reg/f:DI 90 [ D.6635 ]) [1 *_10+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1689 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [82.3%] 
;;              5 [100.0%]  (FALLTHRU)
;;              3 [15.0%] 
(code_label 20 19 21 6 47 "" [2 uses])
(note 21 20 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/v/f:DI 94 [ b ])
                    (const_int 36 [0x24])) [2 b_5(D)->yy_is_our_buffer+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:1691 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 23 22 24 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) lex.yy.c:1691 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 29)
;;  succ:       7 [29.0%]  (FALLTHRU)
;;              8 [71.0%] 

;; basic block 7, loop depth 0, count 0, freq 2606, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [29.0%]  (FALLTHRU)
(note 24 23 25 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 25 24 26 7 (var_location:DI ptr (mem/f/j:DI (plus:DI (reg/v/f:DI 94 [ b ])
            (const_int 8 [0x8])) [0 b_5(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1692 -1
     (nil))
(insn 26 25 27 7 (set (reg:DI 97)
        (mem/f:DI (plus:DI (reg/v/f:DI 94 [ b ])
                (const_int 8 [0x8])) [1 b_5(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:2141 89 {*movdi_internal}
     (nil))
(insn 27 26 28 7 (set (reg:DI 5 di)
        (reg:DI 97)) lex.yy.c:2141 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6 [71.0%] 
;;              7 [100.0%]  (FALLTHRU)
(code_label 29 28 30 8 48 "" [1 uses])
(note 30 29 31 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 32 8 (var_location:DI ptr (reg/v/f:DI 94 [ b ])) -1
     (nil))
(insn 32 31 33 8 (set (reg:DI 5 di)
        (reg/v/f:DI 94 [ b ])) lex.yy.c:2141 89 {*movdi_internal}
     (nil))
(call_insn/j 33 32 37 8 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)

;; basic block 9, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 8, next block 1, flags: (RTL)
;;  pred:       2 [10.1%] 
(code_label 37 33 38 9 45 "" [1 uses])
(note 38 37 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yy_flush_buffer(YY_BUFFER_STATE) (_Z15yy_flush_bufferP15yy_buffer_state, funcdef_no=97, decl_uid=4261, cgraph_uid=97, symbol_order=124)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 99 [ b ])
        (reg:DI 5 di [ b ])) lex.yy.c:1730 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 99 [ b ])
            (const_int 0 [0]))) lex.yy.c:1731 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) lex.yy.c:1731 612 {*jcc_1}
     (int_list:REG_BR_PROB 8986 (nil))
 -> 11)
;;  succ:       6 [10.1%]  (FALLTHRU)
;;              3 [89.9%] 

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [89.9%] 
(code_label 11 7 12 3 57 "" [1 uses])
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (mem:SI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 32 [0x20])) [2 b_3(D)->yy_n_chars+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1734 90 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg/f:DI 87 [ D.6642 ])
        (mem/f:DI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1740 89 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (mem:QI (reg/f:DI 87 [ D.6642 ]) [0 *_6+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1740 93 {*movqi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 88 [ D.6642 ])
        (mem/f:DI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1741 89 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (mem:QI (plus:DI (reg/f:DI 88 [ D.6642 ])
                (const_int 1 [0x1])) [0 MEM[(char *)_8 + 1B]+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1741 93 {*movqi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 89 [ D.6642 ])
        (mem/f:DI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1743 89 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (mem/f:DI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 16 [0x10])) [1 b_3(D)->yy_buf_pos+0 S8 A64])
        (reg/f:DI 89 [ D.6642 ])) lex.yy.c:1743 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (mem:SI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 44 [0x2c])) [2 b_3(D)->yy_at_bol+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1745 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (mem:SI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 60 [0x3c])) [2 b_3(D)->yy_buffer_status+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1746 90 {*movsi_internal}
     (nil))
(insn 22 21 24 3 (set (reg/f:DI 90 [ D.6643 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1748 89 {*movdi_internal}
     (nil))
(insn 24 22 25 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 90 [ D.6643 ])
            (const_int 0 [0]))) lex.yy.c:1748 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 25 24 26 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) lex.yy.c:1748 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 44)
;;  succ:       4 [85.0%]  (FALLTHRU)
;;              6 [15.0%] 

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [85.0%]  (FALLTHRU)
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg:DI 101)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1748 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 100 [ D.6644 ])
                (ashift:DI (reg:DI 101)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1748 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg/f:DI 93 [ D.6643 ])
                (plus:DI (reg/f:DI 90 [ D.6643 ])
                    (reg:DI 100 [ D.6644 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1748 218 {*adddi_1}
     (nil))
(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 99 [ b ])
            (mem/f:DI (reg/f:DI 93 [ D.6643 ]) [1 *_17+0 S8 A64]))) lex.yy.c:1748 8 {*cmpdi_1}
     (nil))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) lex.yy.c:1748 612 {*jcc_1}
     (int_list:REG_BR_PROB 7455 (nil))
 -> 44)
;;  succ:       5 [25.4%]  (FALLTHRU)
;;              6 [74.5%] 

;; basic block 5, loop depth 0, count 0, freq 1944, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [25.4%]  (FALLTHRU)
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg:SI 102)
        (mem:SI (plus:DI (reg/v/f:DI 99 [ b ])
                (const_int 32 [0x20])) [2 b_3(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 102)) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 89 [ D.6642 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 89 [ D.6642 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (reg/f:DI 103)
        (mem/f:DI (reg/f:DI 93 [ D.6643 ]) [1 *_17+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg/f:DI 104)
        (mem/f:DI (reg/f:DI 103) [1 _26->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 104)) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:QI 105)
        (mem:QI (reg/f:DI 89 [ D.6642 ]) [0 *_10+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(insn 41 40 44 5 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 105)) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 5, next block 1, flags: (RTL)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              2 [10.1%]  (FALLTHRU)
;;              3 [15.0%] 
;;              4 [74.5%] 
(code_label 44 41 45 6 56 "" [2 uses])
(note 45 44 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yy_init_buffer(YY_BUFFER_STATE, FILE*) (_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE, funcdef_no=96, decl_uid=4269, cgraph_uid=96, symbol_order=123)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 6 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 98 [ b ])
        (reg:DI 5 di [ b ])) lex.yy.c:1703 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 99 [ file ])
        (reg:DI 4 si [ file ])) lex.yy.c:1703 89 {*movdi_internal}
     (nil))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/u 8 4 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) lex.yy.c:1704 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 9 8 10 2 (set (reg/f:DI 89 [ D.6654 ])
        (reg:DI 0 ax)) lex.yy.c:1704 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/v:SI 90 [ oerrno ])
        (mem:SI (reg/f:DI 89 [ D.6654 ]) [2 *_5+0 S4 A32])) lex.yy.c:1704 90 {*movsi_internal}
     (nil))
(debug_insn 11 10 12 2 (var_location:SI oerrno (reg/v:SI 90 [ oerrno ])) lex.yy.c:1704 -1
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/v/f:DI 98 [ b ])) lex.yy.c:1706 89 {*movdi_internal}
     (nil))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref:DI ("_Z15yy_flush_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c510 yy_flush_buffer>) [0 yy_flush_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1706 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z15yy_flush_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c510 yy_flush_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 14 13 15 2 (set (mem/f:DI (reg/v/f:DI 98 [ b ]) [1 b_8(D)->yy_input_file+0 S8 A64])
        (reg/v/f:DI 99 [ file ])) lex.yy.c:1708 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem:SI (plus:DI (reg/v/f:DI 98 [ b ])
                (const_int 56 [0x38])) [2 b_8(D)->yy_fill_buffer+0 S4 A64])
        (const_int 1 [0x1])) lex.yy.c:1709 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 91 [ D.6655 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1715 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 91 [ D.6655 ])
            (const_int 0 [0]))) lex.yy.c:1715 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) lex.yy.c:1715 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 23)
;;  succ:       3 [85.0%]  (FALLTHRU)
;;              4 [15.0%] 

;; basic block 3, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [85.0%]  (FALLTHRU)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg:DI 100)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1715 89 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 98 [ b ])
            (mem/f:DI (plus:DI (mult:DI (reg:DI 100)
                        (const_int 8 [0x8]))
                    (reg/f:DI 91 [ D.6655 ])) [1 *_16+0 S8 A64]))) lex.yy.c:1715 8 {*cmpdi_1}
     (nil))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) lex.yy.c:1715 612 {*jcc_1}
     (int_list:REG_BR_PROB 1765 (nil))
 -> 27)
;;  succ:       4 [82.3%]  (FALLTHRU)
;;              5 [17.6%] 

;; basic block 4, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [82.3%]  (FALLTHRU)
;;              2 [15.0%] 
(code_label 23 22 24 4 65 "" [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (mem:SI (plus:DI (reg/v/f:DI 98 [ b ])
                (const_int 48 [0x30])) [2 b_8(D)->yy_bs_lineno+0 S4 A64])
        (const_int 1 [0x1])) lex.yy.c:1716 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (mem:SI (plus:DI (reg/v/f:DI 98 [ b ])
                (const_int 52 [0x34])) [2 b_8(D)->yy_bs_column+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1717 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [17.6%] 
;;              4 [100.0%]  (FALLTHRU)
(code_label 27 26 28 5 66 "" [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 99 [ file ])
            (const_int 0 [0]))) lex.yy.c:1720 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 51)
            (pc))) lex.yy.c:1720 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 51)
;;  succ:       6 [78.3%]  (FALLTHRU)
;;              7 [21.6%] 

;; basic block 6, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [78.3%]  (FALLTHRU)
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (reg:DI 5 di)
        (reg/v/f:DI 99 [ file ])) lex.yy.c:1720 89 {*movdi_internal}
     (nil))
(call_insn 33 32 34 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fileno") [flags 0x41]  <function_decl 0x7f88bbf95af8 fileno>) [0 fileno S1 A8])
            (const_int 0 [0]))) lex.yy.c:1720 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("fileno") [flags 0x41]  <function_decl 0x7f88bbf95af8 fileno>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 34 33 35 6 (set (reg:SI 96 [ D.6653 ])
        (reg:SI 0 ax)) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:SI 5 di)
        (reg:SI 96 [ D.6653 ])) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
(call_insn 36 35 37 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isatty") [flags 0x41]  <function_decl 0x7f88bc0d7e58 isatty>) [0 isatty S1 A8])
            (const_int 0 [0]))) lex.yy.c:1720 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("isatty") [flags 0x41]  <function_decl 0x7f88bc0d7e58 isatty>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 37 36 38 6 (set (reg:SI 97 [ D.6653 ])
        (reg:SI 0 ax)) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 97 [ D.6653 ])
            (const_int 0 [0]))) lex.yy.c:1720 3 {*cmpsi_ccno_1}
     (nil))
(insn 39 38 40 6 (set (reg:QI 102)
        (gt:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) lex.yy.c:1720 607 {*setcc_qi}
     (nil))
(insn 40 39 41 6 (set (reg:SI 101 [ D.6652 ])
        (zero_extend:SI (reg:QI 102))) lex.yy.c:1720 138 {*zero_extendqisi2}
     (nil))
(insn 41 40 51 6 (set (reg:SI 88 [ D.6653 ])
        (reg:SI 101 [ D.6652 ])) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 2165, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5 [21.6%] 
(code_label 51 41 50 7 68 "" [1 uses])
(note 50 51 5 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 5 50 42 7 (set (reg:SI 88 [ D.6653 ])
        (const_int 0 [0])) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              6 [100.0%]  (FALLTHRU)
(code_label 42 5 43 8 67 "" [0 uses])
(note 43 42 44 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 8 (set (mem:SI (plus:DI (reg/v/f:DI 98 [ b ])
                (const_int 40 [0x28])) [2 b_8(D)->yy_is_interactive+0 S4 A64])
        (reg:SI 88 [ D.6653 ])) lex.yy.c:1720 90 {*movsi_internal}
     (nil))
(insn 45 44 0 8 (set (mem:SI (reg/f:DI 89 [ D.6654 ]) [2 *_5+0 S4 A32])
        (reg/v:SI 90 [ oerrno ])) lex.yy.c:1722 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function yy_buffer_state* yy_create_buffer(FILE*, int) (_Z16yy_create_bufferP8_IO_FILEi, funcdef_no=94, decl_uid=4257, cgraph_uid=94, symbol_order=121)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 92 [ file ])
        (reg:DI 5 di [ file ])) lex.yy.c:1655 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 93 [ size ])
        (reg:SI 4 si [ size ])) lex.yy.c:1655 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 8 2 (var_location:DI size (const_int 64 [0x40])) -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (const_int 64 [0x40])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 94)
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 94)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 90 [ D.6664 ])
        (reg/f:DI 94)) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(debug_insn 12 11 13 2 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1658 -1
     (nil))
(debug_insn 13 12 14 2 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1658 -1
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 90 [ D.6664 ])
            (const_int 0 [0]))) lex.yy.c:1659 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 32 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) lex.yy.c:1659 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 20)
;;  succ:       3 [0.0%]  (FALLTHRU)
;;              4 [100.0%] 

;; basic block 3, loop depth 0, count 0, freq 8
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [0.0%]  (FALLTHRU)
;;              4 [0.0%] 
(code_label 32 15 16 3 76 "" [1 uses])
(note 16 32 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f88bbf1aa20 *.LC9>)) lex.yy.c:1660 89 {*movdi_internal}
     (nil))
(call_insn 18 17 20 3 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1660 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 4, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [100.0%] 
(code_label 20 18 21 4 75 "" [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:DI 88 [ D.6665 ])
        (sign_extend:DI (reg/v:SI 93 [ size ]))) lex.yy.c:1662 142 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 4 (set (mem:DI (plus:DI (reg/f:DI 90 [ D.6664 ])
                (const_int 24 [0x18])) [4 MEM[(struct yy_buffer_state *)_14].yy_buf_size+0 S8 A64])
        (reg:DI 88 [ D.6665 ])) lex.yy.c:1662 89 {*movdi_internal}
     (nil))
(debug_insn 24 23 25 4 (var_location:DI size (plus:DI (reg:DI 88 [ D.6665 ])
        (const_int 2 [0x2]))) lex.yy.c:1667 -1
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:DI 95 [ D.6665 ])
                (plus:DI (reg:DI 88 [ D.6665 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2123 218 {*adddi_1}
     (nil))
(insn 26 25 27 4 (set (reg:DI 5 di)
        (reg:DI 95 [ D.6665 ])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 27 26 28 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 27 29 4 (set (reg/f:DI 96)
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 96)
        (nil)))
(insn 29 28 30 4 (set (reg/f:DI 87 [ D.6664 ])
        (reg/f:DI 96)) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(debug_insn 30 29 31 4 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1667 -1
     (nil))
(insn 31 30 33 4 (set (mem/f:DI (plus:DI (reg/f:DI 90 [ D.6664 ])
                (const_int 8 [0x8])) [1 MEM[(struct yy_buffer_state *)_14].yy_ch_buf+0 S8 A64])
        (reg/f:DI 87 [ D.6664 ])) lex.yy.c:1667 89 {*movdi_internal}
     (nil))
(insn 33 31 34 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ D.6664 ])
            (const_int 0 [0]))) lex.yy.c:1668 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) lex.yy.c:1668 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 32)
;;  succ:       3 [0.0%] 
;;              5 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 9992, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (mem:SI (plus:DI (reg/f:DI 90 [ D.6664 ])
                (const_int 36 [0x24])) [2 MEM[(struct yy_buffer_state *)_14].yy_is_our_buffer+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1671 90 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (reg:DI 4 si)
        (reg/v/f:DI 92 [ file ])) lex.yy.c:1673 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 5 di)
        (reg/f:DI 90 [ D.6664 ])) lex.yy.c:1673 89 {*movdi_internal}
     (nil))
(call_insn 39 38 40 5 (call (mem:QI (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>) [0 yy_init_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1673 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 40 39 44 5 (set (reg:DI 91 [ <retval> ])
        (reg/f:DI 90 [ D.6664 ])) lex.yy.c:1675 89 {*movdi_internal}
     (nil))
(insn 44 40 45 5 (set (reg/i:DI 0 ax)
        (reg:DI 91 [ <retval> ])) lex.yy.c:1676 89 {*movdi_internal}
     (nil))
(insn 45 44 0 5 (use (reg/i:DI 0 ax)) lex.yy.c:1676 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yyrestart(FILE*) (_Z9yyrestartP8_IO_FILE, funcdef_no=91, decl_uid=4252, cgraph_uid=91, symbol_order=118)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 112 [ input_file ])
        (reg:DI 5 di [ input_file ])) lex.yy.c:1593 89 {*movdi_internal}
     (nil))
(note 3 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 3 8 2 (set (reg/f:DI 87 [ D.6669 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ D.6669 ])
            (const_int 0 [0]))) lex.yy.c:1595 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) lex.yy.c:1595 612 {*jcc_1}
     (int_list:REG_BR_PROB 672 (nil))
 -> 15)
;;  succ:       4 [6.7%] 
;;              3 [93.3%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [93.3%]  (FALLTHRU)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:DI 113)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 91 [ D.6671 ])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 113)
                    (const_int 8 [0x8]))
                (reg/f:DI 87 [ D.6669 ])) [1 *_7+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 91 [ D.6671 ])
            (const_int 0 [0]))) lex.yy.c:1595 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) lex.yy.c:1595 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 35)
;;  succ:       4 [15.0%]  (FALLTHRU)
;;              7 [85.0%] 

;; basic block 4, loop depth 0, count 0, freq 2071, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [15.0%]  (FALLTHRU)
;;              2 [6.7%] 
(code_label 15 14 16 4 82 "" [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 18 4 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1596 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn 18 17 19 4 (set (reg:DI 115)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1597 89 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (parallel [
            (set (reg:DI 114 [ D.6670 ])
                (ashift:DI (reg:DI 115)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1597 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 20 19 21 4 (set (reg/f:DI 116)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1597 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 95 [ D.6669 ])
                (plus:DI (reg:DI 114 [ D.6670 ])
                    (reg/f:DI 116)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1597 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 114 [ D.6670 ]))
        (nil)))
(insn 22 21 23 4 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) lex.yy.c:1598 90 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1598 89 {*movdi_internal}
     (nil))
(call_insn 24 23 25 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:1598 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 25 24 26 4 (set (reg/f:DI 97 [ D.6671 ])
        (reg:DI 0 ax)) lex.yy.c:1598 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (mem/f:DI (reg/f:DI 95 [ D.6669 ]) [1 *_13+0 S8 A64])
        (reg/f:DI 97 [ D.6671 ])) lex.yy.c:1598 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 98 [ D.6669 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 98 [ D.6669 ])
            (const_int 0 [0]))) lex.yy.c:1601 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 60)
            (pc))) lex.yy.c:1601 612 {*jcc_1}
     (int_list:REG_BR_PROB 4896 (nil))
 -> 60)
;;  succ:       5 [51.0%]  (FALLTHRU)
;;              6 [49.0%] 

;; basic block 5, loop depth 0, count 0, freq 1057, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [51.0%]  (FALLTHRU)
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:DI 117)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 32 31 60 5 (set (reg/f:DI 91 [ D.6671 ])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 117)
                    (const_int 8 [0x8]))
                (reg/f:DI 98 [ D.6669 ])) [1 *_50+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [49.0%] 
(code_label 60 32 59 6 85 "" [1 uses])
(note 59 60 4 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 4 59 35 6 (set (reg/f:DI 91 [ D.6671 ])
        (const_int 0 [0])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              5 [100.0%]  (FALLTHRU)
;;              3 [85.0%] 
(code_label 35 4 36 7 84 "" [1 uses])
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:DI 4 si)
        (reg/v/f:DI 112 [ input_file ])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
(insn 38 37 39 7 (set (reg:DI 5 di)
        (reg/f:DI 91 [ D.6671 ])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
(call_insn 39 38 40 7 (call (mem:QI (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>) [0 yy_init_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1601 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 40 39 41 7 (set (reg:DI 119)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (parallel [
            (set (reg:DI 118 [ D.6670 ])
                (ashift:DI (reg:DI 119)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1642 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 42 41 43 7 (set (reg/f:DI 120)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (nil))
(insn 43 42 44 7 (parallel [
            (set (reg/f:DI 102 [ D.6669 ])
                (plus:DI (reg:DI 118 [ D.6670 ])
                    (reg/f:DI 120)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1642 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 118 [ D.6670 ]))
        (nil)))
(insn 44 43 45 7 (set (reg/f:DI 103 [ D.6671 ])
        (mem/f:DI (reg/f:DI 102 [ D.6669 ]) [1 *_29+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:SI 121)
        (mem:SI (plus:DI (reg/f:DI 103 [ D.6671 ])
                (const_int 32 [0x20])) [2 _30->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 121)) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 47 46 48 7 (set (reg/f:DI 105 [ D.6674 ])
        (mem/f:DI (plus:DI (reg/f:DI 103 [ D.6671 ])
                (const_int 16 [0x10])) [1 _30->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 48 47 49 7 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 105 [ D.6674 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 105 [ D.6674 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 50 49 51 7 (set (reg/f:DI 122)
        (mem/f:DI (reg/f:DI 102 [ D.6669 ]) [1 *_29+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 51 50 52 7 (set (reg/f:DI 123)
        (mem/f:DI (reg/f:DI 122) [1 _33->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 123)) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:QI 124)
        (mem:QI (reg/f:DI 105 [ D.6674 ]) [0 *_32+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(insn 54 53 0 7 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 124)) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yypush_buffer_state(YY_BUFFER_STATE) (_Z19yypush_buffer_stateP15yy_buffer_state, funcdef_no=98, decl_uid=4263, cgraph_uid=98, symbol_order=125)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 106 [ new_buffer ])
        (reg:DI 5 di [ new_buffer ])) lex.yy.c:1759 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 106 [ new_buffer ])
            (const_int 0 [0]))) lex.yy.c:1760 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) lex.yy.c:1760 612 {*jcc_1}
     (int_list:REG_BR_PROB 2164 (nil))
 -> 53)
;;  succ:       8 [21.6%] 
;;              3 [78.4%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 7836, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [78.4%]  (FALLTHRU)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 9 8 10 3 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1763 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn 10 9 11 3 (set (reg/f:DI 87 [ D.6678 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1766 89 {*movdi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ D.6678 ])
            (const_int 0 [0]))) lex.yy.c:1766 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) lex.yy.c:1766 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 18)
;;  succ:       5 [85.0%] 
;;              4 [15.0%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 1175, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [15.0%]  (FALLTHRU)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:DI 107)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 15 14 18 4 (parallel [
            (set (reg/f:DI 103 [ D.6678 ])
                (ashift:DI (reg:DI 107)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 6661, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [85.0%] 
(code_label 18 15 19 5 93 "" [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:DI 88 [ D.6679 ])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1766 89 {*movdi_internal}
     (nil))
(insn 21 20 22 5 (parallel [
            (set (reg:DI 89 [ D.6679 ])
                (ashift:DI (reg:DI 88 [ D.6679 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1766 512 {*ashldi3_1}
     (nil))
(insn 22 21 23 5 (parallel [
            (set (reg/f:DI 103 [ D.6678 ])
                (plus:DI (reg/f:DI 87 [ D.6678 ])
                    (reg:DI 89 [ D.6679 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1766 218 {*adddi_1}
     (nil))
(insn 23 22 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 103 [ D.6678 ]) [1 *_10+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:1766 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 24 23 25 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) lex.yy.c:1766 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 38)
;;  succ:       6 [85.0%]  (FALLTHRU)
;;              7 [15.0%] 

;; basic block 6, loop depth 0, count 0, freq 5662, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [85.0%]  (FALLTHRU)
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg/f:DI 91 [ D.6681 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1769 89 {*movdi_internal}
     (nil))
(insn 27 26 28 6 (set (reg:QI 108)
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1769 93 {*movqi_internal}
     (nil))
(insn 28 27 29 6 (set (mem:QI (reg/f:DI 91 [ D.6681 ]) [0 *_12+0 S1 A8])
        (reg:QI 108)) lex.yy.c:1769 93 {*movqi_internal}
     (nil))
(insn 29 28 30 6 (set (reg/f:DI 93 [ D.6680 ])
        (mem/f:DI (reg/f:DI 103 [ D.6678 ]) [1 *_10+0 S8 A64])) lex.yy.c:1770 89 {*movdi_internal}
     (nil))
(insn 30 29 31 6 (set (mem/f:DI (plus:DI (reg/f:DI 93 [ D.6680 ])
                (const_int 16 [0x10])) [1 _15->yy_buf_pos+0 S8 A64])
        (reg/f:DI 91 [ D.6681 ])) lex.yy.c:1770 89 {*movdi_internal}
     (nil))
(insn 31 30 32 6 (set (reg/f:DI 109)
        (mem/f:DI (reg/f:DI 103 [ D.6678 ]) [1 *_10+0 S8 A64])) lex.yy.c:1771 89 {*movdi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:SI 110)
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1771 90 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (mem:SI (plus:DI (reg/f:DI 109)
                (const_int 32 [0x20])) [2 _17->yy_n_chars+0 S4 A64])
        (reg:SI 110)) lex.yy.c:1771 90 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:DI 111)
                (plus:DI (reg:DI 88 [ D.6679 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1776 218 {*adddi_1}
     (nil))
(insn 35 34 36 6 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (reg:DI 111)) lex.yy.c:1776 89 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg:DI 112 [ D.6679 ])
                (plus:DI (reg:DI 89 [ D.6679 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 37 36 38 6 (parallel [
            (set (reg/f:DI 103 [ D.6678 ])
                (plus:DI (reg/f:DI 87 [ D.6678 ])
                    (reg:DI 112 [ D.6679 ])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 7836, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              5 [15.0%] 
;;              6 [100.0%]  (FALLTHRU)
(code_label 38 37 39 7 94 "" [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (mem/f:DI (reg/f:DI 103 [ D.6678 ]) [1 *_41+0 S8 A64])
        (reg/v/f:DI 106 [ new_buffer ])) lex.yy.c:1777 89 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:SI 113)
        (mem:SI (plus:DI (reg/v/f:DI 106 [ new_buffer ])
                (const_int 32 [0x20])) [2 new_buffer_4(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 113)) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg/f:DI 99 [ D.6681 ])
        (mem/f:DI (plus:DI (reg/v/f:DI 106 [ new_buffer ])
                (const_int 16 [0x10])) [1 new_buffer_4(D)->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 99 [ D.6681 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 45 44 46 7 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 99 [ D.6681 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg/f:DI 114)
        (mem/f:DI (reg/f:DI 103 [ D.6678 ]) [1 *_41+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 47 46 48 7 (set (reg/f:DI 115)
        (mem/f:DI (reg/f:DI 114) [1 _34->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 48 47 49 7 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 115)) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg:QI 116)
        (mem:QI (reg/f:DI 99 [ D.6681 ]) [0 *_33+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(insn 50 49 53 7 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 116)) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              2 [21.6%] 
(code_label 53 50 54 8 91 "" [1 uses])
(note 54 53 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yypop_buffer_state() (_Z18yypop_buffer_statev, funcdef_no=99, decl_uid=4264, cgraph_uid=99, symbol_order=126)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 88 [ D.6687 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 88 [ D.6687 ])
            (const_int 0 [0]))) lex.yy.c:1790 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) lex.yy.c:1790 612 {*jcc_1}
     (int_list:REG_BR_PROB 8986 (nil))
 -> 11)
;;  succ:       7 [10.1%]  (FALLTHRU)
;;              3 [89.9%] 

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [89.9%] 
(code_label 11 7 12 3 102 "" [1 uses])
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:DI 89 [ D.6688 ])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg:DI 101 [ D.6688 ])
                (ashift:DI (reg:DI 89 [ D.6688 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1790 512 {*ashldi3_1}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg/f:DI 91 [ D.6687 ])
                (plus:DI (reg/f:DI 88 [ D.6687 ])
                    (reg:DI 101 [ D.6688 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1790 218 {*adddi_1}
     (nil))
(insn 16 15 18 3 (set (reg/f:DI 92 [ D.6689 ])
        (mem/f:DI (reg/f:DI 91 [ D.6687 ]) [1 *_8+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn 18 16 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 92 [ D.6689 ])
            (const_int 0 [0]))) lex.yy.c:1790 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 51 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1790 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 57)
;;  succ:       7 [10.1%] 
;;              6 [89.9%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 4037, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       6 [50.0%] 
(code_label 51 19 23 4 106 "" [1 uses])
(note 23 51 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (parallel [
            (set (reg:DI 94 [ D.6688 ])
                (plus:DI (reg:DI 89 [ D.6688 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1796 218 {*adddi_1}
     (nil))
(insn 25 24 26 4 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (reg:DI 94 [ D.6688 ])) lex.yy.c:1796 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 102 [ D.6688 ])
                (ashift:DI (reg:DI 94 [ D.6688 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg/f:DI 87 [ D.6687 ])
                (plus:DI (reg/f:DI 88 [ D.6687 ])
                    (reg:DI 102 [ D.6688 ])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 95 [ D.6689 ])
        (mem/f:DI (reg/f:DI 87 [ D.6687 ]) [1 *_1+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 95 [ D.6689 ])
            (const_int 0 [0]))) lex.yy.c:1798 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 30 29 31 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1798 612 {*jcc_1}
     (int_list:REG_BR_PROB 0 (nil))
 -> 57)
;;  succ:       5 [100.0%]  (FALLTHRU)
;;              7

;; basic block 5, loop depth 0, count 0, freq 6520, maybe hot
;; Invalid sum of incoming frequencies 4037, should be 6520
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 103)
        (mem:SI (plus:DI (reg/f:DI 95 [ D.6689 ])
                (const_int 32 [0x20])) [2 _23->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 103)) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 34 33 35 5 (set (reg/f:DI 97 [ D.6691 ])
        (mem/f:DI (plus:DI (reg/f:DI 95 [ D.6689 ])
                (const_int 16 [0x10])) [1 _23->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 97 [ D.6691 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 97 [ D.6691 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 38 5 (set (reg/f:DI 104)
        (mem/f:DI (reg/f:DI 87 [ D.6687 ]) [1 *_1+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg/f:DI 105)
        (mem/f:DI (reg/f:DI 104) [1 _26->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 105)) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:QI 106)
        (mem:QI (reg/f:DI 97 [ D.6691 ]) [0 *_25+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(insn 41 40 47 5 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 106)) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 8075, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       3 [89.9%]  (FALLTHRU)
(note 47 41 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (reg:DI 5 di)
        (reg/f:DI 92 [ D.6689 ])) lex.yy.c:1793 89 {*movdi_internal}
     (nil))
(call_insn 49 48 50 6 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1793 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 50 49 52 6 (set (mem/f:DI (reg/f:DI 91 [ D.6687 ]) [1 *_8+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1794 89 {*movdi_internal}
     (nil))
(insn 52 50 53 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 89 [ D.6688 ])
            (const_int 0 [0]))) lex.yy.c:1795 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 53 52 57 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) lex.yy.c:1795 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 51)
;;  succ:       4 [50.0%] 
;;              7 [50.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;; Invalid sum of incoming frequencies 12483, should be 10000
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              2 [10.1%]  (FALLTHRU)
;;              3 [10.1%] 
;;              4
;;              6 [50.0%]  (FALLTHRU)
(code_label 57 53 58 7 101 "" [2 uses])
(note 58 57 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function int yylex() (_Z5yylexv, funcdef_no=85, decl_uid=5394, cgraph_uid=85, symbol_order=112)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 69 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 69 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 71 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 D.6797+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:787 986 {stack_tls_protect_set_di}
     (nil))
(insn 71 3 72 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:792 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 72 71 73 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) lex.yy.c:792 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 78)
;;  succ:       4 [50.0%] 
;;              3 [50.0%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [50.0%]  (FALLTHRU)
(note 73 72 74 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 3 (set (reg/f:DI 318 [ D.6783 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 75 74 78 3 (set (reg:QI 320 [ D.6789 ])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) 93 {*movqi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 [50.0%] 
(code_label 78 75 79 4 116 "" [1 uses])
(note 79 78 80 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 4 (set (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:794 90 {*movsi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:800 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 82 81 83 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) lex.yy.c:800 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 85)
;;  succ:       5 [50.0%]  (FALLTHRU)
;;              6 [50.0%] 

;; basic block 5, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [50.0%]  (FALLTHRU)
(note 83 82 84 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 5 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:801 90 {*movsi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [50.0%] 
;;              5 [100.0%]  (FALLTHRU)
(code_label 85 84 86 6 118 "" [1 uses])
(note 86 85 87 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:803 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 88 87 89 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) lex.yy.c:803 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 92)
;;  succ:       7 [15.0%]  (FALLTHRU)
;;              8 [85.0%] 

;; basic block 7, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [15.0%]  (FALLTHRU)
(note 89 88 90 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 7 (set (reg/f:DI 349)
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f88bc3c9d80 stdin>) [1 stdin+0 S8 A64])) lex.yy.c:804 89 {*movdi_internal}
     (nil))
(insn 91 90 92 7 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 349)) lex.yy.c:804 89 {*movdi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6 [85.0%] 
;;              7 [100.0%]  (FALLTHRU)
(code_label 92 91 93 8 119 "" [1 uses])
(note 93 92 94 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:806 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 95 94 96 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) lex.yy.c:806 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 99)
;;  succ:       9 [15.0%]  (FALLTHRU)
;;              10 [85.0%] 

;; basic block 9, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 [15.0%]  (FALLTHRU)
(note 96 95 97 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 9 (set (reg/f:DI 350)
        (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f88bc3c9e10 stdout>) [1 stdout+0 S8 A64])) lex.yy.c:807 89 {*movdi_internal}
     (nil))
(insn 98 97 99 9 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (reg/f:DI 350)) lex.yy.c:807 89 {*movdi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       8 [85.0%] 
;;              9 [100.0%]  (FALLTHRU)
(code_label 99 98 100 10 120 "" [1 uses])
(note 100 99 101 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 10 (set (reg/f:DI 99 [ D.6780 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (nil))
(insn 102 101 103 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 99 [ D.6780 ])
            (const_int 0 [0]))) lex.yy.c:809 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 103 102 104 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) lex.yy.c:809 612 {*jcc_1}
     (int_list:REG_BR_PROB 672 (nil))
 -> 111)
;;  succ:       12 [6.7%] 
;;              11 [93.3%]  (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 [93.3%]  (FALLTHRU)
(note 104 103 105 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 11 (set (reg:DI 352)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (nil))
(insn 106 105 107 11 (parallel [
            (set (reg:DI 351 [ D.6781 ])
                (ashift:DI (reg:DI 352)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:809 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 107 106 108 11 (parallel [
            (set (reg/f:DI 102 [ D.6780 ])
                (plus:DI (reg/f:DI 99 [ D.6780 ])
                    (reg:DI 351 [ D.6781 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:809 218 {*adddi_1}
     (nil))
(insn 108 107 109 11 (set (reg/f:DI 103 [ D.6782 ])
        (mem/f:DI (reg/f:DI 102 [ D.6780 ]) [1 *_42+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (nil))
(insn 109 108 110 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 103 [ D.6782 ])
            (const_int 0 [0]))) lex.yy.c:809 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 110 109 111 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) lex.yy.c:809 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 128)
;;  succ:       12 [15.0%]  (FALLTHRU)
;;              13 [85.0%] 

;; basic block 12, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 [15.0%]  (FALLTHRU)
;;              10 [6.7%] 
(code_label 111 110 112 12 121 "" [1 uses])
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(call_insn 113 112 114 12 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:810 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn 114 113 115 12 (set (reg:DI 354)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:811 89 {*movdi_internal}
     (nil))
(insn 115 114 116 12 (parallel [
            (set (reg:DI 353 [ D.6781 ])
                (ashift:DI (reg:DI 354)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:811 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 116 115 117 12 (set (reg/f:DI 355)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:811 89 {*movdi_internal}
     (nil))
(insn 117 116 118 12 (parallel [
            (set (reg/f:DI 107 [ D.6780 ])
                (plus:DI (reg:DI 353 [ D.6781 ])
                    (reg/f:DI 355)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:811 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 353 [ D.6781 ]))
        (nil)))
(insn 118 117 119 12 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) lex.yy.c:812 90 {*movsi_internal}
     (nil))
(insn 119 118 120 12 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:812 89 {*movdi_internal}
     (nil))
(call_insn 120 119 121 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:812 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 121 120 122 12 (set (reg/f:DI 109 [ D.6782 ])
        (reg:DI 0 ax)) lex.yy.c:812 89 {*movdi_internal}
     (nil))
(insn 122 121 123 12 (set (mem/f:DI (reg/f:DI 107 [ D.6780 ]) [1 *_48+0 S8 A64])
        (reg/f:DI 109 [ D.6782 ])) lex.yy.c:812 89 {*movdi_internal}
     (nil))
(insn 123 122 124 12 (set (reg:DI 357)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 124 123 125 12 (parallel [
            (set (reg:DI 356 [ D.6781 ])
                (ashift:DI (reg:DI 357)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 125 124 126 12 (set (reg/f:DI 358)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 126 125 127 12 (parallel [
            (set (reg/f:DI 102 [ D.6780 ])
                (plus:DI (reg:DI 356 [ D.6781 ])
                    (reg/f:DI 358)))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 356 [ D.6781 ]))
        (nil)))
(insn 127 126 128 12 (set (reg/f:DI 103 [ D.6782 ])
        (mem/f:DI (reg/f:DI 102 [ D.6780 ]) [1 *_1030+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11 [85.0%] 
;;              12 [100.0%]  (FALLTHRU)
(code_label 128 127 129 13 122 "" [1 uses])
(note 129 128 130 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 13 (set (reg:SI 359)
        (mem:SI (plus:DI (reg/f:DI 103 [ D.6782 ])
                (const_int 32 [0x20])) [2 _1033->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 131 130 132 13 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 359)) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn 132 131 133 13 (set (reg/f:DI 318 [ D.6783 ])
        (mem/f:DI (plus:DI (reg/f:DI 103 [ D.6782 ])
                (const_int 16 [0x10])) [1 _1033->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 133 132 134 13 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 318 [ D.6783 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 134 133 135 13 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 318 [ D.6783 ])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 135 134 136 13 (set (reg/f:DI 360)
        (mem/f:DI (reg/f:DI 102 [ D.6780 ]) [1 *_1031+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 136 135 137 13 (set (reg/f:DI 361)
        (mem/f:DI (reg/f:DI 360) [1 _249->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 137 136 138 13 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 361)) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn 138 137 139 13 (set (reg:QI 320 [ D.6789 ])
        (mem:QI (reg/f:DI 318 [ D.6783 ]) [0 *_248+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(insn 139 138 140 13 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 320 [ D.6789 ])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)

;; basic block 14, loop depth 0, count 0, freq 64, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 [100.0%]  (FALLTHRU)
;;              3 [100.0%]  (FALLTHRU)
(code_label 140 139 141 14 117 "" [0 uses])
(note 141 140 142 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 14 (set (reg:SI 341 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 143 142 144 14 (set (reg/f:DI 362)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 144 143 145 14 (set (reg:DI 363)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 145 144 146 14 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 363)
                    (const_int 2 [0x2]))
                (reg/f:DI 362)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 146 145 147 14 (set (reg/f:DI 364)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 147 146 148 14 (set (reg:DI 365)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 151 14 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 365)
                    (const_int 2 [0x2]))
                (reg/f:DI 364)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU)

;; basic block 15, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       58 [98.0%]  (FALLTHRU)
(note 151 148 152 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 15 (set (reg:SI 341 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 153 152 154 15 (set (reg/f:DI 366)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 154 153 155 15 (set (reg:DI 367)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 155 154 156 15 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 367)
                    (const_int 2 [0x2]))
                (reg/f:DI 366)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 156 155 157 15 (set (reg/f:DI 368)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 157 156 158 15 (set (reg:DI 369)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 158 157 396 15 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 369)
                    (const_int 2 [0x2]))
                (reg/f:DI 368)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 16, loop depth 1, count 0, freq 17, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       52 [100.0%]  (FALLTHRU)
;;              54 [100.0%]  (FALLTHRU)
;;              53 [100.0%]  (FALLTHRU)
;;              55 [100.0%]  (FALLTHRU)
;;              99 [100.0%]  (FALLTHRU)
;;              56 [100.0%]  (FALLTHRU)
;;              15 [100.0%]  (FALLTHRU)
;;              98 [100.0%]  (FALLTHRU)
(code_label 396 158 159 16 188 "" [0 uses])
(note 159 396 160 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 16 (set (reg/f:DI 318 [ D.6783 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 161 160 162 16 (set (reg:QI 320 [ D.6789 ])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) 93 {*movqi_internal}
     (nil))
;;  succ:       17 [100.0%]  (FALLTHRU,DFS_BACK)

;; basic block 17, loop depth 1, count 0, freq 79, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       14 [100.0%]  (FALLTHRU)
;;              16 [100.0%]  (FALLTHRU,DFS_BACK)
(code_label 162 161 163 17 123 "" [0 uses])
(note 163 162 16 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 16 163 17 17 (set (reg/v:SI 87 [ yy_current_state ])
        (reg:SI 341 [ D.6777 ])) mycc.l:56 90 {*movsi_internal}
     (nil))
(insn 17 16 376 17 (set (reg/v/f:DI 88 [ yy_cp ])
        (reg/f:DI 318 [ D.6783 ])) mycc.l:56 89 {*movdi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)

;; basic block 18, loop depth 2, count 0, freq 81, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 [100.0%]  (FALLTHRU)
;;              50 [100.0%]  (FALLTHRU)
(code_label 376 17 164 18 186 "" [0 uses])
(note 164 376 165 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(debug_insn 165 164 166 18 (var_location:DI D#16 (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:827 -1
     (nil))
(debug_insn 166 165 167 18 (var_location:DI yy_cp (debug_expr:DI D#16)) lex.yy.c:827 -1
     (nil))
(insn 167 166 168 18 (set (mem:QI (reg/v/f:DI 88 [ yy_cp ]) [0 *yy_cp_916+0 S1 A8])
        (reg:QI 320 [ D.6789 ])) lex.yy.c:830 93 {*movqi_internal}
     (nil))
(debug_insn 168 167 169 18 (var_location:DI yy_bp (debug_expr:DI D#16)) lex.yy.c:835 -1
     (nil))
(debug_insn 169 168 170 18 (var_location:SI D#15 (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:837 -1
     (nil))
(debug_insn 170 169 18 18 (var_location:SI yy_current_state (debug_expr:SI D#15)) lex.yy.c:837 -1
     (nil))
(insn 18 170 822 18 (set (reg/v/f:DI 89 [ yy_cp ])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:830 89 {*movdi_internal}
     (nil))
;;  succ:       20 [100.0%]  (FALLTHRU)

;; basic block 19, loop depth 3, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       158 [100.0%]  (FALLTHRU)
;;              111 [100.0%]  (FALLTHRU)
(code_label 822 18 173 19 202 "" [0 uses])
(note 173 822 174 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 19 (set (reg:QI 320 [ D.6789 ])
        (mem:QI (reg/v/f:DI 88 [ yy_cp ]) [0 *yy_cp_147+0 S1 A8])) 93 {*movqi_internal}
     (nil))
(insn 175 174 176 19 (set (reg/f:DI 370)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 176 175 177 19 (set (reg:DI 371)
        (sign_extend:DI (reg/v:SI 87 [ yy_current_state ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 177 176 178 19 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 371)
                    (const_int 2 [0x2]))
                (reg/f:DI 370)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 178 177 179 19 (set (reg/f:DI 372)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 179 178 180 19 (set (reg:DI 373)
        (sign_extend:DI (reg/v:SI 87 [ yy_current_state ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 180 179 181 19 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 373)
                    (const_int 2 [0x2]))
                (reg/f:DI 372)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       20 [100.0%]  (FALLTHRU,DFS_BACK)

;; basic block 20, loop depth 3, count 0, freq 81, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 [100.0%]  (FALLTHRU,DFS_BACK)
;;              18 [100.0%]  (FALLTHRU)
(code_label 181 180 182 20 124 "" [0 uses])
(note 182 181 183 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 184 20 (set (reg:SI 314 [ yy_last_accepting_state_lsm.193 ])
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 184 183 19 20 (set (reg/f:DI 316 [ yy_last_accepting_cpos_lsm.191 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 19 184 20 20 (set (reg:QI 313 [ yy_last_accepting_state_lsm.194 ])
        (const_int 0 [0])) lex.yy.c:830 93 {*movqi_internal}
     (nil))
(insn 20 19 255 20 (set (reg:QI 315 [ yy_last_accepting_cpos_lsm.192 ])
        (const_int 0 [0])) lex.yy.c:830 93 {*movqi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)

;; basic block 21, loop depth 4, count 0, freq 900, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       20 [100.0%]  (FALLTHRU)
;;              29 [100.0%]  (FALLTHRU)
(code_label 255 20 185 21 130 "" [0 uses])
(note 185 255 186 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(debug_insn 186 185 187 21 (var_location:DI yy_bp (reg/v/f:DI 89 [ yy_cp ])) -1
     (nil))
(debug_insn 187 186 188 21 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) -1
     (nil))
(debug_insn 188 187 189 21 (var_location:SI yy_current_state (reg/v:SI 87 [ yy_current_state ])) -1
     (nil))
(insn 189 188 190 21 (set (reg/f:DI 374)
        (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) lex.yy.c:841 89 {*movdi_internal}
     (nil))
(insn 190 189 191 21 (set (reg:SI 375 [ D.6785 ])
        (zero_extend:SI (reg:QI 320 [ D.6789 ]))) lex.yy.c:841 138 {*zero_extendqisi2}
     (nil))
(insn 191 190 192 21 (set (reg:DI 376)
        (zero_extend:DI (reg:SI 375 [ D.6785 ]))) lex.yy.c:841 133 {*zero_extendsidi2}
     (nil))
(insn 192 191 193 21 (set (reg/v:QI 91 [ yy_c ])
        (mem/u/j:QI (plus:DI (reg/f:DI 374)
                (reg:DI 376)) [0 yy_ec S1 A8])) lex.yy.c:841 93 {*movqi_internal}
     (nil))
(debug_insn 193 192 194 21 (var_location:QI yy_c (reg/v:QI 91 [ yy_c ])) lex.yy.c:841 -1
     (nil))
(insn 194 193 195 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 343 [ D.6786 ])
            (const_int 0 [0]))) lex.yy.c:842 2 {*cmphi_ccno_1}
     (nil))
(jump_insn 195 194 196 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 197)
            (pc))) lex.yy.c:842 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 197)
;;  succ:       22 [50.0%]  (FALLTHRU)
;;              23 [50.0%] 

;; basic block 22, loop depth 4, count 0, freq 450, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 [50.0%]  (FALLTHRU)
(note 196 195 21 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 21 196 22 22 (set (reg:SI 314 [ yy_last_accepting_state_lsm.193 ])
        (reg/v:SI 87 [ yy_current_state ])) lex.yy.c:844 90 {*movsi_internal}
     (nil))
(insn 22 21 23 22 (set (reg/f:DI 316 [ yy_last_accepting_cpos_lsm.191 ])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:845 89 {*movdi_internal}
     (nil))
(insn 23 22 24 22 (set (reg:QI 313 [ yy_last_accepting_state_lsm.194 ])
        (const_int 1 [0x1])) lex.yy.c:842 93 {*movqi_internal}
     (nil))
(insn 24 23 197 22 (set (reg:QI 315 [ yy_last_accepting_cpos_lsm.192 ])
        (const_int 1 [0x1])) lex.yy.c:842 93 {*movqi_internal}
     (nil))
;;  succ:       23 [100.0%]  (FALLTHRU)

;; basic block 23, loop depth 4, count 0, freq 900, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 [100.0%]  (FALLTHRU)
;;              21 [50.0%] 
(code_label 197 24 198 23 125 "" [1 uses])
(note 198 197 223 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
;;  succ:       25 [100.0%]  (FALLTHRU)

;; basic block 24, loop depth 5, count 0, freq 9100, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       26 [50.0%] 
;;              27 [100.0%]  (FALLTHRU)
(code_label 223 198 201 24 128 "" [1 uses])
(note 201 223 202 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 24 (set (reg/f:DI 377)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 203 202 204 24 (set (reg:DI 378)
        (sign_extend:DI (reg/v:SI 87 [ yy_current_state ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 24 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 378)
                    (const_int 2 [0x2]))
                (reg/f:DI 377)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       25 [100.0%]  (FALLTHRU,DFS_BACK)

;; basic block 25, loop depth 5, count 0, freq 10000, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       23 [100.0%]  (FALLTHRU)
;;              24 [100.0%]  (FALLTHRU,DFS_BACK)
(code_label 205 204 206 25 126 "" [0 uses])
(note 206 205 207 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(debug_insn 207 206 208 25 (var_location:QI yy_c (reg/v:QI 91 [ yy_c ])) -1
     (nil))
(debug_insn 208 207 209 25 (var_location:SI yy_current_state (reg/v:SI 87 [ yy_current_state ])) -1
     (nil))
(insn 209 208 210 25 (set (reg/f:DI 379)
        (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) lex.yy.c:847 89 {*movdi_internal}
     (nil))
(insn 210 209 211 25 (set (reg:SI 380 [ D.6777 ])
        (zero_extend:SI (reg:HI 321 [ D.6787 ]))) lex.yy.c:847 139 {*zero_extendhisi2}
     (nil))
(insn 211 210 212 25 (set (reg:SI 381 [ D.6777 ])
        (zero_extend:SI (reg/v:QI 91 [ yy_c ]))) lex.yy.c:847 138 {*zero_extendqisi2}
     (nil))
(insn 212 211 213 25 (parallel [
            (set (reg:SI 382 [ D.6777 ])
                (plus:SI (reg:SI 380 [ D.6777 ])
                    (reg:SI 381 [ D.6777 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:847 217 {*addsi_1}
     (nil))
(insn 213 212 214 25 (set (reg:DI 383)
        (sign_extend:DI (reg:SI 382 [ D.6777 ]))) lex.yy.c:847 142 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 25 (set (reg:SI 384 [ D.6777 ])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 383)
                        (const_int 2 [0x2]))
                    (reg/f:DI 379)) [3 yy_chk S2 A16]))) lex.yy.c:847 146 {extendhisi2}
     (nil))
(insn 215 214 216 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ yy_current_state ])
            (reg:SI 384 [ D.6777 ]))) lex.yy.c:847 7 {*cmpsi_1}
     (nil))
(jump_insn 216 215 217 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 234)
            (pc))) lex.yy.c:847 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 234)
;;  succ:       28 [9.0%] 
;;              26 [91.0%]  (FALLTHRU)

;; basic block 26, loop depth 5, count 0, freq 9100, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 [91.0%]  (FALLTHRU)
(note 217 216 218 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 218 217 219 26 (set (reg/f:DI 385)
        (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) lex.yy.c:849 89 {*movdi_internal}
     (nil))
(insn 219 218 220 26 (set (reg:DI 386)
        (sign_extend:DI (reg/v:SI 87 [ yy_current_state ]))) lex.yy.c:849 142 {*extendsidi2_rex64}
     (nil))
(insn 220 219 221 26 (set (reg:HI 118 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 386)
                    (const_int 2 [0x2]))
                (reg/f:DI 385)) [3 yy_def S2 A16])) lex.yy.c:849 92 {*movhi_internal}
     (nil))
(insn 221 220 222 26 (set (reg/v:SI 87 [ yy_current_state ])
        (sign_extend:SI (reg:HI 118 [ D.6786 ]))) lex.yy.c:849 146 {extendhisi2}
     (nil))
(debug_insn 222 221 224 26 (var_location:SI yy_current_state (reg/v:SI 87 [ yy_current_state ])) lex.yy.c:849 -1
     (nil))
(insn 224 222 225 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 87 [ yy_current_state ])
            (const_int 101 [0x65]))) lex.yy.c:850 7 {*cmpsi_1}
     (nil))
(jump_insn 225 224 226 26 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) lex.yy.c:850 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 223)
;;  succ:       27 [50.0%]  (FALLTHRU)
;;              24 [50.0%] 

;; basic block 27, loop depth 5, count 0, freq 4550, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 [50.0%]  (FALLTHRU)
(note 226 225 227 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 27 (set (reg:SI 119 [ D.6785 ])
        (zero_extend:SI (reg/v:QI 91 [ yy_c ]))) lex.yy.c:851 138 {*zero_extendqisi2}
     (nil))
(insn 228 227 229 27 (set (reg/f:DI 387)
        (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) lex.yy.c:851 89 {*movdi_internal}
     (nil))
(insn 229 228 230 27 (set (reg:DI 388)
        (zero_extend:DI (reg:SI 119 [ D.6785 ]))) lex.yy.c:851 133 {*zero_extendsidi2}
     (nil))
(insn 230 229 231 27 (set (reg/v:QI 91 [ yy_c ])
        (mem/u/j:QI (plus:DI (reg/f:DI 387)
                (reg:DI 388)) [0 yy_meta S1 A8])) lex.yy.c:851 93 {*movqi_internal}
     (nil))
(debug_insn 231 230 234 27 (var_location:QI yy_c (reg/v:QI 91 [ yy_c ])) lex.yy.c:851 -1
     (nil))
;;  succ:       24 [100.0%]  (FALLTHRU)

;; basic block 28, loop depth 4, count 0, freq 900, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       25 [9.0%] 
(code_label 234 231 235 28 127 "" [1 uses])
(note 235 234 236 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 28 (set (reg/f:DI 389)
        (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) lex.yy.c:853 89 {*movdi_internal}
     (nil))
(insn 237 236 238 28 (set (reg:SI 390 [ D.6785 ])
        (zero_extend:SI (reg:HI 321 [ D.6787 ]))) lex.yy.c:853 139 {*zero_extendhisi2}
     (nil))
(insn 238 237 239 28 (set (reg:SI 391 [ D.6785 ])
        (zero_extend:SI (reg/v:QI 91 [ yy_c ]))) lex.yy.c:853 138 {*zero_extendqisi2}
     (nil))
(insn 239 238 240 28 (parallel [
            (set (reg:SI 392 [ D.6785 ])
                (plus:SI (reg:SI 390 [ D.6785 ])
                    (reg:SI 391 [ D.6785 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:853 217 {*addsi_1}
     (nil))
(insn 240 239 241 28 (set (reg:DI 393)
        (zero_extend:DI (reg:SI 392 [ D.6785 ]))) lex.yy.c:853 133 {*zero_extendsidi2}
     (nil))
(insn 241 240 242 28 (set (reg/v:SI 87 [ yy_current_state ])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 393)
                        (const_int 2 [0x2]))
                    (reg/f:DI 389)) [3 yy_nxt S2 A16]))) lex.yy.c:853 139 {*zero_extendhisi2}
     (nil))
(debug_insn 242 241 243 28 (var_location:SI yy_current_state (reg/v:SI 87 [ yy_current_state ])) lex.yy.c:853 -1
     (nil))
(insn 243 242 244 28 (parallel [
            (set (reg/v/f:DI 88 [ yy_cp ])
                (plus:DI (reg/v/f:DI 88 [ yy_cp ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:854 218 {*adddi_1}
     (nil))
(debug_insn 244 243 245 28 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:854 -1
     (nil))
(insn 245 244 246 28 (set (reg/f:DI 394)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) lex.yy.c:856 89 {*movdi_internal}
     (nil))
(insn 246 245 247 28 (set (reg:DI 395)
        (sign_extend:DI (reg/v:SI 87 [ yy_current_state ]))) lex.yy.c:856 142 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 28 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 395)
                    (const_int 2 [0x2]))
                (reg/f:DI 394)) [3 yy_base S2 A16])) lex.yy.c:856 92 {*movhi_internal}
     (nil))
(insn 248 247 249 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 321 [ D.6787 ])
            (const_int 190 [0xbe]))) lex.yy.c:856 6 {*cmphi_1}
     (nil))
(jump_insn 249 248 250 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) lex.yy.c:856 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 258)
;;  succ:       30 [9.0%] 
;;              29 [91.0%]  (FALLTHRU)

;; basic block 29, loop depth 4, count 0, freq 819, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 [91.0%]  (FALLTHRU)
(note 250 249 251 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 29 (set (reg:QI 320 [ D.6789 ])
        (mem:QI (reg/v/f:DI 88 [ yy_cp ]) [0 MEM[base: yy_cp_82, offset: 0B]+0 S1 A8])) 93 {*movqi_internal}
     (nil))
(insn 252 251 253 29 (set (reg/f:DI 396)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 253 252 254 29 (set (reg:DI 397)
        (sign_extend:DI (reg/v:SI 87 [ yy_current_state ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 254 253 258 29 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 397)
                    (const_int 2 [0x2]))
                (reg/f:DI 396)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       21 [100.0%]  (FALLTHRU)

;; basic block 30, loop depth 3, count 0, freq 81, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       28 [9.0%] 
(code_label 258 254 259 30 129 "" [1 uses])
(note 259 258 260 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 315 [ yy_last_accepting_cpos_lsm.192 ])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 261 260 262 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 264)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 264)
;;  succ:       32 [100.0%] 
;;              31 (FALLTHRU)

;; basic block 31, loop depth 3, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 (FALLTHRU)
(note 262 261 263 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 31 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/f:DI 316 [ yy_last_accepting_cpos_lsm.191 ])) 89 {*movdi_internal}
     (nil))
;;  succ:       32 [100.0%]  (FALLTHRU)

;; basic block 32, loop depth 3, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       31 [100.0%]  (FALLTHRU)
;;              30 [100.0%] 
(code_label 264 263 265 32 131 "" [1 uses])
(note 265 264 266 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 266 265 267 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 313 [ yy_last_accepting_state_lsm.194 ])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 267 266 268 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 270)
;;  succ:       34 [100.0%] 
;;              33 (FALLTHRU)

;; basic block 33, loop depth 3, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 (FALLTHRU)
(note 268 267 269 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 269 268 270 33 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg:SI 314 [ yy_last_accepting_state_lsm.193 ])) 90 {*movsi_internal}
     (nil))
;;  succ:       34 [100.0%]  (FALLTHRU)

;; basic block 34, loop depth 3, count 0, freq 81, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 [100.0%]  (FALLTHRU)
;;              32 [100.0%] 
(code_label 270 269 271 34 132 "" [1 uses])
(note 271 270 272 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 34 (set (reg/f:DI 398)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 273 272 274 34 (set (reg:DI 399)
        (sign_extend:DI (reg/v:SI 87 [ yy_current_state ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 274 273 390 34 (set (reg:HI 186 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 399)
                    (const_int 2 [0x2]))
                (reg/f:DI 398)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       36 [100.0%]  (FALLTHRU)

;; basic block 35, loop depth 4, count 0, freq 2, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       110 [98.0%] 
;;              51 [100.0%]  (FALLTHRU)
;;              159 [100.0%]  (FALLTHRU)
;;              167 [100.0%]  (FALLTHRU)
(code_label 390 274 277 35 187 "" [1 uses])
(note 277 390 278 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
;;  succ:       36 [100.0%]  (FALLTHRU,DFS_BACK)

;; basic block 36, loop depth 4, count 0, freq 83, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       34 [100.0%]  (FALLTHRU)
;;              35 [100.0%]  (FALLTHRU,DFS_BACK)
(code_label 278 277 279 36 133 "" [0 uses])
(note 279 278 280 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(debug_insn 280 279 281 36 (var_location:DI yy_bp (reg/v/f:DI 89 [ yy_cp ])) -1
     (nil))
(debug_insn 281 280 282 36 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) -1
     (nil))
(debug_insn 282 281 283 36 (var_location:SI yy_current_state (clobber (const_int 0 [0]))) -1
     (nil))
(insn 283 282 284 36 (set (reg/v:SI 90 [ yy_act ])
        (sign_extend:SI (reg:HI 186 [ D.6786 ]))) lex.yy.c:859 146 {extendhisi2}
     (nil))
(debug_insn 284 283 285 36 (var_location:SI yy_act (reg/v:SI 90 [ yy_act ])) lex.yy.c:859 -1
     (nil))
(insn 285 284 286 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 90 [ yy_act ])
            (const_int 0 [0]))) lex.yy.c:860 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 286 285 287 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) lex.yy.c:860 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 296)
;;  succ:       37 [50.0%]  (FALLTHRU)
;;              38 [50.0%] 

;; basic block 37, loop depth 4, count 0, freq 42, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       36 [50.0%]  (FALLTHRU)
(note 287 286 288 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 37 (set (reg/v/f:DI 88 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) lex.yy.c:862 89 {*movdi_internal}
     (nil))
(debug_insn 289 288 290 37 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:862 -1
     (nil))
(debug_insn 290 289 291 37 (var_location:SI yy_current_state (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) lex.yy.c:863 -1
     (nil))
(insn 291 290 292 37 (set (reg/f:DI 400)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) lex.yy.c:864 89 {*movdi_internal}
     (nil))
(insn 292 291 293 37 (set (reg:SI 402)
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) lex.yy.c:864 90 {*movsi_internal}
     (nil))
(insn 293 292 294 37 (set (reg:DI 401)
        (sign_extend:DI (reg:SI 402))) lex.yy.c:864 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 37 (set (reg/v:SI 90 [ yy_act ])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 401)
                        (const_int 2 [0x2]))
                    (reg/f:DI 400)) [3 yy_accept S2 A16]))) lex.yy.c:864 146 {extendhisi2}
     (nil))
(debug_insn 295 294 296 37 (var_location:SI yy_act (reg/v:SI 90 [ yy_act ])) lex.yy.c:864 -1
     (nil))
;;  succ:       38 [100.0%]  (FALLTHRU)

;; basic block 38, loop depth 4, count 0, freq 83, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       36 [50.0%] 
;;              37 [100.0%]  (FALLTHRU)
(code_label 296 295 297 38 134 "" [1 uses])
(note 297 296 298 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(debug_insn 298 297 299 38 (var_location:SI yy_act (reg/v:SI 90 [ yy_act ])) -1
     (nil))
(debug_insn 299 298 300 38 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) -1
     (nil))
(insn 300 299 301 38 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/v/f:DI 89 [ yy_cp ])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 301 300 302 38 (set (reg:DI 126 [ D.6788 ])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 302 301 303 38 (parallel [
            (set (reg:DI 403)
                (minus:DI (reg:DI 126 [ D.6788 ])
                    (reg/v/f:DI 89 [ yy_cp ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:867 261 {*subdi_1}
     (nil))
(insn 303 302 304 38 (set (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])
        (reg:DI 403)) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 304 303 305 38 (set (reg:QI 404)
        (mem:QI (reg/v/f:DI 88 [ yy_cp ]) [0 *yy_cp_6+0 S1 A8])) lex.yy.c:867 93 {*movqi_internal}
     (nil))
(insn 305 304 306 38 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 404)) lex.yy.c:867 93 {*movqi_internal}
     (nil))
(insn 306 305 307 38 (set (mem:QI (reg/v/f:DI 88 [ yy_cp ]) [0 *yy_cp_6+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:867 93 {*movqi_internal}
     (nil))
(insn 307 306 308 38 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 308 307 309 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 90 [ yy_act ])
            (const_int 46 [0x2e]))) lex.yy.c:869 7 {*cmpsi_1}
     (nil))
(jump_insn 309 308 310 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 320)
            (pc))) lex.yy.c:869 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 320)
;;  succ:       39 [72.0%]  (FALLTHRU)
;;              41 [28.0%] 

;; basic block 39, loop depth 4, count 0, freq 60, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       38 [72.0%]  (FALLTHRU)
(note 310 309 311 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 311 310 312 39 (set (reg/f:DI 405)
        (symbol_ref:DI ("_ZL21yy_rule_can_match_eol") [flags 0x2]  <var_decl 0x7f88bc080750 yy_rule_can_match_eol>)) lex.yy.c:869 89 {*movdi_internal}
     (nil))
(insn 312 311 313 39 (set (reg:DI 406)
        (sign_extend:DI (reg/v:SI 90 [ yy_act ]))) lex.yy.c:869 142 {*extendsidi2_rex64}
     (nil))
(insn 313 312 314 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/u:SI (plus:DI (mult:DI (reg:DI 406)
                        (const_int 4 [0x4]))
                    (reg/f:DI 405)) [2 yy_rule_can_match_eol S4 A32])
            (const_int 0 [0]))) lex.yy.c:869 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 314 313 315 39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 320)
            (pc))) lex.yy.c:869 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 320)
;;  succ:       40 [50.0%]  (FALLTHRU)
;;              41 [50.0%] 

;; basic block 40, loop depth 4, count 0, freq 30, maybe hot
;;  prev block 39, next block 41, flags: (RTL)
;;  pred:       39 [50.0%]  (FALLTHRU)
(note 315 314 316 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(debug_insn 316 315 317 40 (var_location:DI yyl (const_int 0 [0])) -1
     (nil))
(insn 317 316 318 40 (set (reg:DI 307 [ D.6781 ])
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) lex.yy.c:872 89 {*movdi_internal}
     (nil))
(insn 318 317 319 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 307 [ D.6781 ])
            (const_int 0 [0]))) lex.yy.c:872 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 319 318 320 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 324)
            (pc))) lex.yy.c:872 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 324)
;;  succ:       41 [9.0%]  (FALLTHRU)
;;              42 [91.0%] 

;; basic block 41, loop depth 4, count 0, freq 83, maybe hot
;;  prev block 40, next block 42, flags: (RTL)
;;  pred:       39 [50.0%] 
;;              45 [9.0%] 
;;              38 [28.0%] 
;;              40 [9.0%]  (FALLTHRU)
(code_label 320 319 321 41 135 "" [3 uses])
(note 321 320 324 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
;;  succ:       47 [100.0%]  (FALLTHRU)

;; basic block 42, loop depth 4, count 0, freq 27, maybe hot
;;  prev block 41, next block 43, flags: (RTL)
;;  pred:       40 [91.0%] 
(code_label 324 321 325 42 136 "" [1 uses])
(note 325 324 326 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 42 (set (reg/f:DI 337 [ D.6783 ])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 327 326 328 42 (set (reg:DI 311 [ ivtmp.210 ])
        (reg/f:DI 337 [ D.6783 ])) 89 {*movdi_internal}
     (nil))
(insn 328 327 343 42 (parallel [
            (set (reg:DI 327 [ D.6796 ])
                (plus:DI (reg/f:DI 337 [ D.6783 ])
                    (reg:DI 307 [ D.6781 ])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
;;  succ:       43 [100.0%]  (FALLTHRU)

;; basic block 43, loop depth 5, count 0, freq 303, maybe hot
;;  prev block 42, next block 44, flags: (RTL)
;;  pred:       42 [100.0%]  (FALLTHRU)
;;              46 [100.0%]  (FALLTHRU)
(code_label 343 328 329 43 139 "" [0 uses])
(note 329 343 330 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(debug_insn 330 329 331 43 (var_location:DI yyl (minus:DI (reg:DI 311 [ ivtmp.210 ])
        (reg/f:DI 337 [ D.6783 ]))) -1
     (nil))
(insn 331 330 332 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (reg:DI 311 [ ivtmp.210 ]) [0 MEM[base: _324, offset: 0B]+0 S1 A8])
            (const_int 10 [0xa]))) lex.yy.c:873 5 {*cmpqi_1}
     (nil))
(jump_insn 332 331 333 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 335)
            (pc))) lex.yy.c:873 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 335)
;;  succ:       44 [28.0%]  (FALLTHRU)
;;              45 [72.0%] 

;; basic block 44, loop depth 5, count 0, freq 85, maybe hot
;;  prev block 43, next block 45, flags: (RTL)
;;  pred:       43 [28.0%]  (FALLTHRU)
(note 333 332 334 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 334 333 335 44 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
                (plus:SI (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:875 217 {*addsi_1}
     (nil))
;;  succ:       45 [100.0%]  (FALLTHRU)

;; basic block 45, loop depth 5, count 0, freq 303, maybe hot
;;  prev block 44, next block 46, flags: (RTL)
;;  pred:       43 [72.0%] 
;;              44 [100.0%]  (FALLTHRU)
(code_label 335 334 336 45 138 "" [1 uses])
(note 336 335 337 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(debug_insn 337 336 339 45 (var_location:DI D#19 (plus:DI (minus:DI (reg:DI 311 [ ivtmp.210 ])
            (reg/f:DI 337 [ D.6783 ]))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 339 337 340 45 (var_location:DI yyl (debug_expr:DI D#19)) -1
     (nil))
(insn 340 339 341 45 (parallel [
            (set (reg:DI 311 [ ivtmp.210 ])
                (plus:DI (reg:DI 311 [ ivtmp.210 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 341 340 342 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 311 [ ivtmp.210 ])
            (reg:DI 327 [ D.6796 ]))) lex.yy.c:872 8 {*cmpdi_1}
     (nil))
(jump_insn 342 341 346 45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 320)
            (pc))) lex.yy.c:872 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 320)
;;  succ:       41 [9.0%] 
;;              46 [91.0%]  (FALLTHRU,DFS_BACK)

;; basic block 46, loop depth 5, count 0, freq 276, maybe hot
;;  prev block 45, next block 47, flags: (RTL)
;;  pred:       45 [91.0%]  (FALLTHRU,DFS_BACK)
(note 346 342 347 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
;;  succ:       43 [100.0%]  (FALLTHRU)

;; basic block 47, loop depth 5, count 0, freq 84, maybe hot
;;  prev block 46, next block 48, flags: (RTL)
;;  pred:       41 [100.0%]  (FALLTHRU)
;;              157 [100.0%]  (FALLTHRU)
(code_label 347 346 348 47 137 "" [0 uses])
(note 348 347 349 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(debug_insn 349 348 350 47 (var_location:SI yy_act (reg/v:SI 90 [ yy_act ])) -1
     (nil))
(insn 350 349 351 47 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 90 [ yy_act ])
            (const_int 49 [0x31]))) lex.yy.c:881 7 {*cmpsi_1}
     (nil))
(jump_insn 351 350 1350 47 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1218)
            (pc))) lex.yy.c:881 612 {*jcc_1}
     (int_list:REG_BR_PROB 222 (nil))
 -> 1218)
;;  succ:       160 [2.2%] 
;;              48 [97.8%]  (FALLTHRU)

;; basic block 48, loop depth 5, count 0, freq 82, maybe hot
;;  prev block 47, next block 49, flags: (RTL)
;;  pred:       47 [97.8%]  (FALLTHRU)
(note 1350 351 352 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 352 1350 353 48 (set (reg:DI 407)
        (zero_extend:DI (reg/v:SI 90 [ yy_act ]))) lex.yy.c:881 133 {*zero_extendsidi2}
     (nil))
(insn 353 352 354 48 (set (reg/f:DI 408)
        (label_ref:DI 357)) lex.yy.c:881 89 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 357 (nil)))
(insn 354 353 355 48 (set (reg:DI 409)
        (mem/u/c:DI (plus:DI (ashift:DI (reg:DI 407)
                    (const_int 3 [0x3]))
                (reg/f:DI 408)) [0  S8 A8])) lex.yy.c:881 89 {*movdi_internal}
     (nil))
(jump_insn 355 354 360 48 (parallel [
            (set (pc)
                (reg:DI 409))
            (use (label_ref 357))
        ]) lex.yy.c:881 658 {*tablejump_1}
     (nil)
 -> 357)
;;  succ:       97 [2.3%] 
;;              51 [2.3%] 
;;              52 [2.3%] 
;;              50 [2.3%] 
;;              57 [2.3%] 
;;              53 [2.3%] 
;;              54 [2.3%] 
;;              55 [2.3%] 
;;              100 [2.3%] 
;;              56 [2.3%] 
;;              99 [2.3%] 
;;              98 [2.3%] 
;;              59 [2.3%] 
;;              62 [2.3%] 
;;              67 [2.3%] 
;;              69 [2.3%] 
;;              71 [2.3%] 
;;              72 [2.3%] 
;;              73 [2.3%] 
;;              161 [2.3%] 
;;              162 [2.3%] 
;;              49 [2.3%] 
;;              75 [2.3%] 
;;              76 [2.3%] 
;;              77 [2.3%] 
;;              78 [2.3%] 
;;              79 [2.3%] 
;;              80 [2.3%] 
;;              81 [2.3%] 
;;              82 [2.3%] 
;;              83 [2.3%] 
;;              84 [2.3%] 
;;              85 [2.3%] 
;;              86 [2.3%] 
;;              87 [2.3%] 
;;              88 [2.3%] 
;;              89 [2.3%] 
;;              90 [2.3%] 
;;              91 [2.3%] 
;;              92 [2.3%] 
;;              93 [2.3%] 
;;              94 [2.3%] 
;;              95 [2.3%] 
;;              96 [2.3%] 

;; basic block 49, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 48, next block 50, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 360 355 361 49 158 "" [1 uses])
(note 361 360 44 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 44 361 364 49 (set (reg:SI 92 [ D.6777 ])
        (const_int 278 [0x116])) mycc.l:77 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 50, loop depth 2, count 0, freq 2, maybe hot
;;  prev block 49, next block 51, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 364 44 365 50 144 "" [5 uses])
(note 365 364 366 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 366 365 367 50 (set (reg:QI 320 [ D.6789 ])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) 93 {*movqi_internal}
     (nil))
(insn 367 366 368 50 (set (reg:SI 342 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 368 367 369 50 (set (reg/f:DI 410)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 369 368 370 50 (set (reg:DI 411)
        (sign_extend:DI (reg:SI 342 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 50 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 411)
                    (const_int 2 [0x2]))
                (reg/f:DI 410)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 371 370 372 50 (set (reg/f:DI 412)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 372 371 373 50 (set (reg:DI 413)
        (sign_extend:DI (reg:SI 342 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 373 372 374 50 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 413)
                    (const_int 2 [0x2]))
                (reg/f:DI 412)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 374 373 375 50 (set (reg/v/f:DI 88 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 375 374 379 50 (set (reg/v:SI 87 [ yy_current_state ])
        (reg:SI 342 [ D.6777 ])) 90 {*movsi_internal}
     (nil))
;;  succ:       18 [100.0%]  (FALLTHRU)

;; basic block 51, loop depth 4, count 0, freq 2, maybe hot
;;  prev block 50, next block 52, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 379 375 380 51 141 "" [1 uses])
(note 380 379 381 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 51 (set (reg:QI 414)
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:885 93 {*movqi_internal}
     (nil))
(insn 382 381 383 51 (set (mem:QI (reg/v/f:DI 88 [ yy_cp ]) [0 *yy_cp_6+0 S1 A8])
        (reg:QI 414)) lex.yy.c:885 93 {*movqi_internal}
     (nil))
(insn 383 382 384 51 (set (reg/v/f:DI 88 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) lex.yy.c:886 89 {*movdi_internal}
     (nil))
(debug_insn 384 383 385 51 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:886 -1
     (nil))
(debug_insn 385 384 386 51 (var_location:SI yy_current_state (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) lex.yy.c:887 -1
     (nil))
(insn 386 385 387 51 (set (reg/f:DI 415)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 387 386 388 51 (set (reg:SI 417)
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 388 387 389 51 (set (reg:DI 416)
        (sign_extend:DI (reg:SI 417))) 142 {*extendsidi2_rex64}
     (nil))
(insn 389 388 393 51 (set (reg:HI 186 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 416)
                    (const_int 2 [0x2]))
                (reg/f:DI 415)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       35 [100.0%]  (FALLTHRU)

;; basic block 52, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 51, next block 53, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 393 389 394 52 143 "" [1 uses])
(note 394 393 395 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 4 52 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 5 [0x5])) mycc.l:43 90 {*movsi_internal}
     (nil))
(insn 4 395 5 52 (set (reg:HI 321 [ D.6787 ])
        (const_int 40 [0x28])) mycc.l:44 92 {*movhi_internal}
     (nil))
(insn 5 4 6 52 (set (reg:HI 343 [ D.6786 ])
        (const_int 2 [0x2])) mycc.l:44 92 {*movhi_internal}
     (nil))
(insn 6 5 399 52 (set (reg:SI 341 [ D.6777 ])
        (const_int 5 [0x5])) mycc.l:44 90 {*movsi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 53, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 52, next block 54, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 399 6 400 53 145 "" [1 uses])
(note 400 399 401 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 401 400 402 53 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("_ZL8line_num") [flags 0x2]  <var_decl 0x7f88bc119b40 line_num>) [2 line_num+0 S4 A32])
                (plus:SI (mem/c:SI (symbol_ref:DI ("_ZL8line_num") [flags 0x2]  <var_decl 0x7f88bc119b40 line_num>) [2 line_num+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:46 217 {*addsi_1}
     (nil))
(insn 402 401 403 53 (set (reg:SI 341 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 403 402 404 53 (set (reg/f:DI 418)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 404 403 405 53 (set (reg:DI 419)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 405 404 406 53 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 419)
                    (const_int 2 [0x2]))
                (reg/f:DI 418)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 406 405 407 53 (set (reg/f:DI 420)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 407 406 408 53 (set (reg:DI 421)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 408 407 411 53 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 421)
                    (const_int 2 [0x2]))
                (reg/f:DI 420)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 54, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 53, next block 55, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 411 408 412 54 146 "" [1 uses])
(note 412 411 413 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 413 412 7 54 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) mycc.l:47 90 {*movsi_internal}
     (nil))
(insn 7 413 8 54 (set (reg:HI 321 [ D.6787 ])
        (const_int 0 [0])) mycc.l:48 92 {*movhi_internal}
     (nil))
(insn 8 7 9 54 (set (reg:HI 343 [ D.6786 ])
        (const_int 0 [0])) mycc.l:48 92 {*movhi_internal}
     (nil))
(insn 9 8 416 54 (set (reg:SI 341 [ D.6777 ])
        (const_int 1 [0x1])) mycc.l:48 90 {*movsi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 55, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 54, next block 56, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 416 9 417 55 147 "" [1 uses])
(note 417 416 418 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 10 55 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 3 [0x3])) mycc.l:49 90 {*movsi_internal}
     (nil))
(insn 10 418 11 55 (set (reg:HI 321 [ D.6787 ])
        (const_int 37 [0x25])) mycc.l:50 92 {*movhi_internal}
     (nil))
(insn 11 10 12 55 (set (reg:HI 343 [ D.6786 ])
        (const_int 7 [0x7])) mycc.l:50 92 {*movhi_internal}
     (nil))
(insn 12 11 421 55 (set (reg:SI 341 [ D.6777 ])
        (const_int 3 [0x3])) mycc.l:50 90 {*movsi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 56, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 55, next block 57, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 421 12 422 56 148 "" [1 uses])
(note 422 421 423 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 56 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f88bbbf2750 *.LC14>)) mycc.l:52 89 {*movdi_internal}
     (nil))
(insn 424 423 425 56 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:52 89 {*movdi_internal}
     (nil))
(call_insn 425 424 426 56 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f88bbf7aca8 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mycc.l:52 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f88bbf7aca8 fopen>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 426 425 427 56 (set (reg/f:DI 136 [ D.6778 ])
        (reg:DI 0 ax)) mycc.l:52 89 {*movdi_internal}
     (nil))
(insn 427 426 428 56 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 136 [ D.6778 ])) mycc.l:52 89 {*movdi_internal}
     (nil))
(insn 428 427 429 56 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) mycc.l:53 90 {*movsi_internal}
     (nil))
(insn 429 428 430 56 (set (reg:DI 5 di)
        (reg/f:DI 136 [ D.6778 ])) mycc.l:53 89 {*movdi_internal}
     (nil))
(call_insn 430 429 431 56 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) mycc.l:53 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 431 430 432 56 (set (reg/f:DI 137 [ D.6782 ])
        (reg:DI 0 ax)) mycc.l:53 89 {*movdi_internal}
     (nil))
(insn 432 431 433 56 (set (reg:DI 5 di)
        (reg/f:DI 137 [ D.6782 ])) mycc.l:53 89 {*movdi_internal}
     (nil))
(call_insn 433 432 434 56 (call (mem:QI (symbol_ref:DI ("_Z19yypush_buffer_stateP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c5e8 yypush_buffer_state>) [0 yypush_buffer_state S1 A8])
        (const_int 0 [0])) mycc.l:53 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z19yypush_buffer_stateP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c5e8 yypush_buffer_state>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 434 433 13 56 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) mycc.l:54 90 {*movsi_internal}
     (nil))
(insn 13 434 14 56 (set (reg:HI 321 [ D.6787 ])
        (const_int 0 [0])) mycc.l:56 92 {*movhi_internal}
     (nil))
(insn 14 13 15 56 (set (reg:HI 343 [ D.6786 ])
        (const_int 0 [0])) mycc.l:56 92 {*movhi_internal}
     (nil))
(insn 15 14 437 56 (set (reg:SI 341 [ D.6777 ])
        (const_int 1 [0x1])) mycc.l:56 90 {*movsi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 57, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 56, next block 58, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 437 15 438 57 185 "" [3 uses])
(note 438 437 439 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(call_insn 439 438 440 57 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) mycc.l:58 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 440 439 441 57 (set (reg/f:DI 168 [ D.6780 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) mycc.l:60 89 {*movdi_internal}
     (nil))
(insn 441 440 442 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 168 [ D.6780 ])
            (const_int 0 [0]))) mycc.l:60 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 442 441 443 57 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1334)
            (pc))) mycc.l:60 612 {*jcc_1}
     (int_list:REG_BR_PROB 200 (nil))
 -> 1334)
;;  succ:       163 [2.0%] 
;;              58 [98.0%]  (FALLTHRU)

;; basic block 58, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 57, next block 59, flags: (RTL)
;;  pred:       57 [98.0%]  (FALLTHRU)
(note 443 442 444 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 444 443 445 58 (set (reg:DI 422)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) mycc.l:60 89 {*movdi_internal}
     (nil))
(insn 445 444 446 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (plus:DI (mult:DI (reg:DI 422)
                        (const_int 8 [0x8]))
                    (reg/f:DI 168 [ D.6780 ])) [1 *_224+0 S8 A64])
            (const_int 0 [0]))) mycc.l:60 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 446 445 451 58 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1338)
            (pc))) mycc.l:60 612 {*jcc_1}
     (int_list:REG_BR_PROB 200 (nil))
 -> 1338)
;;  succ:       164 [2.0%] 
;;              15 [98.0%]  (FALLTHRU)

;; basic block 59, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 58, next block 60, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 451 446 452 59 149 "" [1 uses])
(note 452 451 453 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 453 452 454 59 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:109 89 {*movdi_internal}
     (nil))
(call_insn 454 453 455 59 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6lookupPKc") [flags 0x41]  <function_decl 0x7f88bc12e798 lookup>) [0 lookup S1 A8])
            (const_int 0 [0]))) mycc.l:109 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z6lookupPKc") [flags 0x41]  <function_decl 0x7f88bc12e798 lookup>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 455 454 456 59 (set (reg/f:DI 198 [ D.6792 ])
        (reg:DI 0 ax)) mycc.l:109 89 {*movdi_internal}
     (nil))
(insn 456 455 457 59 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.sym+0 S8 A64])
        (reg/f:DI 198 [ D.6792 ])) mycc.l:109 89 {*movdi_internal}
     (nil))
(insn 457 456 458 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 198 [ D.6792 ])
            (const_int 0 [0]))) mycc.l:111 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 458 457 459 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 469)
            (pc))) mycc.l:111 612 {*jcc_1}
     (int_list:REG_BR_PROB 8987 (nil))
 -> 469)
;;  succ:       60 [10.1%]  (FALLTHRU)
;;              61 [89.9%] 

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (RTL)
;;  pred:       59 [10.1%]  (FALLTHRU)
(note 459 458 460 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 460 459 461 60 (set (reg:SI 4 si)
        (const_int 258 [0x102])) mycc.l:113 90 {*movsi_internal}
     (nil))
(insn 461 460 462 60 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:113 89 {*movdi_internal}
     (nil))
(call_insn 462 461 463 60 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6insertPKci") [flags 0x41]  <function_decl 0x7f88bc12e870 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) mycc.l:113 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z6insertPKci") [flags 0x41]  <function_decl 0x7f88bc12e870 insert>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 463 462 464 60 (set (reg/f:DI 198 [ D.6792 ])
        (reg:DI 0 ax)) mycc.l:113 89 {*movdi_internal}
     (nil))
(insn 464 463 465 60 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.sym+0 S8 A64])
        (reg/f:DI 198 [ D.6792 ])) mycc.l:113 89 {*movdi_internal}
     (nil))
(insn 465 464 466 60 (set (reg:SI 200 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL8localvar") [flags 0x2]  <var_decl 0x7f88bc119ab0 localvar>) [2 localvar+0 S4 A32])) mycc.l:114 90 {*movsi_internal}
     (nil))
(insn 466 465 467 60 (parallel [
            (set (reg:SI 423)
                (plus:SI (reg:SI 200 [ D.6777 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:114 217 {*addsi_1}
     (nil))
(insn 467 466 468 60 (set (mem/c:SI (symbol_ref:DI ("_ZL8localvar") [flags 0x2]  <var_decl 0x7f88bc119ab0 localvar>) [2 localvar+0 S4 A32])
        (reg:SI 423)) mycc.l:114 90 {*movsi_internal}
     (nil))
(insn 468 467 469 60 (set (mem:SI (plus:DI (reg/f:DI 198 [ D.6792 ])
                (const_int 12 [0xc])) [2 _284->localvar+0 S4 A32])
        (reg:SI 200 [ D.6777 ])) mycc.l:114 90 {*movsi_internal}
     (nil))
;;  succ:       61 [100.0%]  (FALLTHRU)

;; basic block 61, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 60, next block 62, flags: (RTL)
;;  pred:       59 [89.9%] 
;;              60 [100.0%]  (FALLTHRU)
(code_label 469 468 470 61 190 "" [1 uses])
(note 470 469 471 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 471 470 474 61 (set (reg:SI 92 [ D.6777 ])
        (mem:SI (plus:DI (reg/f:DI 198 [ D.6792 ])
                (const_int 8 [0x8])) [2 _991->token+0 S4 A64])) mycc.l:117 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 62, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 61, next block 63, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 474 471 475 62 150 "" [1 uses])
(note 475 474 476 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 476 475 477 62 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:137 89 {*movdi_internal}
     (nil))
(insn 477 476 478 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f88bbbf27e0 *.LC15>)) mycc.l:137 89 {*movdi_internal}
     (nil))
(insn 478 477 479 62 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:137 89 {*movdi_internal}
     (nil))
(insn 479 478 480 62 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:137 93 {*movqi_internal}
     (nil))
(call_insn 480 479 481 62 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:137 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 481 480 482 62 (set (reg/f:DI 424)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:139 89 {*movdi_internal}
     (nil))
(insn 482 481 483 62 (set (reg:SI 202 [ D.6785 ])
        (mem/c:SI (reg/f:DI 424) [0 yylval.num+0 S4 A64])) mycc.l:139 90 {*movsi_internal}
     (nil))
(insn 483 482 484 62 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 202 [ D.6785 ])
            (const_int 127 [0x7f]))) mycc.l:139 7 {*cmpsi_1}
     (nil))
(jump_insn 484 483 508 62 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 488)
            (pc))) mycc.l:139 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 488)
;;  succ:       63 [39.0%]  (FALLTHRU)
;;              64 [61.0%] 

;; basic block 63, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 62, next block 64, flags: (RTL)
;;  pred:       62 [39.0%]  (FALLTHRU)
;;              67 [39.0%] 
;;              69 [39.0%] 
(code_label 508 484 485 63 193 "" [2 uses])
(note 485 508 37 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 37 485 488 63 (set (reg:SI 92 [ D.6777 ])
        (const_int 259 [0x103])) mycc.l:140 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 64, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 63, next block 65, flags: (RTL)
;;  pred:       62 [61.0%] 
(code_label 488 37 489 64 191 "" [1 uses])
(note 489 488 490 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 490 489 491 64 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 202 [ D.6785 ])
            (const_int 32367 [0x7e6f]))) mycc.l:142 7 {*cmpsi_1}
     (nil))
(jump_insn 491 490 512 64 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 495)
            (pc))) mycc.l:142 612 {*jcc_1}
     (int_list:REG_BR_PROB 6100 (nil))
 -> 495)
;;  succ:       65 [39.0%]  (FALLTHRU)
;;              66 [61.0%] 

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (RTL)
;;  pred:       64 [39.0%]  (FALLTHRU)
;;              68 [39.0%] 
;;              70 [39.0%] 
(code_label 512 491 492 65 194 "" [2 uses])
(note 492 512 36 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 36 492 495 65 (set (reg:SI 92 [ D.6777 ])
        (const_int 260 [0x104])) mycc.l:143 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 66, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 65, next block 67, flags: (RTL)
;;  pred:       64 [61.0%] 
;;              68 [61.0%]  (FALLTHRU)
;;              70 [61.0%]  (FALLTHRU)
(code_label 495 36 496 66 192 "" [1 uses])
(note 496 495 35 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 35 496 499 66 (set (reg:SI 92 [ D.6777 ])
        (const_int 261 [0x105])) mycc.l:145 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 67, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 66, next block 68, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 499 35 500 67 151 "" [1 uses])
(note 500 499 501 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 501 500 502 67 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 502 501 503 67 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f88bbbf2870 *.LC16>)) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 503 502 504 67 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 504 503 505 67 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:151 93 {*movqi_internal}
     (nil))
(call_insn 505 504 506 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:151 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 506 505 507 67 (set (reg/f:DI 425)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:153 89 {*movdi_internal}
     (nil))
(insn 507 506 509 67 (set (reg:SI 203 [ D.6785 ])
        (mem/c:SI (reg/f:DI 425) [0 yylval.num+0 S4 A64])) mycc.l:153 90 {*movsi_internal}
     (nil))
(insn 509 507 510 67 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 203 [ D.6785 ])
            (const_int 127 [0x7f]))) mycc.l:153 7 {*cmpsi_1}
     (nil))
(jump_insn 510 509 511 67 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 508)
            (pc))) mycc.l:153 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 508)
;;  succ:       63 [39.0%] 
;;              68 [61.0%]  (FALLTHRU)

;; basic block 68, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 67, next block 69, flags: (RTL)
;;  pred:       67 [61.0%]  (FALLTHRU)
(note 511 510 513 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 513 511 514 68 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 203 [ D.6785 ])
            (const_int 32367 [0x7e6f]))) mycc.l:156 7 {*cmpsi_1}
     (nil))
(jump_insn 514 513 518 68 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 512)
            (pc))) mycc.l:156 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 512)
;;  succ:       65 [39.0%] 
;;              66 [61.0%]  (FALLTHRU)

;; basic block 69, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 68, next block 70, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 518 514 519 69 152 "" [1 uses])
(note 519 518 520 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 520 519 521 69 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:123 89 {*movdi_internal}
     (nil))
(insn 521 520 522 69 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f88bbbf2900 *.LC17>)) mycc.l:123 89 {*movdi_internal}
     (nil))
(insn 522 521 523 69 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:123 89 {*movdi_internal}
     (nil))
(insn 523 522 524 69 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:123 93 {*movqi_internal}
     (nil))
(call_insn 524 523 525 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 525 524 526 69 (set (reg/f:DI 426)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:125 89 {*movdi_internal}
     (nil))
(insn 526 525 527 69 (set (reg:SI 204 [ D.6785 ])
        (mem/c:SI (reg/f:DI 426) [0 yylval.num+0 S4 A64])) mycc.l:125 90 {*movsi_internal}
     (nil))
(insn 527 526 528 69 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 204 [ D.6785 ])
            (const_int 127 [0x7f]))) mycc.l:125 7 {*cmpsi_1}
     (nil))
(jump_insn 528 527 529 69 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 508)
            (pc))) mycc.l:125 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 508)
;;  succ:       63 [39.0%] 
;;              70 [61.0%]  (FALLTHRU)

;; basic block 70, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 69, next block 71, flags: (RTL)
;;  pred:       69 [61.0%]  (FALLTHRU)
(note 529 528 530 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 530 529 531 70 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 204 [ D.6785 ])
            (const_int 32367 [0x7e6f]))) mycc.l:128 7 {*cmpsi_1}
     (nil))
(jump_insn 531 530 535 70 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 512)
            (pc))) mycc.l:128 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 512)
;;  succ:       65 [39.0%] 
;;              66 [61.0%]  (FALLTHRU)

;; basic block 71, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 70, next block 72, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 535 531 536 71 153 "" [1 uses])
(note 536 535 537 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 71 (parallel [
            (set (reg:DI 427)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -9 [0xfffffffffffffff7])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:167 218 {*adddi_1}
     (nil))
(insn 538 537 539 71 (set (reg/f:DI 429)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn 539 538 540 71 (parallel [
            (set (reg:DI 428 [ D.6791 ])
                (plus:DI (reg/f:DI 429)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:167 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 540 539 541 71 (set (reg:DI 1 dx)
        (reg:DI 427)) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn 541 540 542 71 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f88bbbf2990 *.LC18>)) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn 542 541 543 71 (set (reg:DI 5 di)
        (reg:DI 428 [ D.6791 ])) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn 543 542 544 71 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:167 93 {*movqi_internal}
     (nil))
(call_insn 544 543 545 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:167 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 545 544 546 71 (set (reg/f:DI 430)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:168 89 {*movdi_internal}
     (nil))
(insn 546 545 547 71 (set (reg:SI 431)
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) mycc.l:168 148 {extendqisi2}
     (nil))
(insn 547 546 548 71 (set (mem/c:SI (reg/f:DI 430) [0 yylval.num+0 S4 A64])
        (reg:SI 431)) mycc.l:168 90 {*movsi_internal}
     (nil))
(debug_insn 548 547 39 71 (var_location:QI c (clobber (const_int 0 [0]))) mycc.l:72 -1
     (nil))
(insn 39 548 551 71 (set (reg:SI 92 [ D.6777 ])
        (const_int 259 [0x103])) mycc.l:72 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 72, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 71, next block 73, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 551 39 552 72 154 "" [1 uses])
(note 552 551 553 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 553 552 554 72 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 554 553 555 72 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f88bbbf2a20 *.LC19>)) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 555 554 556 72 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 556 555 557 72 (set (reg:QI 0 ax)
        (const_int 0 [0])) mycc.l:176 93 {*movqi_internal}
     (nil))
(call_insn 557 556 40 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:176 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 40 557 560 72 (set (reg:SI 92 [ D.6777 ])
        (const_int 262 [0x106])) mycc.l:73 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 73, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 72, next block 74, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 560 40 561 73 155 "" [1 uses])
(note 561 560 562 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 562 561 563 73 (set (reg:DI 176 [ D.6781 ])
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) mycc.l:184 89 {*movdi_internal}
     (nil))
(insn 563 562 564 73 (parallel [
            (set (reg:DI 432 [ D.6781 ])
                (plus:DI (reg:DI 176 [ D.6781 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:184 218 {*adddi_1}
     (nil))
(insn 564 563 565 73 (set (reg:DI 5 di)
        (reg:DI 432 [ D.6781 ])) mycc.l:184 89 {*movdi_internal}
     (nil))
(call_insn 565 564 566 73 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mycc.l:184 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 566 565 567 73 (set (reg/f:DI 433)
        (reg:DI 0 ax)) mycc.l:184 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 433)
        (nil)))
(insn 567 566 568 73 (set (reg/f:DI 206 [ D.6793 ])
        (reg/f:DI 433)) mycc.l:184 89 {*movdi_internal}
     (nil))
(insn 568 567 569 73 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.str+0 S8 A64])
        (reg/f:DI 206 [ D.6793 ])) mycc.l:184 89 {*movdi_internal}
     (nil))
(insn 569 568 570 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 206 [ D.6793 ])
            (const_int 0 [0]))) mycc.l:186 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 570 569 571 73 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1342)
            (pc))) mycc.l:186 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 1342)
;;  succ:       74 [78.3%]  (FALLTHRU)
;;              165 [21.6%] 

;; basic block 74, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 73, next block 75, flags: (RTL)
;;  pred:       73 [78.3%]  (FALLTHRU)
(note 571 570 572 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(debug_insn 572 571 573 74 (var_location:DI __dest (reg/f:DI 206 [ D.6793 ])) mycc.l:188 -1
     (nil))
(debug_insn 573 572 574 74 (var_location:DI __src (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (const_int 1 [0x1]))) mycc.l:188 -1
     (nil))
(insn 574 573 575 74 (set (reg/f:DI 435)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (nil))
(insn 575 574 576 74 (parallel [
            (set (reg:DI 434 [ D.6791 ])
                (plus:DI (reg/f:DI 435)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:110 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
            (const_int 1 [0x1]))
        (nil)))
(insn 576 575 577 74 (set (reg:DI 4 si)
        (reg:DI 434 [ D.6791 ])) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (nil))
(insn 577 576 578 74 (set (reg:DI 5 di)
        (reg/f:DI 206 [ D.6793 ])) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (nil))
(call_insn 578 577 579 74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f88bc2f4510 __builtin_strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/string3.h:110 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f88bc2f4510 __builtin_strcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(debug_insn 579 578 580 74 (var_location:DI __dest (clobber (const_int 0 [0]))) mycc.l:188 -1
     (nil))
(debug_insn 580 579 581 74 (var_location:DI __src (clobber (const_int 0 [0]))) mycc.l:188 -1
     (nil))
(insn 581 580 41 74 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 206 [ D.6793 ])
                    (reg:DI 176 [ D.6781 ]))
                (const_int -2 [0xfffffffffffffffe])) [0 *_301+0 S1 A8])
        (const_int 0 [0])) mycc.l:189 93 {*movqi_internal}
     (nil))
(insn 41 581 584 74 (set (reg:SI 92 [ D.6777 ])
        (const_int 263 [0x107])) mycc.l:74 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 75, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 74, next block 76, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 584 41 585 75 159 "" [1 uses])
(note 585 584 45 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 45 585 588 75 (set (reg:SI 92 [ D.6777 ])
        (const_int 279 [0x117])) mycc.l:78 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 76, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 75, next block 77, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 588 45 589 76 160 "" [1 uses])
(note 589 588 46 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 46 589 592 76 (set (reg:SI 92 [ D.6777 ])
        (const_int 280 [0x118])) mycc.l:79 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 77, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 76, next block 78, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 592 46 593 77 161 "" [1 uses])
(note 593 592 47 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 47 593 596 77 (set (reg:SI 92 [ D.6777 ])
        (const_int 281 [0x119])) mycc.l:80 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 78, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 77, next block 79, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 596 47 597 78 162 "" [1 uses])
(note 597 596 48 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 48 597 600 78 (set (reg:SI 92 [ D.6777 ])
        (const_int 282 [0x11a])) mycc.l:81 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 79, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 78, next block 80, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 600 48 601 79 163 "" [1 uses])
(note 601 600 49 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 49 601 604 79 (set (reg:SI 92 [ D.6777 ])
        (const_int 283 [0x11b])) mycc.l:82 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 80, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 79, next block 81, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 604 49 605 80 164 "" [1 uses])
(note 605 604 50 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 50 605 608 80 (set (reg:SI 92 [ D.6777 ])
        (const_int 284 [0x11c])) mycc.l:83 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 81, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 80, next block 82, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 608 50 609 81 165 "" [1 uses])
(note 609 608 51 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 51 609 612 81 (set (reg:SI 92 [ D.6777 ])
        (const_int 285 [0x11d])) mycc.l:84 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 82, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 81, next block 83, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 612 51 613 82 166 "" [1 uses])
(note 613 612 52 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 52 613 616 82 (set (reg:SI 92 [ D.6777 ])
        (const_int 286 [0x11e])) mycc.l:85 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 83, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 82, next block 84, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 616 52 617 83 167 "" [1 uses])
(note 617 616 53 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 53 617 620 83 (set (reg:SI 92 [ D.6777 ])
        (const_int 287 [0x11f])) mycc.l:86 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 84, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 83, next block 85, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 620 53 621 84 168 "" [1 uses])
(note 621 620 54 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 54 621 624 84 (set (reg:SI 92 [ D.6777 ])
        (const_int 288 [0x120])) mycc.l:87 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 85, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 84, next block 86, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 624 54 625 85 169 "" [1 uses])
(note 625 624 55 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 55 625 628 85 (set (reg:SI 92 [ D.6777 ])
        (const_int 289 [0x121])) mycc.l:88 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 86, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 85, next block 87, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 628 55 629 86 170 "" [1 uses])
(note 629 628 56 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 56 629 632 86 (set (reg:SI 92 [ D.6777 ])
        (const_int 290 [0x122])) mycc.l:89 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 87, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 86, next block 88, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 632 56 633 87 171 "" [1 uses])
(note 633 632 57 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 57 633 636 87 (set (reg:SI 92 [ D.6777 ])
        (const_int 291 [0x123])) mycc.l:90 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 88, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 87, next block 89, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 636 57 637 88 172 "" [1 uses])
(note 637 636 58 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 58 637 640 88 (set (reg:SI 92 [ D.6777 ])
        (const_int 292 [0x124])) mycc.l:91 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 89, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 88, next block 90, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 640 58 641 89 173 "" [1 uses])
(note 641 640 59 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 59 641 644 89 (set (reg:SI 92 [ D.6777 ])
        (const_int 293 [0x125])) mycc.l:92 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 90, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 89, next block 91, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 644 59 645 90 174 "" [1 uses])
(note 645 644 60 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 60 645 648 90 (set (reg:SI 92 [ D.6777 ])
        (const_int 294 [0x126])) mycc.l:93 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 91, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 90, next block 92, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 648 60 649 91 175 "" [1 uses])
(note 649 648 61 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 61 649 652 91 (set (reg:SI 92 [ D.6777 ])
        (const_int 295 [0x127])) mycc.l:94 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 92, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 91, next block 93, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 652 61 653 92 176 "" [1 uses])
(note 653 652 62 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 62 653 656 92 (set (reg:SI 92 [ D.6777 ])
        (const_int 296 [0x128])) mycc.l:95 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 93, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 92, next block 94, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 656 62 657 93 177 "" [1 uses])
(note 657 656 63 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 63 657 660 93 (set (reg:SI 92 [ D.6777 ])
        (const_int 123 [0x7b])) mycc.l:96 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 94, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 93, next block 95, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 660 63 661 94 178 "" [1 uses])
(note 661 660 64 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 64 661 664 94 (set (reg:SI 92 [ D.6777 ])
        (const_int 125 [0x7d])) mycc.l:97 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 95, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 94, next block 96, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 664 64 665 95 179 "" [1 uses])
(note 665 664 65 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 65 665 668 95 (set (reg:SI 92 [ D.6777 ])
        (const_int 91 [0x5b])) mycc.l:98 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 96, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 95, next block 97, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 668 65 669 96 180 "" [1 uses])
(note 669 668 66 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 66 669 672 96 (set (reg:SI 92 [ D.6777 ])
        (const_int 93 [0x5d])) mycc.l:99 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 97, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 96, next block 98, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 672 66 673 97 181 "" [1 uses])
(note 673 672 674 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 674 673 675 97 (set (reg/f:DI 436)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:100 89 {*movdi_internal}
     (nil))
(insn 675 674 678 97 (set (reg:SI 92 [ D.6777 ])
        (sign_extend:SI (mem:QI (reg/f:DI 436) [0 *_238+0 S1 A8]))) mycc.l:100 148 {extendqisi2}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 98, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 97, next block 99, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 678 675 679 98 182 "" [1 uses])
(note 679 678 680 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 680 679 681 98 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f88bbbf2ab0 *.LC20>)) mycc.l:101 89 {*movdi_internal}
     (nil))
(call_insn 681 680 682 98 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7yyerrorPKc") [flags 0x41]  <function_decl 0x7f88bc13b0d8 yyerror>) [0 yyerror S1 A8])
            (const_int 0 [0]))) mycc.l:101 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z7yyerrorPKc") [flags 0x41]  <function_decl 0x7f88bc13b0d8 yyerror>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 682 681 683 98 (set (reg:SI 341 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 683 682 684 98 (set (reg/f:DI 437)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 684 683 685 98 (set (reg:DI 438)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 685 684 686 98 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 438)
                    (const_int 2 [0x2]))
                (reg/f:DI 437)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 686 685 687 98 (set (reg/f:DI 439)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 687 686 688 98 (set (reg:DI 440)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 688 687 691 98 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 440)
                    (const_int 2 [0x2]))
                (reg/f:DI 439)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 99, loop depth 1, count 0, freq 2, maybe hot
;;  prev block 98, next block 100, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 691 688 692 99 183 "" [1 uses])
(note 692 691 693 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 693 692 694 99 (set (reg:DI 2 cx)
        (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 694 693 695 99 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 695 694 696 99 (set (reg:DI 4 si)
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 696 695 697 99 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(call_insn 697 696 698 99 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f88bc2ff0d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) mycc.l:103 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f88bc2ff0d8 fwrite>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 698 697 699 99 (set (reg:SI 341 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 699 698 700 99 (set (reg/f:DI 441)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 700 699 701 99 (set (reg:DI 442)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 701 700 702 99 (set (reg:HI 343 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 442)
                    (const_int 2 [0x2]))
                (reg/f:DI 441)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 702 701 703 99 (set (reg/f:DI 443)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) 89 {*movdi_internal}
     (nil))
(insn 703 702 704 99 (set (reg:DI 444)
        (sign_extend:DI (reg:SI 341 [ D.6777 ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 704 703 707 99 (set (reg:HI 321 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 444)
                    (const_int 2 [0x2]))
                (reg/f:DI 443)) [3 yy_base S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       16 [100.0%]  (FALLTHRU)

;; basic block 100, loop depth 5, count 0, freq 2, maybe hot
;;  prev block 99, next block 101, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 707 704 708 100 184 "" [1 uses])
(note 708 707 709 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(debug_insn 709 708 710 100 (var_location:SI yy_act (const_int 46 [0x2e])) -1
     (nil))
(insn 710 709 711 100 (parallel [
            (set (reg:DI 445 [ D.6788 ])
                (minus:DI (reg:DI 126 [ D.6788 ])
                    (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1140 261 {*subdi_1}
     (nil))
(insn 711 710 712 100 (parallel [
            (set (reg/v:SI 147 [ yy_amount_of_matched_text ])
                (plus:SI (subreg:SI (reg:DI 445 [ D.6788 ]) 0)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1140 217 {*addsi_1}
     (nil))
(debug_insn 712 711 713 100 (var_location:SI yy_amount_of_matched_text (reg/v:SI 147 [ yy_amount_of_matched_text ])) lex.yy.c:1140 -1
     (nil))
(insn 713 712 714 100 (set (reg:QI 446)
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1143 93 {*movqi_internal}
     (nil))
(insn 714 713 715 100 (set (mem:QI (reg/v/f:DI 88 [ yy_cp ]) [0 *yy_cp_6+0 S1 A8])
        (reg:QI 446)) lex.yy.c:1143 93 {*movqi_internal}
     (nil))
(insn 715 714 716 100 (set (reg:DI 448)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn 716 715 717 100 (parallel [
            (set (reg:DI 447 [ D.6781 ])
                (ashift:DI (reg:DI 448)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1146 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 717 716 718 100 (set (reg/f:DI 449)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn 718 717 719 100 (parallel [
            (set (reg/f:DI 152 [ D.6780 ])
                (plus:DI (reg:DI 447 [ D.6781 ])
                    (reg/f:DI 449)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1146 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 447 [ D.6781 ]))
        (nil)))
(insn 719 718 720 100 (set (reg/f:DI 245 [ D.6782 ])
        (mem/f:DI (reg/f:DI 152 [ D.6780 ]) [1 *_142+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn 720 719 721 100 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 60 [0x3c])) [2 _143->yy_buffer_status+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:1146 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 721 720 722 100 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 726)
            (pc))) lex.yy.c:1146 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 726)
;;  succ:       102 [50.0%] 
;;              101 [50.0%]  (FALLTHRU)

;; basic block 101, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 100, next block 102, flags: (RTL)
;;  pred:       100 [50.0%]  (FALLTHRU)
(note 722 721 723 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 723 722 726 101 (set (reg:SI 154 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       103 [100.0%]  (FALLTHRU)

;; basic block 102, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 101, next block 103, flags: (RTL)
;;  pred:       100 [50.0%] 
(code_label 726 723 727 102 195 "" [1 uses])
(note 727 726 728 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 728 727 729 102 (set (reg:SI 154 [ D.6777 ])
        (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 32 [0x20])) [2 _143->yy_n_chars+0 S4 A64])) lex.yy.c:1157 90 {*movsi_internal}
     (nil))
(insn 729 728 730 102 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 154 [ D.6777 ])) lex.yy.c:1157 90 {*movsi_internal}
     (nil))
(insn 730 729 731 102 (set (reg/f:DI 450)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1158 89 {*movdi_internal}
     (nil))
(insn 731 730 732 102 (set (mem/f:DI (reg/f:DI 245 [ D.6782 ]) [1 _143->yy_input_file+0 S8 A64])
        (reg/f:DI 450)) lex.yy.c:1158 89 {*movdi_internal}
     (nil))
(insn 732 731 733 102 (set (reg/f:DI 245 [ D.6782 ])
        (mem/f:DI (reg/f:DI 152 [ D.6780 ]) [1 *_142+0 S8 A64])) lex.yy.c:1159 89 {*movdi_internal}
     (nil))
(insn 733 732 734 102 (set (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 60 [0x3c])) [2 _162->yy_buffer_status+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1159 90 {*movsi_internal}
     (nil))
;;  succ:       103 [100.0%]  (FALLTHRU)

;; basic block 103, loop depth 5, count 0, freq 2, maybe hot
;;  prev block 102, next block 104, flags: (RTL)
;;  pred:       101 [100.0%]  (FALLTHRU)
;;              102 [100.0%]  (FALLTHRU)
(code_label 734 733 735 103 196 "" [0 uses])
(note 735 734 736 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 736 735 737 103 (set (reg/v/f:DI 156 [ dest ])
        (mem/f:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 8 [0x8])) [1 _927->yy_ch_buf+0 S8 A64])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
(insn 737 736 738 103 (set (reg:DI 157 [ D.6790 ])
        (sign_extend:DI (reg:SI 154 [ D.6777 ]))) lex.yy.c:1169 142 {*extendsidi2_rex64}
     (nil))
(insn 738 737 739 103 (parallel [
            (set (reg/f:DI 158 [ D.6783 ])
                (plus:DI (reg/v/f:DI 156 [ dest ])
                    (reg:DI 157 [ D.6790 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1169 218 {*adddi_1}
     (nil))
(insn 739 738 740 103 (set (reg/f:DI 244 [ D.6783 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
(insn 740 739 741 103 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 158 [ D.6783 ])
            (reg/f:DI 244 [ D.6783 ]))) lex.yy.c:1169 8 {*cmpdi_1}
     (nil))
(jump_insn 741 740 742 103 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 825)
            (pc))) lex.yy.c:1169 612 {*jcc_1}
     (int_list:REG_BR_PROB 9800 (nil))
 -> 825)
;;  succ:       104 [2.0%]  (FALLTHRU)
;;              112 [98.0%] 

;; basic block 104, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (RTL)
;;  pred:       103 [2.0%]  (FALLTHRU)
(note 742 741 743 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 743 742 744 104 (set (reg:DI 451 [ D.6790 ])
        (sign_extend:DI (reg/v:SI 147 [ yy_amount_of_matched_text ]))) lex.yy.c:1173 142 {*extendsidi2_rex64}
     (nil))
(insn 744 743 745 104 (set (reg/f:DI 452)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1173 89 {*movdi_internal}
     (nil))
(insn 745 744 746 104 (parallel [
            (set (reg/v/f:DI 88 [ yy_cp ])
                (plus:DI (reg:DI 451 [ D.6790 ])
                    (reg/f:DI 452)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1173 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
            (reg:DI 451 [ D.6790 ]))
        (nil)))
(insn 746 745 747 104 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1173 89 {*movdi_internal}
     (nil))
(call_insn 747 746 748 104 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1175 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 748 747 749 104 (set (reg/v:SI 193 [ yy_current_state ])
        (reg:SI 0 ax)) lex.yy.c:1175 90 {*movsi_internal}
     (nil))
(debug_insn 749 748 750 104 (var_location:SI yy_current_state (reg/v:SI 193 [ yy_current_state ])) lex.yy.c:1175 -1
     (nil))
(debug_insn 750 749 751 104 (var_location:SI yy_current_state (reg/v:SI 193 [ yy_current_state ])) lex.yy.c:1175 -1
     (nil))
(debug_insn 751 750 752 104 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1443 -1
     (nil))
(debug_insn 752 751 753 104 (var_location:QI yy_c (const_int 1 [0x1])) lex.yy.c:1445 -1
     (nil))
(insn 753 752 754 104 (set (reg/f:DI 453)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) lex.yy.c:1446 89 {*movdi_internal}
     (nil))
(insn 754 753 755 104 (set (reg:DI 454)
        (sign_extend:DI (reg/v:SI 193 [ yy_current_state ]))) lex.yy.c:1446 142 {*extendsidi2_rex64}
     (nil))
(insn 755 754 756 104 (set (reg:HI 186 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 454)
                    (const_int 2 [0x2]))
                (reg/f:DI 453)) [3 yy_accept S2 A16])) lex.yy.c:1446 92 {*movhi_internal}
     (nil))
(insn 756 755 757 104 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 186 [ D.6786 ])
            (const_int 0 [0]))) lex.yy.c:1446 2 {*cmphi_ccno_1}
     (nil))
(jump_insn 757 756 758 104 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 761)
            (pc))) lex.yy.c:1446 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 761)
;;  succ:       105 [50.0%]  (FALLTHRU)
;;              106 [50.0%] 

;; basic block 105, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (RTL)
;;  pred:       104 [50.0%]  (FALLTHRU)
(note 758 757 759 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 759 758 760 105 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg/v:SI 193 [ yy_current_state ])) lex.yy.c:1448 90 {*movsi_internal}
     (nil))
(insn 760 759 761 105 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1449 89 {*movdi_internal}
     (nil))
;;  succ:       106 [100.0%]  (FALLTHRU)

;; basic block 106, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (RTL)
;;  pred:       104 [50.0%] 
;;              105 [100.0%]  (FALLTHRU)
(code_label 761 760 762 106 198 "" [1 uses])
(note 762 761 763 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(debug_insn 763 762 764 106 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 764 763 765 106 (var_location:SI yy_current_state (reg/v:SI 193 [ yy_current_state ])) -1
     (nil))
(insn 765 764 766 106 (set (reg/f:DI 455)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) lex.yy.c:1451 89 {*movdi_internal}
     (nil))
(insn 766 765 767 106 (set (reg:DI 456)
        (sign_extend:DI (reg/v:SI 193 [ yy_current_state ]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn 767 766 768 106 (set (reg:HI 187 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 456)
                    (const_int 2 [0x2]))
                (reg/f:DI 455)) [3 yy_base S2 A16])) lex.yy.c:1451 92 {*movhi_internal}
     (nil))
(insn 768 767 769 106 (set (reg/f:DI 457)
        (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) lex.yy.c:1451 89 {*movdi_internal}
     (nil))
(insn 769 768 770 106 (set (reg:SI 458 [ D.6777 ])
        (zero_extend:SI (reg:HI 187 [ D.6787 ]))) lex.yy.c:1451 139 {*zero_extendhisi2}
     (nil))
(insn 770 769 771 106 (parallel [
            (set (reg:SI 459 [ D.6777 ])
                (plus:SI (reg:SI 458 [ D.6777 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1451 217 {*addsi_1}
     (nil))
(insn 771 770 772 106 (set (reg:DI 460)
        (sign_extend:DI (reg:SI 459 [ D.6777 ]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn 772 771 773 106 (set (reg:SI 461 [ D.6777 ])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 460)
                        (const_int 2 [0x2]))
                    (reg/f:DI 457)) [3 yy_chk S2 A16]))) lex.yy.c:1451 146 {extendhisi2}
     (nil))
(insn 773 772 774 106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 193 [ yy_current_state ])
            (reg:SI 461 [ D.6777 ]))) lex.yy.c:1451 7 {*cmpsi_1}
     (nil))
(jump_insn 774 773 775 106 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 797)
            (pc))) lex.yy.c:1451 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 797)
;;  succ:       109 [9.0%] 
;;              107 [91.0%]  (FALLTHRU)

;; basic block 107, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (RTL)
;;  pred:       106 [91.0%]  (FALLTHRU)
(note 775 774 789 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
;;  succ:       108 [100.0%]  (FALLTHRU)

;; basic block 108, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 107, next block 109, flags: (RTL)
;;  pred:       107 [100.0%]  (FALLTHRU)
;;              108 [91.0%]  (DFS_BACK)
(code_label 789 775 776 108 200 "" [1 uses])
(note 776 789 777 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(debug_insn 777 776 778 108 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 778 777 779 108 (var_location:SI yy_current_state (reg/v:SI 193 [ yy_current_state ])) -1
     (nil))
(insn 779 778 780 108 (set (reg/f:DI 462)
        (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) lex.yy.c:1453 89 {*movdi_internal}
     (nil))
(insn 780 779 781 108 (set (reg:DI 463)
        (sign_extend:DI (reg/v:SI 193 [ yy_current_state ]))) lex.yy.c:1453 142 {*extendsidi2_rex64}
     (nil))
(insn 781 780 782 108 (set (reg:HI 192 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 463)
                    (const_int 2 [0x2]))
                (reg/f:DI 462)) [3 yy_def S2 A16])) lex.yy.c:1453 92 {*movhi_internal}
     (nil))
(insn 782 781 784 108 (set (reg/v:SI 193 [ yy_current_state ])
        (sign_extend:SI (reg:HI 192 [ D.6786 ]))) lex.yy.c:1453 146 {extendhisi2}
     (nil))
(debug_insn 784 782 785 108 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 785 784 786 108 (var_location:SI yy_current_state (reg/v:SI 193 [ yy_current_state ])) -1
     (nil))
(insn 786 785 787 108 (set (reg/f:DI 464)
        (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) lex.yy.c:1451 89 {*movdi_internal}
     (nil))
(insn 787 786 788 108 (set (reg:DI 465)
        (sign_extend:DI (reg/v:SI 193 [ yy_current_state ]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn 788 787 790 108 (set (reg:HI 187 [ D.6787 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 465)
                    (const_int 2 [0x2]))
                (reg/f:DI 464)) [3 yy_base S2 A16])) lex.yy.c:1451 92 {*movhi_internal}
     (nil))
(insn 790 788 791 108 (set (reg/f:DI 466)
        (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) lex.yy.c:1451 89 {*movdi_internal}
     (nil))
(insn 791 790 792 108 (set (reg:SI 467 [ D.6777 ])
        (zero_extend:SI (reg:HI 187 [ D.6787 ]))) lex.yy.c:1451 139 {*zero_extendhisi2}
     (nil))
(insn 792 791 793 108 (parallel [
            (set (reg:SI 468 [ D.6777 ])
                (plus:SI (reg:SI 467 [ D.6777 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1451 217 {*addsi_1}
     (nil))
(insn 793 792 794 108 (set (reg:DI 469)
        (sign_extend:DI (reg:SI 468 [ D.6777 ]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn 794 793 795 108 (set (reg:SI 470 [ D.6777 ])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 469)
                        (const_int 2 [0x2]))
                    (reg/f:DI 466)) [3 yy_chk S2 A16]))) lex.yy.c:1451 146 {extendhisi2}
     (nil))
(insn 795 794 796 108 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 470 [ D.6777 ])
            (reg/v:SI 193 [ yy_current_state ]))) lex.yy.c:1451 7 {*cmpsi_1}
     (nil))
(jump_insn 796 795 797 108 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 789)
            (pc))) lex.yy.c:1451 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 789)
;;  succ:       109 [9.0%]  (FALLTHRU)
;;              108 [91.0%]  (DFS_BACK)

;; basic block 109, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 108, next block 110, flags: (RTL)
;;  pred:       108 [9.0%]  (FALLTHRU)
;;              106 [9.0%] 
(code_label 797 796 798 109 199 "" [1 uses])
(note 798 797 799 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 799 798 800 109 (set (reg/f:DI 471)
        (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) lex.yy.c:1457 89 {*movdi_internal}
     (nil))
(insn 800 799 801 109 (set (reg:SI 472 [ D.6785 ])
        (zero_extend:SI (reg:HI 187 [ D.6787 ]))) lex.yy.c:1457 139 {*zero_extendhisi2}
     (nil))
(insn 801 800 802 109 (parallel [
            (set (reg:SI 473 [ D.6785 ])
                (plus:SI (reg:SI 472 [ D.6785 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1457 217 {*addsi_1}
     (nil))
(insn 802 801 803 109 (set (reg:DI 474)
        (zero_extend:DI (reg:SI 473 [ D.6785 ]))) lex.yy.c:1457 133 {*zero_extendsidi2}
     (nil))
(insn 803 802 804 109 (set (reg/v:SI 87 [ yy_current_state ])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 474)
                        (const_int 2 [0x2]))
                    (reg/f:DI 471)) [3 yy_nxt S2 A16]))) lex.yy.c:1457 139 {*zero_extendhisi2}
     (nil))
(debug_insn 804 803 805 109 (var_location:SI yy_current_state (reg/v:SI 87 [ yy_current_state ])) lex.yy.c:1457 -1
     (nil))
(debug_insn 805 804 806 109 (var_location:QI D#1 (eq:QI (reg/v:SI 87 [ yy_current_state ])
        (const_int 101 [0x65]))) lex.yy.c:1458 -1
     (nil))
(debug_insn 806 805 807 109 (var_location:SI yy_is_jam (zero_extend:SI (debug_expr:QI D#1))) lex.yy.c:1458 -1
     (nil))
(insn 807 806 808 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ yy_current_state ])
            (const_int 101 [0x65]))) lex.yy.c:1460 7 {*cmpsi_1}
     (nil))
(jump_insn 808 807 809 109 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1230)
            (pc))) lex.yy.c:1460 612 {*jcc_1}
     (int_list:REG_BR_PROB 2800 (nil))
 -> 1230)
;;  succ:       110 [72.0%]  (FALLTHRU)
;;              167 [28.0%] 

;; basic block 110, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 109, next block 111, flags: (RTL)
;;  pred:       109 [72.0%]  (FALLTHRU)
(note 809 808 810 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(debug_insn 810 809 811 110 (var_location:SI yy_current_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 811 810 812 110 (var_location:DI yy_cp (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 812 811 813 110 (var_location:SI yy_next_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(insn 813 812 814 110 (set (reg/v/f:DI 89 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1188 89 {*movdi_internal}
     (nil))
(debug_insn 814 813 815 110 (var_location:DI yy_bp (reg/v/f:DI 89 [ yy_cp ])) lex.yy.c:1188 -1
     (nil))
(insn 815 814 816 110 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 87 [ yy_current_state ])
            (const_int 0 [0]))) lex.yy.c:1190 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 816 815 817 110 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 390)
            (pc))) lex.yy.c:1190 612 {*jcc_1}
     (int_list:REG_BR_PROB 9800 (nil))
 -> 390)
;;  succ:       111 [2.0%]  (FALLTHRU)
;;              35 [98.0%] 

;; basic block 111, loop depth 3, count 0, freq 0, maybe hot
;;  prev block 110, next block 112, flags: (RTL)
;;  pred:       110 [2.0%]  (FALLTHRU)
(note 817 816 818 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(insn 818 817 819 111 (parallel [
            (set (reg/v/f:DI 88 [ yy_cp ])
                (plus:DI (reg/v/f:DI 88 [ yy_cp ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1193 218 {*adddi_1}
     (nil))
(insn 819 818 820 111 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1193 89 {*movdi_internal}
     (nil))
(debug_insn 820 819 821 111 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1193 -1
     (nil))
(debug_insn 821 820 825 111 (var_location:SI yy_current_state (reg/v:SI 87 [ yy_current_state ])) lex.yy.c:1194 -1
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)

;; basic block 112, loop depth 5, count 0, freq 2, maybe hot
;;  prev block 111, next block 113, flags: (RTL)
;;  pred:       103 [98.0%] 
(code_label 825 821 826 112 197 "" [1 uses])
(note 826 825 827 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(debug_insn 827 826 828 112 (var_location:DI dest (reg/v/f:DI 156 [ dest ])) lex.yy.c:1276 -1
     (nil))
(insn 828 827 829 112 (set (reg/v/f:DI 213 [ source ])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1277 89 {*movdi_internal}
     (nil))
(debug_insn 829 828 830 112 (var_location:DI source (reg/v/f:DI 213 [ source ])) lex.yy.c:1277 -1
     (nil))
(insn 830 829 831 112 (parallel [
            (set (reg:DI 475 [ D.6790 ])
                (plus:DI (reg:DI 157 [ D.6790 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1281 218 {*adddi_1}
     (nil))
(insn 831 830 832 112 (parallel [
            (set (reg:DI 476 [ D.6783 ])
                (plus:DI (reg/v/f:DI 156 [ dest ])
                    (reg:DI 475 [ D.6790 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1281 218 {*adddi_1}
     (nil))
(insn 832 831 833 112 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 244 [ D.6783 ])
            (reg:DI 476 [ D.6783 ]))) lex.yy.c:1281 8 {*cmpdi_1}
     (nil))
(jump_insn 833 832 834 112 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 838)
            (pc))) lex.yy.c:1281 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 838)
;;  succ:       113 [0.0%]  (FALLTHRU)
;;              114 [100.0%] 

;; basic block 113, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 112, next block 114, flags: (RTL)
;;  pred:       112 [0.0%]  (FALLTHRU)
(note 834 833 835 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 835 834 836 113 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f88bbbf2b40 *.LC21>)) lex.yy.c:1283 89 {*movdi_internal}
     (nil))
(call_insn 836 835 838 113 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1283 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 114, loop depth 5, count 0, freq 2, maybe hot
;;  prev block 113, next block 115, flags: (RTL)
;;  pred:       112 [100.0%] 
(code_label 838 836 839 114 203 "" [1 uses])
(note 839 838 840 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 840 839 841 114 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 56 [0x38])) [2 _927->yy_fill_buffer+0 S4 A64])
            (const_int 0 [0]))) lex.yy.c:1285 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 841 840 842 114 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 849)
            (pc))) lex.yy.c:1285 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 849)
;;  succ:       115 [50.0%]  (FALLTHRU)
;;              117 [50.0%] 

;; basic block 115, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 114, next block 116, flags: (RTL)
;;  pred:       114 [50.0%]  (FALLTHRU)
(note 842 841 843 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn 843 842 844 115 (parallel [
            (set (reg:DI 477 [ D.6788 ])
                (minus:DI (reg/f:DI 244 [ D.6783 ])
                    (reg/v/f:DI 213 [ source ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1287 261 {*subdi_1}
     (nil))
(insn 844 843 845 115 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 477 [ D.6788 ])
            (const_int 1 [0x1]))) lex.yy.c:1287 8 {*cmpdi_1}
     (nil))
(jump_insn 845 844 848 115 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1344)
            (pc))) lex.yy.c:1287 612 {*jcc_1}
     (int_list:REG_BR_PROB 1608 (nil))
 -> 1344)
;;  succ:       156 [16.1%] 
;;              116 [83.9%]  (FALLTHRU)

;; basic block 116, loop depth 4, count 0, freq 1, maybe hot
;;  prev block 115, next block 117, flags: (RTL)
;;  pred:       115 [83.9%]  (FALLTHRU)
(note 848 845 34 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 34 848 849 116 (set (reg/v/f:DI 88 [ yy_cp ])
        (reg/f:DI 158 [ D.6783 ])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
;;  succ:       159 [100.0%]  (FALLTHRU)

;; basic block 117, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 116, next block 118, flags: (RTL)
;;  pred:       114 [50.0%] 
(code_label 849 34 850 117 204 "" [1 uses])
(note 850 849 851 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 851 850 852 117 (parallel [
            (set (reg:DI 478 [ D.6788 ])
                (minus:DI (reg/f:DI 244 [ D.6783 ])
                    (reg/v/f:DI 213 [ source ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1307 261 {*subdi_1}
     (nil))
(insn 852 851 853 117 (parallel [
            (set (reg/v:DI 224 [ number_to_move ])
                (plus:DI (reg:DI 478 [ D.6788 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1307 218 {*adddi_1}
     (nil))
(debug_insn 853 852 855 117 (var_location:DI number_to_move (reg/v:DI 224 [ number_to_move ])) lex.yy.c:1307 -1
     (nil))
(debug_insn 855 853 856 117 (var_location:DI i (const_int 0 [0])) -1
     (nil))
(debug_insn 856 855 857 117 (var_location:DI source (reg/v/f:DI 213 [ source ])) -1
     (nil))
(debug_insn 857 856 858 117 (var_location:DI dest (reg/v/f:DI 156 [ dest ])) -1
     (nil))
(insn 858 857 859 117 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 224 [ number_to_move ])
            (const_int 0 [0]))) lex.yy.c:1309 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 859 858 1345 117 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 880)
            (pc))) lex.yy.c:1309 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 880)
;;  succ:       121 [9.0%] 
;;              118 [91.0%]  (FALLTHRU)

;; basic block 118, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 117, next block 119, flags: (RTL)
;;  pred:       117 [91.0%]  (FALLTHRU)
(note 1345 859 25 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 25 1345 875 118 (set (reg/v:DI 227 [ i ])
        (const_int 0 [0])) lex.yy.c:1309 89 {*movdi_internal}
     (nil))
;;  succ:       119 [100.0%]  (FALLTHRU)

;; basic block 119, loop depth 6, count 0, freq 9, maybe hot
;;  prev block 118, next block 120, flags: (RTL)
;;  pred:       118 [100.0%]  (FALLTHRU)
;;              119 [91.0%]  (DFS_BACK)
(code_label 875 25 860 119 208 "" [1 uses])
(note 860 875 861 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(debug_insn 861 860 864 119 (var_location:DI i (reg/v:DI 227 [ i ])) -1
     (nil))
(debug_insn 864 861 865 119 (var_location:DI D#17 (plus:DI (plus:DI (reg/v/f:DI 156 [ dest ])
            (reg/v:DI 227 [ i ]))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 865 864 866 119 (var_location:DI dest (debug_expr:DI D#17)) lex.yy.c:1310 -1
     (nil))
(debug_insn 866 865 867 119 (var_location:DI D#18 (plus:DI (plus:DI (reg/v/f:DI 213 [ source ])
            (reg/v:DI 227 [ i ]))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 867 866 868 119 (var_location:DI source (debug_expr:DI D#18)) lex.yy.c:1310 -1
     (nil))
(insn 868 867 869 119 (set (reg:QI 226 [ D.6789 ])
        (mem:QI (plus:DI (reg/v/f:DI 213 [ source ])
                (reg/v:DI 227 [ i ])) [0 MEM[base: source_307, index: i_563, offset: 0B]+0 S1 A8])) lex.yy.c:1310 93 {*movqi_internal}
     (nil))
(insn 869 868 870 119 (set (mem:QI (plus:DI (reg/v/f:DI 156 [ dest ])
                (reg/v:DI 227 [ i ])) [0 MEM[base: dest_168, index: i_563, offset: 0B]+0 S1 A8])
        (reg:QI 226 [ D.6789 ])) lex.yy.c:1310 93 {*movqi_internal}
     (nil))
(insn 870 869 872 119 (parallel [
            (set (reg/v:DI 227 [ i ])
                (plus:DI (reg/v:DI 227 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1309 218 {*adddi_1}
     (nil))
(debug_insn 872 870 873 119 (var_location:DI i (reg/v:DI 227 [ i ])) -1
     (nil))
(debug_insn 873 872 874 119 (var_location:DI source (debug_expr:DI D#18)) -1
     (nil))
(debug_insn 874 873 876 119 (var_location:DI dest (debug_expr:DI D#17)) -1
     (nil))
(insn 876 874 877 119 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 224 [ number_to_move ])
            (reg/v:DI 227 [ i ]))) lex.yy.c:1309 8 {*cmpdi_1}
     (nil))
(jump_insn 877 876 878 119 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 875)
            (pc))) lex.yy.c:1309 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 875)
;;  succ:       120 [9.0%]  (FALLTHRU)
;;              119 [91.0%]  (DFS_BACK)

;; basic block 120, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 119, next block 121, flags: (RTL)
;;  pred:       119 [9.0%]  (FALLTHRU)
(note 878 877 879 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 879 878 880 120 (set (reg/f:DI 245 [ D.6782 ])
        (mem/f:DI (reg/f:DI 152 [ D.6780 ]) [1 *_142+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       121 [100.0%]  (FALLTHRU)

;; basic block 121, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 120, next block 122, flags: (RTL)
;;  pred:       120 [100.0%]  (FALLTHRU)
;;              117 [9.0%] 
(code_label 880 879 881 121 207 "" [1 uses])
(note 881 880 882 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 882 881 883 121 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 60 [0x3c])) [2 _944->yy_buffer_status+0 S4 A32])
            (const_int 2 [0x2]))) lex.yy.c:1312 7 {*cmpsi_1}
     (nil))
(jump_insn 883 882 884 121 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 889)
            (pc))) lex.yy.c:1312 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 889)
;;  succ:       122 [28.0%]  (FALLTHRU)
;;              123 [72.0%] 

;; basic block 122, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 121, next block 123, flags: (RTL)
;;  pred:       121 [28.0%]  (FALLTHRU)
(note 884 883 885 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 885 884 886 122 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1316 90 {*movsi_internal}
     (nil))
(insn 886 885 889 122 (set (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 32 [0x20])) [2 _944->yy_n_chars+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1316 90 {*movsi_internal}
     (nil))
;;  succ:       145 [100.0%]  (FALLTHRU)

;; basic block 123, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 122, next block 124, flags: (RTL)
;;  pred:       121 [72.0%] 
(code_label 889 886 890 123 209 "" [1 uses])
(note 890 889 891 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 891 890 892 123 (set (reg:DI 480)
        (mem:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 24 [0x18])) [4 _944->yy_buf_size+0 S8 A64])) lex.yy.c:1321 89 {*movdi_internal}
     (nil))
(insn 892 891 893 123 (parallel [
            (set (reg:DI 479 [ D.6781 ])
                (plus:DI (reg:DI 480)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1321 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 24 [0x18])) [4 _944->yy_buf_size+0 S8 A64])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 893 892 895 123 (parallel [
            (set (reg/v:DI 230 [ num_to_read ])
                (minus:DI (reg:DI 479 [ D.6781 ])
                    (reg/v:DI 224 [ number_to_move ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1321 261 {*subdi_1}
     (nil))
(debug_insn 895 893 896 123 (var_location:DI num_to_read (reg/v:DI 230 [ num_to_read ])) -1
     (nil))
(insn 896 895 897 123 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 230 [ num_to_read ])
            (const_int 0 [0]))) lex.yy.c:1323 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 897 896 898 123 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 967)
            (pc))) lex.yy.c:1323 612 {*jcc_1}
     (int_list:REG_BR_PROB 450 (nil))
 -> 967)
;;  succ:       133 [4.5%] 
;;              124 [95.5%]  (FALLTHRU)

;; basic block 124, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 123, next block 125, flags: (RTL)
;;  pred:       123 [95.5%]  (FALLTHRU)
(note 898 897 964 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
;;  succ:       125 [100.0%]  (FALLTHRU)

;; basic block 125, loop depth 6, count 0, freq 14, maybe hot
;;  prev block 124, next block 126, flags: (RTL)
;;  pred:       124 [100.0%]  (FALLTHRU)
;;              132 [95.5%]  (DFS_BACK)
(code_label 964 898 899 125 217 "" [1 uses])
(note 899 964 900 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(debug_insn 900 899 901 125 (var_location:DI num_to_read (const_int 0 [0])) -1
     (nil))
(debug_insn 901 900 902 125 (var_location:DI D#14 (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 902 901 903 125 (var_location:DI D#13 (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 903 902 904 125 (var_location:DI D#12 (ashift:DI (debug_expr:DI D#13)
        (const_int 3 [0x3]))) lex.yy.c:1327 -1
     (nil))
(debug_insn 904 903 905 125 (var_location:DI D#11 (plus:DI (debug_expr:DI D#14)
        (debug_expr:DI D#12))) lex.yy.c:1327 -1
     (nil))
(debug_insn 905 904 906 125 (var_location:DI D#10 (mem/f:DI (debug_expr:DI D#11) [0 +0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 906 905 907 125 (var_location:DI b (debug_expr:DI D#10)) lex.yy.c:1327 -1
     (nil))
(insn 907 906 908 125 (set (reg/f:DI 232 [ D.6783 ])
        (mem/f:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])) lex.yy.c:1330 89 {*movdi_internal}
     (nil))
(insn 908 907 909 125 (parallel [
            (set (reg:DI 481 [ D.6788 ])
                (minus:DI (reg/f:DI 244 [ D.6783 ])
                    (reg/f:DI 232 [ D.6783 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1330 261 {*subdi_1}
     (nil))
(insn 909 908 910 125 (set (reg/v:SI 235 [ yy_c_buf_p_offset ])
        (subreg:SI (reg:DI 481 [ D.6788 ]) 0)) lex.yy.c:1330 90 {*movsi_internal}
     (nil))
(debug_insn 910 909 911 125 (var_location:SI yy_c_buf_p_offset (reg/v:SI 235 [ yy_c_buf_p_offset ])) lex.yy.c:1330 -1
     (nil))
(insn 911 910 912 125 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 36 [0x24])) [2 _986->yy_is_our_buffer+0 S4 A32])
            (const_int 0 [0]))) lex.yy.c:1332 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 912 911 913 125 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 945)
            (pc))) lex.yy.c:1332 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 945)
;;  succ:       126 [50.0%]  (FALLTHRU)
;;              130 [50.0%] 

;; basic block 126, loop depth 6, count 0, freq 7, maybe hot
;;  prev block 125, next block 127, flags: (RTL)
;;  pred:       125 [50.0%]  (FALLTHRU)
(note 913 912 914 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn 914 913 915 126 (set (reg:DI 237 [ D.6781 ])
        (mem:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])) lex.yy.c:1334 89 {*movdi_internal}
     (nil))
(insn 915 914 916 126 (parallel [
            (set (reg/v:DI 238 [ new_size ])
                (ashift:DI (reg:DI 237 [ D.6781 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1334 512 {*ashldi3_1}
     (nil))
(debug_insn 916 915 917 126 (var_location:DI new_size (reg/v:DI 238 [ new_size ])) lex.yy.c:1334 -1
     (nil))
(insn 917 916 918 126 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 238 [ new_size ])
            (const_int 0 [0]))) lex.yy.c:1336 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 918 917 919 126 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 925)
            (pc))) lex.yy.c:1336 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 925)
;;  succ:       127 [50.0%]  (FALLTHRU)
;;              128 [50.0%] 

;; basic block 127, loop depth 6, count 0, freq 3, maybe hot
;;  prev block 126, next block 128, flags: (RTL)
;;  pred:       126 [50.0%]  (FALLTHRU)
(note 919 918 920 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 920 919 921 127 (parallel [
            (set (reg:DI 482 [ D.6781 ])
                (lshiftrt:DI (reg:DI 237 [ D.6781 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1337 546 {*lshrdi3_1}
     (nil))
(insn 921 920 922 127 (parallel [
            (set (reg:DI 240 [ D.6781 ])
                (plus:DI (reg:DI 482 [ D.6781 ])
                    (reg:DI 237 [ D.6781 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1337 218 {*adddi_1}
     (nil))
(insn 922 921 925 127 (set (mem:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])
        (reg:DI 240 [ D.6781 ])) lex.yy.c:1337 89 {*movdi_internal}
     (nil))
;;  succ:       129 [100.0%]  (FALLTHRU)

;; basic block 128, loop depth 6, count 0, freq 3, maybe hot
;;  prev block 127, next block 129, flags: (RTL)
;;  pred:       126 [50.0%] 
(code_label 925 922 926 128 213 "" [1 uses])
(note 926 925 927 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 927 926 26 128 (set (mem:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])
        (reg/v:DI 238 [ new_size ])) lex.yy.c:1339 89 {*movdi_internal}
     (nil))
(insn 26 927 928 128 (set (reg:DI 240 [ D.6781 ])
        (reg/v:DI 238 [ new_size ])) lex.yy.c:1339 89 {*movdi_internal}
     (nil))
;;  succ:       129 [100.0%]  (FALLTHRU)

;; basic block 129, loop depth 6, count 0, freq 7, maybe hot
;;  prev block 128, next block 130, flags: (RTL)
;;  pred:       127 [100.0%]  (FALLTHRU)
;;              128 [100.0%]  (FALLTHRU)
(code_label 928 26 929 129 214 "" [0 uses])
(note 929 928 930 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(debug_insn 930 929 931 129 (var_location:DI ptr (reg/f:DI 232 [ D.6783 ])) lex.yy.c:1343 -1
     (nil))
(debug_insn 931 930 932 129 (var_location:DI size (plus:DI (reg:DI 240 [ D.6781 ])
        (const_int 2 [0x2]))) lex.yy.c:1343 -1
     (nil))
(insn 932 931 933 129 (parallel [
            (set (reg:DI 483 [ D.6781 ])
                (plus:DI (reg:DI 240 [ D.6781 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 218 {*adddi_1}
     (nil))
(insn 933 932 934 129 (set (reg:DI 4 si)
        (reg:DI 483 [ D.6781 ])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(insn 934 933 935 129 (set (reg:DI 5 di)
        (reg/f:DI 232 [ D.6783 ])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(call_insn 935 934 936 129 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 936 935 937 129 (set (reg/f:DI 242 [ D.6793 ])
        (reg:DI 0 ax)) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(debug_insn 937 936 938 129 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1343 -1
     (nil))
(debug_insn 938 937 939 129 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1343 -1
     (nil))
(insn 939 938 940 129 (set (mem/f:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])
        (reg/f:DI 242 [ D.6793 ])) lex.yy.c:1343 89 {*movdi_internal}
     (nil))
(insn 940 939 941 129 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 242 [ D.6793 ])
            (const_int 0 [0]))) lex.yy.c:1349 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 941 940 945 129 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 948)
            (pc))) lex.yy.c:1349 612 {*jcc_1}
     (int_list:REG_BR_PROB 0 (nil))
 -> 948)
;;  succ:       131
;;              132 [100.0%]  (FALLTHRU)

;; basic block 130, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 129, next block 131, flags: (RTL)
;;  pred:       125 [50.0%] 
(code_label 945 941 946 130 212 "" [1 uses])
(note 946 945 947 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 947 946 948 130 (set (mem/f:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1347 89 {*movdi_internal}
     (nil))
;;  succ:       131 [100.0%]  (FALLTHRU)

;; basic block 131, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 130, next block 132, flags: (RTL)
;;  pred:       129
;;              130 [100.0%]  (FALLTHRU)
(code_label 948 947 949 131 215 "" [1 uses])
(note 949 948 950 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn 950 949 951 131 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f88bbbf2bd0 *.LC22>)) lex.yy.c:1351 89 {*movdi_internal}
     (nil))
(call_insn 951 950 954 131 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1351 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 132, loop depth 6, count 0, freq 14, maybe hot
;;  prev block 131, next block 133, flags: (RTL)
;;  pred:       129 [100.0%]  (FALLTHRU)
(note 954 951 955 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 955 954 956 132 (set (reg:DI 484 [ D.6790 ])
        (sign_extend:DI (reg/v:SI 235 [ yy_c_buf_p_offset ]))) lex.yy.c:1353 142 {*extendsidi2_rex64}
     (nil))
(insn 956 955 957 132 (parallel [
            (set (reg/f:DI 244 [ D.6783 ])
                (plus:DI (reg/f:DI 242 [ D.6793 ])
                    (reg:DI 484 [ D.6790 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1353 218 {*adddi_1}
     (nil))
(insn 957 956 958 132 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 244 [ D.6783 ])) lex.yy.c:1353 89 {*movdi_internal}
     (nil))
(insn 958 957 959 132 (set (reg/f:DI 245 [ D.6782 ])
        (mem/f:DI (reg/f:DI 152 [ D.6780 ]) [1 *_142+0 S8 A64])) lex.yy.c:1355 89 {*movdi_internal}
     (nil))
(insn 959 958 960 132 (set (reg:DI 486)
        (mem:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 24 [0x18])) [4 _361->yy_buf_size+0 S8 A64])) lex.yy.c:1356 89 {*movdi_internal}
     (nil))
(insn 960 959 961 132 (parallel [
            (set (reg:DI 485 [ D.6781 ])
                (plus:DI (reg:DI 486)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1356 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 24 [0x18])) [4 _361->yy_buf_size+0 S8 A64])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 961 960 963 132 (parallel [
            (set (reg/v:DI 230 [ num_to_read ])
                (minus:DI (reg:DI 485 [ D.6781 ])
                    (reg/v:DI 224 [ number_to_move ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1356 261 {*subdi_1}
     (nil))
(debug_insn 963 961 965 132 (var_location:DI num_to_read (reg/v:DI 230 [ num_to_read ])) -1
     (nil))
(insn 965 963 966 132 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 230 [ num_to_read ])
            (const_int 0 [0]))) lex.yy.c:1323 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 966 965 967 132 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 964)
            (pc))) lex.yy.c:1323 612 {*jcc_1}
     (int_list:REG_BR_PROB 9550 (nil))
 -> 964)
;;  succ:       133 [4.5%]  (FALLTHRU)
;;              125 [95.5%]  (DFS_BACK)

;; basic block 133, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 132, next block 134, flags: (RTL)
;;  pred:       132 [4.5%]  (FALLTHRU)
;;              123 [4.5%] 
(code_label 967 966 968 133 211 "" [1 uses])
(note 968 967 970 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(insn 970 968 969 133 (set (reg:DI 487)
        (const_int 8192 [0x2000])) 89 {*movdi_internal}
     (nil))
(insn 969 970 971 133 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 230 [ num_to_read ])
            (const_int 8192 [0x2000]))) 8 {*cmpdi_1}
     (nil))
(insn 971 969 972 133 (set (reg/v:DI 309 [ num_to_read ])
        (if_then_else:DI (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (reg/v:DI 230 [ num_to_read ])
            (reg:DI 487))) 954 {*movdicc_noc}
     (nil))
(debug_insn 972 971 973 133 (var_location:DI num_to_read (reg/v:DI 309 [ num_to_read ])) -1
     (nil))
(insn 973 972 974 133 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 40 [0x28])) [2 _961->yy_is_interactive+0 S4 A64])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 974 973 975 133 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1000)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1000)
;;  succ:       134 [50.0%]  (FALLTHRU)
;;              139 [50.0%] 

;; basic block 134, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 133, next block 135, flags: (RTL)
;;  pred:       133 [50.0%]  (FALLTHRU)
(note 975 974 27 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 27 975 1256 134 (set (reg/v:DI 212 [ n ])
        (const_int 0 [0])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
;;  succ:       135 [100.0%]  (FALLTHRU)

;; basic block 135, loop depth 6, count 0, freq 3, maybe hot
;;  prev block 134, next block 136, flags: (RTL)
;;  pred:       134 [100.0%]  (FALLTHRU)
;;              168 [88.0%]  (DFS_BACK)
(code_label 1256 27 976 135 232 "" [1 uses])
(note 976 1256 977 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(debug_insn 977 976 978 135 (var_location:DI n (reg/v:DI 212 [ n ])) -1
     (nil))
(debug_insn 978 977 979 135 (var_location:SI c (const_int 42 [0x2a])) -1
     (nil))
(insn 979 978 980 135 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 980 979 981 135 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f88bbf40510 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f88bbf40510 _IO_getc>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 981 980 982 135 (set (reg/v:SI 251 [ c ])
        (reg:SI 0 ax)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(debug_insn 982 981 983 135 (var_location:SI c (reg/v:SI 251 [ c ])) lex.yy.c:1364 -1
     (nil))
(insn 983 982 984 135 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 251 [ c ])
            (const_int -1 [0xffffffffffffffff]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn 984 983 985 135 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1299)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 2799 (nil))
 -> 1299)
;;  succ:       136 [72.0%]  (FALLTHRU)
;;              172 [28.0%] 

;; basic block 136, loop depth 6, count 0, freq 2, maybe hot
;;  prev block 135, next block 137, flags: (RTL)
;;  pred:       135 [72.0%]  (FALLTHRU)
(note 985 984 986 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(insn 986 985 987 136 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 251 [ c ])
            (const_int 10 [0xa]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn 987 986 1273 136 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1239)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 7200 (nil))
 -> 1239)
;;  succ:       168 [72.0%] 
;;              171 [28.0%]  (FALLTHRU)

;; basic block 137, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 136, next block 138, flags: (RTL)
;;  pred:       172 [50.0%] 
;;              170 [0.0%] 
(code_label 1273 987 991 137 234 "" [2 uses])
(note 991 1273 992 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(insn 992 991 993 137 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f88bbbf2c60 *.LC23>)) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 993 992 1260 137 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1364 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 138, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 137, next block 139, flags: (RTL)
;;  pred:       171 [100.0%]  (FALLTHRU)
;;              168 [12.0%]  (FALLTHRU)
;;              173 [100.0%]  (FALLTHRU)
(code_label 1260 993 995 138 233 "" [0 uses])
(note 995 1260 996 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(insn 996 995 997 138 (set (reg:SI 275 [ D.6777 ])
        (subreg:SI (reg/v:DI 212 [ n ]) 0)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 997 996 1000 138 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 275 [ D.6777 ])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
;;  succ:       144 [100.0%]  (FALLTHRU)

;; basic block 139, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 138, next block 140, flags: (RTL)
;;  pred:       133 [50.0%] 
(code_label 1000 997 1001 139 218 "" [1 uses])
(note 1001 1000 1002 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 1002 1001 1003 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 1003 1002 1004 139 (set (reg/f:DI 270 [ D.6794 ])
        (reg:DI 0 ax)) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1004 1003 1043 139 (set (mem:SI (reg/f:DI 270 [ D.6794 ]) [2 *_402+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
;;  succ:       140 [100.0%]  (FALLTHRU)

;; basic block 140, loop depth 6, count 0, freq 7, maybe hot
;;  prev block 139, next block 141, flags: (RTL)
;;  pred:       139 [100.0%]  (FALLTHRU)
;;              143 [100.0%]  (FALLTHRU)
(code_label 1043 1004 1005 140 225 "" [0 uses])
(note 1005 1043 1006 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1006 1005 1007 140 (var_location:DI __ptr (plus:DI (mem/f/j:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 8 [0x8])) [0 _971->yy_ch_buf+0 S8 A64])
        (reg/v:DI 224 [ number_to_move ]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1007 1006 1008 140 (var_location:DI __size (const_int 1 [0x1])) lex.yy.c:1364 -1
     (nil))
(debug_insn 1008 1007 1009 140 (var_location:DI __n (reg/v:DI 309 [ num_to_read ])) lex.yy.c:1364 -1
     (nil))
(debug_insn 1009 1008 1010 140 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 -1
     (nil))
(insn 1010 1009 1011 140 (set (reg/f:DI 489)
        (mem/f:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                (const_int 8 [0x8])) [1 _971->yy_ch_buf+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1011 1010 1012 140 (parallel [
            (set (reg:DI 488 [ D.6783 ])
                (plus:DI (reg/v:DI 224 [ number_to_move ])
                    (reg/f:DI 489)))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f:DI (plus:DI (reg/f:DI 245 [ D.6782 ])
                    (const_int 8 [0x8])) [1 _971->yy_ch_buf+0 S8 A64])
            (reg/v:DI 224 [ number_to_move ]))
        (nil)))
(insn 1012 1011 1013 140 (set (reg:DI 2 cx)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1013 1012 1014 140 (set (reg:DI 1 dx)
        (reg/v:DI 309 [ num_to_read ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1014 1013 1015 140 (set (reg:DI 4 si)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1015 1014 1016 140 (set (reg:DI 5 di)
        (reg:DI 488 [ D.6783 ])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(call_insn 1016 1015 1017 140 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*fread") [flags 0x41]  <function_decl 0x7f88bbfb8870 __fread_alias>) [0 __fread_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*fread") [flags 0x41]  <function_decl 0x7f88bbfb8870 __fread_alias>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 1017 1016 1018 140 (set (reg:DI 274 [ D.6781 ])
        (reg:DI 0 ax)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(debug_insn 1018 1017 1019 140 (var_location:DI __ptr (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1019 1018 1020 140 (var_location:DI __size (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1020 1019 1021 140 (var_location:DI __n (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1021 1020 1022 140 (var_location:DI __stream (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(insn 1022 1021 1023 140 (set (reg:SI 275 [ D.6777 ])
        (subreg:SI (reg:DI 274 [ D.6781 ]) 0)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1023 1022 1024 140 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 275 [ D.6777 ])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1024 1023 1025 140 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 275 [ D.6777 ])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1025 1024 1026 140 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1263)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 1263)
;;  succ:       141 [29.0%]  (FALLTHRU)
;;              169 [71.0%] 

;; basic block 141, loop depth 6, count 0, freq 2, maybe hot
;;  prev block 140, next block 142, flags: (RTL)
;;  pred:       140 [29.0%]  (FALLTHRU)
(note 1026 1025 1027 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(insn 1027 1026 1028 141 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 1028 1027 1029 141 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1029 1028 1030 141 (set (reg:SI 277 [ D.6777 ])
        (reg:SI 0 ax)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1030 1029 1031 141 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 277 [ D.6777 ])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1031 1030 1032 141 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1271)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1271)
;;  succ:       170 [50.0%] 
;;              142 [50.0%]  (FALLTHRU)

;; basic block 142, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 141, next block 143, flags: (RTL)
;;  pred:       141 [50.0%]  (FALLTHRU)
(note 1032 1031 1033 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(insn 1033 1032 1036 142 (set (reg:SI 275 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
;;  succ:       169 [100.0%]  (FALLTHRU)

;; basic block 143, loop depth 6, count 0, freq 7, maybe hot
;;  prev block 142, next block 144, flags: (RTL)
;;  pred:       170 [100.0%]  (FALLTHRU)
(note 1036 1033 1037 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(insn 1037 1036 1038 143 (set (mem:SI (reg/f:DI 270 [ D.6794 ]) [2 *_402+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1038 1037 1039 143 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 1039 1038 1040 143 (call (mem:QI (symbol_ref:DI ("clearerr") [flags 0x41]  <function_decl 0x7f88bbf95510 clearerr>) [0 clearerr S1 A8])
        (const_int 0 [0])) lex.yy.c:1364 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("clearerr") [flags 0x41]  <function_decl 0x7f88bbf95510 clearerr>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1040 1039 1041 143 (set (reg:DI 490)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1041 1040 1042 143 (set (reg/f:DI 491)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1042 1041 1046 143 (set (reg/f:DI 245 [ D.6782 ])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 490)
                    (const_int 8 [0x8]))
                (reg/f:DI 491)) [1 *_969+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       140 [100.0%]  (FALLTHRU)

;; basic block 144, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 143, next block 145, flags: (RTL)
;;  pred:       138 [100.0%]  (FALLTHRU)
;;              169 [100.0%]  (FALLTHRU)
(code_label 1046 1042 1047 144 222 "" [0 uses])
(note 1047 1046 1048 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(insn 1048 1047 1049 144 (set (reg/f:DI 280 [ D.6782 ])
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_1064+0 S8 A64])) lex.yy.c:1367 89 {*movdi_internal}
     (nil))
(insn 1049 1048 1050 144 (set (mem:SI (plus:DI (reg/f:DI 280 [ D.6782 ])
                (const_int 32 [0x20])) [2 _429->yy_n_chars+0 S4 A64])
        (reg:SI 275 [ D.6777 ])) lex.yy.c:1367 90 {*movsi_internal}
     (nil))
(insn 1050 1049 1051 144 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 275 [ D.6777 ])
            (const_int 0 [0]))) lex.yy.c:1370 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1051 1050 1052 144 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1349)
            (pc))) lex.yy.c:1370 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1349)
;;  succ:       145 [50.0%]  (FALLTHRU)
;;              148 [50.0%] 

;; basic block 145, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 144, next block 146, flags: (RTL)
;;  pred:       144 [50.0%]  (FALLTHRU)
;;              122 [100.0%]  (FALLTHRU)
(code_label 1052 1051 1053 145 210 "" [0 uses])
(note 1053 1052 1054 145 [bb 145] NOTE_INSN_BASIC_BLOCK)
(insn 1054 1053 1055 145 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 224 [ number_to_move ])
            (const_int 0 [0]))) lex.yy.c:1372 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1055 1054 1056 145 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1068)
            (pc))) lex.yy.c:1372 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 1068)
;;  succ:       146 [29.0%]  (FALLTHRU)
;;              147 [71.0%] 

;; basic block 146, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 145, next block 147, flags: (RTL)
;;  pred:       145 [29.0%]  (FALLTHRU)
(note 1056 1055 1057 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1057 1056 1058 146 (var_location:SI ret_val (const_int 1 [0x1])) lex.yy.c:1374 -1
     (nil))
(insn 1058 1057 1059 146 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1375 89 {*movdi_internal}
     (nil))
(call_insn 1059 1058 1060 146 (call (mem:QI (symbol_ref:DI ("_Z9yyrestartP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c1b0 yyrestart>) [0 yyrestart S1 A8])
        (const_int 0 [0])) lex.yy.c:1375 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z9yyrestartP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c1b0 yyrestart>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1060 1059 1061 146 (set (reg:SI 275 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 1061 1060 1062 146 (set (reg:DI 493)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1062 1061 1063 146 (parallel [
            (set (reg:DI 492 [ D.6781 ])
                (ashift:DI (reg:DI 493)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 1063 1062 1064 146 (set (reg/f:DI 494)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1064 1063 1065 146 (parallel [
            (set (reg/f:DI 347 [ D.6780 ])
                (plus:DI (reg:DI 492 [ D.6781 ])
                    (reg/f:DI 494)))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 492 [ D.6781 ]))
        (nil)))
(insn 1065 1064 30 146 (set (reg/f:DI 280 [ D.6782 ])
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_954+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 30 1065 1068 146 (set (reg/v:SI 308 [ ret_val ])
        (const_int 1 [0x1])) lex.yy.c:1374 90 {*movsi_internal}
     (nil))
;;  succ:       149 [100.0%]  (FALLTHRU)

;; basic block 147, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 146, next block 148, flags: (RTL)
;;  pred:       145 [71.0%] 
(code_label 1068 30 1069 147 227 "" [1 uses])
(note 1069 1068 1070 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1070 1069 1071 147 (var_location:SI ret_val (const_int 2 [0x2])) lex.yy.c:1380 -1
     (nil))
(insn 1071 1070 1072 147 (set (reg:DI 496)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1381 89 {*movdi_internal}
     (nil))
(insn 1072 1071 1073 147 (parallel [
            (set (reg:DI 495 [ D.6781 ])
                (ashift:DI (reg:DI 496)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1381 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 1073 1072 1074 147 (set (reg/f:DI 497)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1381 89 {*movdi_internal}
     (nil))
(insn 1074 1073 1075 147 (parallel [
            (set (reg/f:DI 347 [ D.6780 ])
                (plus:DI (reg:DI 495 [ D.6781 ])
                    (reg/f:DI 497)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1381 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 495 [ D.6781 ]))
        (nil)))
(insn 1075 1074 1076 147 (set (reg/f:DI 280 [ D.6782 ])
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_436+0 S8 A64])) lex.yy.c:1381 89 {*movdi_internal}
     (nil))
(insn 1076 1075 1077 147 (set (mem:SI (plus:DI (reg/f:DI 280 [ D.6782 ])
                (const_int 60 [0x3c])) [2 _437->yy_buffer_status+0 S4 A32])
        (const_int 2 [0x2])) lex.yy.c:1382 90 {*movsi_internal}
     (nil))
(insn 1077 1076 31 147 (set (reg:SI 275 [ D.6777 ])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 31 1077 1349 147 (set (reg/v:SI 308 [ ret_val ])
        (const_int 2 [0x2])) lex.yy.c:1380 90 {*movsi_internal}
     (nil))
;;  succ:       149 [100.0%]  (FALLTHRU)

;; basic block 148, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 147, next block 149, flags: (RTL)
;;  pred:       144 [50.0%] 
(code_label 1349 31 1348 148 243 "" [1 uses])
(note 1348 1349 29 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn 29 1348 1078 148 (set (reg/v:SI 308 [ ret_val ])
        (const_int 0 [0])) lex.yy.c:1387 90 {*movsi_internal}
     (nil))
;;  succ:       149 [100.0%]  (FALLTHRU)

;; basic block 149, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 148, next block 150, flags: (RTL)
;;  pred:       148 [100.0%]  (FALLTHRU)
;;              146 [100.0%]  (FALLTHRU)
;;              147 [100.0%]  (FALLTHRU)
(code_label 1078 29 1079 149 226 "" [0 uses])
(note 1079 1078 1080 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1080 1079 1081 149 (var_location:SI ret_val (reg/v:SI 308 [ ret_val ])) -1
     (nil))
(insn 1081 1080 1082 149 (parallel [
            (set (reg:SI 287 [ D.6795 ])
                (plus:SI (reg:SI 275 [ D.6777 ])
                    (subreg:SI (reg/v:DI 224 [ number_to_move ]) 0)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1389 217 {*addsi_1}
     (nil))
(insn 1082 1081 1083 149 (set (reg:SI 288 [ D.6777 ])
        (reg:SI 287 [ D.6795 ])) lex.yy.c:1389 90 {*movsi_internal}
     (nil))
(insn 1083 1082 1084 149 (set (reg:DI 289 [ D.6781 ])
        (sign_extend:DI (reg:SI 288 [ D.6777 ]))) lex.yy.c:1389 142 {*extendsidi2_rex64}
     (nil))
(insn 1084 1083 1085 149 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 289 [ D.6781 ])
            (mem:DI (plus:DI (reg/f:DI 280 [ D.6782 ])
                    (const_int 24 [0x18])) [4 _957->yy_buf_size+0 S8 A64]))) lex.yy.c:1389 8 {*cmpdi_1}
     (nil))
(jump_insn 1085 1084 1086 149 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1109)
            (pc))) lex.yy.c:1389 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 1109)
;;  succ:       150 [29.0%]  (FALLTHRU)
;;              152 [71.0%] 

;; basic block 150, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 149, next block 151, flags: (RTL)
;;  pred:       149 [29.0%]  (FALLTHRU)
(note 1086 1085 1087 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1087 1086 1088 150 (var_location:SI new_size (plus:SI (ashiftrt:SI (reg:SI 275 [ D.6777 ])
            (const_int 1 [0x1]))
        (reg:SI 287 [ D.6795 ]))) lex.yy.c:1391 -1
     (nil))
(debug_insn 1088 1087 1089 150 (var_location:DI ptr (mem/f/j:DI (plus:DI (reg/f:DI 280 [ D.6782 ])
            (const_int 8 [0x8])) [0 _957->yy_ch_buf+0 S8 A64])) lex.yy.c:1392 -1
     (nil))
(debug_insn 1089 1088 1090 150 (var_location:DI size (sign_extend:DI (plus:SI (ashiftrt:SI (reg:SI 275 [ D.6777 ])
                (const_int 1 [0x1]))
            (reg:SI 287 [ D.6795 ])))) lex.yy.c:1392 -1
     (nil))
(insn 1090 1089 1091 150 (parallel [
            (set (reg:SI 498 [ D.6777 ])
                (ashiftrt:SI (reg:SI 275 [ D.6777 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 545 {*ashrsi3_1}
     (nil))
(insn 1091 1090 1092 150 (parallel [
            (set (reg:SI 499 [ D.6795 ])
                (plus:SI (reg:SI 498 [ D.6777 ])
                    (reg:SI 287 [ D.6795 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 217 {*addsi_1}
     (nil))
(insn 1092 1091 1093 150 (set (reg:DI 500 [ D.6781 ])
        (sign_extend:DI (reg:SI 499 [ D.6795 ]))) lex.yy.c:2136 142 {*extendsidi2_rex64}
     (nil))
(insn 1093 1092 1094 150 (set (reg:DI 501)
        (mem/f:DI (plus:DI (reg/f:DI 280 [ D.6782 ])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(insn 1094 1093 1095 150 (set (reg:DI 4 si)
        (reg:DI 500 [ D.6781 ])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(insn 1095 1094 1096 150 (set (reg:DI 5 di)
        (reg:DI 501)) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(call_insn 1096 1095 1097 150 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1097 1096 1098 150 (set (reg/f:DI 297 [ D.6793 ])
        (reg:DI 0 ax)) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(debug_insn 1098 1097 1099 150 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1392 -1
     (nil))
(debug_insn 1099 1098 1100 150 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1392 -1
     (nil))
(insn 1100 1099 1101 150 (set (mem/f:DI (plus:DI (reg/f:DI 280 [ D.6782 ])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])
        (reg/f:DI 297 [ D.6793 ])) lex.yy.c:1392 89 {*movdi_internal}
     (nil))
(insn 1101 1100 1102 150 (set (reg/f:DI 502)
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_955+0 S8 A64])) lex.yy.c:1393 89 {*movdi_internal}
     (nil))
(insn 1102 1101 1103 150 (set (reg/f:DI 299 [ D.6783 ])
        (mem/f:DI (plus:DI (reg/f:DI 502)
                (const_int 8 [0x8])) [1 _457->yy_ch_buf+0 S8 A64])) lex.yy.c:1393 89 {*movdi_internal}
     (nil))
(insn 1103 1102 1104 150 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 299 [ D.6783 ])
            (const_int 0 [0]))) lex.yy.c:1393 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 1104 1103 1105 150 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1112)
            (pc))) lex.yy.c:1393 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 1112)
;;  succ:       151 [0.0%]  (FALLTHRU)
;;              153 [100.0%] 

;; basic block 151, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 150, next block 152, flags: (RTL)
;;  pred:       150 [0.0%]  (FALLTHRU)
(note 1105 1104 1106 151 [bb 151] NOTE_INSN_BASIC_BLOCK)
(insn 1106 1105 1107 151 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f88bbbf2cf0 *.LC24>)) lex.yy.c:1394 89 {*movdi_internal}
     (nil))
(call_insn 1107 1106 1109 151 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1394 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 152, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 151, next block 153, flags: (RTL)
;;  pred:       149 [71.0%] 
(code_label 1109 1107 1110 152 228 "" [1 uses])
(note 1110 1109 1111 152 [bb 152] NOTE_INSN_BASIC_BLOCK)
(insn 1111 1110 1112 152 (set (reg/f:DI 299 [ D.6783 ])
        (mem/f:DI (plus:DI (reg/f:DI 280 [ D.6782 ])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       153 [100.0%]  (FALLTHRU)

;; basic block 153, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 152, next block 154, flags: (RTL)
;;  pred:       152 [100.0%]  (FALLTHRU)
;;              150 [100.0%] 
(code_label 1112 1111 1113 153 229 "" [1 uses])
(note 1113 1112 1114 153 [bb 153] NOTE_INSN_BASIC_BLOCK)
(insn 1114 1113 1115 153 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 288 [ D.6777 ])) lex.yy.c:1397 90 {*movsi_internal}
     (nil))
(insn 1115 1114 1116 153 (set (mem:QI (plus:DI (reg/f:DI 299 [ D.6783 ])
                (reg:DI 289 [ D.6781 ])) [0 *_461+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1398 93 {*movqi_internal}
     (nil))
(insn 1116 1115 1117 153 (set (reg/f:DI 503)
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_955+0 S8 A64])) lex.yy.c:1399 89 {*movdi_internal}
     (nil))
(insn 1117 1116 1118 153 (set (reg/f:DI 504)
        (mem/f:DI (plus:DI (reg/f:DI 503)
                (const_int 8 [0x8])) [1 _462->yy_ch_buf+0 S8 A64])) lex.yy.c:1399 89 {*movdi_internal}
     (nil))
(insn 1118 1117 1119 153 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 504)
                    (reg:DI 289 [ D.6781 ]))
                (const_int 1 [0x1])) [0 *_465+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1399 93 {*movqi_internal}
     (nil))
(insn 1119 1118 1120 153 (set (reg/f:DI 505)
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_955+0 S8 A64])) lex.yy.c:1401 89 {*movdi_internal}
     (nil))
(insn 1120 1119 1121 153 (set (reg/f:DI 306 [ D.6783 ])
        (mem/f:DI (plus:DI (reg/f:DI 505)
                (const_int 8 [0x8])) [1 _466->yy_ch_buf+0 S8 A64])) lex.yy.c:1401 89 {*movdi_internal}
     (nil))
(insn 1121 1120 1122 153 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 306 [ D.6783 ])) lex.yy.c:1401 89 {*movdi_internal}
     (nil))
(debug_insn 1122 1121 1123 153 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1123 1122 1124 153 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1124 1123 1125 153 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1125 1124 1126 153 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1126 1125 1127 153 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1127 1126 1128 153 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1128 1127 1129 153 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1129 1128 1130 153 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1130 1129 1131 153 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1131 1130 1132 153 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1132 1131 1133 153 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1133 1132 1134 153 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(insn 1134 1133 1135 153 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 308 [ ret_val ])
            (const_int 1 [0x1]))) lex.yy.c:1205 7 {*cmpsi_1}
     (nil))
(jump_insn 1135 1134 1351 153 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1147)
            (pc))) lex.yy.c:1205 612 {*jcc_1}
     (int_list:REG_BR_PROB 10000 (nil))
 -> 1147)
;;  succ:       157 [100.0%] 
;;              154 (FALLTHRU)

;; basic block 154, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 153, next block 155, flags: (RTL)
;;  pred:       153 (FALLTHRU)
(note 1351 1135 1136 154 [bb 154] NOTE_INSN_BASIC_BLOCK)
(insn 1136 1351 1137 154 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 308 [ ret_val ])
            (const_int 2 [0x2]))) lex.yy.c:1205 7 {*cmpsi_1}
     (nil))
(jump_insn 1137 1136 1140 154 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1140)
            (pc))) lex.yy.c:1205 612 {*jcc_1}
     (int_list:REG_BR_PROB 2900 (nil))
 -> 1140)
;;  succ:       155 [29.0%] 
;;              158 [71.0%]  (FALLTHRU)

;; basic block 155, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 154, next block 156, flags: (RTL)
;;  pred:       154 [29.0%] 
(code_label 1140 1137 1141 155 231 "" [1 uses])
(note 1141 1140 1142 155 [bb 155] NOTE_INSN_BASIC_BLOCK)
(insn 1142 1141 1143 155 (set (reg/f:DI 506)
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_955+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1143 1142 1144 155 (set (reg/f:DI 507)
        (mem/f:DI (plus:DI (reg/f:DI 506)
                (const_int 8 [0x8])) [1 _934->yy_ch_buf+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1144 1143 33 155 (parallel [
            (set (reg/f:DI 324 [ D.6783 ])
                (plus:DI (reg:DI 289 [ D.6781 ])
                    (reg/f:DI 507)))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f:DI (plus:DI (reg/f:DI 506)
                    (const_int 8 [0x8])) [1 _934->yy_ch_buf+0 S8 A64])
            (reg:DI 289 [ D.6781 ]))
        (nil)))
(insn 33 1144 1344 155 (set (reg/v/f:DI 88 [ yy_cp ])
        (reg/f:DI 324 [ D.6783 ])) lex.yy.c:1205 89 {*movdi_internal}
     (nil))
;;  succ:       159 [100.0%]  (FALLTHRU)

;; basic block 156, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 155, next block 157, flags: (RTL)
;;  pred:       115 [16.1%] 
(code_label 1344 33 1343 156 242 "" [1 uses])
(note 1343 1344 32 156 [bb 156] NOTE_INSN_BASIC_BLOCK)
(insn 32 1343 1147 156 (set (reg/f:DI 306 [ D.6783 ])
        (reg/v/f:DI 213 [ source ])) lex.yy.c:1277 89 {*movdi_internal}
     (nil))
;;  succ:       157 [100.0%]  (FALLTHRU)

;; basic block 157, loop depth 5, count 0, freq 0, maybe hot
;;  prev block 156, next block 158, flags: (RTL)
;;  pred:       156 [100.0%]  (FALLTHRU)
;;              153 [100.0%] 
(code_label 1147 32 1148 157 205 "" [1 uses])
(note 1148 1147 1149 157 [bb 157] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1149 1148 1150 157 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1150 1149 1151 157 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1151 1150 1152 157 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1152 1151 1153 157 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1153 1152 1154 157 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1154 1153 1155 157 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1155 1154 1156 157 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1156 1155 1157 157 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1157 1156 1158 157 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1158 1157 1159 157 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1159 1158 1160 157 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1160 1159 1161 157 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(insn 1161 1160 1162 157 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 306 [ D.6783 ])) lex.yy.c:1222 89 {*movdi_internal}
     (nil))
(insn 1162 1161 1163 157 (set (reg:SI 509)
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:1224 90 {*movsi_internal}
     (nil))
(insn 1163 1162 1164 157 (parallel [
            (set (reg:SI 508 [ D.6777 ])
                (plus:SI (reg:SI 509)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 1164 1163 1165 157 (parallel [
            (set (reg:SI 511)
                (lshiftrt:SI (reg:SI 508 [ D.6777 ])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 544 {*lshrsi3_1}
     (nil))
(insn 1165 1164 1166 157 (parallel [
            (set (reg:SI 512)
                (plus:SI (reg:SI 511)
                    (reg:SI 508 [ D.6777 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (nil))
(insn 1166 1165 1167 157 (parallel [
            (set (reg:SI 513 [ D.6777 ])
                (ashiftrt:SI (reg:SI 512)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 545 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 508 [ D.6777 ])
            (const_int 2 [0x2]))
        (nil)))
(insn 1167 1166 1168 157 (parallel [
            (set (reg/v:SI 90 [ yy_act ])
                (plus:SI (reg:SI 513 [ D.6777 ])
                    (const_int 47 [0x2f])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (nil))
(debug_insn 1168 1167 1172 157 (var_location:SI yy_act (reg/v:SI 90 [ yy_act ])) lex.yy.c:1224 -1
     (nil))
;;  succ:       47 [100.0%]  (FALLTHRU)

;; basic block 158, loop depth 3, count 0, freq 0, maybe hot
;;  prev block 157, next block 159, flags: (RTL)
;;  pred:       154 [71.0%]  (FALLTHRU)
(note 1172 1168 1173 158 [bb 158] NOTE_INSN_BASIC_BLOCK)
(insn 1173 1172 1174 158 (set (reg:DI 514 [ D.6790 ])
        (sign_extend:DI (reg/v:SI 147 [ yy_amount_of_matched_text ]))) lex.yy.c:1238 142 {*extendsidi2_rex64}
     (nil))
(insn 1174 1173 1175 158 (parallel [
            (set (reg/v/f:DI 88 [ yy_cp ])
                (plus:DI (reg/f:DI 306 [ D.6783 ])
                    (reg:DI 514 [ D.6790 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1238 218 {*adddi_1}
     (nil))
(insn 1175 1174 1176 158 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1238 89 {*movdi_internal}
     (nil))
(call_insn 1176 1175 1177 158 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1240 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 1177 1176 1178 158 (set (reg/v:SI 87 [ yy_current_state ])
        (reg:SI 0 ax)) lex.yy.c:1240 90 {*movsi_internal}
     (nil))
(debug_insn 1178 1177 1179 158 (var_location:SI yy_current_state (reg/v:SI 87 [ yy_current_state ])) lex.yy.c:1240 -1
     (nil))
(debug_insn 1179 1178 1180 158 (var_location:DI yy_cp (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1242 -1
     (nil))
(insn 1180 1179 1181 158 (set (reg/v/f:DI 89 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1243 89 {*movdi_internal}
     (nil))
(debug_insn 1181 1180 1184 158 (var_location:DI yy_bp (reg/v/f:DI 89 [ yy_cp ])) lex.yy.c:1243 -1
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)

;; basic block 159, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 158, next block 160, flags: (RTL)
;;  pred:       155 [100.0%]  (FALLTHRU)
;;              116 [100.0%]  (FALLTHRU)
(code_label 1184 1181 1185 159 206 "" [0 uses])
(note 1185 1184 1186 159 [bb 159] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1186 1185 1187 159 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1187 1186 1188 159 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1188 1187 1189 159 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1189 1188 1190 159 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1190 1189 1191 159 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1191 1190 1192 159 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1192 1191 1193 159 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1193 1192 1194 159 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1194 1193 1195 159 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1195 1194 1196 159 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1196 1195 1197 159 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1197 1196 1198 159 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1198 1197 1199 159 (var_location:DI D#9 (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1199 1198 1200 159 (var_location:DI D#8 (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1200 1199 1201 159 (var_location:DI D#7 (ashift:DI (debug_expr:DI D#8)
        (const_int 3 [0x3]))) lex.yy.c:1248 -1
     (nil))
(debug_insn 1201 1200 1202 159 (var_location:DI D#6 (plus:DI (debug_expr:DI D#9)
        (debug_expr:DI D#7))) lex.yy.c:1248 -1
     (nil))
(debug_insn 1202 1201 1203 159 (var_location:DI D#5 (mem/f:DI (debug_expr:DI D#6) [0 +0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1203 1202 1204 159 (var_location:DI D#4 (mem/f/j:DI (plus:DI (debug_expr:DI D#5)
            (const_int 8 [0x8])) [0 D#5->yy_ch_buf+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1204 1203 1205 159 (var_location:SI D#3 (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1205 1204 1206 159 (var_location:DI D#2 (sign_extend:DI (debug_expr:SI D#3))) lex.yy.c:1248 -1
     (nil))
(insn 1206 1205 1207 159 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 88 [ yy_cp ])) lex.yy.c:1248 89 {*movdi_internal}
     (nil))
(call_insn 1207 1206 1208 159 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1250 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn 1208 1207 1209 159 (set (reg/v:SI 160 [ yy_current_state ])
        (reg:SI 0 ax)) lex.yy.c:1250 90 {*movsi_internal}
     (nil))
(debug_insn 1209 1208 1210 159 (var_location:SI yy_current_state (reg/v:SI 160 [ yy_current_state ])) lex.yy.c:1250 -1
     (nil))
(debug_insn 1210 1209 1211 159 (var_location:DI yy_cp (plus:DI (debug_expr:DI D#4)
        (debug_expr:DI D#2))) lex.yy.c:1252 -1
     (nil))
(insn 1211 1210 1212 159 (set (reg/v/f:DI 89 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1253 89 {*movdi_internal}
     (nil))
(debug_insn 1212 1211 1213 159 (var_location:DI yy_bp (reg/v/f:DI 89 [ yy_cp ])) lex.yy.c:1253 -1
     (nil))
(insn 1213 1212 1214 159 (set (reg/f:DI 515)
        (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) 89 {*movdi_internal}
     (nil))
(insn 1214 1213 1215 159 (set (reg:DI 516)
        (sign_extend:DI (reg/v:SI 160 [ yy_current_state ]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 1215 1214 1218 159 (set (reg:HI 186 [ D.6786 ])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 516)
                    (const_int 2 [0x2]))
                (reg/f:DI 515)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
;;  succ:       35 [100.0%]  (FALLTHRU)

;; basic block 160, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 159, next block 161, flags: (RTL)
;;  pred:       47 [2.2%] 
(code_label 1218 1215 1219 160 140 "" [1 uses])
(note 1219 1218 1220 160 [bb 160] NOTE_INSN_BASIC_BLOCK)
(insn 1220 1219 1221 160 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f88bbbf2d80 *.LC25>)) lex.yy.c:1261 89 {*movdi_internal}
     (nil))
(call_insn 1221 1220 1223 160 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1261 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 161, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 160, next block 162, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 1223 1221 1224 161 156 "" [1 uses])
(note 1224 1223 42 161 [bb 161] NOTE_INSN_BASIC_BLOCK)
(insn 42 1224 1330 161 (set (reg:SI 92 [ D.6777 ])
        (const_int 276 [0x114])) mycc.l:75 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 162, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 161, next block 163, flags: (RTL)
;;  pred:       48 [2.3%] 
(code_label 1330 42 1329 162 238 "" [1 uses])
(note 1329 1330 43 162 [bb 162] NOTE_INSN_BASIC_BLOCK)
(insn 43 1329 1334 162 (set (reg:SI 92 [ D.6777 ])
        (const_int 277 [0x115])) mycc.l:76 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 163, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 162, next block 164, flags: (RTL)
;;  pred:       57 [2.0%] 
(code_label 1334 43 1333 163 239 "" [1 uses])
(note 1333 1334 68 163 [bb 163] NOTE_INSN_BASIC_BLOCK)
(insn 68 1333 1338 163 (set (reg:SI 92 [ D.6777 ])
        (const_int 0 [0])) mycc.l:62 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 164, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 163, next block 165, flags: (RTL)
;;  pred:       58 [2.0%] 
(code_label 1338 68 1337 164 240 "" [1 uses])
(note 1337 1338 67 164 [bb 164] NOTE_INSN_BASIC_BLOCK)
(insn 67 1337 1342 164 (set (reg:SI 92 [ D.6777 ])
        (const_int 0 [0])) mycc.l:62 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 165, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 164, next block 166, flags: (RTL)
;;  pred:       73 [21.6%] 
(code_label 1342 67 1341 165 241 "" [1 uses])
(note 1341 1342 38 165 [bb 165] NOTE_INSN_BASIC_BLOCK)
(insn 38 1341 1225 165 (set (reg:SI 92 [ D.6777 ])
        (const_int 263 [0x107])) mycc.l:74 90 {*movsi_internal}
     (nil))
;;  succ:       166 [100.0%]  (FALLTHRU)

;; basic block 166, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 165, next block 167, flags: (RTL)
;;  pred:       66 [100.0%]  (FALLTHRU)
;;              61 [100.0%]  (FALLTHRU)
;;              65 [100.0%]  (FALLTHRU)
;;              63 [100.0%]  (FALLTHRU)
;;              165 [100.0%]  (FALLTHRU)
;;              71 [100.0%]  (FALLTHRU)
;;              72 [100.0%]  (FALLTHRU)
;;              74 [100.0%]  (FALLTHRU)
;;              162 [100.0%]  (FALLTHRU)
;;              161 [100.0%]  (FALLTHRU)
;;              49 [100.0%]  (FALLTHRU)
;;              75 [100.0%]  (FALLTHRU)
;;              76 [100.0%]  (FALLTHRU)
;;              77 [100.0%]  (FALLTHRU)
;;              78 [100.0%]  (FALLTHRU)
;;              79 [100.0%]  (FALLTHRU)
;;              80 [100.0%]  (FALLTHRU)
;;              81 [100.0%]  (FALLTHRU)
;;              82 [100.0%]  (FALLTHRU)
;;              83 [100.0%]  (FALLTHRU)
;;              84 [100.0%]  (FALLTHRU)
;;              85 [100.0%]  (FALLTHRU)
;;              86 [100.0%]  (FALLTHRU)
;;              87 [100.0%]  (FALLTHRU)
;;              88 [100.0%]  (FALLTHRU)
;;              89 [100.0%]  (FALLTHRU)
;;              90 [100.0%]  (FALLTHRU)
;;              91 [100.0%]  (FALLTHRU)
;;              92 [100.0%]  (FALLTHRU)
;;              93 [100.0%]  (FALLTHRU)
;;              94 [100.0%]  (FALLTHRU)
;;              95 [100.0%]  (FALLTHRU)
;;              96 [100.0%]  (FALLTHRU)
;;              97 [100.0%]  (FALLTHRU)
;;              163 [100.0%]  (FALLTHRU)
;;              164 [100.0%]  (FALLTHRU)
(code_label 1225 38 1226 166 157 "" [0 uses])
(note 1226 1225 1227 166 [bb 166] NOTE_INSN_BASIC_BLOCK)
(insn 1227 1226 1319 166 (set (reg:SI 348 [ <retval> ])
        (reg:SI 92 [ D.6777 ])) 90 {*movsi_internal}
     (nil))
(insn 1319 1227 1320 166 (set (reg/i:SI 0 ax)
        (reg:SI 348 [ <retval> ])) lex.yy.c:1265 90 {*movsi_internal}
     (nil))
(insn 1320 1319 1321 166 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -8 [0xfffffffffffffff8])) [1 D.6797+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) lex.yy.c:1265 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1321 1320 1230 166 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1324)
            (pc))) lex.yy.c:1265 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 1324)
;;  succ:       175 [100.0%] 
;;              174 [0.0%]  (FALLTHRU)

;; basic block 167, loop depth 4, count 0, freq 0, maybe hot
;;  prev block 166, next block 168, flags: (RTL)
;;  pred:       109 [28.0%] 
(code_label 1230 1321 1231 167 201 "" [1 uses])
(note 1231 1230 1232 167 [bb 167] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1232 1231 1233 167 (var_location:SI yy_current_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 1233 1232 1234 167 (var_location:DI yy_cp (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 1234 1233 1235 167 (var_location:SI yy_next_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(insn 1235 1234 1236 167 (set (reg/v/f:DI 89 [ yy_cp ])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1188 89 {*movdi_internal}
     (nil))
(debug_insn 1236 1235 1239 167 (var_location:DI yy_bp (reg/v/f:DI 89 [ yy_cp ])) lex.yy.c:1188 -1
     (nil))
;;  succ:       35 [100.0%]  (FALLTHRU)

;; basic block 168, loop depth 6, count 0, freq 3, maybe hot
;;  prev block 167, next block 169, flags: (RTL)
;;  pred:       136 [72.0%] 
(code_label 1239 1236 1240 168 220 "" [1 uses])
(note 1240 1239 1242 168 [bb 168] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1242 1240 1243 168 (var_location:SI c (reg/v:SI 251 [ c ])) -1
     (nil))
(insn 1243 1242 1244 168 (set (reg:DI 519)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1244 1243 1245 168 (parallel [
            (set (reg:DI 518 [ D.6781 ])
                (ashift:DI (reg:DI 519)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 1245 1244 1246 168 (set (reg/f:DI 520)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1246 1245 1247 168 (parallel [
            (set (reg/f:DI 347 [ D.6780 ])
                (plus:DI (reg:DI 518 [ D.6781 ])
                    (reg/f:DI 520)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 518 [ D.6781 ]))
        (nil)))
(insn 1247 1246 1248 168 (set (reg/f:DI 521)
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_379+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1248 1247 1249 168 (set (reg/f:DI 522)
        (mem/f:DI (plus:DI (reg/f:DI 521)
                (const_int 8 [0x8])) [1 _380->yy_ch_buf+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1249 1248 1250 168 (parallel [
            (set (reg:DI 523)
                (plus:DI (reg/f:DI 522)
                    (reg/v:DI 212 [ n ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(insn 1250 1249 1251 168 (parallel [
            (set (reg/f:DI 524)
                (plus:DI (reg:DI 523)
                    (reg/v:DI 224 [ number_to_move ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(insn 1251 1250 1252 168 (set (mem:QI (reg/f:DI 524) [0 *_383+0 S1 A8])
        (subreg:QI (reg/v:SI 251 [ c ]) 0)) lex.yy.c:1364 93 {*movqi_internal}
     (nil))
(insn 1252 1251 1254 168 (parallel [
            (set (reg/v:DI 212 [ n ])
                (plus:DI (reg/v:DI 212 [ n ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(debug_insn 1254 1252 1255 168 (var_location:DI n (reg/v:DI 212 [ n ])) -1
     (nil))
(debug_insn 1255 1254 1257 168 (var_location:SI c (reg/v:SI 251 [ c ])) -1
     (nil))
(insn 1257 1255 1258 168 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 212 [ n ])
            (reg/v:DI 309 [ num_to_read ]))) lex.yy.c:1364 8 {*cmpdi_1}
     (nil))
(jump_insn 1258 1257 1263 168 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1256)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 8800 (nil))
 -> 1256)
;;  succ:       135 [88.0%]  (DFS_BACK)
;;              138 [12.0%]  (FALLTHRU)

;; basic block 169, loop depth 5, count 0, freq 6, maybe hot
;;  prev block 168, next block 170, flags: (RTL)
;;  pred:       142 [100.0%]  (FALLTHRU)
;;              140 [71.0%] 
(code_label 1263 1258 1264 169 223 "" [1 uses])
(note 1264 1263 1265 169 [bb 169] NOTE_INSN_BASIC_BLOCK)
(insn 1265 1264 1266 169 (set (reg:DI 526)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1266 1265 1267 169 (parallel [
            (set (reg:DI 525 [ D.6781 ])
                (ashift:DI (reg:DI 526)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 1267 1266 1268 169 (set (reg/f:DI 527)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1268 1267 1271 169 (parallel [
            (set (reg/f:DI 347 [ D.6780 ])
                (plus:DI (reg:DI 525 [ D.6781 ])
                    (reg/f:DI 527)))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 525 [ D.6781 ]))
        (nil)))
;;  succ:       144 [100.0%]  (FALLTHRU)

;; basic block 170, loop depth 6, count 0, freq 7, maybe hot
;;  prev block 169, next block 171, flags: (RTL)
;;  pred:       141 [50.0%] 
(code_label 1271 1268 1272 170 224 "" [1 uses])
(note 1272 1271 1274 170 [bb 170] NOTE_INSN_BASIC_BLOCK)
(insn 1274 1272 1275 170 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/f:DI 270 [ D.6794 ]) [2 *_402+0 S4 A32])
            (const_int 4 [0x4]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn 1275 1274 1281 170 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1273)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 1273)
;;  succ:       137 [0.0%] 
;;              143 [100.0%]  (FALLTHRU)

;; basic block 171, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 170, next block 172, flags: (RTL)
;;  pred:       136 [28.0%]  (FALLTHRU)
(note 1281 1275 1284 171 [bb 171] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1284 1281 1285 171 (var_location:SI c (const_int 10 [0xa])) -1
     (nil))
(insn 1285 1284 1286 171 (set (reg:DI 529)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1286 1285 1287 171 (parallel [
            (set (reg:DI 528 [ D.6781 ])
                (ashift:DI (reg:DI 529)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 1287 1286 1288 171 (set (reg/f:DI 530)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1288 1287 1289 171 (parallel [
            (set (reg/f:DI 347 [ D.6780 ])
                (plus:DI (reg:DI 528 [ D.6781 ])
                    (reg/f:DI 530)))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 528 [ D.6781 ]))
        (nil)))
(insn 1289 1288 1290 171 (parallel [
            (set (reg/v:DI 264 [ n ])
                (plus:DI (reg/v:DI 212 [ n ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(debug_insn 1290 1289 1291 171 (var_location:DI n (reg/v:DI 264 [ n ])) lex.yy.c:1364 -1
     (nil))
(insn 1291 1290 1292 171 (set (reg/f:DI 531)
        (mem/f:DI (reg/f:DI 347 [ D.6780 ]) [1 *_390+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1292 1291 1293 171 (set (reg/f:DI 532)
        (mem/f:DI (plus:DI (reg/f:DI 531)
                (const_int 8 [0x8])) [1 _391->yy_ch_buf+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1293 1292 1294 171 (parallel [
            (set (reg:DI 533)
                (plus:DI (reg/f:DI 532)
                    (reg/v:DI 212 [ n ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(insn 1294 1293 1295 171 (parallel [
            (set (reg/f:DI 534)
                (plus:DI (reg:DI 533)
                    (reg/v:DI 224 [ number_to_move ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (nil))
(insn 1295 1294 1296 171 (set (mem:QI (reg/f:DI 534) [0 *_395+0 S1 A8])
        (const_int 10 [0xa])) lex.yy.c:1364 93 {*movqi_internal}
     (nil))
(debug_insn 1296 1295 28 171 (var_location:DI n (reg/v:DI 264 [ n ])) -1
     (nil))
(insn 28 1296 1299 171 (set (reg/v:DI 212 [ n ])
        (reg/v:DI 264 [ n ])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
;;  succ:       138 [100.0%]  (FALLTHRU)

;; basic block 172, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 171, next block 173, flags: (RTL)
;;  pred:       135 [28.0%] 
(code_label 1299 28 1300 172 219 "" [1 uses])
(note 1300 1299 1303 172 [bb 172] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1303 1300 1304 172 (var_location:SI c (const_int -1 [0xffffffffffffffff])) -1
     (nil))
(debug_insn 1304 1303 1305 172 (var_location:DI n (reg/v:DI 212 [ n ])) -1
     (nil))
(insn 1305 1304 1306 172 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn 1306 1305 1307 172 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1307 1306 1308 172 (set (reg:SI 268 [ D.6777 ])
        (reg:SI 0 ax)) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1308 1307 1309 172 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 268 [ D.6777 ])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1309 1308 1310 172 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1273)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (int_list:REG_BR_PROB 5000 (nil))
 -> 1273)
;;  succ:       137 [50.0%] 
;;              173 [50.0%]  (FALLTHRU)

;; basic block 173, loop depth 5, count 0, freq 1, maybe hot
;;  prev block 172, next block 174, flags: (RTL)
;;  pred:       172 [50.0%]  (FALLTHRU)
(note 1310 1309 1311 173 [bb 173] NOTE_INSN_BASIC_BLOCK)
(insn 1311 1310 1312 173 (set (reg:DI 536)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1312 1311 1313 173 (parallel [
            (set (reg:DI 535 [ D.6781 ])
                (ashift:DI (reg:DI 536)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 1313 1312 1314 173 (set (reg/f:DI 537)
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1314 1313 1353 173 (parallel [
            (set (reg/f:DI 347 [ D.6780 ])
                (plus:DI (reg:DI 535 [ D.6781 ])
                    (reg/f:DI 537)))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
            (reg:DI 535 [ D.6781 ]))
        (nil)))
;;  succ:       138 [100.0%]  (FALLTHRU)

;; basic block 174, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 173, next block 175, flags: (RTL)
;;  pred:       166 [0.0%]  (FALLTHRU)
(note 1353 1314 1322 174 [bb 174] NOTE_INSN_BASIC_BLOCK)
(call_insn 1322 1353 1324 174 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f88bbdacaf8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) lex.yy.c:1265 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f88bbdacaf8 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      

;; basic block 175, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 174, next block 1, flags: (RTL)
;;  pred:       166 [100.0%] 
(code_label 1324 1322 1354 175 237 "" [1 uses])
(note 1354 1324 1325 175 [bb 175] NOTE_INSN_BASIC_BLOCK)
(insn 1325 1354 0 175 (use (reg/i:SI 0 ax)) lex.yy.c:1265 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function yy_buffer_state* yy_scan_buffer(char*, yy_size_t) (_Z14yy_scan_bufferPcm, funcdef_no=101, decl_uid=4272, cgraph_uid=101, symbol_order=128)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 9 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (reg/v/f:DI 97 [ base ])
        (reg:DI 5 di [ base ])) lex.yy.c:1857 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:DI 98 [ size ])
        (reg:DI 4 si [ size ])) lex.yy.c:1857 89 {*movdi_internal}
     (nil))
(note 4 3 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 4 12 2 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 98 [ size ])
            (const_int 1 [0x1]))) lex.yy.c:1860 8 {*cmpdi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 60)
            (pc))) lex.yy.c:1860 612 {*jcc_1}
     (int_list:REG_BR_PROB 395 (nil))
 -> 60)
;;  succ:       8 [4.0%] 
;;              3 [96.0%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 9605, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [96.0%]  (FALLTHRU)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (parallel [
            (set (reg:DI 88 [ D.6819 ])
                (plus:DI (reg/v:DI 98 [ size ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1861 218 {*adddi_1}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/v/f:DI 97 [ base ])
                    (reg:DI 88 [ D.6819 ])) [0 *_6+0 S1 A8])
            (const_int 0 [0]))) lex.yy.c:1860 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 64)
            (pc))) lex.yy.c:1860 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 64)
;;  succ:       9 [10.0%] 
;;              4 [90.0%]  (FALLTHRU)

;; basic block 4, loop depth 0, count 0, freq 8644, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [90.0%]  (FALLTHRU)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (plus:DI (reg/v/f:DI 97 [ base ])
                        (reg/v:DI 98 [ size ]))
                    (const_int -1 [0xffffffffffffffff])) [0 *_10+0 S1 A8])
            (const_int 0 [0]))) lex.yy.c:1861 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) lex.yy.c:1861 612 {*jcc_1}
     (int_list:REG_BR_PROB 2139 (nil))
 -> 68)
;;  succ:       10 [21.4%] 
;;              5 [78.6%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 6795, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 [78.6%]  (FALLTHRU)
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 21 20 22 5 (var_location:DI size (const_int 64 [0x40])) -1
     (nil))
(insn 22 21 23 5 (set (reg:DI 5 di)
        (const_int 64 [0x40])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 23 22 24 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 5 (set (reg/f:DI 99)
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 99)
        (nil)))
(insn 25 24 26 5 (set (reg/f:DI 95 [ D.6823 ])
        (reg/f:DI 99)) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(debug_insn 26 25 27 5 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1866 -1
     (nil))
(debug_insn 27 26 28 5 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1866 -1
     (nil))
(insn 28 27 29 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 95 [ D.6823 ])
            (const_int 0 [0]))) lex.yy.c:1867 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) lex.yy.c:1867 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 34)
;;  succ:       6 [0.0%]  (FALLTHRU)
;;              7 [100.0%] 

;; basic block 6, loop depth 0, count 0, freq 3
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 [0.0%]  (FALLTHRU)
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f88bbca4bd0 *.LC27>)) lex.yy.c:1868 89 {*movdi_internal}
     (nil))
(call_insn 32 31 34 6 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1868 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 7, loop depth 0, count 0, freq 6793, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5 [100.0%] 
(code_label 34 32 35 7 319 "" [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (mem:DI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 24 [0x18])) [4 MEM[(struct yy_buffer_state *)_26].yy_buf_size+0 S8 A64])
        (reg:DI 88 [ D.6819 ])) lex.yy.c:1870 89 {*movdi_internal}
     (nil))
(insn 37 36 38 7 (set (mem/f:DI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 8 [0x8])) [1 MEM[(struct yy_buffer_state *)_26].yy_ch_buf+0 S8 A64])
        (reg/v/f:DI 97 [ base ])) lex.yy.c:1871 89 {*movdi_internal}
     (nil))
(insn 38 37 39 7 (set (mem/f:DI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 16 [0x10])) [1 MEM[(struct yy_buffer_state *)_26].yy_buf_pos+0 S8 A64])
        (reg/v/f:DI 97 [ base ])) lex.yy.c:1871 89 {*movdi_internal}
     (nil))
(insn 39 38 40 7 (set (mem:SI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 36 [0x24])) [2 MEM[(struct yy_buffer_state *)_26].yy_is_our_buffer+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1872 90 {*movsi_internal}
     (nil))
(insn 40 39 41 7 (set (mem/f:DI (reg/f:DI 95 [ D.6823 ]) [1 MEM[(struct yy_buffer_state *)_26].yy_input_file+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1873 89 {*movdi_internal}
     (nil))
(insn 41 40 42 7 (set (mem:SI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 32 [0x20])) [2 MEM[(struct yy_buffer_state *)_26].yy_n_chars+0 S4 A64])
        (subreg:SI (reg:DI 88 [ D.6819 ]) 0)) lex.yy.c:1874 90 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (mem:SI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 40 [0x28])) [2 MEM[(struct yy_buffer_state *)_26].yy_is_interactive+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1875 90 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (mem:SI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 44 [0x2c])) [2 MEM[(struct yy_buffer_state *)_26].yy_at_bol+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1876 90 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (mem:SI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 56 [0x38])) [2 MEM[(struct yy_buffer_state *)_26].yy_fill_buffer+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1877 90 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (mem:SI (plus:DI (reg/f:DI 95 [ D.6823 ])
                (const_int 60 [0x3c])) [2 MEM[(struct yy_buffer_state *)_26].yy_buffer_status+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1878 90 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:DI 5 di)
        (reg/f:DI 95 [ D.6823 ])) lex.yy.c:1880 89 {*movdi_internal}
     (nil))
(call_insn 47 46 6 7 (call (mem:QI (symbol_ref:DI ("_Z19yy_switch_to_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c288 yy_switch_to_buffer>) [0 yy_switch_to_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1880 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z19yy_switch_to_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c288 yy_switch_to_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 6 47 60 7 (set (reg/f:DI 87 [ D.6818 ])
        (reg/f:DI 95 [ D.6823 ])) lex.yy.c:1882 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       2 [4.0%] 
(code_label 60 6 59 8 320 "" [1 uses])
(note 59 60 7 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 7 59 64 8 (set (reg/f:DI 87 [ D.6818 ])
        (const_int 0 [0])) lex.yy.c:1864 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 961, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       3 [10.0%] 
(code_label 64 7 63 9 321 "" [1 uses])
(note 63 64 5 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 5 63 68 9 (set (reg/f:DI 87 [ D.6818 ])
        (const_int 0 [0])) lex.yy.c:1864 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 10, loop depth 0, count 0, freq 1849, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       4 [21.4%] 
(code_label 68 5 67 10 322 "" [1 uses])
(note 67 68 8 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 8 67 48 10 (set (reg/f:DI 87 [ D.6818 ])
        (const_int 0 [0])) lex.yy.c:1864 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 9997, maybe hot
;;  prev block 10, next block 1, flags: (RTL)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              10 [100.0%]  (FALLTHRU)
;;              7 [100.0%]  (FALLTHRU)
;;              9 [100.0%]  (FALLTHRU)
(code_label 48 8 49 11 318 "" [0 uses])
(note 49 48 50 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 54 11 (set (reg:DI 96 [ <retval> ])
        (reg/f:DI 87 [ D.6818 ])) 89 {*movdi_internal}
     (nil))
(insn 54 50 55 11 (set (reg/i:DI 0 ax)
        (reg:DI 96 [ <retval> ])) lex.yy.c:1883 89 {*movdi_internal}
     (nil))
(insn 55 54 0 11 (use (reg/i:DI 0 ax)) lex.yy.c:1883 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function yy_buffer_state* yy_scan_bytes(const char*, yy_size_t) (_Z13yy_scan_bytesPKcm, funcdef_no=103, decl_uid=4277, cgraph_uid=103, symbol_order=130)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 6 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/v/f:DI 96 [ yybytes ])
        (reg:DI 5 di [ yybytes ])) lex.yy.c:1907 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:DI 97 [ _yybytes_len ])
        (reg:DI 4 si [ _yybytes_len ])) lex.yy.c:1907 89 {*movdi_internal}
     (nil))
(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (parallel [
            (set (reg/v:DI 87 [ n ])
                (plus:DI (reg/v:DI 97 [ _yybytes_len ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1914 218 {*adddi_1}
     (nil))
(debug_insn 9 8 10 2 (var_location:DI n (reg/v:DI 87 [ n ])) lex.yy.c:1914 -1
     (nil))
(debug_insn 10 9 11 2 (var_location:DI size (reg/v:DI 87 [ n ])) lex.yy.c:1914 -1
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/v:DI 87 [ n ])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 98)
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 98)
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 94 [ D.6837 ])
        (reg/f:DI 98)) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(debug_insn 15 14 16 2 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1915 -1
     (nil))
(debug_insn 16 15 17 2 (var_location:DI buf (clobber (const_int 0 [0]))) lex.yy.c:1915 -1
     (nil))
(insn 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 94 [ D.6837 ])
            (const_int 0 [0]))) lex.yy.c:1916 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) lex.yy.c:1916 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 36)
;;  succ:       5 [0.0%] 
;;              3 [100.0%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [100.0%]  (FALLTHRU)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 20 19 21 3 (var_location:DI i (const_int 0 [0])) -1
     (nil))
(insn 21 20 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ _yybytes_len ])
            (const_int 0 [0]))) lex.yy.c:1919 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 22 21 50 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) lex.yy.c:1919 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 41)
;;  succ:       4 [9.0%]  (FALLTHRU)
;;              6 [91.0%] 

;; basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [9.0%]  (FALLTHRU)
;;              7 [9.0%] 
(code_label 50 22 23 4 330 "" [1 uses])
(note 23 50 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 94 [ D.6837 ])
                    (reg/v:DI 97 [ _yybytes_len ]))
                (const_int 1 [0x1])) [0 *_16+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1922 93 {*movqi_internal}
     (nil))
(insn 25 24 26 4 (set (mem:QI (plus:DI (reg/f:DI 94 [ D.6837 ])
                (reg/v:DI 97 [ _yybytes_len ])) [0 *_14+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1922 93 {*movqi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 4 si)
        (reg/v:DI 87 [ n ])) lex.yy.c:1924 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 5 di)
        (reg/f:DI 94 [ D.6837 ])) lex.yy.c:1924 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z14yy_scan_bufferPcm") [flags 0x3]  <function_decl 0x7f88bc07ca20 yy_scan_buffer>) [0 yy_scan_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:1924 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z14yy_scan_bufferPcm") [flags 0x3]  <function_decl 0x7f88bc07ca20 yy_scan_buffer>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 29 28 30 4 (set (reg/v/f:DI 93 [ b ])
        (reg:DI 0 ax)) lex.yy.c:1924 89 {*movdi_internal}
     (nil))
(debug_insn 30 29 31 4 (var_location:DI b (reg/v/f:DI 93 [ b ])) lex.yy.c:1924 -1
     (nil))
(insn 31 30 32 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 93 [ b ])
            (const_int 0 [0]))) lex.yy.c:1925 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 32 31 36 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) lex.yy.c:1925 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 57)
;;  succ:       9 [0.0%] 
;;              10 [100.0%]  (FALLTHRU)

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       2 [0.0%] 
(code_label 36 32 37 5 326 "" [1 uses])
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f88bbcc7a20 *.LC29>)) lex.yy.c:1917 89 {*movdi_internal}
     (nil))
(call_insn 39 38 41 5 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1917 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 6, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       3 [91.0%] 
(code_label 41 39 42 6 327 "" [1 uses])
(note 42 41 5 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 5 42 53 6 (set (reg/v:DI 89 [ i ])
        (const_int 0 [0])) lex.yy.c:1919 89 {*movdi_internal}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 [100.0%]  (FALLTHRU)
;;              8 [100.0%]  (FALLTHRU)
(code_label 53 5 43 7 331 "" [0 uses])
(note 43 53 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 44 43 45 7 (var_location:DI i (reg/v:DI 89 [ i ])) -1
     (nil))
(insn 45 44 46 7 (set (reg:QI 99)
        (mem:QI (plus:DI (reg/v/f:DI 96 [ yybytes ])
                (reg/v:DI 89 [ i ])) [0 MEM[base: yybytes_9(D), index: i_27, offset: 0B]+0 S1 A8])) lex.yy.c:1920 93 {*movqi_internal}
     (nil))
(insn 46 45 47 7 (set (mem:QI (plus:DI (reg/f:DI 94 [ D.6837 ])
                (reg/v:DI 89 [ i ])) [0 MEM[base: _24, index: i_27, offset: 0B]+0 S1 A8])
        (reg:QI 99)) lex.yy.c:1920 93 {*movqi_internal}
     (nil))
(insn 47 46 49 7 (parallel [
            (set (reg/v:DI 89 [ i ])
                (plus:DI (reg/v:DI 89 [ i ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1919 218 {*adddi_1}
     (nil))
(debug_insn 49 47 51 7 (var_location:DI i (reg/v:DI 89 [ i ])) -1
     (nil))
(insn 51 49 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 97 [ _yybytes_len ])
            (reg/v:DI 89 [ i ]))) lex.yy.c:1919 8 {*cmpdi_1}
     (nil))
(jump_insn 52 51 56 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) lex.yy.c:1919 612 {*jcc_1}
     (int_list:REG_BR_PROB 900 (nil))
 -> 50)
;;  succ:       4 [9.0%] 
;;              8 [91.0%]  (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [91.0%]  (FALLTHRU,DFS_BACK)
(note 56 52 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       7 [100.0%]  (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       4 [0.0%] 
(code_label 57 56 58 9 328 "" [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f88bbcc7ab0 *.LC30>)) lex.yy.c:1926 89 {*movdi_internal}
     (nil))
(call_insn 60 59 63 9 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1926 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       4 [100.0%]  (FALLTHRU)
(note 63 60 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 10 (set (mem:SI (plus:DI (reg/v/f:DI 93 [ b ])
                (const_int 36 [0x24])) [2 b_20->yy_is_our_buffer+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1931 90 {*movsi_internal}
     (nil))
(insn 65 64 69 10 (set (reg:DI 95 [ <retval> ])
        (reg/v/f:DI 93 [ b ])) lex.yy.c:1933 89 {*movdi_internal}
     (nil))
(insn 69 65 70 10 (set (reg/i:DI 0 ax)
        (reg:DI 95 [ <retval> ])) lex.yy.c:1934 89 {*movdi_internal}
     (nil))
(insn 70 69 0 10 (use (reg/i:DI 0 ax)) lex.yy.c:1934 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function yy_buffer_state* yy_scan_string(const char*) (_Z14yy_scan_stringPKc, funcdef_no=102, decl_uid=4274, cgraph_uid=102, symbol_order=129)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 90 [ yystr ])
        (reg:DI 5 di [ yystr ])) lex.yy.c:1894 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (reg/v/f:DI 90 [ yystr ])) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(call_insn/i 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f88bc2f60d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) lex.yy.c:1896 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f88bc2f60d8 strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 92)
        (reg:DI 0 ax)) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 93)
        (reg:DI 92)) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 87 [ D.6842 ])
        (reg:DI 93)) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg:DI 87 [ D.6842 ])) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/v/f:DI 90 [ yystr ])) lex.yy.c:1896 89 {*movdi_internal}
     (nil))
(call_insn/j 13 12 0 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z13yy_scan_bytesPKcm") [flags 0x3]  <function_decl 0x7f88bc07cbd0 yy_scan_bytes>) [0 yy_scan_bytes S1 A8])
            (const_int 0 [0]))) lex.yy.c:1896 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z13yy_scan_bytesPKcm") [flags 0x3]  <function_decl 0x7f88bc07cbd0 yy_scan_bytes>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)


;; Function int yyget_lineno() (_Z12yyget_linenov, funcdef_no=105, decl_uid=5475, cgraph_uid=105, symbol_order=132)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 90)
        (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])) lex.yy.c:1971 90 {*movsi_internal}
     (nil))
(insn 6 5 10 2 (set (reg:SI 88 [ <retval> ])
        (reg:SI 90)) lex.yy.c:1971 90 {*movsi_internal}
     (nil))
(insn 10 6 11 2 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) lex.yy.c:1972 90 {*movsi_internal}
     (nil))
(insn 11 10 0 2 (use (reg/i:SI 0 ax)) lex.yy.c:1972 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function FILE* yyget_in() (_Z8yyget_inv, funcdef_no=106, decl_uid=5467, cgraph_uid=106, symbol_order=133)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 90)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1979 89 {*movdi_internal}
     (nil))
(insn 6 5 10 2 (set (reg:DI 88 [ <retval> ])
        (reg/f:DI 90)) lex.yy.c:1979 89 {*movdi_internal}
     (nil))
(insn 10 6 11 2 (set (reg/i:DI 0 ax)
        (reg:DI 88 [ <retval> ])) lex.yy.c:1980 89 {*movdi_internal}
     (nil))
(insn 11 10 0 2 (use (reg/i:DI 0 ax)) lex.yy.c:1980 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function FILE* yyget_out() (_Z9yyget_outv, funcdef_no=107, decl_uid=5470, cgraph_uid=107, symbol_order=134)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 90)
        (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])) lex.yy.c:1987 89 {*movdi_internal}
     (nil))
(insn 6 5 10 2 (set (reg:DI 88 [ <retval> ])
        (reg/f:DI 90)) lex.yy.c:1987 89 {*movdi_internal}
     (nil))
(insn 10 6 11 2 (set (reg/i:DI 0 ax)
        (reg:DI 88 [ <retval> ])) lex.yy.c:1988 89 {*movdi_internal}
     (nil))
(insn 11 10 0 2 (use (reg/i:DI 0 ax)) lex.yy.c:1988 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function yy_size_t yyget_leng() (_Z10yyget_lengv, funcdef_no=108, decl_uid=5473, cgraph_uid=108, symbol_order=135)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 90)
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) lex.yy.c:1995 89 {*movdi_internal}
     (nil))
(insn 6 5 10 2 (set (reg:DI 88 [ <retval> ])
        (reg:DI 90)) lex.yy.c:1995 89 {*movdi_internal}
     (nil))
(insn 10 6 11 2 (set (reg/i:DI 0 ax)
        (reg:DI 88 [ <retval> ])) lex.yy.c:1996 89 {*movdi_internal}
     (nil))
(insn 11 10 0 2 (use (reg/i:DI 0 ax)) lex.yy.c:1996 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function char* yyget_text() (_Z10yyget_textv, funcdef_no=109, decl_uid=5474, cgraph_uid=109, symbol_order=136)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 90)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:2004 89 {*movdi_internal}
     (nil))
(insn 6 5 10 2 (set (reg:DI 88 [ <retval> ])
        (reg/f:DI 90)) lex.yy.c:2004 89 {*movdi_internal}
     (nil))
(insn 10 6 11 2 (set (reg/i:DI 0 ax)
        (reg:DI 88 [ <retval> ])) lex.yy.c:2005 89 {*movdi_internal}
     (nil))
(insn 11 10 0 2 (use (reg/i:DI 0 ax)) lex.yy.c:2005 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yyset_lineno(int) (_Z12yyset_linenoi, funcdef_no=110, decl_uid=5477, cgraph_uid=110, symbol_order=137)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v:SI 87 [ _line_number ])
        (reg:SI 5 di [ _line_number ])) lex.yy.c:2012 90 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 0 2 (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
        (reg/v:SI 87 [ _line_number ])) lex.yy.c:2014 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yyset_in(FILE*) (_Z8yyset_inP8_IO_FILE, funcdef_no=111, decl_uid=5469, cgraph_uid=111, symbol_order=138)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 87 [ _in_str ])
        (reg:DI 5 di [ _in_str ])) lex.yy.c:2024 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 0 2 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/v/f:DI 87 [ _in_str ])) lex.yy.c:2025 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yyset_out(FILE*) (_Z9yyset_outP8_IO_FILE, funcdef_no=112, decl_uid=5472, cgraph_uid=112, symbol_order=139)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 87 [ _out_str ])
        (reg:DI 5 di [ _out_str ])) lex.yy.c:2029 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 0 2 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (reg/v/f:DI 87 [ _out_str ])) lex.yy.c:2030 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function int yyget_debug() (_Z11yyget_debugv, funcdef_no=113, decl_uid=5461, cgraph_uid=113, symbol_order=140)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 90)
        (mem/c:SI (symbol_ref:DI ("yy_flex_debug") [flags 0x2]  <var_decl 0x7f88bc080ab0 yy_flex_debug>) [2 yy_flex_debug+0 S4 A32])) lex.yy.c:2035 90 {*movsi_internal}
     (nil))
(insn 6 5 10 2 (set (reg:SI 88 [ <retval> ])
        (reg:SI 90)) lex.yy.c:2035 90 {*movsi_internal}
     (nil))
(insn 10 6 11 2 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) lex.yy.c:2036 90 {*movsi_internal}
     (nil))
(insn 11 10 0 2 (use (reg/i:SI 0 ax)) lex.yy.c:2036 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void yyset_debug(int) (_Z11yyset_debugi, funcdef_no=114, decl_uid=5463, cgraph_uid=114, symbol_order=141)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v:SI 87 [ _bdebug ])
        (reg:SI 5 di [ _bdebug ])) lex.yy.c:2039 90 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 0 2 (set (mem/c:SI (symbol_ref:DI ("yy_flex_debug") [flags 0x2]  <var_decl 0x7f88bc080ab0 yy_flex_debug>) [2 yy_flex_debug+0 S4 A32])
        (reg/v:SI 87 [ _bdebug ])) lex.yy.c:2040 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function int yylex_destroy() (_Z13yylex_destroyv, funcdef_no=116, decl_uid=5460, cgraph_uid=116, symbol_order=143)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:DI 91 [ D.6873 ])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 91 [ D.6873 ])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (int_list:REG_BR_PROB 450 (nil))
 -> 25)
;;  succ:       5 [4.5%] 
;;              3 [95.5%]  (FALLTHRU)

;; basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 [95.5%]  (FALLTHRU)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:DI 98)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (parallel [
            (set (reg:DI 97 [ D.6872 ])
                (ashift:DI (reg:DI 98)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2079 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 11 10 12 3 (parallel [
            (set (reg/f:DI 92 [ D.6873 ])
                (plus:DI (reg/f:DI 91 [ D.6873 ])
                    (reg:DI 97 [ D.6872 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2079 218 {*adddi_1}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 95 [ D.6874 ])
        (mem/f:DI (reg/f:DI 92 [ D.6873 ]) [1 *_12+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 95 [ D.6874 ])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 14 13 49 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (int_list:REG_BR_PROB 450 (nil))
 -> 25)
;;  succ:       5 [4.5%] 
;;              7 [95.5%]  (FALLTHRU)

;; basic block 4, loop depth 1, count 0, freq 8710, maybe hot
;; Invalid sum of incoming frequencies 9120, should be 8710
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              6 [100.0%]  (FALLTHRU)
(code_label 49 14 18 4 353 "" [0 uses])
(note 18 49 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:DI 100)
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg:DI 99 [ D.6872 ])
                (ashift:DI (reg:DI 100)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2079 512 {*ashldi3_1}
     (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (const_int 3 [0x3]))
        (nil)))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 89 [ D.6873 ])
                (plus:DI (reg/f:DI 91 [ D.6873 ])
                    (reg:DI 99 [ D.6872 ])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2079 218 {*adddi_1}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 90 [ D.6874 ])
        (mem/f:DI (reg/f:DI 89 [ D.6873 ]) [1 *_7+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 90 [ D.6874 ])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (int_list:REG_BR_PROB 9550 (nil))
 -> 43)
;;  succ:       5 [4.5%]  (FALLTHRU)
;;              6 [95.5%] 

;; basic block 5, loop depth 0, count 0, freq 880, maybe hot
;; Invalid sum of incoming frequencies 470, should be 880
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [4.5%] 
;;              4 [4.5%]  (FALLTHRU)
;;              2 [4.5%] 
(code_label 25 24 26 5 350 "" [2 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 27 26 28 5 (var_location:DI ptr (reg/f:DI 91 [ D.6873 ])) lex.yy.c:2086 -1
     (nil))
(insn 28 27 29 5 (set (reg:DI 5 di)
        (reg/f:DI 91 [ D.6873 ])) lex.yy.c:2141 89 {*movdi_internal}
     (nil))
(call_insn 29 28 30 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 30 29 31 5 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:2086 -1
     (nil))
(insn 31 30 32 5 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2087 89 {*movdi_internal}
     (nil))
(insn 32 31 33 5 (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:2050 90 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2053 89 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2054 89 {*movdi_internal}
     (nil))
(insn 35 34 36 5 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2055 89 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (set (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:2056 90 {*movsi_internal}
     (nil))
(insn 37 36 38 5 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:2057 90 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2064 89 {*movdi_internal}
     (nil))
(insn 39 38 40 5 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2065 89 {*movdi_internal}
     (nil))
(insn 40 39 43 5 (set (reg:SI 96 [ <retval> ])
        (const_int 0 [0])) lex.yy.c:2093 90 {*movsi_internal}
     (nil))
;;  succ:       8 [100.0%]  (FALLTHRU)

;; basic block 6, loop depth 1, count 0, freq 8318, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [95.5%] 
(code_label 43 40 44 6 352 "" [1 uses])
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg:DI 5 di)
        (reg/f:DI 90 [ D.6874 ])) lex.yy.c:2080 89 {*movdi_internal}
     (nil))
(call_insn 46 45 47 6 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:2080 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 47 46 48 6 (set (mem/f:DI (reg/f:DI 89 [ D.6873 ]) [1 *_7+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2081 89 {*movdi_internal}
     (nil))
(call_insn 48 47 53 6 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) lex.yy.c:2082 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)

;; basic block 7, loop depth 0, count 0, freq 802, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       3 [95.5%]  (FALLTHRU)
(note 53 48 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg:DI 5 di)
        (reg/f:DI 95 [ D.6874 ])) lex.yy.c:2080 89 {*movdi_internal}
     (nil))
(call_insn 55 54 56 7 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:2080 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 56 55 57 7 (set (mem/f:DI (reg/f:DI 92 [ D.6873 ]) [1 *_12+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2081 89 {*movdi_internal}
     (nil))
(call_insn 57 56 63 7 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) lex.yy.c:2082 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:       4 [100.0%]  (FALLTHRU)

;; basic block 8, loop depth 0, count 0, freq 880, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       5 [100.0%]  (FALLTHRU)
(note 63 57 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 61 63 62 8 (set (reg/i:SI 0 ax)
        (reg:SI 96 [ <retval> ])) lex.yy.c:2094 90 {*movsi_internal}
     (nil))
(insn 62 61 0 8 (use (reg/i:SI 0 ax)) lex.yy.c:2094 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function void* yyalloc(yy_size_t) (_Z7yyallocm, funcdef_no=117, decl_uid=4279, cgraph_uid=117, symbol_order=144)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v:DI 89 [ size ])
        (reg:DI 5 di [ size ])) lex.yy.c:2122 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (reg/v:DI 89 [ size ])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn/j 7 6 0 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)


;; Function void* yyrealloc(void*, yy_size_t) (_Z9yyreallocPvm, funcdef_no=118, decl_uid=4282, cgraph_uid=118, symbol_order=145)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 89 [ ptr ])
        (reg:DI 5 di [ ptr ])) lex.yy.c:2127 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:DI 90 [ size ])
        (reg:DI 4 si [ size ])) lex.yy.c:2127 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 4 si)
        (reg/v:DI 90 [ size ])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (reg/v/f:DI 89 [ ptr ])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(call_insn/j 9 8 0 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)


;; Function void yyfree(void*) (_Z6yyfreePv, funcdef_no=119, decl_uid=4284, cgraph_uid=119, symbol_order=146)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode BND64 for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Skipping mode V12QI for copy lowering.
  Skipping mode V6HI for copy lowering.
  Skipping mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 87 [ ptr ])
        (reg:DI 5 di [ ptr ])) lex.yy.c:2140 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (reg/v/f:DI 87 [ ptr ])) lex.yy.c:2141 89 {*movdi_internal}
     (nil))
(call_insn/j 7 6 0 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)

