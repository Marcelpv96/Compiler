
;; Function yy_state_type yy_get_previous_state() (_ZL21yy_get_previous_statev, funcdef_no=87, decl_uid=4292, cgraph_uid=87, symbol_order=114) (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 23 count 29 (  1.7)


yy_state_type yy_get_previous_state()

Dataflow summary:
def_info->table_size = 53, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12]
;;  ref usage 	r0={4d,12u} r1={6d,7u} r2={3d,7u} r3={3d,3u} r4={2d,2u} r5={4d,4u} r6={3d,4u} r7={7d,22u} r17={11d,7u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={3d,1u} r38={3d,1u} r39={2d,1u} r40={2d,1u} r41={4d,4u} 
;;    total ref usage 141{65d,76u,0e} in 63{63 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 2 11 )->[3]->( 12 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 4 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 7 9 6 10 )->[8]->( 11 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 8 )->[9]->( 10 8 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 9 )->[10]->( 8 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 8 )->[11]->( 3 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

( 3 )->[12]->( 14 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp] 40 [r11]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

( 12 )->[13]->( 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]

( 13 12 )->[14]->( 16 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 38 [r9]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 7 [sp] 37 [r8]

( 14 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp] 37 [r8]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 15 14 )->[16]->( 1 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 16 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 153 to worklist
  Adding insn 152 to worklist
  Adding insn 151 to worklist
  Adding insn 36 to worklist
  Adding insn 40 to worklist
  Adding insn 52 to worklist
  Adding insn 73 to worklist
  Adding insn 82 to worklist
  Adding insn 167 to worklist
  Adding insn 169 to worklist
  Adding insn 108 to worklist
  Adding insn 110 to worklist
  Adding insn 114 to worklist
  Adding insn 116 to worklist
  Adding insn 161 to worklist
  Adding insn 124 to worklist
Finished finding needed instructions:
processing block 16 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 160 to worklist
  Adding insn 159 to worklist
  Adding insn 158 to worklist
processing block 15 lr out =  0 [ax] 7 [sp]
processing block 14 lr out =  0 [ax] 7 [sp] 37 [r8]
  Adding insn 113 to worklist
processing block 13 lr out =  0 [ax] 7 [sp] 37 [r8] 38 [r9]
processing block 12 lr out =  0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
  Adding insn 107 to worklist
processing block 11 lr out =  0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 100 to worklist
  Adding insn 98 to worklist
  Adding insn 97 to worklist
processing block 10 lr out =  0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 87 to worklist
processing block 9 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 81 to worklist
  Adding insn 78 to worklist
processing block 8 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 72 to worklist
  Adding insn 71 to worklist
  Adding insn 70 to worklist
  Adding insn 69 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 64 to worklist
processing block 7 lr out =  0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 22 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
processing block 6 lr out =  0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 51 to worklist
  Adding insn 50 to worklist
processing block 5 lr out =  0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 45 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 39 to worklist
  Adding insn 18 to worklist
  Adding insn 38 to worklist
processing block 3 lr out =  0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 35 to worklist
processing block 2 lr out =  0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
  Adding insn 164 to worklist
  Adding insn 163 to worklist
  Adding insn 31 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 27 to worklist
  Adding insn 25 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 23 count 29 (  1.7)
;;   ======================================================
;;   -- basic block 2 from 151 to 164 -- after reload
;;   ======================================================

;;	  0--> b  0: i 151 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  25 ax=[`_ZL8yy_start']                     :athlon-direct,athlon-load
;;	  0--> b  0: i  26 loc ax                                  :nothing
;;	  0--> b  0: i 163 {r9=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 152 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  27 cx=[`yytext']                           :athlon-direct,athlon-load
;;	  1--> b  0: i  28 loc cx                                  :nothing
;;	  1--> b  0: i 164 {r11=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 153 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  30 r10=[`_ZL23yy_last_accepting_state']    :athlon-direct,athlon-load
;;	  3--> b  0: i  29 bx=[`_ZL10yy_c_buf_p']                  :athlon-direct,athlon-load
;;	  3--> b  0: i  31 r8=[`_ZL22yy_last_accepting_cpos']      :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 3
;;   new head = 151
;;   new tail = 31

;;   ======================================================
;;   -- basic block 3 from 33 to 36 -- after reload
;;   ======================================================

;;	  0--> b  0: i  33 loc cx                                  :nothing
;;	  0--> b  0: i  34 loc ax                                  :nothing
;;	  0--> b  0: i  35 flags=cmp(cx,bx)                        :athlon-direct,athlon-ieu
;;	  1--> b  0: i  36 pc={(geu(flags,0))?L105:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 33
;;   new tail = 36

;;   ======================================================
;;   -- basic block 4 from 38 to 40 -- after reload
;;   ======================================================

;;	  0--> b  0: i  38 dx=zxn([cx])                            :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  18 di=0x1                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i  39 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i  40 pc={(flags==0)?L46:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 38
;;   new tail = 40

;;   ======================================================
;;   -- basic block 5 from 45 to 45 -- after reload
;;   ======================================================

;;	  0--> b  0: i  45 di=[dx+`_ZL5yy_ec']                     :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 45
;;   new tail = 45

;;   ======================================================
;;   -- basic block 6 from 48 to 52 -- after reload
;;   ======================================================

;;	  0--> b  0: i  48 loc di                                  :nothing
;;	  0--> b  0: i  50 dx=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  51 flags=cmp([dx*0x2+`_ZL9yy_accept'],0)   :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i  52 pc={(flags==0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 48
;;   new tail = 52

;;   ======================================================
;;   -- basic block 7 from 19 to 22 -- after reload
;;   ======================================================

;;	  0--> b  0: i  19 r8=cx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  20 r10=ax                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  21 r9=0x1                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i  22 r11=0x1                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 19
;;   new tail = 22

;;   ======================================================
;;   -- basic block 8 from 61 to 73 -- after reload
;;   ======================================================

;;	  0--> b  0: i  61 loc di                                  :nothing
;;	  0--> b  0: i  62 loc ax                                  :nothing
;;	  0--> b  0: i  64 bp=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i  68 si=zxn(di)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  67 dx=zxn([bp*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i  69 {dx=dx+si;clobber flags;}               :athlon-direct,athlon-ieu
;;	  6--> b  0: i  70 r12=sxn(dx)                             :athlon-direct,athlon-ieu
;;	  7--> b  0: i  71 r12=sxn([r12*0x2+`_ZL6yy_chk'])         :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i  72 flags=cmp(ax,r12)                       :athlon-direct,athlon-ieu
;;	 12--> b  0: i  73 pc={(flags==0)?L91:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 61
;;   new tail = 73

;;   ======================================================
;;   -- basic block 9 from 78 to 82 -- after reload
;;   ======================================================

;;	  0--> b  0: i  78 ax=sxn([bp*0x2+`_ZL6yy_def'])           :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  79 loc ax                                  :nothing
;;	  4--> b  0: i  81 flags=cmp(ax,0x65)                      :athlon-direct,athlon-ieu
;;	  5--> b  0: i  82 pc={(flags<=0)?L59:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 78
;;   new tail = 82

;;   ======================================================
;;   -- basic block 10 from 87 to 167 -- after reload
;;   ======================================================

;;	  0--> b  0: i  87 di=[si+`_ZL7yy_meta']                   :athlon-direct,athlon-load
;;	  0--> b  0: i  88 loc di                                  :nothing
;;	  0--> b  0: i 167 pc=L59                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 87
;;   new tail = 167

;;   ======================================================
;;   -- basic block 11 from 97 to 169 -- after reload
;;   ======================================================

;;	  0--> b  0: i  97 dx=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 100 {cx=cx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  98 ax=zxn([dx*0x2+`_ZL6yy_nxt'])           :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i  99 loc ax                                  :nothing
;;	  1--> b  0: i 101 loc cx                                  :nothing
;;	  1--> b  0: i 169 pc=L102                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 97
;;   new tail = 169

;;   ======================================================
;;   -- basic block 12 from 107 to 108 -- after reload
;;   ======================================================

;;	  0--> b  0: i 107 flags=cmp(r11,0)                        :athlon-direct,athlon-ieu
;;	  1--> b  0: i 108 pc={(flags==0)?L111:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 107
;;   new tail = 108

;;   ======================================================
;;   -- basic block 13 from 110 to 110 -- after reload
;;   ======================================================

;;	  0--> b  0: i 110 [`_ZL23yy_last_accepting_state']=r10    :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 110
;;   new tail = 110

;;   ======================================================
;;   -- basic block 14 from 113 to 114 -- after reload
;;   ======================================================

;;	  0--> b  0: i 113 flags=cmp(r9,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 114 pc={(flags==0)?L117:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 113
;;   new tail = 114

;;   ======================================================
;;   -- basic block 15 from 116 to 116 -- after reload
;;   ======================================================

;;	  0--> b  0: i 116 [`_ZL22yy_last_accepting_cpos']=r8      :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 116
;;   new tail = 116

;;   ======================================================
;;   -- basic block 16 from 124 to 161 -- after reload
;;   ======================================================

;;	  0--> b  0: i 158 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  0--> b  0: i 124 use ax                                  :nothing
;;	  1--> b  0: i 159 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 160 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 161 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 171
;;   new tail = 161



starting the processing of deferred insns
ending the processing of deferred insns


yy_state_type yy_get_previous_state()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12]
;;  ref usage 	r0={4d,12u} r1={6d,7u} r2={3d,7u} r3={3d,3u} r4={2d,2u} r5={4d,4u} r6={3d,4u} r7={7d,22u} r17={11d,7u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={3d,1u} r38={3d,1u} r39={2d,1u} r40={2d,1u} r41={4d,4u} 
;;    total ref usage 141{65d,76u,0e} in 63{63 regular + 0 call} insns.
(note 14 0 23 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 17 [flags] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
(note 23 14 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 15 23 151 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 151 15 25 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) lex.yy.c:1409 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 25 151 26 2 (set (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:1413 90 {*movsi_internal}
     (nil))
(debug_insn 26 25 163 2 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1413 -1
     (nil))
(insn 163 26 152 2 (parallel [
            (set (reg:DI 38 r9 [orig:120 yy_last_accepting_cpos_lsm.163 ] [120])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1415 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f:TI 152 163 27 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1409 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 27 152 28 2 (set (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1415 89 {*movdi_internal}
     (nil))
(debug_insn 28 27 164 2 (var_location:DI yy_cp (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) lex.yy.c:1415 -1
     (nil))
(insn 164 28 153 2 (parallel [
            (set (reg:DI 40 r11 [orig:122 yy_last_accepting_state_lsm.161 ] [122])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1415 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f:TI 153 164 154 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1409 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 154 153 30 2 NOTE_INSN_PROLOGUE_END)
(insn 30 154 29 2 (set (reg:SI 39 r10 [orig:123 yy_last_accepting_state_lsm.160 ] [123])
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 29 30 31 2 (set (reg/f:DI 3 bx [orig:103 D.6587 ] [103])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1415 89 {*movdi_internal}
     (nil))
(insn 31 29 102 2 (set (reg/f:DI 37 r8 [orig:121 yy_last_accepting_cpos_lsm.162 ] [121])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 3, loop depth 0, count 0, freq 989, probably never executed
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 102 31 32 3 8 "" [1 uses])
(note 32 102 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 33 32 34 3 (var_location:DI yy_cp (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) -1
     (nil))
(debug_insn 34 33 35 3 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) -1
     (nil))
(insn:TI 35 34 36 3 (set (reg:CC 17 flags)
        (compare:CC (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
            (reg/f:DI 3 bx [orig:103 D.6587 ] [103]))) lex.yy.c:1415 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 36 35 37 3 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 105)
            (pc))) lex.yy.c:1415 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 105)
;;  succ:       12 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              4 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 4, loop depth 0, count 0, freq 900, probably never executed
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 5 [di] 17 [flags]
;; live  kill	
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 38 37 18 4 (set (reg:DI 1 dx)
        (zero_extend:DI (mem:QI (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101]) [0 MEM[base: yy_cp_3, offset: 0B]+0 S1 A8]))) lex.yy.c:1417 134 {zero_extendqidi2}
     (nil))
(insn 18 38 39 4 (set (reg/v:QI 5 di [orig:102 yy_c ] [102])
        (const_int 1 [0x1])) lex.yy.c:1417 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn:TI 39 18 40 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 1 dx [orig:104 D.6588 ] [104])
            (const_int 0 [0]))) lex.yy.c:1417 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn:TI 40 39 41 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 46)
            (pc))) lex.yy.c:1417 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 46)
;;  succ:       5 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 5, loop depth 0, count 0, freq 450, probably never executed
;;  prev block 4, next block 6, flags: (REACHABLE, RTL)
;;  pred:       4 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 5 [di]
;; live  kill	
(note 41 40 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 43 41 45 5 NOTE_INSN_DELETED)
(insn:TI 45 43 46 5 (set (reg/v:QI 5 di [orig:102 yy_c ] [102])
        (mem/u/j:QI (plus:DI (reg:DI 1 dx [orig:127 D.6590 ] [127])
                (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) [0 yy_ec S1 A8])) lex.yy.c:1417 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:127 D.6590 ] [127])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 6, loop depth 0, count 0, freq 900, probably never executed
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [50.0%]  (CAN_FALLTHRU)
;;              5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 46 45 47 6 3 "" [1 uses])
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 48 47 50 6 (var_location:QI yy_c (reg/v:QI 5 di [orig:102 yy_c ] [102])) lex.yy.c:1417 -1
     (nil))
(insn:TI 50 48 51 6 (set (reg:DI 1 dx [orig:129 yy_current_state ] [129])
        (sign_extend:DI (reg/v:SI 0 ax [orig:100 yy_current_state ] [100]))) lex.yy.c:1418 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 51 50 52 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:129 yy_current_state ] [129])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])
            (const_int 0 [0]))) lex.yy.c:1418 2 {*cmphi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:129 yy_current_state ] [129])
        (nil)))
(jump_insn:TI 52 51 53 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) lex.yy.c:1418 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 59)
;;  succ:       7 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 7, loop depth 0, count 0, freq 450, probably never executed
;;  prev block 6, next block 8, flags: (REACHABLE, RTL)
;;  pred:       6 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  kill	
(note 53 52 19 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 19 53 20 7 (set (reg/f:DI 37 r8 [orig:121 yy_last_accepting_cpos_lsm.162 ] [121])
        (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) lex.yy.c:1418 89 {*movdi_internal}
     (nil))
(insn 20 19 21 7 (set (reg:SI 39 r10 [orig:123 yy_last_accepting_state_lsm.160 ] [123])
        (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1418 90 {*movsi_internal}
     (nil))
(insn 21 20 22 7 (set (reg:QI 38 r9 [orig:120 yy_last_accepting_cpos_lsm.163 ] [120])
        (const_int 1 [0x1])) lex.yy.c:1418 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn:TI 22 21 59 7 (set (reg:QI 40 r11 [orig:122 yy_last_accepting_state_lsm.161 ] [122])
        (const_int 1 [0x1])) lex.yy.c:1418 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 8, loop depth 0, count 0, freq 10000, probably never executed
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              9 [50.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              6 [50.0%]  (CAN_FALLTHRU)
;;              10 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 1 [dx] 4 [si] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(code_label 59 22 60 8 5 "" [3 uses])
(note 60 59 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 65 60 61 8 NOTE_INSN_DELETED)
(debug_insn 61 65 62 8 (var_location:QI yy_c (reg/v:QI 5 di [orig:102 yy_c ] [102])) -1
     (nil))
(debug_insn 62 61 64 8 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) -1
     (nil))
(insn:TI 64 62 68 8 (set (reg:DI 6 bp [orig:131 yy_current_state ] [131])
        (sign_extend:DI (reg/v:SI 0 ax [orig:100 yy_current_state ] [100]))) lex.yy.c:1423 142 {*extendsidi2_rex64}
     (nil))
(insn 68 64 67 8 (set (reg:DI 4 si)
        (zero_extend:DI (reg/v:QI 5 di [orig:102 yy_c ] [102]))) lex.yy.c:1423 134 {zero_extendqidi2}
     (nil))
(insn:TI 67 68 69 8 (set (reg:SI 1 dx [orig:133 D.6593 ] [133])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 6 bp [orig:131 yy_current_state ] [131])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) lex.yy.c:1423 139 {*zero_extendhisi2}
     (nil))
(insn:TI 69 67 70 8 (parallel [
            (set (reg:SI 1 dx [orig:135 D.6593 ] [135])
                (plus:SI (reg:SI 1 dx [orig:133 D.6593 ] [133])
                    (reg:SI 4 si [orig:134 D.6593 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1423 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 70 69 71 8 (set (reg:DI 41 r12 [orig:136 D.6593 ] [136])
        (sign_extend:DI (reg:SI 1 dx [orig:135 D.6593 ] [135]))) lex.yy.c:1423 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 71 70 72 8 (set (reg:SI 41 r12 [orig:137 D.6593 ] [137])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 41 r12 [orig:136 D.6593 ] [136])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:1423 146 {extendhisi2}
     (nil))
(insn:TI 72 71 73 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
            (reg:SI 41 r12 [orig:137 D.6593 ] [137]))) lex.yy.c:1423 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 41 r12 [orig:137 D.6593 ] [137])
        (expr_list:REG_DEAD (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
            (nil))))
(jump_insn:TI 73 72 74 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) lex.yy.c:1423 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 91)
;;  succ:       11 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              9 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 9, loop depth 0, count 0, freq 9100, probably never executed
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 74 73 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(note 77 74 78 9 NOTE_INSN_DELETED)
(insn:TI 78 77 79 9 (set (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 6 bp [orig:131 yy_current_state ] [131])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) lex.yy.c:1425 146 {extendhisi2}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:131 yy_current_state ] [131])
        (nil)))
(debug_insn 79 78 81 9 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1425 -1
     (nil))
(insn:TI 81 79 82 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
            (const_int 101 [0x65]))) lex.yy.c:1426 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 82 81 83 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) lex.yy.c:1426 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 59)
;;  succ:       10 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [50.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

;; basic block 10, loop depth 0, count 0, freq 4550, probably never executed
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 5 [di]
;; live  kill	
(note 83 82 87 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 87 83 88 10 (set (reg/v:QI 5 di [orig:102 yy_c ] [102])
        (mem/u/j:QI (plus:DI (reg:DI 4 si [orig:141 D.6590 ] [141])
                (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) [0 yy_meta S1 A8])) lex.yy.c:1427 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:141 D.6590 ] [141])
        (nil)))
(debug_insn 88 87 167 10 (var_location:QI yy_c (reg/v:QI 5 di [orig:102 yy_c ] [102])) lex.yy.c:1427 -1
     (nil))
(jump_insn 167 88 168 10 (set (pc)
        (label_ref 59)) 654 {jump}
     (nil)
 -> 59)
;;  succ:       8 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

(barrier 168 167 91)
;; basic block 11, loop depth 0, count 0, freq 900, probably never executed
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
(code_label 91 168 92 11 6 "" [1 uses])
(note 92 91 97 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 97 92 100 11 (set (reg:DI 1 dx [orig:146 D.6590 ] [146])
        (zero_extend:DI (reg:SI 1 dx [orig:135 D.6593 ] [135]))) lex.yy.c:1429 133 {*zero_extendsidi2}
     (nil))
(insn 100 97 98 11 (parallel [
            (set (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
                (plus:DI (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1415 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 98 100 99 11 (set (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:146 D.6590 ] [146])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) [3 yy_nxt S2 A16]))) lex.yy.c:1429 139 {*zero_extendhisi2}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:146 D.6590 ] [146])
        (nil)))
(debug_insn 99 98 101 11 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:100 yy_current_state ] [100])) lex.yy.c:1429 -1
     (nil))
(debug_insn 101 99 169 11 (var_location:DI yy_cp (reg/v/f:DI 2 cx [orig:101 yy_cp ] [101])) lex.yy.c:1415 -1
     (nil))
(jump_insn 169 101 170 11 (set (pc)
        (label_ref 102)) lex.yy.c:1415 654 {jump}
     (nil)
 -> 102)
;;  succ:       3 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]

(barrier 170 169 105)
;; basic block 12, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; lr  use 	 7 [sp] 40 [r11]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 40 [r11]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 105 170 106 12 2 "" [1 uses])
(note 106 105 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 107 106 108 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 40 r11 [orig:122 yy_last_accepting_state_lsm.161 ] [122])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 40 r11 [orig:122 yy_last_accepting_state_lsm.161 ] [122])
        (nil)))
(jump_insn:TI 108 107 109 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 111)
;;  succ:       14 [100.0%]  (CAN_FALLTHRU)
;;              13 (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]

;; basic block 13, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 12, next block 14, flags: (REACHABLE, RTL)
;;  pred:       12 (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9] 39 [r10]
;; live  gen 	
;; live  kill	
(note 109 108 110 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 110 109 111 13 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg:SI 39 r10 [orig:123 yy_last_accepting_state_lsm.160 ] [123])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:123 yy_last_accepting_state_lsm.160 ] [123])
        (nil)))
;;  succ:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; live  out 	 0 [ax] 7 [sp] 37 [r8] 38 [r9]

;; basic block 14, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              12 [100.0%]  (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 7 [sp] 38 [r9]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 111 110 112 14 9 "" [1 uses])
(note 112 111 113 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 113 112 114 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 38 r9 [orig:120 yy_last_accepting_cpos_lsm.163 ] [120])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 38 r9 [orig:120 yy_last_accepting_cpos_lsm.163 ] [120])
        (nil)))
(jump_insn:TI 114 113 115 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 117)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 10000 (nil)))
 -> 117)
;;  succ:       16 [100.0%]  (CAN_FALLTHRU)
;;              15 (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 7 [sp] 37 [r8]

;; basic block 15, loop depth 0, count 0, freq 0, probably never executed
;;  prev block 14, next block 16, flags: (REACHABLE, RTL)
;;  pred:       14 (FALLTHRU,CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 37 [r8]
;; lr  use 	 7 [sp] 37 [r8]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp] 37 [r8]
;; live  gen 	
;; live  kill	
(note 115 114 116 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn:TI 116 115 117 15 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/f:DI 37 r8 [orig:121 yy_last_accepting_cpos_lsm.162 ] [121])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:121 yy_last_accepting_cpos_lsm.162 ] [121])
        (nil)))
;;  succ:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 89, probably never executed
;;  prev block 15, next block 1, flags: (REACHABLE, RTL)
;;  pred:       15 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [100.0%]  (CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
(code_label 117 116 118 16 10 "" [1 uses])
(note 118 117 171 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 171 118 158 16 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 158 171 124 16 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1433 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn 124 158 159 16 (use (reg/i:SI 0 ax)) lex.yy.c:1433 -1
     (nil))
(insn/f:TI 159 124 160 16 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1433 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 160 159 161 16 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1433 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 161 160 162 16 (simple_return) lex.yy.c:1433 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 162 161 149)
(note 149 162 0 NOTE_INSN_DELETED)

;; Function void yy_fatal_error(const char*) (_ZL14yy_fatal_errorPKc, funcdef_no=104, decl_uid=4297, cgraph_uid=104, symbol_order=131) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 22 to 17 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 loc [`stderr']                          :nothing
;;	  0--> b  0: i   7 loc `*.LC1'                             :nothing
;;	  0--> b  0: i  22 {sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i   2 cx=di                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  11 di=[`stderr']                           :athlon-direct,athlon-load
;;	  1--> b  0: i   9 dx=`*.LC1'                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  10 si=0x1                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i  26 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  13 ax=call [`__fprintf_chk']               :athlon-vector,athlon-ieu
;;	  3--> b  0: i  14 loc clobber                             :nothing
;;	  3--> b  0: i  15 loc clobber                             :nothing
;;	  4--> b  0: i  16 di=0x2                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  17 call [`exit']                           :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 6
;;   new tail = 17



starting the processing of deferred insns
ending the processing of deferred insns


void yy_fatal_error(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,1u} r1={4d,1u} r2={4d,1u} r4={4d,1u} r5={5d,3u} r7={2d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 182{169d,13u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  kill	 17 [flags]
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 6 3 7 2 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f88bc3c9ea0 stderr>) [1 stderr+0 S8 A64])) lex.yy.c:1942 -1
     (nil))
(debug_insn 7 6 22 2 (var_location:DI __fmt (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f88bbed7240 *.LC1>)) lex.yy.c:1942 -1
     (nil))
(insn/f:TI 22 7 23 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1941 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 23 22 2 2 NOTE_INSN_PROLOGUE_END)
(insn 2 23 11 2 (set (reg/v/f:DI 2 cx [orig:88 msg ] [88])
        (reg:DI 5 di [ msg ])) lex.yy.c:1941 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ msg ])
        (nil)))
(insn 11 2 9 2 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("stderr") [flags 0x40]  <var_decl 0x7f88bc3c9ea0 stderr>) [1 stderr+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 89 {*movdi_internal}
     (nil))
(insn:TI 9 11 10 2 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f88bbed7240 *.LC1>)) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 89 {*movdi_internal}
     (nil))
(insn 10 9 26 2 (set (reg:SI 4 si)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 90 {*movsi_internal}
     (nil))
(insn 26 10 13 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 13 26 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f88bc333948 __fprintf_chk>) [0 __builtin___fprintf_chk S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:98 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_CALL_DECL (symbol_ref:DI ("__fprintf_chk") [flags 0x41]  <function_decl 0x7f88bc333948 __fprintf_chk>)
                            (nil)))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (expr_list:DI (use (reg:DI 2 cx))
                        (nil)))))))
(debug_insn 14 13 15 2 (var_location:DI __stream (clobber (const_int 0 [0]))) lex.yy.c:1942 -1
     (nil))
(debug_insn 15 14 16 2 (var_location:DI __fmt (clobber (const_int 0 [0]))) lex.yy.c:1942 -1
     (nil))
(insn:TI 16 15 17 2 (set (reg:SI 5 di)
        (const_int 2 [0x2])) lex.yy.c:1943 90 {*movsi_internal}
     (nil))
(call_insn:TI 17 16 18 2 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f88bc31bca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) lex.yy.c:1943 660 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f88bc31bca8 exit>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 18 17 21)
(note 21 18 0 NOTE_INSN_DELETED)

;; Function void yyensure_buffer_stack() (_ZL21yyensure_buffer_stackv, funcdef_no=100, decl_uid=4265, cgraph_uid=100, symbol_order=127)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)


void yyensure_buffer_stack()

Dataflow summary:
def_info->table_size = 251, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={6d,9u} r1={6d,2u} r2={6d,2u} r3={4d,5u} r4={6d,2u} r5={9d,7u} r6={4d,6u} r7={10d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 331{270d,61u,0e} in 60{57 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

( 3 8 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 3 )->[5]->( 9 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

( 5 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 7 [sp]

( 2 )->[7]->( 9 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 7 )->[8]->( 4 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 7 5 )->[9]->( )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 4 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 7 to worklist
  Adding insn 95 to worklist
  Adding insn 94 to worklist
  Adding insn 41 to worklist
  Adding insn 104 to worklist
  Adding insn 58 to worklist
  Adding insn 55 to worklist
  Adding insn 51 to worklist
  Adding insn 114 to worklist
  Adding insn 72 to worklist
  Adding insn 68 to worklist
  Adding insn 19 to worklist
  Adding insn 17 to worklist
  Adding insn 13 to worklist
  Adding insn 120 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
  Adding insn 22 to worklist
Finished finding needed instructions:
processing block 9 lr out =  7 [sp]
  Adding insn 21 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
processing block 8 lr out =  7 [sp]
processing block 7 lr out =  7 [sp]
  Adding insn 18 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 113 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
  Adding insn 90 to worklist
  Adding insn 108 to worklist
  Adding insn 67 to worklist
  Adding insn 64 to worklist
processing block 5 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 57 to worklist
  Adding insn 49 to worklist
  Adding insn 92 to worklist
  Adding insn 91 to worklist
processing block 3 lr out =  0 [ax] 5 [di] 7 [sp]
  Adding insn 40 to worklist
  Adding insn 93 to worklist
  Adding insn 38 to worklist
processing block 2 lr out =  5 [di] 7 [sp]
  Adding insn 6 to worklist
  Adding insn 5 to worklist
  Adding insn 96 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
;;   ======================================================
;;   -- basic block 2 from 94 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i  94 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  95 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  96 {sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  2--> b  0: i   5 di=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  5--> b  0: i   6 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  6--> b  0: i   7 pc={(flags==0)?L118:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 94
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 38 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  38 ax=[`_ZL19yy_buffer_stack_max']         :athlon-direct,athlon-load
;;	  3--> b  0: i  93 dx=ax-0x1                               :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i  40 flags=cmp(dx,[`_ZL19yy_buffer_stack_top']):athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i  41 pc={(leu(flags,0))?L119:pc}             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 38
;;   new tail = 41

;;   ======================================================
;;   -- basic block 4 from 101 to 104 -- after reload
;;   ======================================================

;;	  0--> b  0: i 101 {sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i 102 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 103 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 104 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 101
;;   new tail = 104

;;   ======================================================
;;   -- basic block 5 from 43 to 58 -- after reload
;;   ======================================================

;;	  0--> b  0: i  43 loc 0x8                                 :nothing
;;	  0--> b  0: i  91 bx=ax+0x8                               :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  45 loc bx                                  :nothing
;;	  2--> b  0: i  92 bp=bx*0x8                               :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i  47 loc di                                  :nothing
;;	  2--> b  0: i  48 loc bp                                  :nothing
;;	  4--> b  0: i  49 si=bp                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  51 ax=call [`realloc']                     :athlon-vector,athlon-ieu
;;	  5--> b  0: i  53 loc clobber                             :nothing
;;	  5--> b  0: i  54 loc clobber                             :nothing
;;	  6--> b  0: i  57 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  6--> b  0: i  55 [`_ZL15yy_buffer_stack']=ax             :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  58 pc={(flags==0)?L56:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 43
;;   new tail = 58

;;   ======================================================
;;   -- basic block 6 from 60 to 114 -- after reload
;;   ======================================================

;;	  0--> b  0: i  60 loc ax+bp-0x40                          :nothing
;;	  0--> b  0: i  61 loc 0                                   :nothing
;;	  0--> b  0: i  62 loc 0x40                                :nothing
;;	  0--> b  0: i  64 dx=ax+bp-0x40                           :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  67 cx=0x8                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 108 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  72 [`_ZL19yy_buffer_stack_max']=bx         :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  90 di=dx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  68 {cx=0;di=cx<<0x3+di;[di]=0;use ax;use cx;}:athlon-vector,athlon-load,athlon-ieu0*6
;;	  3--> b  0: i  69 loc clobber                             :nothing
;;	  3--> b  0: i  70 loc clobber                             :nothing
;;	  3--> b  0: i  71 loc clobber                             :nothing
;;	  4--> b  0: i 111 {sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  6--> b  0: i 112 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i 113 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i 114 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 60
;;   new tail = 114

;;   ======================================================
;;   -- basic block 7 from 9 to 19 -- after reload
;;   ======================================================

;;	  0--> b  0: i   9 loc 0x1                                 :nothing
;;	  0--> b  0: i  10 loc 0x8                                 :nothing
;;	  0--> b  0: i  11 si=0x1                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  12 di=0x8                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i  13 ax=call [`calloc']                      :athlon-vector,athlon-ieu
;;	  1--> b  0: i  16 loc clobber                             :nothing
;;	  2--> b  0: i  18 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  2--> b  0: i  17 [`_ZL15yy_buffer_stack']=ax             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  19 pc={(flags==0)?L56:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 9
;;   new tail = 19

;;   ======================================================
;;   -- basic block 8 from 29 to 120 -- after reload
;;   ======================================================

;;	  0--> b  0: i  29 loc clobber                             :nothing
;;	  0--> b  0: i  30 loc clobber                             :nothing
;;	  0--> b  0: i  31 loc clobber                             :nothing
;;	  0--> b  0: i  32 [`_ZL19yy_buffer_stack_max']=0x1        :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  33 [`_ZL19yy_buffer_stack_top']=0          :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 120 pc=L75                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 29
;;   new tail = 120

;;   ======================================================
;;   -- basic block 9 from 21 to 22 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21 di=`*.LC3'                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  22 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 21
;;   new tail = 22



starting the processing of deferred insns
ending the processing of deferred insns


void yyensure_buffer_stack()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={6d,9u} r1={6d,2u} r2={6d,2u} r3={4d,5u} r4={6d,2u} r5={9d,7u} r6={4d,6u} r7={10d,24u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 331{270d,61u,0e} in 60{57 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 5 [di] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 94 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 94 2 95 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1808 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 95 94 96 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1808 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 96 95 97 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1808 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 97 96 5 2 NOTE_INSN_PROLOGUE_END)
(insn 5 97 6 2 (set (reg/f:DI 5 di [orig:87 D.6619 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1811 89 {*movdi_internal}
     (nil))
(insn:TI 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:87 D.6619 ] [87])
            (const_int 0 [0]))) lex.yy.c:1811 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 7 6 37 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 118)
            (pc))) lex.yy.c:1811 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 672 (nil)))
 -> 118)
;;  succ:       7 [6.7%]  (CAN_FALLTHRU)
;;              3 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 37 7 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 38 37 93 3 (set (reg:DI 0 ax [orig:89 D.6621 ] [89])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])) lex.yy.c:1831 89 {*movdi_internal}
     (nil))
(insn:TI 93 38 40 3 (set (reg:DI 1 dx [orig:98 D.6621 ] [98])
        (plus:DI (reg:DI 0 ax [orig:89 D.6621 ] [89])
            (const_int -1 [0xffffffffffffffff]))) lex.yy.c:1831 214 {*leadi}
     (nil))
(insn 40 93 41 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 1 dx [orig:98 D.6621 ] [98])
            (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64]))) lex.yy.c:1831 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:98 D.6621 ] [98])
        (nil)))
(jump_insn:TI 41 40 75 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 119)
            (pc))) lex.yy.c:1831 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 3898 (nil)))
 -> 119)
;;  succ:       5 [39.0%]  (CAN_FALLTHRU)
;;              4 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 6365, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       3 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [100.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(code_label 75 41 76 4 23 "" [1 uses])
(note 76 75 100 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 100 76 101 4 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 101 100 102 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1848 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 102 101 103 4 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1848 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 103 102 104 4 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1848 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 104 103 105 4 (simple_return) lex.yy.c:1848 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 105 104 119)
;; basic block 5, loop depth 0, count 0, freq 3636, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [39.0%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 17 [flags]
;; live  kill	
(code_label 119 105 42 5 33 "" [1 uses])
(note 42 119 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 43 42 91 5 (var_location:DI grow_size (const_int 8 [0x8])) lex.yy.c:1834 -1
     (nil))
(insn:TI 91 43 45 5 (set (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])
        (plus:DI (reg:DI 0 ax [orig:89 D.6621 ] [89])
            (const_int 8 [0x8]))) lex.yy.c:1836 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:89 D.6621 ] [89])
        (nil)))
(debug_insn 45 91 92 5 (var_location:DI num_to_alloc (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])) lex.yy.c:1836 -1
     (nil))
(insn:TI 92 45 47 5 (set (reg:DI 6 bp [orig:93 D.6621 ] [93])
        (mult:DI (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])
            (const_int 8 [0x8]))) lex.yy.c:1838 214 {*leadi}
     (nil))
(debug_insn 47 92 48 5 (var_location:DI ptr (reg/f:DI 5 di [orig:87 D.6619 ] [87])) lex.yy.c:1838 -1
     (nil))
(debug_insn 48 47 49 5 (var_location:DI size (reg:DI 6 bp [orig:93 D.6621 ] [93])) lex.yy.c:1838 -1
     (nil))
(insn:TI 49 48 51 5 (set (reg:DI 4 si)
        (reg:DI 6 bp [orig:93 D.6621 ] [93])) lex.yy.c:2136 89 {*movdi_internal}
     (nil))
(call_insn:TI 51 49 53 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(debug_insn 53 51 54 5 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1838 -1
     (nil))
(debug_insn 54 53 57 5 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1838 -1
     (nil))
(insn:TI 57 54 55 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 D.6620 ] [88])
            (const_int 0 [0]))) lex.yy.c:1841 4 {*cmpdi_ccno_1}
     (nil))
(insn 55 57 58 5 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.6620 ] [88])) lex.yy.c:1840 89 {*movdi_internal}
     (nil))
(jump_insn:TI 58 55 59 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) lex.yy.c:1841 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 56)
;;  succ:       9 [0.0%]  (CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 3635, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(note 59 58 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 63 59 60 6 NOTE_INSN_DELETED)
(debug_insn 60 63 61 6 (var_location:DI __dest (plus:DI (plus:DI (reg/f:DI 0 ax [orig:88 D.6620 ] [88])
            (reg:DI 6 bp [orig:93 D.6621 ] [93]))
        (const_int -64 [0xffffffffffffffc0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 61 60 62 6 (var_location:SI __ch (const_int 0 [0])) lex.yy.c:1845 -1
     (nil))
(debug_insn 62 61 64 6 (var_location:DI __len (const_int 64 [0x40])) lex.yy.c:1845 -1
     (nil))
(insn:TI 64 62 67 6 (set (reg:DI 1 dx [orig:100 D.6619 ] [100])
        (plus:DI (plus:DI (reg/f:DI 0 ax [orig:88 D.6620 ] [88])
                (reg:DI 6 bp [orig:93 D.6621 ] [93]))
            (const_int -64 [0xffffffffffffffc0]))) /usr/include/x86_64-linux-gnu/bits/string3.h:90 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:93 D.6621 ] [93])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.6620 ] [88])
            (nil))))
(insn 67 64 108 6 (set (reg:DI 2 cx [103])
        (const_int 8 [0x8])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 8 [0x8])
        (nil)))
(insn 108 67 72 6 (parallel [
            (set (reg:DI 0 ax [102])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:90 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 72 108 90 6 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])) lex.yy.c:1846 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 3 bx [orig:92 num_to_alloc ] [92])
        (nil)))
(insn:TI 90 72 68 6 (set (reg/f:DI 5 di [orig:101 D.6619 ] [101])
        (reg:DI 1 dx [orig:100 D.6619 ] [100])) /usr/include/x86_64-linux-gnu/bits/string3.h:90 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 D.6619 ] [100])
        (nil)))
(insn:TI 68 90 69 6 (parallel [
            (set (reg:DI 2 cx [103])
                (const_int 0 [0]))
            (set (reg/f:DI 5 di [orig:101 D.6619 ] [101])
                (plus:DI (ashift:DI (reg:DI 2 cx [103])
                        (const_int 3 [0x3]))
                    (reg/f:DI 5 di [orig:101 D.6619 ] [101])))
            (set (mem:BLK (reg/f:DI 5 di [orig:101 D.6619 ] [101]) [0 MEM[(void *)_13]+0 S64 A64])
                (const_int 0 [0]))
            (use (reg:DI 0 ax [102]))
            (use (reg:DI 2 cx [103]))
        ]) /usr/include/x86_64-linux-gnu/bits/string3.h:90 935 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax [102])
        (expr_list:REG_UNUSED (reg/f:DI 5 di [orig:101 D.6619 ] [101])
            (expr_list:REG_UNUSED (reg:DI 2 cx [103])
                (nil)))))
(debug_insn 69 68 70 6 (var_location:DI __dest (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 70 69 71 6 (var_location:SI __ch (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(debug_insn 71 70 122 6 (var_location:DI __len (clobber (const_int 0 [0]))) lex.yy.c:1845 -1
     (nil))
(note 122 71 111 6 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 111 122 112 6 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1848 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 112 111 113 6 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1848 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 113 112 114 6 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1848 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 114 113 117 6 (simple_return) lex.yy.c:1848 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 117 114 118)
;; basic block 7, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [6.7%]  (CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 118 117 8 7 32 "" [1 uses])
(note 8 118 9 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 9 8 10 7 (var_location:DI num_to_alloc (const_int 1 [0x1])) lex.yy.c:1817 -1
     (nil))
(debug_insn 10 9 11 7 (var_location:DI size (const_int 8 [0x8])) lex.yy.c:1819 -1
     (nil))
(insn:TI 11 10 12 7 (set (reg:DI 4 si)
        (const_int 1 [0x1])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(insn 12 11 13 7 (set (reg:DI 5 di)
        (const_int 8 [0x8])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn:TI 13 12 16 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f88bc316438 __builtin_calloc>) [0 __builtin_calloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("calloc") [flags 0x41]  <function_decl 0x7f88bc316438 __builtin_calloc>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(debug_insn 16 13 18 7 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1819 -1
     (nil))
(insn:TI 18 16 17 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [97])
            (const_int 0 [0]))) lex.yy.c:1821 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [97])
        (nil)))
(insn 17 18 19 7 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (reg/f:DI 0 ax [97])) lex.yy.c:1820 89 {*movdi_internal}
     (nil))
(jump_insn:TI 19 17 25 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 56)
            (pc))) lex.yy.c:1821 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 56)
;;  succ:       9 [0.0%]  (CAN_FALLTHRU)
;;              8 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 25 19 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(debug_insn 29 25 30 8 (var_location:DI __dest (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(debug_insn 30 29 31 8 (var_location:SI __ch (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(debug_insn 31 30 32 8 (var_location:DI __len (clobber (const_int 0 [0]))) lex.yy.c:1824 -1
     (nil))
(insn:TI 32 31 33 8 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (const_int 1 [0x1])) lex.yy.c:1826 89 {*movdi_internal}
     (nil))
(insn 33 32 120 8 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1827 89 {*movdi_internal}
     (nil))
(jump_insn 120 33 121 8 (set (pc)
        (label_ref 75)) 654 {jump}
     (nil)
 -> 75)
;;  succ:       4 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 121 120 56)
;; basic block 9, loop depth 0, count 0, freq 1
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       7 [0.0%]  (CAN_FALLTHRU)
;;              5 [0.0%]  (CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 56 121 20 9 27 "" [2 uses])
(note 20 56 21 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 21 20 22 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f88bbee21b0 *.LC3>)) lex.yy.c:1822 89 {*movdi_internal}
     (nil))
(call_insn:TI 22 21 23 9 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1822 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 23 22 89)
(note 89 23 0 NOTE_INSN_DELETED)

;; Function void yy_switch_to_buffer(YY_BUFFER_STATE) (_Z19yy_switch_to_bufferP15yy_buffer_state, funcdef_no=92, decl_uid=4254, cgraph_uid=92, symbol_order=119)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)


void yy_switch_to_buffer(YY_BUFFER_STATE)

Dataflow summary:
def_info->table_size = 110, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={9d,11u,2e} r1={8d,10u} r2={5d,3u} r3={3d,7u,1e} r4={2d} r5={2d,1u} r7={3d,12u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,4u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 165{114d,48u,3e} in 39{38 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 0 )->[2]->( 3 8 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 2 )->[3]->( 7 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 5 4 9 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 8 3 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 7 [sp]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 2 )->[8]->( 7 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 8 )->[9]->( 6 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 6 to worklist
  Adding insn 76 to worklist
  Adding insn 16 to worklist
  Adding insn 19 to worklist
  Adding insn 28 to worklist
  Adding insn 25 to worklist
  Adding insn 23 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 33 to worklist
  Adding insn 31 to worklist
  Adding insn 82 to worklist
  Adding insn 49 to worklist
  Adding insn 88 to worklist
Finished finding needed instructions:
processing block 7 lr out =  3 [bx] 7 [sp]
  Adding insn 81 to worklist
processing block 6 lr out =  7 [sp]
  Adding insn 40 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 32 to worklist
processing block 5 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 27 to worklist
  Adding insn 26 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 21 to worklist
processing block 4 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 18 to worklist
processing block 3 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp]
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 13 to worklist
  Adding insn 73 to worklist
processing block 9 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 52 to worklist
  Adding insn 75 to worklist
processing block 8 lr out =  3 [bx] 7 [sp]
  Adding insn 48 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)
;;   ======================================================
;;   -- basic block 2 from 76 to 9 -- after reload
;;   ======================================================

;;	  0--> b  0: i  76 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2 bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i   6 call [`_ZL21yyensure_buffer_stackv']    :athlon-vector,athlon-ieu
;;	  3--> b  0: i   7 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  6--> b  0: i   8 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i   9 pc={(flags==0)?L46:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 76
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 73 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  73 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  13 ax=dx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  14 dx=[ax]                                 :athlon-direct,athlon-load
;;	  8--> b  0: i  15 flags=cmp(dx,bx)                        :athlon-direct,athlon-ieu
;;	  9--> b  0: i  16 pc={(flags==0)?L55:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 73
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 18 to 19 -- after reload
;;   ======================================================

;;	  0--> b  0: i  18 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  19 pc={(flags==0)?L29:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 18
;;   new tail = 19

;;   ======================================================
;;   -- basic block 5 from 21 to 28 -- after reload
;;   ======================================================

;;	  0--> b  0: i  22 cx=[`_ZL12yy_hold_char']                :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  21 dx=[`_ZL10yy_c_buf_p']                  :athlon-direct,athlon-load
;;	  4--> b  0: i  23 [dx]=cx                                 :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  24 cx=[ax]                                 :athlon-direct,athlon-load
;;	  7--> b  0: i  25 [cx+0x10]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  27 cx=[`_ZL10yy_n_chars']                  :athlon-direct,athlon-load
;;	  8--> b  0: i  26 dx=[ax]                                 :athlon-direct,athlon-load
;;	 11--> b  0: i  28 [dx+0x20]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 11
;;   new head = 22
;;   new tail = 28

;;   ======================================================
;;   -- basic block 6 from 31 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32 dx=[bx+0x20]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  31 [ax]=bx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  33 [`_ZL10yy_n_chars']=dx                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  34 dx=[bx+0x10]                            :athlon-direct,athlon-load
;;	  6--> b  0: i  36 [`yytext']=dx                           :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  37 ax=[ax]                                 :athlon-direct,athlon-load
;;	  7--> b  0: i  35 [`_ZL10yy_c_buf_p']=dx                  :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  38 ax=[ax]                                 :athlon-direct,athlon-load
;;	 12--> b  0: i  39 [`yyin']=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  40 ax=[dx]                                 :athlon-direct,athlon-load,athlon-ieu
;;	 16--> b  0: i  41 [`_ZL12yy_hold_char']=ax                :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 16
;;   new head = 32
;;   new tail = 41

;;   ======================================================
;;   -- basic block 7 from 81 to 82 -- after reload
;;   ======================================================

;;	  0--> b  0: i  81 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  1--> b  0: i  82 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 81
;;   new tail = 82

;;   ======================================================
;;   -- basic block 8 from 48 to 49 -- after reload
;;   ======================================================

;;	  0--> b  0: i  48 flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  49 pc={(flags==0)?L55:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 48
;;   new tail = 49

;;   ======================================================
;;   -- basic block 9 from 75 to 88 -- after reload
;;   ======================================================

;;	  0--> b  0: i  75 ax=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  52 {ax=ax<<0x3;clobber flags;}             :athlon-direct,athlon-ieu
;;	  3--> b  0: i  88 pc=L29                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 75
;;   new tail = 88



starting the processing of deferred insns
ending the processing of deferred insns


void yy_switch_to_buffer(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={9d,11u,2e} r1={8d,10u} r2={5d,3u} r3={3d,7u,1e} r4={2d} r5={2d,1u} r7={3d,12u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,4u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 165{114d,48u,3e} in 39{38 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 76 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 76 3 77 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1610 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 77 76 2 2 NOTE_INSN_PROLOGUE_END)
(insn 2 77 6 2 (set (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
        (reg:DI 5 di [ new_buffer ])) lex.yy.c:1610 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ new_buffer ])
        (nil)))
(call_insn:TI 6 2 7 2 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1617 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn:TI 7 6 8 2 (set (reg/f:DI 0 ax [orig:88 D.6626 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (nil))
(insn:TI 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 D.6626 ] [88])
            (const_int 0 [0]))) lex.yy.c:1618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 46)
;;  succ:       3 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              8 [15.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 10 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 12 10 73 3 NOTE_INSN_DELETED)
(insn:TI 73 12 13 3 (set (reg:DI 1 dx [orig:106 yy_buffer_stack_top ] [106])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 13 73 14 3 (set (reg/f:DI 0 ax [orig:91 D.6626 ] [91])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:106 yy_buffer_stack_top ] [106])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:88 D.6626 ] [88]))) lex.yy.c:1618 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:106 yy_buffer_stack_top ] [106])
        (nil)))
(insn:TI 14 13 15 3 (set (reg/f:DI 1 dx [orig:92 D.6627 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])) lex.yy.c:1618 89 {*movdi_internal}
     (nil))
(insn:TI 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 1 dx [orig:92 D.6627 ] [92])
            (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104]))) lex.yy.c:1618 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 55)
;;  succ:       7 [10.1%]  (CAN_FALLTHRU)
;;              4 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 1 dx [orig:92 D.6627 ] [92])
            (const_int 0 [0]))) lex.yy.c:1621 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:92 D.6627 ] [92])
        (nil)))
(jump_insn:TI 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 29)
            (pc))) lex.yy.c:1621 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 29)
;;  succ:       5 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [15.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 6492, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       4 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 2 [cx]
;; live  kill	
(note 20 19 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 22 20 21 5 (set (reg:QI 2 cx [orig:107 yy_hold_char ] [107])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1624 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 21 22 23 5 (set (reg/f:DI 1 dx [orig:93 D.6628 ] [93])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1624 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (nil)))
(insn:TI 23 21 24 5 (set (mem:QI (reg/f:DI 1 dx [orig:93 D.6628 ] [93]) [0 *_16+0 S1 A8])
        (reg:QI 2 cx [orig:107 yy_hold_char ] [107])) lex.yy.c:1624 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:107 yy_hold_char ] [107])
        (nil)))
(insn 24 23 25 5 (set (reg/f:DI 2 cx [orig:95 D.6630 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])) lex.yy.c:1625 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])
        (nil)))
(insn:TI 25 24 27 5 (set (mem/f:DI (plus:DI (reg/f:DI 2 cx [orig:95 D.6630 ] [95])
                (const_int 16 [0x10])) [1 _19->yy_buf_pos+0 S8 A64])
        (reg/f:DI 1 dx [orig:93 D.6628 ] [93])) lex.yy.c:1625 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:95 D.6630 ] [95])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:93 D.6628 ] [93])
            (nil))))
(insn 27 25 26 5 (set (reg:SI 2 cx [orig:109 yy_n_chars ] [109])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1626 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (nil)))
(insn:TI 26 27 28 5 (set (reg/f:DI 1 dx [orig:108 *_9 ] [108])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])) lex.yy.c:1626 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_9+0 S8 A64])
        (nil)))
(insn:TI 28 26 29 5 (set (mem:SI (plus:DI (reg/f:DI 1 dx [orig:108 *_9 ] [108])
                (const_int 32 [0x20])) [2 _21->yy_n_chars+0 S4 A64])
        (reg:SI 2 cx [orig:109 yy_n_chars ] [109])) lex.yy.c:1626 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:109 yy_n_chars ] [109])
        (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:108 *_9 ] [108])
            (nil))))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [15.0%]  (CAN_FALLTHRU)
;;              9 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(code_label 29 28 30 6 37 "" [2 uses])
(note 30 29 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 32 30 31 6 (set (reg:SI 1 dx [orig:110 new_buffer_11(D)->yy_n_chars ] [110])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
                (const_int 32 [0x20])) [2 new_buffer_11(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
                (const_int 32 [0x20])) [2 new_buffer_11(D)->yy_n_chars+0 S4 A64])
        (nil)))
(insn 31 32 33 6 (set (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_29+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])) lex.yy.c:1629 89 {*movdi_internal}
     (nil))
(insn:TI 33 31 34 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 1 dx [orig:110 new_buffer_11(D)->yy_n_chars ] [110])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:110 new_buffer_11(D)->yy_n_chars ] [110])
        (nil)))
(insn 34 33 36 6 (set (reg/f:DI 1 dx [orig:99 D.6628 ] [99])
        (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
                (const_int 16 [0x10])) [1 new_buffer_11(D)->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
        (nil)))
(insn:TI 36 34 37 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6628 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 35 6 (set (reg/f:DI 0 ax [orig:111 *_29 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [orig:91 D.6626 ] [91]) [1 *_29+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn:TI 35 37 38 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6628 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn:TI 38 35 39 6 (set (reg/f:DI 0 ax [orig:112 _32->yy_input_file ] [112])
        (mem/f:DI (reg/f:DI 0 ax [orig:111 *_29 ] [111]) [1 _32->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn:TI 39 38 40 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:112 _32->yy_input_file ] [112])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:112 _32->yy_input_file ] [112])
        (nil)))
(insn 40 39 41 6 (set (reg:QI 0 ax [orig:113 *_31 ] [113])
        (mem:QI (reg/f:DI 1 dx [orig:99 D.6628 ] [99]) [0 *_31+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:99 D.6628 ] [99])
        (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
            (nil))))
(insn:TI 41 40 55 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:113 *_31 ] [113])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:113 *_31 ] [113])
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       8 [10.1%]  (CAN_FALLTHRU)
;;              3 [10.1%]  (CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 7 [sp]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	
(code_label 55 41 56 7 34 "" [2 uses])
(note 56 55 80 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 80 56 81 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 81 80 82 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1638 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 82 81 83 7 (simple_return) lex.yy.c:1638 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 83 82 46)
;; basic block 8, loop depth 0, count 0, freq 1500, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [15.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 46 83 47 8 35 "" [1 uses])
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 48 47 49 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 3 bx [orig:104 new_buffer ] [104])
            (const_int 0 [0]))) lex.yy.c:1618 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 49 48 50 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) lex.yy.c:1618 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 55)
;;  succ:       7 [10.1%]  (CAN_FALLTHRU)
;;              9 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 50 49 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(note 51 50 75 9 NOTE_INSN_DELETED)
(insn:TI 75 51 52 9 (set (reg:DI 0 ax [115])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 52 75 88 9 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6626 ] [91])
                (ashift:DI (reg:DI 0 ax [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (ashift:DI (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
                (const_int 3 [0x3]))
            (nil))))
(jump_insn 88 52 89 9 (set (pc)
        (label_ref 29)) 654 {jump}
     (nil)
 -> 29)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 89 88 74)
(note 74 89 0 NOTE_INSN_DELETED)

;; Function void yy_delete_buffer(YY_BUFFER_STATE) (_Z16yy_delete_bufferP15yy_buffer_state, funcdef_no=95, decl_uid=4259, cgraph_uid=95, symbol_order=122)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)


void yy_delete_buffer(YY_BUFFER_STATE)

Dataflow summary:
def_info->table_size = 170, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={5d,1u} r2={4d} r3={4d,6u,1e} r4={4d} r5={7d,9u} r7={4d,15u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={7d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 291{250d,40u,1e} in 28{25 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 0 )->[2]->( 9 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 7 [sp] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

( 3 )->[4]->( 8 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

( 4 3 8 )->[5]->( 7 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 5 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 7 [sp]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 5 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 4 )->[8]->( 5 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 2 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 6 9 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 7 to worklist
  Adding insn 11 to worklist
  Adding insn 48 to worklist
  Adding insn 17 to worklist
  Adding insn 23 to worklist
  Adding insn 33 to worklist
  Adding insn 65 to worklist
  Adding insn 28 to worklist
  Adding insn 71 to worklist
  Adding insn 19 to worklist
  Adding insn 53 to worklist
Finished finding needed instructions:
processing block 9 lr out =  3 [bx] 7 [sp]
processing block 7 lr out =  3 [bx] 7 [sp]
  Adding insn 64 to worklist
  Adding insn 62 to worklist
  Adding insn 26 to worklist
processing block 6 lr out =  3 [bx] 7 [sp]
  Adding insn 56 to worklist
  Adding insn 32 to worklist
processing block 5 lr out =  3 [bx] 5 [di] 7 [sp]
  Adding insn 59 to worklist
  Adding insn 58 to worklist
  Adding insn 45 to worklist
processing block 8 lr out =  5 [di] 7 [sp]
processing block 4 lr out =  0 [ax] 5 [di] 7 [sp]
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 46 to worklist
processing block 3 lr out =  0 [ax] 5 [di] 7 [sp]
  Adding insn 10 to worklist
  Adding insn 9 to worklist
processing block 2 lr out =  3 [bx] 5 [di] 7 [sp]
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 13 count 10 (    1)
;;   ======================================================
;;   -- basic block 2 from 6 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i   7 pc={(flags==0)?L55:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 6
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 48 to 11 -- after reload
;;   ======================================================

;;	  0--> b  0: i   9 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  0--> b  0: i  48 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  10 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  11 pc={(flags==0)?L20:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 9
;;   new tail = 11

;;   ======================================================
;;   -- basic block 4 from 46 to 17 -- after reload
;;   ======================================================

;;	  0--> b  0: i  46 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  15 ax=dx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  16 flags=cmp(di,[ax])                      :athlon-direct,athlon-load,athlon-ieu
;;	  9--> b  0: i  17 pc={(flags==0)?L69:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 46
;;   new tail = 17

;;   ======================================================
;;   -- basic block 5 from 45 to 23 -- after reload
;;   ======================================================

;;	  0--> b  0: i  58 ax=[di+0x24]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  45 bx=di                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  59 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  23 pc={(flags!=0)?L70:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 58
;;   new tail = 23

;;   ======================================================
;;   -- basic block 6 from 31 to 33 -- after reload
;;   ======================================================

;;	  0--> b  0: i  31 loc bx                                  :nothing
;;	  0--> b  0: i  32 di=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  56 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i  33 call [`free']                           :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 31
;;   new tail = 33

;;   ======================================================
;;   -- basic block 7 from 25 to 65 -- after reload
;;   ======================================================

;;	  0--> b  0: i  25 loc [di+0x8]                            :nothing
;;	  0--> b  0: i  26 di=[di+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  28 call [`free']                           :athlon-vector,athlon-ieu
;;	  3--> b  0: i  61 loc bx                                  :nothing
;;	  4--> b  0: i  62 di=bx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i  64 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i  65 call [`free']                           :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 25
;;   new tail = 65

;;   ======================================================
;;   -- basic block 8 from 19 to 71 -- after reload
;;   ======================================================

;;	  0--> b  0: i  19 [ax]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  71 pc=L20                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 19
;;   new tail = 71

;;   ======================================================
;;   -- basic block 9 from 53 to 53 -- after reload
;;   ======================================================

;;	  0--> b  0: i  53 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 53
;;   new tail = 53



starting the processing of deferred insns
ending the processing of deferred insns


void yy_delete_buffer(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,5u} r1={5d,1u} r2={4d} r3={4d,6u,1e} r4={4d} r5={7d,9u} r7={4d,15u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={7d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 291{250d,40u,1e} in 28{25 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:94 b ] [94])
            (const_int 0 [0]))) lex.yy.c:1685 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 55)
            (pc))) lex.yy.c:1685 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 55)
;;  succ:       9 [10.1%]  (CAN_FALLTHRU)
;;              3 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 7 [sp] 17 [flags]
;; live  kill	
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 9 8 48 3 (set (reg/f:DI 0 ax [orig:87 D.6635 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1688 89 {*movdi_internal}
     (nil))
(insn/f 48 9 49 3 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1683 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 49 48 10 3 NOTE_INSN_PROLOGUE_END)
(insn:TI 10 49 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 D.6635 ] [87])
            (const_int 0 [0]))) lex.yy.c:1688 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 11 10 12 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 20)
            (pc))) lex.yy.c:1688 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 20)
;;  succ:       4 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              5 [15.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 12 11 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 14 12 46 4 NOTE_INSN_DELETED)
(insn:TI 46 14 15 4 (set (reg:DI 1 dx [orig:96 yy_buffer_stack_top ] [96])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1688 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 15 46 16 4 (set (reg/f:DI 0 ax [orig:90 D.6635 ] [90])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:96 yy_buffer_stack_top ] [96])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:87 D.6635 ] [87]))) lex.yy.c:1688 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:96 yy_buffer_stack_top ] [96])
        (nil)))
(insn:TI 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:94 b ] [94])
            (mem/f:DI (reg/f:DI 0 ax [orig:90 D.6635 ] [90]) [1 *_10+0 S8 A64]))) lex.yy.c:1688 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 17 16 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 69)
            (pc))) lex.yy.c:1688 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1765 (nil)))
 -> 69)
;;  succ:       8 [17.6%]  (CAN_FALLTHRU)
;;              5 [82.3%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [82.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              3 [15.0%]  (CAN_FALLTHRU)
;;              8 [100.0%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags]
;; live  kill	
(code_label 20 17 21 5 47 "" [2 uses])
(note 21 20 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 58 21 45 5 (set (reg:SI 0 ax)
        (mem:SI (plus:DI (reg/f:DI 5 di [orig:94 b ] [94])
                (const_int 36 [0x24])) [2 b_5(D)->yy_is_our_buffer+0 S4 A32])) lex.yy.c:1691 90 {*movsi_internal}
     (nil))
(insn 45 58 59 5 (set (reg/v/f:DI 3 bx [orig:94 b ] [94])
        (reg/v/f:DI 5 di [orig:94 b ] [94])) 89 {*movdi_internal}
     (nil))
(insn:TI 59 45 23 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax)
            (const_int 0 [0]))) lex.yy.c:1691 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 23 59 30 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 70)
            (pc))) lex.yy.c:1691 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 70)
;;  succ:       7 [29.0%]  (CAN_FALLTHRU)
;;              6 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 6380, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 7 [sp]
;; live  kill	
(note 30 23 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 31 30 32 6 (var_location:DI ptr (reg/v/f:DI 3 bx [orig:94 b ] [94])) -1
     (nil))
(insn:TI 32 31 73 6 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:94 b ] [94])) lex.yy.c:2141 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:94 b ] [94])
        (nil)))
(note 73 32 56 6 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 56 73 33 6 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1695 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(call_insn/j:TI 33 56 34 6 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 662 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 34 33 70)
;; basic block 7, loop depth 0, count 0, freq 2606, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [29.0%]  (CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 7 [sp]
;; live  kill	
(code_label 70 34 24 7 55 "" [1 uses])
(note 24 70 25 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(debug_insn 25 24 26 7 (var_location:DI ptr (mem/f/j:DI (plus:DI (reg/f:DI 5 di [orig:94 b ] [94])
            (const_int 8 [0x8])) [0 b_5(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1692 -1
     (nil))
(insn:TI 26 25 28 7 (set (reg/f:DI 5 di [orig:97 b_5(D)->yy_ch_buf ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 5 di [orig:94 b ] [94])
                (const_int 8 [0x8])) [1 b_5(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:2141 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:94 b ] [94])
                (const_int 8 [0x8])) [1 b_5(D)->yy_ch_buf+0 S8 A64])
        (nil)))
(call_insn:TI 28 26 61 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 61 28 62 7 (var_location:DI ptr (reg/v/f:DI 3 bx [orig:94 b ] [94])) -1
     (nil))
(insn:TI 62 61 74 7 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:94 b ] [94])) lex.yy.c:2141 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:94 b ] [94])
        (nil)))
(note 74 62 64 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 64 74 65 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1695 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(call_insn/j:TI 65 64 68 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 662 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 68 65 69)
;; basic block 8, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [17.6%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 69 68 18 8 54 "" [1 uses])
(note 18 69 19 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 19 18 71 8 (set (mem/f:DI (reg/f:DI 0 ax [orig:90 D.6635 ] [90]) [1 *_10+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1689 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:90 D.6635 ] [90])
        (nil)))
(jump_insn 71 19 72 8 (set (pc)
        (label_ref 20)) 654 {jump}
     (nil)
 -> 20)
;;  succ:       5 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

(barrier 72 71 55)
;; basic block 9, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       2 [10.1%]  (CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 55 72 54 9 53 "" [1 uses])
(note 54 55 53 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 53 54 52 9 (simple_return) 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 52 53 47)
(note 47 52 0 NOTE_INSN_DELETED)

;; Function void yy_flush_buffer(YY_BUFFER_STATE) (_Z15yy_flush_bufferP15yy_buffer_state, funcdef_no=97, decl_uid=4261, cgraph_uid=97, symbol_order=124)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)


void yy_flush_buffer(YY_BUFFER_STATE)

Dataflow summary:
def_info->table_size = 29, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 17[flags]
;;  ref usage 	r0={8d,9u} r1={2d,4u} r2={3d,2u} r4={1d} r5={1d,10u,2e} r7={1d,6u} r17={3d,3u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 65{29d,34u,2e} in 29{29 regular + 0 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d7(0){ }d9(1){ }d12(2){ }d13(4){ }d14(5){ }d15(7){ }d19(21){ }d20(22){ }d21(23){ }d22(24){ }d23(25){ }d24(26){ }d25(27){ }d26(28){ }d27(37){ }d28(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

( 3 )->[4]->( 6 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

( 4 2 3 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 4 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 5 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 7 to worklist
  Adding insn 25 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 17 to worklist
  Adding insn 15 to worklist
  Adding insn 13 to worklist
  Adding insn 31 to worklist
  Adding insn 59 to worklist
  Adding insn 61 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
Finished finding needed instructions:
processing block 5 lr out =  7 [sp]
processing block 6 lr out =  7 [sp]
  Adding insn 40 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 33 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 5 [di] 7 [sp]
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 55 to worklist
processing block 3 lr out =  0 [ax] 1 [dx] 5 [di] 7 [sp]
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 18 to worklist
  Adding insn 16 to worklist
  Adding insn 14 to worklist
processing block 2 lr out =  5 [di] 7 [sp]
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)
;;   ======================================================
;;   -- basic block 2 from 6 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i   7 pc={(flags==0)?L44:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 6
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 13 to 25 -- after reload
;;   ======================================================

;;	  0--> b  0: i  14 ax=[di+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i  13 [di+0x20]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  15 [ax]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  16 ax=[di+0x8]                             :athlon-direct,athlon-load
;;	  6--> b  0: i  17 [ax+0x1]=0                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  22 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  7--> b  0: i  18 dx=[di+0x8]                             :athlon-direct,athlon-load
;;	  7--> b  0: i  20 [di+0x2c]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  21 [di+0x3c]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  24 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 10--> b  0: i  19 [di+0x10]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  25 pc={(flags==0)?L44:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 14
;;   new tail = 25

;;   ======================================================
;;   -- basic block 4 from 55 to 31 -- after reload
;;   ======================================================

;;	  0--> b  0: i  55 cx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  29 ax=cx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  30 flags=cmp(di,[ax])                      :athlon-direct,athlon-load,athlon-ieu
;;	  9--> b  0: i  31 pc={(flags==0)?L65:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 55
;;   new tail = 31

;;   ======================================================
;;   -- basic block 5 from 59 to 59 -- after reload
;;   ======================================================

;;	  0--> b  0: i  59 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 59
;;   new tail = 59

;;   ======================================================
;;   -- basic block 6 from 33 to 61 -- after reload
;;   ======================================================

;;	  0--> b  0: i  36 [`yytext']=dx                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  37 ax=[ax]                                 :athlon-direct,athlon-load
;;	  1--> b  0: i  33 cx=[di+0x20]                            :athlon-direct,athlon-load
;;	  1--> b  0: i  35 [`_ZL10yy_c_buf_p']=dx                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  38 ax=[ax]                                 :athlon-direct,athlon-load
;;	  4--> b  0: i  34 [`_ZL10yy_n_chars']=cx                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  39 [`yyin']=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  40 ax=[dx]                                 :athlon-direct,athlon-load,athlon-ieu
;;	 10--> b  0: i  41 [`_ZL12yy_hold_char']=ax                :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i  61 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 36
;;   new tail = 61



starting the processing of deferred insns
ending the processing of deferred insns


void yy_flush_buffer(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 17[flags]
;;  ref usage 	r0={8d,9u} r1={2d,4u} r2={3d,2u} r4={1d} r5={1d,10u,2e} r7={1d,6u} r17={3d,3u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 65{29d,34u,2e} in 29{29 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 57 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 57 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 57 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:99 b ] [99])
            (const_int 0 [0]))) lex.yy.c:1731 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) lex.yy.c:1731 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 44)
;;  succ:       5 [10.1%]  (CAN_FALLTHRU)
;;              3 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 12 7 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 14 12 13 3 (set (reg/f:DI 0 ax [orig:87 D.6642 ] [87])
        (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1740 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])
        (nil)))
(insn 13 14 15 3 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 32 [0x20])) [2 b_3(D)->yy_n_chars+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1734 90 {*movsi_internal}
     (nil))
(insn:TI 15 13 16 3 (set (mem:QI (reg/f:DI 0 ax [orig:87 D.6642 ] [87]) [0 *_6+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1740 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.6642 ] [87])
        (nil)))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [orig:88 D.6642 ] [88])
        (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1741 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])
        (nil)))
(insn:TI 17 16 22 3 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:88 D.6642 ] [88])
                (const_int 1 [0x1])) [0 MEM[(char *)_8 + 1B]+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1741 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:88 D.6642 ] [88])
        (nil)))
(insn 22 17 18 3 (set (reg/f:DI 0 ax [orig:90 D.6643 ] [90])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1748 89 {*movdi_internal}
     (nil))
(insn:TI 18 22 20 3 (set (reg/f:DI 1 dx [orig:89 D.6642 ] [89])
        (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 8 [0x8])) [1 b_3(D)->yy_ch_buf+0 S8 A64])) lex.yy.c:1743 89 {*movdi_internal}
     (nil))
(insn 20 18 21 3 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 44 [0x2c])) [2 b_3(D)->yy_at_bol+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1745 90 {*movsi_internal}
     (nil))
(insn:TI 21 20 24 3 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 60 [0x3c])) [2 b_3(D)->yy_buffer_status+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1746 90 {*movsi_internal}
     (nil))
(insn:TI 24 21 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:90 D.6643 ] [90])
            (const_int 0 [0]))) lex.yy.c:1748 4 {*cmpdi_ccno_1}
     (nil))
(insn:TI 19 24 25 3 (set (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 16 [0x10])) [1 b_3(D)->yy_buf_pos+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 D.6642 ] [89])) lex.yy.c:1743 89 {*movdi_internal}
     (nil))
(jump_insn 25 19 26 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) lex.yy.c:1748 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 44)
;;  succ:       4 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              5 [15.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
(note 26 25 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 28 26 55 4 NOTE_INSN_DELETED)
(insn:TI 55 28 29 4 (set (reg:DI 2 cx [orig:101 yy_buffer_stack_top ] [101])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1748 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 29 55 30 4 (set (reg/f:DI 0 ax [orig:93 D.6643 ] [93])
        (plus:DI (mult:DI (reg:DI 2 cx [orig:101 yy_buffer_stack_top ] [101])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:90 D.6643 ] [90]))) lex.yy.c:1748 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:101 yy_buffer_stack_top ] [101])
        (nil)))
(insn:TI 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:99 b ] [99])
            (mem/f:DI (reg/f:DI 0 ax [orig:93 D.6643 ] [93]) [1 *_17+0 S8 A64]))) lex.yy.c:1748 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 31 30 44 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 65)
            (pc))) lex.yy.c:1748 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2545 (nil)))
 -> 65)
;;  succ:       6 [25.4%]  (CAN_FALLTHRU)
;;              5 [74.5%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 8056, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       4 [74.5%]  (FALLTHRU,CAN_FALLTHRU)
;;              2 [10.1%]  (CAN_FALLTHRU)
;;              3 [15.0%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 44 31 45 5 56 "" [2 uses])
(note 45 44 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 59 45 58 5 (simple_return) 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 58 59 65)
;; basic block 6, loop depth 0, count 0, freq 1944, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [25.4%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx]
;; live  in  	 0 [ax] 1 [dx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx]
;; live  kill	
(code_label 65 58 32 6 63 "" [1 uses])
(note 32 65 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 36 32 37 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 D.6642 ] [89])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 33 6 (set (reg/f:DI 0 ax [orig:103 *_17 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 D.6643 ] [93]) [1 *_17+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn:TI 33 37 35 6 (set (reg:SI 2 cx [orig:102 b_3(D)->yy_n_chars ] [102])
        (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:99 b ] [99])
                (const_int 32 [0x20])) [2 b_3(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 5 di [orig:99 b ] [99])
        (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
            (nil))))
(insn 35 33 38 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 1 dx [orig:89 D.6642 ] [89])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn:TI 38 35 34 6 (set (reg/f:DI 0 ax [orig:104 _26->yy_input_file ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 *_17 ] [103]) [1 _26->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn:TI 34 38 39 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:102 b_3(D)->yy_n_chars ] [102])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:102 b_3(D)->yy_n_chars ] [102])
        (nil)))
(insn:TI 39 34 40 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:104 _26->yy_input_file ] [104])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:104 _26->yy_input_file ] [104])
        (nil)))
(insn 40 39 41 6 (set (reg:QI 0 ax [orig:105 *_10 ] [105])
        (mem:QI (reg/f:DI 1 dx [orig:89 D.6642 ] [89]) [0 *_10+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:89 D.6642 ] [89])
        (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
            (nil))))
(insn:TI 41 40 61 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:105 *_10 ] [105])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:105 *_10 ] [105])
        (nil)))
(jump_insn:TI 61 41 64 6 (simple_return) 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 64 61 56)
(note 56 64 0 NOTE_INSN_DELETED)

;; Function void yy_init_buffer(YY_BUFFER_STATE, FILE*) (_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE, funcdef_no=96, decl_uid=4269, cgraph_uid=96, symbol_order=123)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)


void yy_init_buffer(YY_BUFFER_STATE, FILE*)

Dataflow summary:
def_info->table_size = 290, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13]
;;  ref usage 	r0={9d,8u} r1={6d,1u} r2={5d} r3={3d,9u} r4={4d,1u} r5={7d,4u} r6={3d,5u} r7={11d,23u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={11d,4u} r18={4d} r19={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r41={3d,3u} r42={3d,4u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 373{311d,62u,0e} in 41{37 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 3 2 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 3 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 5 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 18 to worklist
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 13 to worklist
  Adding insn 8 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
  Adding insn 63 to worklist
  Adding insn 22 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
  Adding insn 30 to worklist
  Adding insn 36 to worklist
  Adding insn 33 to worklist
  Adding insn 77 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
Finished finding needed instructions:
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 76 to worklist
  Adding insn 75 to worklist
  Adding insn 74 to worklist
  Adding insn 73 to worklist
  Adding insn 72 to worklist
processing block 6 lr out =  0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 62 to worklist
  Adding insn 61 to worklist
  Adding insn 38 to worklist
  Adding insn 35 to worklist
  Adding insn 32 to worklist
processing block 5 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 29 to worklist
  Adding insn 79 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
processing block 3 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 21 to worklist
  Adding insn 20 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 12 to worklist
  Adding insn 10 to worklist
  Adding insn 9 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 67 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)
;;   ======================================================
;;   -- basic block 2 from 63 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i  63 [--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  64 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  65 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  66 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i   2 bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i   3 bp=si                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  67 {sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i   8 ax=call [`__errno_location']            :athlon-vector,athlon-ieu
;;	  5--> b  0: i  12 di=bx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i   9 r12=ax                                  :athlon-direct,athlon-ieu
;;	  5--> b  0: i  10 r13=[ax]                                :athlon-direct,athlon-load
;;	  5--> b  0: i  11 loc r13                                 :nothing
;;	  6--> b  0: i  13 call [`_Z15yy_flush_bufferP15yy_buffer_state']:athlon-vector,athlon-ieu
;;	  7--> b  0: i  16 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  7--> b  0: i  14 [bx]=bp                                 :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  15 [bx+0x38]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  17 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 11--> b  0: i  18 pc={(flags==0)?L23:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 63
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 20 to 22 -- after reload
;;   ======================================================

;;	  0--> b  0: i  20 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  21 flags=cmp(bx,[dx*0x8+ax])               :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i  22 pc={(flags==0)?L27:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 25 to 26 -- after reload
;;   ======================================================

;;	  0--> b  0: i  25 [bx+0x30]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  26 [bx+0x34]=0                             :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 25
;;   new tail = 26

;;   ======================================================
;;   -- basic block 5 from 79 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i  79 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  29 flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  30 pc={(flags==0)?L42:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 79
;;   new tail = 30

;;   ======================================================
;;   -- basic block 6 from 32 to 62 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32 di=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  33 ax=call [`fileno']                      :athlon-vector,athlon-ieu
;;	  2--> b  0: i  35 di=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  36 ax=call [`isatty']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i  38 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i  61 ax=flags>0                              :athlon-direct,athlon-ieu
;;	  6--> b  0: i  62 ax=zxn(ax)                              :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 32
;;   new tail = 62

;;   ======================================================
;;   -- basic block 7 from 44 to 77 -- after reload
;;   ======================================================

;;	  0--> b  0: i  44 [bx+0x28]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  45 [r12]=r13                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  72 {sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  1--> b  0: i  73 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i  74 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i  75 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i  76 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i  77 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 44
;;   new tail = 77



starting the processing of deferred insns
ending the processing of deferred insns


void yy_init_buffer(YY_BUFFER_STATE, FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13]
;;  ref usage 	r0={9d,8u} r1={6d,1u} r2={5d} r3={3d,9u} r4={4d,1u} r5={7d,4u} r6={3d,5u} r7={11d,23u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={11d,4u} r18={4d} r19={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r41={3d,3u} r42={3d,4u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 373{311d,62u,0e} in 41{37 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(note 6 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 6 63 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 63 4 64 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) lex.yy.c:1703 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f 64 63 65 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) lex.yy.c:1703 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 65 64 66 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1703 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 66 65 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1703 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 66 3 2 (set (reg/v/f:DI 3 bx [orig:98 b ] [98])
        (reg:DI 5 di [ b ])) lex.yy.c:1703 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ b ])
        (nil)))
(insn:TI 3 2 67 2 (set (reg/v/f:DI 6 bp [orig:99 file ] [99])
        (reg:DI 4 si [ file ])) lex.yy.c:1703 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ file ])
        (nil)))
(insn/f:TI 67 3 68 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1703 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 68 67 8 2 NOTE_INSN_PROLOGUE_END)
(call_insn/u:TI 8 68 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) lex.yy.c:1704 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn:TI 12 8 9 2 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:98 b ] [98])) lex.yy.c:1706 89 {*movdi_internal}
     (nil))
(insn 9 12 10 2 (set (reg/f:DI 41 r12 [orig:89 D.6654 ] [89])
        (reg:DI 0 ax)) lex.yy.c:1704 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/v:SI 42 r13 [orig:90 oerrno ] [90])
        (mem:SI (reg/f:DI 0 ax [orig:89 D.6654 ] [89]) [2 *_5+0 S4 A32])) lex.yy.c:1704 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:89 D.6654 ] [89])
        (nil)))
(debug_insn 11 10 13 2 (var_location:SI oerrno (reg/v:SI 42 r13 [orig:90 oerrno ] [90])) lex.yy.c:1704 -1
     (nil))
(call_insn:TI 13 11 16 2 (call (mem:QI (symbol_ref:DI ("_Z15yy_flush_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c510 yy_flush_buffer>) [0 yy_flush_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1706 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z15yy_flush_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c510 yy_flush_buffer>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 16 13 14 2 (set (reg/f:DI 0 ax [orig:91 D.6655 ] [91])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1715 89 {*movdi_internal}
     (nil))
(insn 14 16 15 2 (set (mem/f:DI (reg/v/f:DI 3 bx [orig:98 b ] [98]) [1 b_8(D)->yy_input_file+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:99 file ] [99])) lex.yy.c:1708 89 {*movdi_internal}
     (nil))
(insn:TI 15 14 17 2 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 56 [0x38])) [2 b_8(D)->yy_fill_buffer+0 S4 A64])
        (const_int 1 [0x1])) lex.yy.c:1709 90 {*movsi_internal}
     (nil))
(insn:TI 17 15 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:91 D.6655 ] [91])
            (const_int 0 [0]))) lex.yy.c:1715 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 18 17 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 23)
            (pc))) lex.yy.c:1715 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 23)
;;  succ:       3 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [15.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 3, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 20 19 21 3 (set (reg:DI 1 dx [orig:100 yy_buffer_stack_top ] [100])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1715 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 21 20 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 3 bx [orig:98 b ] [98])
            (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:100 yy_buffer_stack_top ] [100])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [orig:91 D.6655 ] [91])) [1 *_16+0 S8 A64]))) lex.yy.c:1715 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:100 yy_buffer_stack_top ] [100])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:91 D.6655 ] [91])
            (nil))))
(jump_insn:TI 22 21 23 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) lex.yy.c:1715 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1765 (nil)))
 -> 27)
;;  succ:       4 [82.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              5 [17.6%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 4, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       3 [82.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              2 [15.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(code_label 23 22 24 4 65 "" [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 25 24 26 4 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 48 [0x30])) [2 b_8(D)->yy_bs_lineno+0 S4 A64])
        (const_int 1 [0x1])) lex.yy.c:1716 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 52 [0x34])) [2 b_8(D)->yy_bs_column+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1717 90 {*movsi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [17.6%]  (CAN_FALLTHRU)
;;              4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 27 26 28 5 66 "" [1 uses])
(note 28 27 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 79 28 29 5 (parallel [
            (set (reg:DI 0 ax [orig:88 D.6653 ] [88])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1720 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 29 79 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 6 bp [orig:99 file ] [99])
            (const_int 0 [0]))) lex.yy.c:1720 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) lex.yy.c:1720 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2165 (nil)))
 -> 42)
;;  succ:       6 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              7 [21.6%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 6, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(note 31 30 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 39 31 32 6 NOTE_INSN_DELETED)
(insn:TI 32 39 33 6 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:99 file ] [99])) lex.yy.c:1720 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 6 bp [orig:99 file ] [99])
        (nil)))
(call_insn:TI 33 32 35 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fileno") [flags 0x41]  <function_decl 0x7f88bbf95af8 fileno>) [0 fileno S1 A8])
            (const_int 0 [0]))) lex.yy.c:1720 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("fileno") [flags 0x41]  <function_decl 0x7f88bbf95af8 fileno>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 35 33 36 6 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:96 D.6653 ] [96])) lex.yy.c:1720 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:96 D.6653 ] [96])
        (nil)))
(call_insn:TI 36 35 38 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("isatty") [flags 0x41]  <function_decl 0x7f88bc0d7e58 isatty>) [0 isatty S1 A8])
            (const_int 0 [0]))) lex.yy.c:1720 669 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("isatty") [flags 0x41]  <function_decl 0x7f88bc0d7e58 isatty>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn:TI 38 36 61 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:97 D.6653 ] [97])
            (const_int 0 [0]))) lex.yy.c:1720 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:97 D.6653 ] [97])
        (nil)))
(insn:TI 61 38 62 6 (set (reg:QI 0 ax [orig:88 D.6653 ] [88])
        (gt:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) lex.yy.c:1720 607 {*setcc_qi}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil)))
(insn:TI 62 61 42 6 (set (reg:SI 0 ax [orig:88 D.6653 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:88 D.6653 ] [88]))) lex.yy.c:1720 138 {*zero_extendqisi2}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 6, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [21.6%]  (CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(code_label 42 62 43 7 67 "" [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 44 43 45 7 (set (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:98 b ] [98])
                (const_int 40 [0x28])) [2 b_8(D)->yy_is_interactive+0 S4 A64])
        (reg:SI 0 ax [orig:88 D.6653 ] [88])) lex.yy.c:1720 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:98 b ] [98])
        (expr_list:REG_DEAD (reg:SI 0 ax [orig:88 D.6653 ] [88])
            (nil))))
(insn 45 44 80 7 (set (mem:SI (reg/f:DI 41 r12 [orig:89 D.6654 ] [89]) [2 *_5+0 S4 A32])
        (reg/v:SI 42 r13 [orig:90 oerrno ] [90])) lex.yy.c:1722 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 42 r13 [orig:90 oerrno ] [90])
        (expr_list:REG_DEAD (reg/f:DI 41 r12 [orig:89 D.6654 ] [89])
            (nil))))
(note 80 45 72 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f 72 80 73 7 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1723 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 73 72 74 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1723 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 74 73 75 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1723 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 75 74 76 7 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1723 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 76 75 77 7 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1723 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 77 76 78 7 (simple_return) lex.yy.c:1723 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 78 77 60)
(note 60 78 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_create_buffer(FILE*, int) (_Z16yy_create_bufferP8_IO_FILEi, funcdef_no=94, decl_uid=4257, cgraph_uid=94, symbol_order=121)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)


yy_buffer_state* yy_create_buffer(FILE*, int)

Dataflow summary:
def_info->table_size = 316, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={6d,7u} r1={5d} r2={5d} r3={3d,6u} r4={7d,5u} r5={9d,5u} r6={3d,3u} r7={7d,15u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={6d,2u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={3d,3u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 374{328d,46u,0e} in 34{30 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 41 [r12]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 7 [sp] 41 [r12]

( 3 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 2 3 )->[5]->( )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 15 to worklist
  Adding insn 9 to worklist
  Adding insn 60 to worklist
  Adding insn 59 to worklist
  Adding insn 58 to worklist
  Adding insn 34 to worklist
  Adding insn 31 to worklist
  Adding insn 27 to worklist
  Adding insn 23 to worklist
  Adding insn 69 to worklist
  Adding insn 45 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 18 to worklist
Finished finding needed instructions:
processing block 5 lr out =  7 [sp]
  Adding insn 17 to worklist
processing block 4 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 44 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
processing block 3 lr out =  3 [bx] 7 [sp] 41 [r12]
  Adding insn 33 to worklist
  Adding insn 57 to worklist
  Adding insn 22 to worklist
  Adding insn 62 to worklist
processing block 2 lr out =  0 [ax] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 14 to worklist
  Adding insn 8 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
;;   ======================================================
;;   -- basic block 2 from 58 to 15 -- after reload
;;   ======================================================

;;	  0--> b  0: i   7 loc 0x40                                :nothing
;;	  0--> b  0: i  58 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  59 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2 r12=di                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i  60 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i   8 di=0x40                                 :athlon-direct,athlon-ieu
;;	  1--> b  0: i   3 bp=si                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i   9 ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  3--> b  0: i  12 loc clobber                             :nothing
;;	  3--> b  0: i  13 loc clobber                             :nothing
;;	  4--> b  0: i  14 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i  15 pc={(flags==0)?L32:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 7
;;   new tail = 15

;;   ======================================================
;;   -- basic block 3 from 62 to 34 -- after reload
;;   ======================================================

;;	  0--> b  0: i  22 si=sxn(bp)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i  62 bx=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  57 di=si+0x2                               :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  23 [ax+0x18]=si                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  24 loc si+0x2                              :nothing
;;	  3--> b  0: i  27 ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  3--> b  0: i  30 loc clobber                             :nothing
;;	  4--> b  0: i  33 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  31 [bx+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  34 pc={(flags==0)?L32:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 22
;;   new tail = 34

;;   ======================================================
;;   -- basic block 4 from 36 to 69 -- after reload
;;   ======================================================

;;	  0--> b  0: i  36 [bx+0x24]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  37 si=r12                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i  38 di=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  39 call [`_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE']:athlon-vector,athlon-ieu
;;	  2--> b  0: i  44 ax=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  45 use ax                                  :nothing
;;	  3--> b  0: i  66 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i  67 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i  68 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i  69 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 36
;;   new tail = 69

;;   ======================================================
;;   -- basic block 5 from 17 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i  17 di=`*.LC9'                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  18 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 17
;;   new tail = 18



starting the processing of deferred insns
ending the processing of deferred insns


yy_buffer_state* yy_create_buffer(FILE*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={6d,7u} r1={5d} r2={5d} r3={3d,6u} r4={7d,5u} r5={9d,5u} r6={3d,3u} r7={7d,15u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={6d,2u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={3d,3u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 374{328d,46u,0e} in 34{30 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(debug_insn 7 4 58 2 (var_location:DI size (const_int 64 [0x40])) -1
     (nil))
(insn/f:TI 58 7 59 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) lex.yy.c:1655 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f 59 58 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1655 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 2 59 60 2 (set (reg/v/f:DI 41 r12 [orig:92 file ] [92])
        (reg:DI 5 di [ file ])) lex.yy.c:1655 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ file ])
        (nil)))
(insn/f:TI 60 2 61 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1655 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 61 60 8 2 NOTE_INSN_PROLOGUE_END)
(insn 8 61 3 2 (set (reg:DI 5 di)
        (const_int 64 [0x40])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(insn 3 8 9 2 (set (reg/v:SI 6 bp [orig:93 size ] [93])
        (reg:SI 4 si [ size ])) lex.yy.c:1655 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ size ])
        (nil)))
(call_insn:TI 9 3 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 12 9 13 2 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1658 -1
     (nil))
(debug_insn 13 12 14 2 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1658 -1
     (nil))
(insn:TI 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [94])
            (const_int 0 [0]))) lex.yy.c:1659 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 15 14 21 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 32)
            (pc))) lex.yy.c:1659 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 32)
;;  succ:       5 [0.0%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(note 21 15 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 22 21 62 3 (set (reg:DI 4 si [orig:88 D.6665 ] [88])
        (sign_extend:DI (reg/v:SI 6 bp [orig:93 size ] [93]))) lex.yy.c:1662 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:93 size ] [93])
        (nil)))
(insn 62 22 57 3 (set (reg/f:DI 3 bx [94])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn:TI 57 62 23 3 (set (reg:DI 5 di [orig:95 D.6665 ] [95])
        (plus:DI (reg:DI 4 si [orig:88 D.6665 ] [88])
            (const_int 2 [0x2]))) lex.yy.c:2123 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:88 D.6665 ] [88])
        (nil)))
(insn 23 57 24 3 (set (mem:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 24 [0x18])) [4 MEM[(struct yy_buffer_state *)_14].yy_buf_size+0 S8 A64])
        (reg:DI 4 si [orig:88 D.6665 ] [88])) lex.yy.c:1662 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [94])
        (nil)))
(debug_insn 24 23 27 3 (var_location:DI size (plus:DI (reg:DI 4 si [orig:88 D.6665 ] [88])
        (const_int 2 [0x2]))) lex.yy.c:1667 -1
     (nil))
(call_insn:TI 27 24 30 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 30 27 33 3 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1667 -1
     (nil))
(insn:TI 33 30 31 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [96])
            (const_int 0 [0]))) lex.yy.c:1668 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [96])
        (nil)))
(insn 31 33 34 3 (set (mem/f:DI (plus:DI (reg/f:DI 3 bx [94])
                (const_int 8 [0x8])) [1 MEM[(struct yy_buffer_state *)_14].yy_ch_buf+0 S8 A64])
        (reg/f:DI 0 ax [96])) lex.yy.c:1667 89 {*movdi_internal}
     (nil))
(jump_insn:TI 34 31 35 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 32)
            (pc))) lex.yy.c:1668 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 32)
;;  succ:       5 [0.0%]  (CAN_FALLTHRU)
;;              4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 9992, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 36 35 37 4 (set (mem:SI (plus:DI (reg/f:DI 3 bx [94])
                (const_int 36 [0x24])) [2 MEM[(struct yy_buffer_state *)_14].yy_is_our_buffer+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1671 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:DI 4 si)
        (reg/v/f:DI 41 r12 [orig:92 file ] [92])) lex.yy.c:1673 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:92 file ] [92])
        (nil)))
(insn 38 37 39 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [94])) lex.yy.c:1673 89 {*movdi_internal}
     (nil))
(call_insn:TI 39 38 44 4 (call (mem:QI (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>) [0 yy_init_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1673 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn:TI 44 39 45 4 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [94])) lex.yy.c:1676 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [94])
        (nil)))
(insn 45 44 71 4 (use (reg/i:DI 0 ax)) lex.yy.c:1676 -1
     (nil))
(note 71 45 66 4 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 66 71 67 4 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1676 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 67 66 68 4 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1676 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 68 67 69 4 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1676 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 69 68 70 4 (simple_return) lex.yy.c:1676 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 70 69 32)
;; basic block 5, loop depth 0, count 0, freq 8
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       2 [0.0%]  (CAN_FALLTHRU)
;;              3 [0.0%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 32 70 16 5 76 "" [2 uses])
(note 16 32 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 17 16 18 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f88bbf1aa20 *.LC9>)) lex.yy.c:1660 89 {*movdi_internal}
     (nil))
(call_insn:TI 18 17 19 5 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1660 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 19 18 56)
(note 56 19 0 NOTE_INSN_DELETED)

;; Function void yyrestart(FILE*) (_Z9yyrestartP8_IO_FILE, funcdef_no=91, decl_uid=4252, cgraph_uid=91, symbol_order=118)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)


void yyrestart(FILE*)

Dataflow summary:
def_info->table_size = 258, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,13u,1e} r1={11d,8u,1e} r2={5d,1u} r3={3d,3u} r4={6d,2u} r5={8d,4u} r6={3d,3u} r7={7d,17u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,3u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 327{271d,54u,2e} in 46{43 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

( 0 )->[2]->( 5 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 5 3 6 )->[4]->( 1 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 3 2 )->[5]->( 6 4 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]

( 5 )->[6]->( 4 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 5 [di]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 4 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 9 to worklist
  Adding insn 76 to worklist
  Adding insn 75 to worklist
  Adding insn 14 to worklist
  Adding insn 85 to worklist
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
  Adding insn 48 to worklist
  Adding insn 46 to worklist
  Adding insn 39 to worklist
  Adding insn 29 to worklist
  Adding insn 26 to worklist
  Adding insn 24 to worklist
  Adding insn 17 to worklist
  Adding insn 88 to worklist
Finished finding needed instructions:
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 84 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 53 to worklist
  Adding insn 51 to worklist
  Adding insn 50 to worklist
  Adding insn 47 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 72 to worklist
  Adding insn 42 to worklist
  Adding insn 37 to worklist
processing block 6 lr out =  3 [bx] 5 [di] 7 [sp]
  Adding insn 32 to worklist
  Adding insn 31 to worklist
processing block 5 lr out =  0 [ax] 3 [bx] 5 [di] 7 [sp]
  Adding insn 28 to worklist
  Adding insn 87 to worklist
  Adding insn 27 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 21 to worklist
  Adding insn 73 to worklist
  Adding insn 20 to worklist
processing block 3 lr out =  3 [bx] 5 [di] 7 [sp]
  Adding insn 13 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 2 to worklist
  Adding insn 77 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 7 (    1)
;;   ======================================================
;;   -- basic block 2 from 75 to 9 -- after reload
;;   ======================================================

;;	  0--> b  0: i  75 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  76 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2 bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  77 {sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  2--> b  0: i   7 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  5--> b  0: i   8 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  6--> b  0: i   9 pc={(flags==0)?L15:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 75
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 11 to 14 -- after reload
;;   ======================================================

;;	  0--> b  0: i  11 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  12 di=[dx*0x8+ax]                          :athlon-direct,athlon-load
;;	  6--> b  0: i  13 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i  14 pc={(flags==0)?L15:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 11
;;   new tail = 14

;;   ======================================================
;;   -- basic block 4 from 37 to 85 -- after reload
;;   ======================================================

;;	  0--> b  0: i  37 si=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  39 call [`_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE']:athlon-vector,athlon-ieu
;;	  2--> b  0: i  42 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  2--> b  0: i  72 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  5--> b  0: i  43 dx=dx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i  44 ax=[dx]                                 :athlon-direct,athlon-load
;;	 10--> b  0: i  45 cx=[ax+0x20]                            :athlon-direct,athlon-load
;;	 10--> b  0: i  47 ax=[ax+0x10]                            :athlon-direct,athlon-load
;;	 13--> b  0: i  49 [`yytext']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i  50 dx=[dx]                                 :athlon-direct,athlon-load
;;	 14--> b  0: i  48 [`_ZL10yy_c_buf_p']=ax                  :athlon-direct,athlon-agu,athlon-store
;;	 14--> b  0: i  46 [`_ZL10yy_n_chars']=cx                  :athlon-direct,athlon-agu,athlon-store
;;	 16--> b  0: i  51 dx=[dx]                                 :athlon-direct,athlon-load
;;	 19--> b  0: i  52 [`yyin']=dx                             :athlon-direct,athlon-agu,athlon-store
;;	 19--> b  0: i  53 ax=[ax]                                 :athlon-direct,athlon-load,athlon-ieu
;;	 23--> b  0: i  54 [`_ZL12yy_hold_char']=ax                :athlon-direct,athlon-agu,athlon-store
;;	 23--> b  0: i  82 {sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	 24--> b  0: i  83 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 25--> b  0: i  84 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	 26--> b  0: i  85 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 26
;;   new head = 37
;;   new tail = 85

;;   ======================================================
;;   -- basic block 5 from 17 to 29 -- after reload
;;   ======================================================

;;	  0--> b  0: i  17 call [`_ZL21yyensure_buffer_stackv']    :athlon-vector,athlon-ieu
;;	  1--> b  0: i  20 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  1--> b  0: i  73 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  1--> b  0: i  22 si=0x4000                               :athlon-direct,athlon-ieu
;;	  2--> b  0: i  23 di=[`yyin']                             :athlon-direct,athlon-load
;;	  4--> b  0: i  21 bp=dx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  24 ax=call [`_Z16yy_create_bufferP8_IO_FILEi']:athlon-vector,athlon-ieu
;;	  6--> b  0: i  26 [bp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  27 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  6--> b  0: i  87 {di=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i  28 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 10--> b  0: i  29 pc={(flags==0)?L35:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 17
;;   new tail = 29

;;   ======================================================
;;   -- basic block 6 from 31 to 88 -- after reload
;;   ======================================================

;;	  0--> b  0: i  31 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  32 di=[dx*0x8+ax]                          :athlon-direct,athlon-load
;;	  3--> b  0: i  88 pc=L35                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 31
;;   new tail = 88



starting the processing of deferred insns
ending the processing of deferred insns


void yyrestart(FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,13u,1e} r1={11d,8u,1e} r2={5d,1u} r3={3d,3u} r4={6d,2u} r5={8d,4u} r6={3d,3u} r7={7d,17u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,3u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 327{271d,54u,2e} in 46{43 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 5 75 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 75 3 76 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1593 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 76 75 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1593 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 76 77 2 (set (reg/v/f:DI 3 bx [orig:112 input_file ] [112])
        (reg:DI 5 di [ input_file ])) lex.yy.c:1593 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ input_file ])
        (nil)))
(insn/f:TI 77 2 78 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1593 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 78 77 7 2 NOTE_INSN_PROLOGUE_END)
(insn 7 78 8 2 (set (reg/f:DI 0 ax [orig:87 D.6669 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (nil))
(insn:TI 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 D.6669 ] [87])
            (const_int 0 [0]))) lex.yy.c:1595 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 15)
            (pc))) lex.yy.c:1595 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 672 (nil)))
 -> 15)
;;  succ:       5 [6.7%]  (CAN_FALLTHRU)
;;              3 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 5 [di] 17 [flags]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 11 10 12 3 (set (reg:DI 1 dx [orig:113 yy_buffer_stack_top ] [113])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 12 11 13 3 (set (reg/f:DI 5 di [orig:91 D.6671 ] [91])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:113 yy_buffer_stack_top ] [113])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:87 D.6669 ] [87])) [1 *_7+0 S8 A64])) lex.yy.c:1595 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:113 yy_buffer_stack_top ] [113])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.6669 ] [87])
            (nil))))
(insn:TI 13 12 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.6671 ] [91])
            (const_int 0 [0]))) lex.yy.c:1595 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 14 13 35 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 15)
            (pc))) lex.yy.c:1595 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 15)
;;  succ:       5 [15.0%]  (CAN_FALLTHRU)
;;              4 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [49.0%]  (CAN_FALLTHRU)
;;              3 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [100.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(code_label 35 14 36 4 84 "" [2 uses])
(note 36 35 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 41 36 37 4 NOTE_INSN_DELETED)
(insn:TI 37 41 39 4 (set (reg:DI 4 si)
        (reg/v/f:DI 3 bx [orig:112 input_file ] [112])) lex.yy.c:1601 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:112 input_file ] [112])
        (nil)))
(call_insn:TI 39 37 42 4 (call (mem:QI (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>) [0 yy_init_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1601 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_init_bufferP15yy_buffer_stateP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c948 yy_init_buffer>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn:TI 42 39 72 4 (set (reg/f:DI 0 ax [orig:120 yy_buffer_stack ] [120])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 72 42 43 4 (set (reg:DI 1 dx [orig:119 yy_buffer_stack_top ] [119])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 43 72 44 4 (set (reg/f:DI 1 dx [orig:102 D.6669 ] [102])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:119 yy_buffer_stack_top ] [119])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:120 yy_buffer_stack ] [120]))) lex.yy.c:1642 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:120 yy_buffer_stack ] [120])
        (nil)))
(insn:TI 44 43 45 4 (set (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6669 ] [102]) [1 *_29+0 S8 A64])) lex.yy.c:1642 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6669 ] [102]) [1 *_29+0 S8 A64])
        (nil)))
(insn:TI 45 44 47 4 (set (reg:SI 2 cx [orig:121 _30->yy_n_chars ] [121])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
                (const_int 32 [0x20])) [2 _30->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
                (const_int 32 [0x20])) [2 _30->yy_n_chars+0 S4 A64])
        (nil)))
(insn 47 45 49 4 (set (reg/f:DI 0 ax [orig:105 D.6674 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:103 D.6671 ] [103])
                (const_int 16 [0x10])) [1 _30->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn:TI 49 47 50 4 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 0 ax [orig:105 D.6674 ] [105])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 50 49 48 4 (set (reg/f:DI 1 dx [orig:122 *_29 ] [122])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6669 ] [102]) [1 *_29+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn:TI 48 50 46 4 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:105 D.6674 ] [105])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 46 48 51 4 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:121 _30->yy_n_chars ] [121])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:121 _30->yy_n_chars ] [121])
        (nil)))
(insn:TI 51 46 52 4 (set (reg/f:DI 1 dx [orig:123 _33->yy_input_file ] [123])
        (mem/f:DI (reg/f:DI 1 dx [orig:122 *_29 ] [122]) [1 _33->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn:TI 52 51 53 4 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 1 dx [orig:123 _33->yy_input_file ] [123])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:123 _33->yy_input_file ] [123])
        (nil)))
(insn 53 52 54 4 (set (reg:QI 0 ax [orig:124 *_32 ] [124])
        (mem:QI (reg/f:DI 0 ax [orig:105 D.6674 ] [105]) [0 *_32+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn:TI 54 53 90 4 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:124 *_32 ] [124])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:124 *_32 ] [124])
        (nil)))
(note 90 54 82 4 NOTE_INSN_EPILOGUE_BEG)
(insn/f 82 90 83 4 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1603 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 83 82 84 4 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1603 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 84 83 85 4 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1603 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 85 84 86 4 (simple_return) lex.yy.c:1603 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 86 85 15)
;; basic block 5, loop depth 0, count 0, freq 2071, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [15.0%]  (CAN_FALLTHRU)
;;              2 [6.7%]  (CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 15 86 16 5 82 "" [2 uses])
(note 16 15 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 19 16 17 5 NOTE_INSN_DELETED)
(call_insn:TI 17 19 20 5 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1596 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn:TI 20 17 73 5 (set (reg/f:DI 0 ax [orig:116 yy_buffer_stack ] [116])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1597 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 73 20 22 5 (set (reg:DI 1 dx [orig:115 yy_buffer_stack_top ] [115])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1597 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 22 73 23 5 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) lex.yy.c:1598 90 {*movsi_internal}
     (nil))
(insn:TI 23 22 21 5 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1598 89 {*movdi_internal}
     (nil))
(insn:TI 21 23 24 5 (set (reg/f:DI 6 bp [orig:95 D.6669 ] [95])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:115 yy_buffer_stack_top ] [115])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:116 yy_buffer_stack ] [116]))) lex.yy.c:1597 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:115 yy_buffer_stack_top ] [115])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:116 yy_buffer_stack ] [116])
            (nil))))
(call_insn:TI 24 21 26 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:1598 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn:TI 26 24 27 5 (set (mem/f:DI (reg/f:DI 6 bp [orig:95 D.6669 ] [95]) [1 *_13+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6671 ] [97])) lex.yy.c:1598 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:95 D.6669 ] [95])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.6671 ] [97])
            (nil))))
(insn 27 26 87 5 (set (reg/f:DI 0 ax [orig:98 D.6669 ] [98])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1601 89 {*movdi_internal}
     (nil))
(insn 87 27 28 5 (parallel [
            (set (reg/f:DI 5 di [orig:91 D.6671 ] [91])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1601 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 28 87 29 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:98 D.6669 ] [98])
            (const_int 0 [0]))) lex.yy.c:1601 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 29 28 30 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) lex.yy.c:1601 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4896 (nil)))
 -> 35)
;;  succ:       6 [51.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [49.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 1057, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [51.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 5 [di]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 31 30 32 6 (set (reg:DI 1 dx [orig:117 yy_buffer_stack_top ] [117])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 32 31 88 6 (set (reg/f:DI 5 di [orig:91 D.6671 ] [91])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:117 yy_buffer_stack_top ] [117])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:98 D.6669 ] [98])) [1 *_50+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:117 yy_buffer_stack_top ] [117])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:98 D.6669 ] [98])
            (nil))))
(jump_insn 88 32 89 6 (set (pc)
        (label_ref 35)) 654 {jump}
     (nil)
 -> 35)
;;  succ:       4 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

(barrier 89 88 74)
(note 74 89 0 NOTE_INSN_DELETED)

;; Function void yypush_buffer_state(YY_BUFFER_STATE) (_Z19yypush_buffer_stateP15yy_buffer_state, funcdef_no=98, decl_uid=4263, cgraph_uid=98, symbol_order=125)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)


void yypush_buffer_state(YY_BUFFER_STATE)

Dataflow summary:
def_info->table_size = 112, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={10d,10u} r1={6d,7u} r2={3d,3u} r3={3d,5u,1e} r4={3d,2u} r5={4d,5u} r7={3d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,3u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={4d,2u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 164{116d,47u,1e} in 39{38 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 2 )->[3]->( 6 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 5 4 3 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 6 2 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 7 to worklist
  Adding insn 12 to worklist
  Adding insn 9 to worklist
  Adding insn 68 to worklist
  Adding insn 24 to worklist
  Adding insn 35 to worklist
  Adding insn 33 to worklist
  Adding insn 30 to worklist
  Adding insn 28 to worklist
  Adding insn 50 to worklist
  Adding insn 48 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 42 to worklist
  Adding insn 40 to worklist
  Adding insn 79 to worklist
Finished finding needed instructions:
processing block 7 lr out =  3 [bx] 7 [sp]
processing block 6 lr out =  3 [bx] 7 [sp]
  Adding insn 78 to worklist
  Adding insn 49 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 43 to worklist
  Adding insn 41 to worklist
processing block 5 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 29 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 23 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 20 to worklist
processing block 3 lr out =  0 [ax] 2 [cx] 3 [bx] 7 [sp]
  Adding insn 11 to worklist
  Adding insn 15 to worklist
  Adding insn 65 to worklist
  Adding insn 10 to worklist
  Adding insn 63 to worklist
processing block 2 lr out =  3 [bx] 5 [di] 7 [sp]
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)
;;   ======================================================
;;   -- basic block 2 from 6 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i   7 pc={(flags==0)?L82:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 6
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 68 to 12 -- after reload
;;   ======================================================

;;	  0--> b  0: i  68 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  63 bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i   9 call [`_ZL21yyensure_buffer_stackv']    :athlon-vector,athlon-ieu
;;	  3--> b  0: i  10 cx=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  3--> b  0: i  65 ax=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  6--> b  0: i  15 {ax=ax<<0x3;clobber flags;}             :athlon-direct,athlon-ieu
;;	  6--> b  0: i  11 flags=cmp(cx,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i  12 pc={(flags==0)?L38:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 68
;;   new tail = 12

;;   ======================================================
;;   -- basic block 4 from 20 to 24 -- after reload
;;   ======================================================

;;	  0--> b  0: i  20 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  66 si=dx*0x8                               :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  67 ax=cx+si                                :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i  23 flags=cmp([ax],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i  24 pc={(flags==0)?L38:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 11
;;   new head = 20
;;   new tail = 24

;;   ======================================================
;;   -- basic block 5 from 26 to 37 -- after reload
;;   ======================================================

;;	  0--> b  0: i  27 r8=[`_ZL12yy_hold_char']                :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  26 di=[`_ZL10yy_c_buf_p']                  :athlon-direct,athlon-load
;;	  0--> b  0: i  34 {dx=dx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  35 [`_ZL19yy_buffer_stack_top']=dx         :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  28 [di]=r8                                 :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  29 r8=[ax]                                 :athlon-direct,athlon-load
;;	  7--> b  0: i  30 [r8+0x10]=di                            :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i  32 di=[`_ZL10yy_n_chars']                  :athlon-direct,athlon-load
;;	  8--> b  0: i  31 ax=[ax]                                 :athlon-direct,athlon-load
;;	 11--> b  0: i  33 [ax+0x20]=di                            :athlon-direct,athlon-agu,athlon-store
;;	 11--> b  0: i  37 ax=cx+si+0x8                            :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 11
;;   new head = 27
;;   new tail = 37

;;   ======================================================
;;   -- basic block 6 from 40 to 78 -- after reload
;;   ======================================================

;;	  0--> b  0: i  41 dx=[bx+0x20]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  40 [ax]=bx                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  42 [`_ZL10yy_n_chars']=dx                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  43 dx=[bx+0x10]                            :athlon-direct,athlon-load
;;	  4--> b  0: i  78 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i  45 [`yytext']=dx                           :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  46 ax=[ax]                                 :athlon-direct,athlon-load
;;	  7--> b  0: i  44 [`_ZL10yy_c_buf_p']=dx                  :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  47 ax=[ax]                                 :athlon-direct,athlon-load
;;	 12--> b  0: i  48 [`yyin']=ax                             :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i  49 ax=[dx]                                 :athlon-direct,athlon-load,athlon-ieu
;;	 16--> b  0: i  50 [`_ZL12yy_hold_char']=ax                :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 16
;;   new head = 41
;;   new tail = 50

;;   ======================================================
;;   -- basic block 7 from 79 to 79 -- after reload
;;   ======================================================

;;	  0--> b  0: i  79 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 79
;;   new tail = 79



starting the processing of deferred insns
ending the processing of deferred insns


void yypush_buffer_state(YY_BUFFER_STATE)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={10d,10u} r1={6d,7u} r2={3d,3u} r3={3d,5u,1e} r4={3d,2u} r5={4d,5u} r7={3d,10u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,3u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={4d,2u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 164{116d,47u,1e} in 39{38 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:106 new_buffer ] [106])
            (const_int 0 [0]))) lex.yy.c:1760 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 82)
            (pc))) lex.yy.c:1760 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2164 (nil)))
 -> 82)
;;  succ:       7 [21.6%]  (CAN_FALLTHRU)
;;              3 [78.4%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7836, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.4%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 8 7 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 14 8 68 3 NOTE_INSN_DELETED)
(insn/f:TI 68 14 69 3 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1759 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 69 68 63 3 NOTE_INSN_PROLOGUE_END)
(insn 63 69 9 3 (set (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
        (reg/v/f:DI 5 di [orig:106 new_buffer ] [106])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 5 di [orig:106 new_buffer ] [106])
        (nil)))
(call_insn:TI 9 63 10 3 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:1763 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn:TI 10 9 65 3 (set (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1766 89 {*movdi_internal}
     (nil))
(insn 65 10 15 3 (set (reg:DI 0 ax [118])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 15 65 11 3 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6678 ] [103])
                (ashift:DI (reg:DI 0 ax [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 512 {*ashldi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 11 15 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
            (const_int 0 [0]))) lex.yy.c:1766 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 12 11 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 38)
            (pc))) lex.yy.c:1766 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 38)
;;  succ:       6 [15.0%]  (CAN_FALLTHRU)
;;              4 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 6661, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  kill	
(note 19 12 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 20 19 66 4 (set (reg:DI 1 dx [orig:88 D.6679 ] [88])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1766 89 {*movdi_internal}
     (nil))
(insn:TI 66 20 67 4 (set (reg:DI 4 si [orig:89 D.6679 ] [89])
        (mult:DI (reg:DI 1 dx [orig:88 D.6679 ] [88])
            (const_int 8 [0x8]))) lex.yy.c:1766 214 {*leadi}
     (nil))
(insn:TI 67 66 23 4 (set (reg/f:DI 0 ax [orig:103 D.6678 ] [103])
        (plus:DI (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
            (reg:DI 4 si [orig:89 D.6679 ] [89]))) lex.yy.c:1766 214 {*leadi}
     (nil))
(insn:TI 23 67 24 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_10+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:1766 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 24 23 25 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) lex.yy.c:1766 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 38)
;;  succ:       5 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              6 [15.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 5662, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       4 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
(note 25 24 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 36 25 27 5 NOTE_INSN_DELETED)
(insn:TI 27 36 26 5 (set (reg:QI 37 r8 [orig:108 yy_hold_char ] [108])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1769 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn 26 27 34 5 (set (reg/f:DI 5 di [orig:91 D.6681 ] [91])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1769 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (nil)))
(insn 34 26 35 5 (parallel [
            (set (reg:DI 1 dx [111])
                (plus:DI (reg:DI 1 dx [orig:88 D.6679 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1776 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
            (nil))))
(insn:TI 35 34 28 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (reg:DI 1 dx [111])) lex.yy.c:1776 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [111])
        (nil)))
(insn:TI 28 35 29 5 (set (mem:QI (reg/f:DI 5 di [orig:91 D.6681 ] [91]) [0 *_12+0 S1 A8])
        (reg:QI 37 r8 [orig:108 yy_hold_char ] [108])) lex.yy.c:1769 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 37 r8 [orig:108 yy_hold_char ] [108])
        (nil)))
(insn 29 28 30 5 (set (reg/f:DI 37 r8 [orig:93 D.6680 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_10+0 S8 A64])) lex.yy.c:1770 89 {*movdi_internal}
     (nil))
(insn:TI 30 29 32 5 (set (mem/f:DI (plus:DI (reg/f:DI 37 r8 [orig:93 D.6680 ] [93])
                (const_int 16 [0x10])) [1 _15->yy_buf_pos+0 S8 A64])
        (reg/f:DI 5 di [orig:91 D.6681 ] [91])) lex.yy.c:1770 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:93 D.6680 ] [93])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:91 D.6681 ] [91])
            (nil))))
(insn 32 30 31 5 (set (reg:SI 5 di [orig:110 yy_n_chars ] [110])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1771 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (nil)))
(insn:TI 31 32 33 5 (set (reg/f:DI 0 ax [orig:109 *_10 ] [109])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_10+0 S8 A64])) lex.yy.c:1771 89 {*movdi_internal}
     (nil))
(insn:TI 33 31 37 5 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:109 *_10 ] [109])
                (const_int 32 [0x20])) [2 _17->yy_n_chars+0 S4 A64])
        (reg:SI 5 di [orig:110 yy_n_chars ] [110])) lex.yy.c:1771 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:110 yy_n_chars ] [110])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 *_10 ] [109])
            (nil))))
(insn 37 33 38 5 (set (reg/f:DI 0 ax [orig:103 D.6678 ] [103])
        (plus:DI (plus:DI (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
                (reg:DI 4 si [orig:89 D.6679 ] [89]))
            (const_int 8 [0x8]))) 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:89 D.6679 ] [89])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:87 D.6678 ] [87])
            (nil))))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 7836, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [15.0%]  (CAN_FALLTHRU)
;;              3 [15.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 7 [sp]
;; live  kill	
(code_label 38 37 39 6 94 "" [2 uses])
(note 39 38 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 41 39 40 6 (set (reg:SI 1 dx [orig:113 new_buffer_4(D)->yy_n_chars ] [113])
        (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
                (const_int 32 [0x20])) [2 new_buffer_4(D)->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
                (const_int 32 [0x20])) [2 new_buffer_4(D)->yy_n_chars+0 S4 A64])
        (nil)))
(insn 40 41 42 6 (set (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_41+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])) lex.yy.c:1777 89 {*movdi_internal}
     (nil))
(insn:TI 42 40 43 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 1 dx [orig:113 new_buffer_4(D)->yy_n_chars ] [113])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:113 new_buffer_4(D)->yy_n_chars ] [113])
        (nil)))
(insn 43 42 85 6 (set (reg/f:DI 1 dx [orig:99 D.6681 ] [99])
        (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
                (const_int 16 [0x10])) [1 new_buffer_4(D)->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:106 new_buffer ] [106])
        (nil)))
(note 85 43 78 6 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 78 85 45 6 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1782 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn:TI 45 78 46 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6681 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 46 45 44 6 (set (reg/f:DI 0 ax [orig:114 *_41 ] [114])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 D.6678 ] [103]) [1 *_41+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn:TI 44 46 47 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 1 dx [orig:99 D.6681 ] [99])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn:TI 47 44 48 6 (set (reg/f:DI 0 ax [orig:115 _34->yy_input_file ] [115])
        (mem/f:DI (reg/f:DI 0 ax [orig:114 *_41 ] [114]) [1 _34->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn:TI 48 47 49 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:115 _34->yy_input_file ] [115])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:115 _34->yy_input_file ] [115])
        (nil)))
(insn 49 48 50 6 (set (reg:QI 0 ax [orig:116 *_33 ] [116])
        (mem:QI (reg/f:DI 1 dx [orig:99 D.6681 ] [99]) [0 *_33+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:99 D.6681 ] [99])
        (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
            (nil))))
(insn:TI 50 49 82 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:116 *_33 ] [116])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:116 *_33 ] [116])
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 7836, maybe hot
;; Invalid sum of incoming frequencies 10000, should be 7836
;;  prev block 6, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              2 [21.6%]  (CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 82 50 81 7 100 "" [1 uses])
(note 81 82 79 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 79 81 80 7 (simple_return) lex.yy.c:1782 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 80 79 64)
(note 64 80 0 NOTE_INSN_DELETED)

;; Function void yypop_buffer_state() (_Z18yypop_buffer_statev, funcdef_no=99, decl_uid=4264, cgraph_uid=99, symbol_order=126)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 11 count 8 (    1)


void yypop_buffer_state()

Dataflow summary:
def_info->table_size = 105, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={5d,7u,1e} r1={5d,4u} r2={3d,1u} r3={4d,7u} r4={2d} r5={3d,2u} r6={3d,5u} r7={7d,14u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,4u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={3d,4u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 166{117d,48u,1e} in 35{34 regular + 1 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 6 [bp] 7 [sp] 17 [flags]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 2 )->[3]->( 7 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags] 41 [r12]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 3 )->[4]->( 5 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 5 [di] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 3 2 4 5 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 7 to worklist
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 84 to worklist
  Adding insn 19 to worklist
  Adding insn 53 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 30 to worklist
  Adding insn 25 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 33 to worklist
  Adding insn 94 to worklist
Finished finding needed instructions:
processing block 7 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 93 to worklist
  Adding insn 92 to worklist
  Adding insn 91 to worklist
processing block 6 lr out =  7 [sp]
  Adding insn 40 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 32 to worklist
processing block 5 lr out =  0 [ax] 1 [dx] 7 [sp]
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 24 to worklist
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 52 to worklist
processing block 3 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 18 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 13 to worklist
processing block 2 lr out =  6 [bp] 7 [sp]
  Adding insn 6 to worklist
  Adding insn 5 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 11 count 8 (    1)
;;   ======================================================
;;   -- basic block 2 from 84 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i  84 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  85 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i   5 bp=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  1--> b  0: i  86 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i   6 flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i   7 pc={(flags==0)?L57:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 84
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 13 to 19 -- after reload
;;   ======================================================

;;	  0--> b  0: i  13 bx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  15 r12=bx*0x8+bp                           :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  16 di=[r12]                                :athlon-direct,athlon-load
;;	  8--> b  0: i  18 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  9--> b  0: i  19 pc={(flags==0)?L57:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 13
;;   new tail = 19

;;   ======================================================
;;   -- basic block 4 from 49 to 53 -- after reload
;;   ======================================================

;;	  0--> b  0: i  49 call [`_Z16yy_delete_bufferP15yy_buffer_state']:athlon-vector,athlon-ieu
;;	  1--> b  0: i  52 flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  50 [r12]=0                                 :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  53 pc={(flags==0)?L57:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 49
;;   new tail = 53

;;   ======================================================
;;   -- basic block 5 from 24 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i  24 {bx=bx-0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i  27 dx=bx*0x8+bp                            :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  25 [`_ZL19yy_buffer_stack_top']=bx         :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  28 ax=[dx]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  29 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  7--> b  0: i  30 pc={(flags==0)?L57:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 24
;;   new tail = 30

;;   ======================================================
;;   -- basic block 6 from 32 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32 cx=[ax+0x20]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  34 ax=[ax+0x10]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  36 [`yytext']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  37 dx=[dx]                                 :athlon-direct,athlon-load
;;	  4--> b  0: i  35 [`_ZL10yy_c_buf_p']=ax                  :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  33 [`_ZL10yy_n_chars']=cx                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  38 dx=[dx]                                 :athlon-direct,athlon-load
;;	  9--> b  0: i  39 [`yyin']=dx                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i  40 ax=[ax]                                 :athlon-direct,athlon-load,athlon-ieu
;;	 13--> b  0: i  41 [`_ZL12yy_hold_char']=ax                :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 13
;;   new head = 32
;;   new tail = 41

;;   ======================================================
;;   -- basic block 7 from 91 to 94 -- after reload
;;   ======================================================

;;	  0--> b  0: i  91 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  1--> b  0: i  92 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i  93 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i  94 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 91
;;   new tail = 94



starting the processing of deferred insns
ending the processing of deferred insns


void yypop_buffer_state()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={5d,7u,1e} r1={5d,4u} r2={3d,1u} r3={4d,7u} r4={2d} r5={3d,2u} r6={3d,5u} r7={7d,14u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={6d,4u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={3d,4u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 166{117d,48u,1e} in 35{34 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 6 [bp] 7 [sp] 17 [flags]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 84 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 84 2 85 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) lex.yy.c:1789 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f 85 84 5 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1789 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn:TI 5 85 86 2 (set (reg/f:DI 6 bp [orig:88 D.6687 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn/f 86 5 87 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1789 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 87 86 6 2 NOTE_INSN_PROLOGUE_END)
(insn:TI 6 87 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 6 bp [orig:88 D.6687 ] [88])
            (const_int 0 [0]))) lex.yy.c:1790 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 7 6 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1790 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 57)
;;  succ:       7 [10.1%]  (CAN_FALLTHRU)
;;              3 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags] 41 [r12]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags] 41 [r12]
;; live  kill	
(note 12 7 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(note 14 12 13 3 NOTE_INSN_DELETED)
(insn:TI 13 14 15 3 (set (reg:DI 3 bx [orig:89 D.6688 ] [89])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn:TI 15 13 16 3 (set (reg/f:DI 41 r12 [orig:91 D.6687 ] [91])
        (plus:DI (mult:DI (reg:DI 3 bx [orig:89 D.6688 ] [89])
                (const_int 8 [0x8]))
            (reg/f:DI 6 bp [orig:88 D.6687 ] [88]))) lex.yy.c:1790 214 {*leadi}
     (nil))
(insn:TI 16 15 18 3 (set (reg/f:DI 5 di [orig:92 D.6689 ] [92])
        (mem/f:DI (reg/f:DI 41 r12 [orig:91 D.6687 ] [91]) [1 *_8+0 S8 A64])) lex.yy.c:1790 89 {*movdi_internal}
     (nil))
(insn:TI 18 16 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:92 D.6689 ] [92])
            (const_int 0 [0]))) lex.yy.c:1790 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 19 18 47 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1790 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 57)
;;  succ:       7 [10.1%]  (CAN_FALLTHRU)
;;              4 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 8075, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 5 [di] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 47 19 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 49 47 52 4 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1793 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 52 49 50 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 3 bx [orig:89 D.6688 ] [89])
            (const_int 0 [0]))) lex.yy.c:1795 4 {*cmpdi_ccno_1}
     (nil))
(insn 50 52 53 4 (set (mem/f:DI (reg/f:DI 41 r12 [orig:91 D.6687 ] [91]) [1 *_8+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1794 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 41 r12 [orig:91 D.6687 ] [91])
        (nil)))
(jump_insn:TI 53 50 23 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1795 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 57)
;;  succ:       5 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              7 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 4037, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(note 23 53 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 26 23 24 5 NOTE_INSN_DELETED)
(insn:TI 24 26 27 5 (parallel [
            (set (reg:DI 3 bx [orig:94 D.6688 ] [94])
                (plus:DI (reg:DI 3 bx [orig:89 D.6688 ] [89])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1796 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 27 24 25 5 (set (reg/f:DI 1 dx [orig:87 D.6687 ] [87])
        (plus:DI (mult:DI (reg:DI 3 bx [orig:94 D.6688 ] [94])
                (const_int 8 [0x8]))
            (reg/f:DI 6 bp [orig:88 D.6687 ] [88]))) 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:88 D.6687 ] [88])
        (expr_list:REG_DEAD (reg:DI 3 bx [orig:94 D.6688 ] [94])
            (nil))))
(insn 25 27 28 5 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (reg:DI 3 bx [orig:94 D.6688 ] [94])) lex.yy.c:1796 89 {*movdi_internal}
     (nil))
(insn:TI 28 25 29 5 (set (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
        (mem/f:DI (reg/f:DI 1 dx [orig:87 D.6687 ] [87]) [1 *_1+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 29 28 30 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
            (const_int 0 [0]))) lex.yy.c:1798 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) lex.yy.c:1798 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 57)
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              7 (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 6520, maybe hot
;; Invalid sum of incoming frequencies 4037, should be 6520
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 32 31 34 6 (set (reg:SI 2 cx [orig:103 _23->yy_n_chars ] [103])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
                (const_int 32 [0x20])) [2 _23->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_EQUIV (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
                (const_int 32 [0x20])) [2 _23->yy_n_chars+0 S4 A64])
        (nil)))
(insn 34 32 36 6 (set (reg/f:DI 0 ax [orig:97 D.6691 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 D.6689 ] [95])
                (const_int 16 [0x10])) [1 _23->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn:TI 36 34 37 6 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6691 ] [97])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 37 36 35 6 (set (reg/f:DI 1 dx [orig:104 *_1 ] [104])
        (mem/f:DI (reg/f:DI 1 dx [orig:87 D.6687 ] [87]) [1 *_1+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (nil))
(insn:TI 35 37 33 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:97 D.6691 ] [97])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 33 35 38 6 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:103 _23->yy_n_chars ] [103])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:103 _23->yy_n_chars ] [103])
        (nil)))
(insn:TI 38 33 39 6 (set (reg/f:DI 1 dx [orig:105 _26->yy_input_file ] [105])
        (mem/f:DI (reg/f:DI 1 dx [orig:104 *_1 ] [104]) [1 _26->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn:TI 39 38 40 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 1 dx [orig:105 _26->yy_input_file ] [105])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:105 _26->yy_input_file ] [105])
        (nil)))
(insn 40 39 41 6 (set (reg:QI 0 ax [orig:106 *_25 ] [106])
        (mem:QI (reg/f:DI 0 ax [orig:97 D.6691 ] [97]) [0 *_25+0 S1 A8])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn:TI 41 40 57 6 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:106 *_25 ] [106])) lex.yy.c:1645 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:106 *_25 ] [106])
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;; Invalid sum of incoming frequencies 12483, should be 10000
;;  prev block 6, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       3 [10.1%]  (CAN_FALLTHRU)
;;              2 [10.1%]  (CAN_FALLTHRU)
;;              4 [50.0%]  (CAN_FALLTHRU)
;;              5 (CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
(code_label 57 41 58 7 101 "" [4 uses])
(note 58 57 90 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 90 58 91 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 91 90 92 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1802 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 92 91 93 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1802 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 93 92 94 7 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1802 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 94 93 95 7 (simple_return) lex.yy.c:1802 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 95 94 83)
(note 83 95 0 NOTE_INSN_DELETED)

;; Function int yylex() (_Z5yylexv, funcdef_no=85, decl_uid=5394, cgraph_uid=85, symbol_order=112)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 162 n_edges 255 count 336 (  2.1)


int yylex()

Dataflow summary:
def_info->table_size = 2914, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={108d,130u} r1={97d,83u} r2={64d,35u} r3={52d,39u} r4={67d,35u} r5={76d,49u} r6={10d,24u} r7={15d,230u} r8={33d} r9={33d} r10={33d} r11={33d} r12={33d} r13={33d} r14={33d} r15={33d} r17={137d,62u} r18={33d} r19={33d} r21={31d} r22={31d} r23={31d} r24={31d} r25={31d} r26={31d} r27={31d} r28={31d} r29={30d} r30={30d} r31={30d} r32={30d} r33={30d} r34={30d} r35={30d} r36={30d} r37={35d,1u} r38={35d,1u} r39={43d,15u,1e} r40={37d,9u} r41={6d,9u} r42={3d,4u} r43={15d,40u} r44={10d,17u,5e} r45={30d} r46={30d} r47={30d} r48={30d} r49={30d} r50={30d} r51={30d} r52={30d} r53={33d} r54={33d} r55={33d} r56={33d} r57={33d} r58={33d} r59={33d} r60={33d} r61={33d} r62={33d} r63={33d} r64={33d} r65={33d} r66={33d} r67={33d} r68={33d} r69={33d} r70={33d} r71={33d} r72={33d} r73={33d} r74={33d} r75={33d} r76={33d} r77={33d} r78={33d} r79={33d} r80={33d} 
;;    total ref usage 3581{2792d,783u,6e} in 811{778 regular + 33 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 28 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 4 [si]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 3 34 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 42 [r13]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 42 [r13]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

( 40 4 41 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 41 [r12]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]

( 5 144 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 5 [di] 6 [bp] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 6 13 )->[7]->( 11 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 42 [r13]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 11 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 2 [cx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 8 9 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 10 7 )->[11]->( 12 8 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 11 )->[12]->( 14 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 12 )->[13]->( 7 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 4 [si]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 12 )->[14]->( 15 159 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 14 159 )->[15]->( 16 158 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 40 [r11]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]

( 15 158 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 16 155 88 156 92 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 17 18 )->[19]->( 20 26 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 19 )->[20]->( 21 26 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags] 39 [r10]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 20 )->[21]->( 22 24 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 21 )->[22]->( 26 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	

( 24 )->[23]->( 26 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 21 23 25 )->[24]->( 25 23 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 24 )->[25]->( 26 24 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 23 25 19 20 22 126 )->[26]->( 100 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 26 )->[27]->( 93 92 91 41 97 80 39 94 81 38 96 95 78 77 76 72 70 69 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 42 90 89 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 2 )->[28]->( 29 30 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 40 [r11]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags] 40 [r11]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 28 )->[29]->( 30 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 28 29 )->[30]->( 35 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 30 35 )->[31]->( 36 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 31 36 )->[32]->( 37 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 32 )->[33]->( 37 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

( 33 37 )->[34]->( 4 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

( 30 )->[35]->( 31 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 31 )->[36]->( 32 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 33 32 )->[37]->( 34 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

( 27 )->[38]->( 39 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 7 [sp] 42 [r13]
;; live  out 	 7 [sp] 42 [r13]

( 38 27 )->[39]->( 40 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

( 91 80 96 94 39 95 99 )->[40]->( 5 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  gen 	 3 [bx] 4 [si]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

( 27 )->[41]->( 5 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

( 27 )->[42]->( 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 75 89 65 63 67 74 71 69 90 79 93 68 66 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 64 42 160 )->[43]->( 44 161 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 5 [di]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 43 )->[44]->( 1 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 27 )->[45]->( 43 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[46]->( 43 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[47]->( 43 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[48]->( 43 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[49]->( 43 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[50]->( 43 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[51]->( 43 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[52]->( 43 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[53]->( 43 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[54]->( 43 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[55]->( 43 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[56]->( 43 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[57]->( 43 )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[58]->( 43 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[59]->( 43 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[60]->( 43 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[61]->( 43 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[62]->( 43 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[63]->( 43 )
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[64]->( 43 )
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[65]->( 43 )
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[66]->( 43 )
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[67]->( 68 43 )
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]

( 67 )->[68]->( 43 )
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[69]->( 43 )
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[70]->( 71 )
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 70 73 )->[71]->( 43 )
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[72]->( 73 )
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 4 [si]
;; live  kill	
;; lr  out 	 1 [dx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 4 [si] 7 [sp]

( 72 76 77 )->[73]->( 71 74 )
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 73 )->[74]->( 75 43 )
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 74 )->[75]->( 43 )
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[76]->( 73 )
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 4 [si]
;; live  kill	
;; lr  out 	 1 [dx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 4 [si] 7 [sp]

( 27 )->[77]->( 73 )
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 4 [si]
;; live  kill	
;; lr  out 	 1 [dx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 4 [si] 7 [sp]

( 27 )->[78]->( 148 79 )
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 78 148 )->[79]->( 43 )
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[80]->( 40 )
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

( 27 )->[81]->( 83 82 )
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 17 [flags] 38 [r9] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 17 [flags] 38 [r9] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 81 )->[82]->( 83 )
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 5 [di] 43 [r14]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 43 [r14]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 82 81 )->[83]->( 151 84 )
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 83 )->[84]->( 150 85 )
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 39 [r10] 40 [r11]
;; lr  def 	 5 [di] 17 [flags] 39 [r10]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags] 39 [r10]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 84 )->[85]->( 86 101 )
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 85 )->[86]->( 149 87 )
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 86 )->[87]->( 88 )
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 42 [r13]

( 87 147 )->[88]->( 17 )
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 41 [r12]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 27 )->[89]->( 43 )
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[90]->( 43 )
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[91]->( 40 )
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

( 27 )->[92]->( 17 )
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 27 )->[93]->( 43 )
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 27 )->[94]->( 40 )
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

( 27 )->[95]->( 40 )
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

( 27 )->[96]->( 40 )
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

( 27 )->[97]->( 160 98 )
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 7 [sp] 42 [r13]

( 97 )->[98]->( 160 99 )
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 42 [r13]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 7 [sp] 42 [r13]
;; live  out 	 7 [sp] 42 [r13]

( 98 )->[99]->( 40 )
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

( 26 )->[100]->( )
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 85 )->[101]->( 105 102 )
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 101 )->[102]->( 103 )
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]

( 102 103 )->[103]->( 104 103 )
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 1 [dx] 5 [di] 6 [bp] 7 [sp] 40 [r11]
;; lr  def 	 1 [dx] 17 [flags] 39 [r10]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]

( 103 )->[104]->( 105 )
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 43 [r14]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 43 [r14]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 104 101 )->[105]->( 106 111 )
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 105 )->[106]->( 140 )
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	

( 112 )->[107]->( 108 115 )
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 107 )->[108]->( 109 )
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 108 115 )->[109]->( 114 110 )
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 5 [di] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 109 )->[110]->( 111 )
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 110 105 )->[111]->( 116 112 )
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 111 )->[112]->( 107 113 )
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 112 )->[113]->( 114 )
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 7 [sp] 43 [r14]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 113 109 )->[114]->( )
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 107 )->[115]->( 109 )
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 111 )->[116]->( 131 117 )
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 116 )->[117]->( 118 )
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 44 [r15]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 117 130 )->[118]->( 127 119 )
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 118 128 )->[119]->( 120 )
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 44 [r15]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 4 [si] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 119 138 )->[120]->( 121 123 )
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 1 [dx] 7 [sp] 44 [r15]
;; lr  def 	 17 [flags] 39 [r10] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags] 39 [r10] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 120 140 )->[121]->( 141 122 )
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 121 )->[122]->( 123 )
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 39 [r10] 43 [r14] 44 [r15]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 120 122 141 )->[123]->( 145 124 )
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 39 [r10]
;; lr  def 	 2 [cx] 6 [bp] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 6 [bp] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 123 )->[124]->( 125 )
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 0 [ax]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 124 145 )->[125]->( 126 142 )
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 2 [cx] 6 [bp] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 125 149 )->[126]->( 26 )
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 118 )->[127]->( 129 128 )
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 127 )->[128]->( 119 )
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 127 )->[129]->( 136 130 )
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 129 )->[130]->( 118 )
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 43 [r14]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 116 )->[131]->( 134 )
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 134 )->[132]->( 133 139 )
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 132 )->[133]->( 134 138 )
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 133 131 )->[134]->( 132 135 )
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 134 )->[135]->( 136 137 )
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 135 129 )->[136]->( )
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 135 )->[137]->( 138 )
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 4 [si] 44 [r15]
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 137 133 139 )->[138]->( 120 )
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 132 )->[139]->( 138 )
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 106 )->[140]->( 121 )
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

( 121 )->[141]->( 123 )
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 125 )->[142]->( 147 143 )
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]

( 142 )->[143]->( 144 )
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 3 [bx] 41 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 143 157 )->[144]->( 6 )
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 2 [cx] 4 [si]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]

( 123 )->[145]->( 146 125 )
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 39 [r10] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 145 )->[146]->( )
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 142 )->[147]->( 88 )
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 7 [sp] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 42 [r13]

( 78 )->[148]->( 79 )
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 86 )->[149]->( 126 )
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 84 )->[150]->( )
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 83 )->[151]->( 152 153 )
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

( 151 )->[152]->( 153 )
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

( 151 152 )->[153]->( 155 154 )
;; bb 153 artificial_defs: { }
;; bb 153 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 2 [cx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

( 153 154 )->[154]->( 155 154 )
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

( 154 153 )->[155]->( 156 17 )
;; bb 155 artificial_defs: { }
;; bb 155 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 155 )->[156]->( 157 17 )
;; bb 156 artificial_defs: { }
;; bb 156 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 156 )->[157]->( 144 )
;; bb 157 artificial_defs: { }
;; bb 157 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 15 )->[158]->( 16 )
;; bb 158 artificial_defs: { }
;; bb 158 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

( 14 )->[159]->( 15 )
;; bb 159 artificial_defs: { }
;; bb 159 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

( 97 98 )->[160]->( 43 )
;; bb 160 artificial_defs: { }
;; bb 160 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 43 )->[161]->( )
;; bb 161 artificial_defs: { }
;; bb 161 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 44 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 72 to worklist
  Adding insn 3 to worklist
  Adding insn 1751 to worklist
  Adding insn 1750 to worklist
  Adding insn 1749 to worklist
  Adding insn 1748 to worklist
  Adding insn 1747 to worklist
  Adding insn 1746 to worklist
  Adding insn 167 to worklist
  Adding insn 1985 to worklist
  Adding insn 225 to worklist
  Adding insn 216 to worklist
  Adding insn 249 to worklist
  Adding insn 1988 to worklist
  Adding insn 261 to worklist
  Adding insn 267 to worklist
  Adding insn 286 to worklist
  Adding insn 309 to worklist
  Adding insn 307 to worklist
  Adding insn 306 to worklist
  Adding insn 305 to worklist
  Adding insn 303 to worklist
  Adding insn 300 to worklist
  Adding insn 314 to worklist
  Adding insn 319 to worklist
  Adding insn 1993 to worklist
  Adding insn 342 to worklist
  Adding insn 332 to worklist
  Adding insn 1983 to worklist
  Adding insn 334 to worklist
  Adding insn 351 to worklist
  Adding insn 355 to worklist
  Adding insn 82 to worklist
  Adding insn 80 to worklist
  Adding insn 84 to worklist
  Adding insn 88 to worklist
  Adding insn 95 to worklist
  Adding insn 103 to worklist
  Adding insn 110 to worklist
  Adding insn 1997 to worklist
  Adding insn 139 to worklist
  Adding insn 137 to worklist
  Adding insn 134 to worklist
  Adding insn 133 to worklist
  Adding insn 131 to worklist
  Adding insn 1999 to worklist
  Adding insn 91 to worklist
  Adding insn 2001 to worklist
  Adding insn 98 to worklist
  Adding insn 2003 to worklist
  Adding insn 122 to worklist
  Adding insn 120 to worklist
  Adding insn 113 to worklist
  Adding insn 433 to worklist
  Adding insn 430 to worklist
  Adding insn 427 to worklist
  Adding insn 425 to worklist
  Adding insn 434 to worklist
  Adding insn 2005 to worklist
  Adding insn 2007 to worklist
  Adding insn 1321 to worklist
  Adding insn 1320 to worklist
  Adding insn 1764 to worklist
  Adding insn 1325 to worklist
  Adding insn 2010 to worklist
  Adding insn 2012 to worklist
  Adding insn 2014 to worklist
  Adding insn 2016 to worklist
  Adding insn 2018 to worklist
  Adding insn 2020 to worklist
  Adding insn 2022 to worklist
  Adding insn 2024 to worklist
  Adding insn 2026 to worklist
  Adding insn 2028 to worklist
  Adding insn 2030 to worklist
  Adding insn 2032 to worklist
  Adding insn 2034 to worklist
  Adding insn 2036 to worklist
  Adding insn 2038 to worklist
  Adding insn 2040 to worklist
  Adding insn 2042 to worklist
  Adding insn 2044 to worklist
  Adding insn 2046 to worklist
  Adding insn 2048 to worklist
  Adding insn 2050 to worklist
  Adding insn 2052 to worklist
  Adding insn 570 to worklist
  Adding insn 568 to worklist
  Adding insn 565 to worklist
  Adding insn 2054 to worklist
  Adding insn 581 to worklist
  Adding insn 578 to worklist
  Adding insn 2056 to worklist
  Adding insn 557 to worklist
  Adding insn 547 to worklist
  Adding insn 544 to worklist
  Adding insn 2058 to worklist
  Adding insn 510 to worklist
  Adding insn 505 to worklist
  Adding insn 491 to worklist
  Adding insn 2060 to worklist
  Adding insn 2062 to worklist
  Adding insn 2064 to worklist
  Adding insn 458 to worklist
  Adding insn 456 to worklist
  Adding insn 454 to worklist
  Adding insn 2067 to worklist
  Adding insn 2069 to worklist
  Adding insn 401 to worklist
  Adding insn 721 to worklist
  Adding insn 714 to worklist
  Adding insn 1672 to worklist
  Adding insn 733 to worklist
  Adding insn 731 to worklist
  Adding insn 729 to worklist
  Adding insn 741 to worklist
  Adding insn 833 to worklist
  Adding insn 841 to worklist
  Adding insn 845 to worklist
  Adding insn 2073 to worklist
  Adding insn 1207 to worklist
  Adding insn 1206 to worklist
  Adding insn 2075 to worklist
  Adding insn 2077 to worklist
  Adding insn 2079 to worklist
  Adding insn 395 to worklist
  Adding insn 2081 to worklist
  Adding insn 382 to worklist
  Adding insn 2083 to worklist
  Adding insn 2085 to worklist
  Adding insn 418 to worklist
  Adding insn 2087 to worklist
  Adding insn 681 to worklist
  Adding insn 2089 to worklist
  Adding insn 697 to worklist
  Adding insn 442 to worklist
  Adding insn 439 to worklist
  Adding insn 446 to worklist
  Adding insn 2091 to worklist
  Adding insn 1221 to worklist
  Adding insn 859 to worklist
  Adding insn 877 to worklist
  Adding insn 869 to worklist
  Adding insn 883 to worklist
  Adding insn 2095 to worklist
  Adding insn 918 to worklist
  Adding insn 922 to worklist
  Adding insn 941 to worklist
  Adding insn 939 to worklist
  Adding insn 935 to worklist
  Adding insn 957 to worklist
  Adding insn 966 to worklist
  Adding insn 912 to worklist
  Adding insn 1679 to worklist
  Adding insn 947 to worklist
  Adding insn 951 to worklist
  Adding insn 2099 to worklist
  Adding insn 927 to worklist
  Adding insn 974 to worklist
  Adding insn 1687 to worklist
  Adding insn 1004 to worklist
  Adding insn 1002 to worklist
  Adding insn 1025 to worklist
  Adding insn 1023 to worklist
  Adding insn 1016 to worklist
  Adding insn 1051 to worklist
  Adding insn 1049 to worklist
  Adding insn 1055 to worklist
  Adding insn 1076 to worklist
  Adding insn 1085 to worklist
  Adding insn 1135 to worklist
  Adding insn 1121 to worklist
  Adding insn 1118 to worklist
  Adding insn 1115 to worklist
  Adding insn 1114 to worklist
  Adding insn 2106 to worklist
  Adding insn 1161 to worklist
  Adding insn 1031 to worklist
  Adding insn 1028 to worklist
  Adding insn 2108 to worklist
  Adding insn 1275 to worklist
  Adding insn 2110 to worklist
  Adding insn 1039 to worklist
  Adding insn 1037 to worklist
  Adding insn 2112 to worklist
  Adding insn 987 to worklist
  Adding insn 1258 to worklist
  Adding insn 1251 to worklist
  Adding insn 984 to worklist
  Adding insn 980 to worklist
  Adding insn 1309 to worklist
  Adding insn 1306 to worklist
  Adding insn 993 to worklist
  Adding insn 2117 to worklist
  Adding insn 997 to worklist
  Adding insn 2119 to worklist
  Adding insn 1295 to worklist
  Adding insn 2121 to worklist
  Adding insn 886 to worklist
  Adding insn 885 to worklist
  Adding insn 2123 to worklist
  Adding insn 1059 to worklist
  Adding insn 1137 to worklist
  Adding insn 1176 to worklist
  Adding insn 1175 to worklist
  Adding insn 2126 to worklist
  Adding insn 1104 to worklist
  Adding insn 1100 to worklist
  Adding insn 1096 to worklist
  Adding insn 1705 to worklist
  Adding insn 1707 to worklist
  Adding insn 1107 to worklist
  Adding insn 2128 to worklist
  Adding insn 2130 to worklist
  Adding insn 468 to worklist
  Adding insn 467 to worklist
  Adding insn 464 to worklist
  Adding insn 462 to worklist
  Adding insn 2132 to worklist
  Adding insn 836 to worklist
  Adding insn 757 to worklist
  Adding insn 747 to worklist
  Adding insn 746 to worklist
  Adding insn 760 to worklist
  Adding insn 759 to worklist
  Adding insn 774 to worklist
  Adding insn 796 to worklist
  Adding insn 808 to worklist
  Adding insn 816 to worklist
  Adding insn 2134 to worklist
  Adding insn 819 to worklist
  Adding insn 2136 to worklist
  Adding insn 269 to worklist
  Adding insn 2138 to worklist
  Adding insn 263 to worklist
  Adding insn 2140 to worklist
  Adding insn 1322 to worklist
Finished finding needed instructions:
processing block 100 lr out =  7 [sp]
  Adding insn 1220 to worklist
processing block 44 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1763 to worklist
  Adding insn 1762 to worklist
  Adding insn 1761 to worklist
  Adding insn 1760 to worklist
  Adding insn 1759 to worklist
  Adding insn 1758 to worklist
  Adding insn 1757 to worklist
processing block 161 lr out =  7 [sp]
processing block 43 lr out =  0 [ax] 7 [sp]
  Adding insn 1319 to worklist
processing block 93 lr out =  3 [bx] 7 [sp]
  Adding insn 675 to worklist
  Adding insn 674 to worklist
processing block 92 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 389 to worklist
  Adding insn 388 to worklist
  Adding insn 383 to worklist
  Adding insn 381 to worklist
processing block 40 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
  Adding insn 161 to worklist
  Adding insn 160 to worklist
processing block 91 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
  Adding insn 6 to worklist
  Adding insn 5 to worklist
  Adding insn 4 to worklist
processing block 41 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
  Adding insn 374 to worklist
  Adding insn 373 to worklist
  Adding insn 370 to worklist
  Adding insn 1741 to worklist
  Adding insn 367 to worklist
  Adding insn 366 to worklist
processing block 160 lr out =  3 [bx] 7 [sp]
  Adding insn 1953 to worklist
processing block 99 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
  Adding insn 158 to worklist
  Adding insn 155 to worklist
  Adding insn 1739 to worklist
  Adding insn 152 to worklist
processing block 98 lr out =  7 [sp] 42 [r13]
  Adding insn 445 to worklist
  Adding insn 444 to worklist
processing block 97 lr out =  0 [ax] 7 [sp] 42 [r13]
  Adding insn 441 to worklist
  Adding insn 440 to worklist
processing block 80 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
  Adding insn 408 to worklist
  Adding insn 405 to worklist
  Adding insn 1742 to worklist
  Adding insn 402 to worklist
processing block 39 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
  Adding insn 15 to worklist
  Adding insn 1969 to worklist
  Adding insn 1968 to worklist
processing block 94 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 10 to worklist
processing block 144 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 180 to worklist
  Adding insn 177 to worklist
  Adding insn 176 to worklist
  Adding insn 174 to worklist
processing block 157 lr out =  0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 818 to worklist
processing block 156 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 815 to worklist
processing block 155 lr out =  0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 807 to worklist
  Adding insn 1235 to worklist
  Adding insn 803 to worklist
  Adding insn 1715 to worklist
processing block 154 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
  Adding insn 795 to worklist
  Adding insn 794 to worklist
  Adding insn 793 to worklist
  Adding insn 1716 to worklist
  Adding insn 791 to worklist
  Adding insn 782 to worklist
processing block 153 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
  Adding insn 773 to worklist
  Adding insn 772 to worklist
  Adding insn 771 to worklist
  Adding insn 1717 to worklist
  Adding insn 769 to worklist
processing block 152 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
processing block 151 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
  Adding insn 756 to worklist
  Adding insn 755 to worklist
  Adding insn 754 to worklist
  Adding insn 745 to worklist
  Adding insn 743 to worklist
processing block 150 lr out =  7 [sp]
  Adding insn 835 to worklist
processing block 126 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 1167 to worklist
  Adding insn 1166 to worklist
  Adding insn 1165 to worklist
  Adding insn 1164 to worklist
  Adding insn 1696 to worklist
  Adding insn 1163 to worklist
  Adding insn 1695 to worklist
processing block 149 lr out =  0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 32 to worklist
processing block 88 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 1215 to worklist
  Adding insn 1214 to worklist
  Adding insn 1211 to worklist
processing block 87 lr out =  3 [bx] 7 [sp] 42 [r13]
  Adding insn 34 to worklist
processing block 86 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 844 to worklist
  Adding insn 843 to worklist
processing block 146 lr out =  7 [sp]
  Adding insn 1106 to worklist
processing block 147 lr out =  3 [bx] 7 [sp] 42 [r13]
  Adding insn 33 to worklist
  Adding insn 1693 to worklist
  Adding insn 1142 to worklist
processing block 143 lr out =  0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 1180 to worklist
  Adding insn 1174 to worklist
  Adding insn 1173 to worklist
processing block 142 lr out =  0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
  Adding insn 1136 to worklist
processing block 125 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1134 to worklist
  Adding insn 1120 to worklist
  Adding insn 1119 to worklist
  Adding insn 1117 to worklist
  Adding insn 1116 to worklist
processing block 145 lr out =  0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1708 to worklist
  Adding insn 1103 to worklist
  Adding insn 1102 to worklist
  Adding insn 1101 to worklist
  Adding insn 1706 to worklist
  Adding insn 1093 to worklist
  Adding insn 1092 to worklist
  Adding insn 1091 to worklist
  Adding insn 1090 to worklist
  Adding insn 1691 to worklist
processing block 124 lr out =  0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1111 to worklist
processing block 123 lr out =  1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1084 to worklist
  Adding insn 1083 to worklist
  Adding insn 1713 to worklist
processing block 141 lr out =  1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 30 to worklist
  Adding insn 1065 to worklist
  Adding insn 1064 to worklist
  Adding insn 1659 to worklist
  Adding insn 1063 to worklist
  Adding insn 1060 to worklist
  Adding insn 1058 to worklist
processing block 122 lr out =  1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 31 to worklist
  Adding insn 1077 to worklist
  Adding insn 1075 to worklist
  Adding insn 1074 to worklist
processing block 121 lr out =  2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 1054 to worklist
processing block 140 lr out =  2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
processing block 106 lr out =  2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
processing block 120 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1050 to worklist
  Adding insn 1954 to worklist
  Adding insn 1048 to worklist
processing block 138 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 996 to worklist
processing block 133 lr out =  2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1257 to worklist
  Adding insn 1252 to worklist
  Adding insn 1249 to worklist
  Adding insn 1699 to worklist
  Adding insn 1247 to worklist
  Adding insn 1246 to worklist
  Adding insn 1245 to worklist
  Adding insn 1243 to worklist
processing block 139 lr out =  2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1952 to worklist
  Adding insn 1293 to worklist
  Adding insn 1702 to worklist
  Adding insn 1291 to worklist
  Adding insn 1288 to worklist
  Adding insn 1287 to worklist
  Adding insn 1285 to worklist
processing block 132 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 986 to worklist
processing block 136 lr out =  7 [sp]
  Adding insn 992 to worklist
processing block 137 lr out =  2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1314 to worklist
  Adding insn 1313 to worklist
  Adding insn 1311 to worklist
processing block 135 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 1308 to worklist
  Adding insn 1305 to worklist
processing block 134 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 983 to worklist
  Adding insn 979 to worklist
processing block 131 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 1955 to worklist
processing block 130 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1042 to worklist
  Adding insn 1660 to worklist
  Adding insn 1041 to worklist
  Adding insn 1038 to worklist
processing block 129 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 1274 to worklist
processing block 119 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 1268 to worklist
  Adding insn 1267 to worklist
  Adding insn 1265 to worklist
processing block 128 lr out =  1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 1033 to worklist
processing block 127 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 1030 to worklist
  Adding insn 1027 to worklist
processing block 118 lr out =  1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 1024 to worklist
  Adding insn 1022 to worklist
  Adding insn 1014 to worklist
  Adding insn 1013 to worklist
  Adding insn 1012 to worklist
  Adding insn 1011 to worklist
  Adding insn 1689 to worklist
processing block 117 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1003 to worklist
processing block 116 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 1957 to worklist
  Adding insn 1956 to worklist
  Adding insn 971 to worklist
  Adding insn 1688 to worklist
  Adding insn 969 to worklist
processing block 114 lr out =  7 [sp]
  Adding insn 950 to worklist
processing block 110 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 958 to worklist
  Adding insn 956 to worklist
  Adding insn 955 to worklist
processing block 109 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 940 to worklist
  Adding insn 1714 to worklist
processing block 108 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 921 to worklist
  Adding insn 920 to worklist
  Adding insn 1682 to worklist
processing block 115 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 107 lr out =  0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 917 to worklist
  Adding insn 1680 to worklist
  Adding insn 914 to worklist
processing block 113 lr out =  7 [sp]
processing block 112 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1959 to worklist
  Adding insn 1958 to worklist
  Adding insn 908 to worklist
  Adding insn 907 to worklist
processing block 111 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 965 to worklist
  Adding insn 960 to worklist
  Adding insn 1684 to worklist
processing block 105 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 882 to worklist
processing block 104 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 879 to worklist
processing block 103 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 876 to worklist
  Adding insn 870 to worklist
  Adding insn 868 to worklist
processing block 102 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 1960 to worklist
processing block 101 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 858 to worklist
  Adding insn 851 to worklist
  Adding insn 1674 to worklist
processing block 85 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1962 to worklist
  Adding insn 1961 to worklist
processing block 84 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 832 to worklist
  Adding insn 831 to worklist
  Adding insn 828 to worklist
processing block 83 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 740 to worklist
  Adding insn 739 to worklist
  Adding insn 1718 to worklist
  Adding insn 737 to worklist
  Adding insn 736 to worklist
processing block 82 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 732 to worklist
  Adding insn 730 to worklist
  Adding insn 728 to worklist
processing block 81 lr out =  0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1964 to worklist
  Adding insn 723 to worklist
  Adding insn 1963 to worklist
  Adding insn 719 to worklist
  Adding insn 718 to worklist
  Adding insn 717 to worklist
  Adding insn 715 to worklist
  Adding insn 713 to worklist
  Adding insn 1719 to worklist
  Adding insn 710 to worklist
  Adding insn 1670 to worklist
processing block 38 lr out =  7 [sp] 42 [r13]
  Adding insn 432 to worklist
  Adding insn 429 to worklist
  Adding insn 428 to worklist
  Adding insn 424 to worklist
  Adding insn 423 to worklist
processing block 96 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
  Adding insn 704 to worklist
  Adding insn 701 to worklist
  Adding insn 1744 to worklist
  Adding insn 698 to worklist
  Adding insn 696 to worklist
  Adding insn 695 to worklist
  Adding insn 694 to worklist
  Adding insn 693 to worklist
processing block 95 lr out =  0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
  Adding insn 688 to worklist
  Adding insn 685 to worklist
  Adding insn 1743 to worklist
  Adding insn 682 to worklist
  Adding insn 680 to worklist
processing block 79 lr out =  3 [bx] 7 [sp]
  Adding insn 471 to worklist
processing block 148 lr out =  0 [ax] 7 [sp]
  Adding insn 1723 to worklist
  Adding insn 465 to worklist
  Adding insn 461 to worklist
  Adding insn 460 to worklist
processing block 78 lr out =  0 [ax] 7 [sp]
  Adding insn 457 to worklist
  Adding insn 453 to worklist
processing block 71 lr out =  3 [bx] 7 [sp]
  Adding insn 39 to worklist
processing block 75 lr out =  3 [bx] 7 [sp]
  Adding insn 35 to worklist
processing block 74 lr out =  3 [bx] 7 [sp]
  Adding insn 490 to worklist
  Adding insn 36 to worklist
processing block 73 lr out =  0 [ax] 7 [sp]
  Adding insn 509 to worklist
  Adding insn 507 to worklist
  Adding insn 1967 to worklist
  Adding insn 503 to worklist
processing block 77 lr out =  1 [dx] 4 [si] 7 [sp]
  Adding insn 477 to worklist
  Adding insn 476 to worklist
processing block 76 lr out =  1 [dx] 4 [si] 7 [sp]
  Adding insn 502 to worklist
  Adding insn 501 to worklist
processing block 72 lr out =  1 [dx] 4 [si] 7 [sp]
  Adding insn 521 to worklist
  Adding insn 520 to worklist
processing block 70 lr out =  7 [sp]
  Adding insn 546 to worklist
  Adding insn 1966 to worklist
  Adding insn 541 to worklist
  Adding insn 1668 to worklist
  Adding insn 1722 to worklist
  Adding insn 1667 to worklist
processing block 69 lr out =  3 [bx] 7 [sp]
  Adding insn 40 to worklist
  Adding insn 1965 to worklist
  Adding insn 555 to worklist
  Adding insn 554 to worklist
  Adding insn 553 to worklist
processing block 68 lr out =  3 [bx] 7 [sp]
  Adding insn 577 to worklist
  Adding insn 1720 to worklist
  Adding insn 1669 to worklist
processing block 67 lr out =  1 [dx] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 569 to worklist
  Adding insn 38 to worklist
  Adding insn 566 to worklist
  Adding insn 1721 to worklist
  Adding insn 562 to worklist
processing block 66 lr out =  3 [bx] 7 [sp]
  Adding insn 42 to worklist
processing block 65 lr out =  3 [bx] 7 [sp]
  Adding insn 43 to worklist
processing block 64 lr out =  3 [bx] 7 [sp]
  Adding insn 44 to worklist
processing block 63 lr out =  3 [bx] 7 [sp]
  Adding insn 45 to worklist
processing block 62 lr out =  3 [bx] 7 [sp]
  Adding insn 46 to worklist
processing block 61 lr out =  3 [bx] 7 [sp]
  Adding insn 47 to worklist
processing block 60 lr out =  3 [bx] 7 [sp]
  Adding insn 48 to worklist
processing block 59 lr out =  3 [bx] 7 [sp]
  Adding insn 49 to worklist
processing block 58 lr out =  3 [bx] 7 [sp]
  Adding insn 50 to worklist
processing block 57 lr out =  3 [bx] 7 [sp]
  Adding insn 51 to worklist
processing block 56 lr out =  3 [bx] 7 [sp]
  Adding insn 52 to worklist
processing block 55 lr out =  3 [bx] 7 [sp]
  Adding insn 53 to worklist
processing block 54 lr out =  3 [bx] 7 [sp]
  Adding insn 54 to worklist
processing block 53 lr out =  3 [bx] 7 [sp]
  Adding insn 55 to worklist
processing block 52 lr out =  3 [bx] 7 [sp]
  Adding insn 56 to worklist
processing block 51 lr out =  3 [bx] 7 [sp]
  Adding insn 57 to worklist
processing block 50 lr out =  3 [bx] 7 [sp]
  Adding insn 58 to worklist
processing block 49 lr out =  3 [bx] 7 [sp]
  Adding insn 59 to worklist
processing block 48 lr out =  3 [bx] 7 [sp]
  Adding insn 60 to worklist
processing block 47 lr out =  3 [bx] 7 [sp]
  Adding insn 61 to worklist
processing block 46 lr out =  3 [bx] 7 [sp]
  Adding insn 62 to worklist
processing block 45 lr out =  3 [bx] 7 [sp]
  Adding insn 63 to worklist
processing block 42 lr out =  3 [bx] 7 [sp]
  Adding insn 64 to worklist
processing block 90 lr out =  3 [bx] 7 [sp]
  Adding insn 65 to worklist
processing block 89 lr out =  3 [bx] 7 [sp]
  Adding insn 66 to worklist
processing block 27 lr out =  3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 352 to worklist
processing block 26 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 350 to worklist
processing block 22 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
processing block 25 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 1982 to worklist
  Adding insn 1981 to worklist
processing block 23 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 341 to worklist
  Adding insn 340 to worklist
processing block 24 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 331 to worklist
processing block 21 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 318 to worklist
  Adding insn 1724 to worklist
  Adding insn 326 to worklist
  Adding insn 317 to worklist
processing block 20 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 1971 to worklist
  Adding insn 1970 to worklist
  Adding insn 312 to worklist
processing block 19 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 308 to worklist
  Adding insn 304 to worklist
  Adding insn 302 to worklist
  Adding insn 1665 to worklist
processing block 18 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 294 to worklist
  Adding insn 293 to worklist
  Adding insn 288 to worklist
processing block 17 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 285 to worklist
processing block 16 lr out =  1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 274 to worklist
processing block 158 lr out =  2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
processing block 15 lr out =  2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
  Adding insn 266 to worklist
processing block 159 lr out =  2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
processing block 14 lr out =  2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 260 to worklist
processing block 13 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 254 to worklist
  Adding insn 251 to worklist
processing block 12 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 248 to worklist
  Adding insn 247 to worklist
  Adding insn 243 to worklist
  Adding insn 1740 to worklist
  Adding insn 241 to worklist
  Adding insn 240 to worklist
processing block 10 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 204 to worklist
  Adding insn 203 to worklist
processing block 9 lr out =  0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 1390 to worklist
processing block 8 lr out =  0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 224 to worklist
  Adding insn 221 to worklist
  Adding insn 219 to worklist
processing block 11 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 215 to worklist
  Adding insn 214 to worklist
  Adding insn 213 to worklist
  Adding insn 212 to worklist
processing block 7 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 1389 to worklist
  Adding insn 1726 to worklist
  Adding insn 1725 to worklist
  Adding insn 1436 to worklist
  Adding insn 1434 to worklist
  Adding insn 1433 to worklist
processing block 6 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
  Adding insn 1973 to worklist
  Adding insn 1972 to worklist
  Adding insn 184 to worklist
  Adding insn 183 to worklist
processing block 5 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
  Adding insn 18 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
  Adding insn 1438 to worklist
  Adding insn 148 to worklist
  Adding insn 145 to worklist
  Adding insn 1738 to worklist
  Adding insn 142 to worklist
processing block 34 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 138 to worklist
  Adding insn 136 to worklist
  Adding insn 135 to worklist
  Adding insn 132 to worklist
  Adding insn 130 to worklist
processing block 37 lr out =  0 [ax] 1 [dx] 7 [sp]
  Adding insn 127 to worklist
  Adding insn 126 to worklist
  Adding insn 1661 to worklist
  Adding insn 125 to worklist
  Adding insn 119 to worklist
  Adding insn 118 to worklist
  Adding insn 117 to worklist
  Adding insn 1662 to worklist
  Adding insn 116 to worklist
processing block 33 lr out =  0 [ax] 1 [dx] 7 [sp]
  Adding insn 109 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 1663 to worklist
processing block 32 lr out =  0 [ax] 7 [sp]
  Adding insn 102 to worklist
  Adding insn 101 to worklist
processing block 36 lr out =  7 [sp]
  Adding insn 97 to worklist
processing block 31 lr out =  7 [sp]
  Adding insn 94 to worklist
processing block 35 lr out =  7 [sp]
  Adding insn 90 to worklist
processing block 30 lr out =  7 [sp]
  Adding insn 87 to worklist
processing block 29 lr out =  7 [sp]
processing block 28 lr out =  7 [sp]
  Adding insn 1975 to worklist
  Adding insn 1974 to worklist
processing block 3 lr out =  3 [bx] 4 [si] 7 [sp]
  Adding insn 75 to worklist
  Adding insn 74 to worklist
processing block 2 lr out =  7 [sp]
  Adding insn 1977 to worklist
  Adding insn 1976 to worklist
  Adding insn 1752 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 162 n_edges 255 count 293 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 1746 to 72 -- after reload
;;   ======================================================

;;	  0--> b  0: i1746 [--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1747 [--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1748 [--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1749 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i1750 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i1751 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i1752 {sp=sp-0x28;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i1976 bx=[`_ZL7yy_init']                      :athlon-direct,athlon-load
;;	  5--> b  0: i   3 {[sp+0x18]=unspec[0x28] 79;ax=0;clobber flags;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i1977 flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  8--> b  0: i  72 pc={(flags==0)?L78:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 1746
;;   new tail = 72

;;   ======================================================
;;   -- basic block 3 from 74 to 75 -- after reload
;;   ======================================================

;;	  0--> b  0: i  75 si=zxn([`_ZL12yy_hold_char'])           :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i  74 bx=[`_ZL10yy_c_buf_p']                  :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 75
;;   new tail = 74

;;   ======================================================
;;   -- basic block 4 from 142 to 1438 -- after reload
;;   ======================================================

;;	  0--> b  0: i 142 dx=sxn([`_ZL8yy_start'])                :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i1438 r13=0x1                                 :athlon-direct,athlon-ieu
;;	  4--> b  0: i1738 ax=dx                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 145 cx=[dx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 148 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 142
;;   new tail = 148

;;   ======================================================
;;   -- basic block 5 from 165 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i 165 loc [`_ZL10yy_c_buf_p']                 :nothing
;;	  0--> b  0: i 166 loc D#16                                :nothing
;;	  0--> b  0: i 167 [bx]=si                                 :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 168 loc D#16                                :nothing
;;	  0--> b  0: i 169 loc [`_ZL8yy_start']                    :nothing
;;	  0--> b  0: i 170 loc D#15                                :nothing
;;	  0--> b  0: i  18 r12=bx                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 165
;;   new tail = 18

;;   ======================================================
;;   -- basic block 6 from 183 to 1973 -- after reload
;;   ======================================================

;;	  0--> b  0: i 183 r10=[`_ZL23yy_last_accepting_state']    :athlon-direct,athlon-load
;;	  0--> b  0: i 184 bp=[`_ZL22yy_last_accepting_cpos']      :athlon-direct,athlon-load
;;	  0--> b  0: i1972 {r11=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i1973 {di=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 183
;;   new tail = 1973

;;   ======================================================
;;   -- basic block 7 from 186 to 1985 -- after reload
;;   ======================================================

;;	  0--> b  0: i 186 loc r12                                 :nothing
;;	  0--> b  0: i 187 loc bx                                  :nothing
;;	  0--> b  0: i 188 loc ax                                  :nothing
;;	  0--> b  0: i1409 loc [si+`_ZL5yy_ec']                    :nothing
;;	  0--> b  0: i 193 loc D#23                                :nothing
;;	  0--> b  0: i1433 flags=cmp(cx,0)                         :athlon-direct,athlon-ieu
;;	  0--> b  0: i1389 cx=zxn([si+`_ZL5yy_ec'])                :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i1434 r10={(flags==0)?r10:ax}                 :athlon-direct,athlon-ieu
;;	  1--> b  0: i1436 bp={(flags==0)?bp:bx}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i1725 r11={(flags==0)?r11:r13}                :athlon-direct,athlon-ieu
;;	  2--> b  0: i1726 di={(flags==0)?di:r13}                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i1985 pc=L205                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 186
;;   new tail = 1985

;;   ======================================================
;;   -- basic block 8 from 219 to 225 -- after reload
;;   ======================================================

;;	  0--> b  0: i 219 ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 221 ax=sxn([ax*0x2+`_ZL6yy_def'])           :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 222 loc ax                                  :nothing
;;	  5--> b  0: i 224 flags=cmp(ax,0x65)                      :athlon-direct,athlon-ieu
;;	  6--> b  0: i 225 pc={(flags<=0)?L223:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 219
;;   new tail = 225

;;   ======================================================
;;   -- basic block 9 from 1408 to 1390 -- after reload
;;   ======================================================

;;	  0--> b  0: i1408 loc [cx+`_ZL7yy_meta']                  :nothing
;;	  0--> b  0: i 231 loc D#23                                :nothing
;;	  0--> b  0: i1390 cx=zxn([cx+`_ZL7yy_meta'])              :athlon-direct,athlon-load,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1408
;;   new tail = 1390

;;   ======================================================
;;   -- basic block 10 from 203 to 204 -- after reload
;;   ======================================================

;;	  0--> b  0: i 203 dx=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 204 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 203
;;   new tail = 204

;;   ======================================================
;;   -- basic block 11 from 207 to 216 -- after reload
;;   ======================================================

;;	  0--> b  0: i 207 loc D#23                                :nothing
;;	  0--> b  0: i 208 loc ax                                  :nothing
;;	  0--> b  0: i 212 {dx=dx+cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i 213 si=sxn(dx)                              :athlon-direct,athlon-ieu
;;	  2--> b  0: i 214 si=sxn([si*0x2+`_ZL6yy_chk'])           :athlon-direct,athlon-load,athlon-ieu
;;	  6--> b  0: i 215 flags=cmp(ax,si)                        :athlon-direct,athlon-ieu
;;	  7--> b  0: i 216 pc={(flags!=0)?L1987:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 207
;;   new tail = 216

;;   ======================================================
;;   -- basic block 12 from 240 to 249 -- after reload
;;   ======================================================

;;	  0--> b  0: i 240 dx=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 243 {bx=bx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 241 cx=zxn([dx*0x2+`_ZL6yy_nxt'])           :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 247 dx=zxn([cx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i1740 ax=cx                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 242 loc cx                                  :nothing
;;	  5--> b  0: i 244 loc bx                                  :nothing
;;	  9--> b  0: i 248 flags=cmp(dx,0xbe)                      :athlon-direct,athlon-ieu
;;	 10--> b  0: i 249 pc={(flags==0)?L258:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 240
;;   new tail = 249

;;   ======================================================
;;   -- basic block 13 from 251 to 1988 -- after reload
;;   ======================================================

;;	  0--> b  0: i 251 si=zxn([bx])                            :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 254 cx=[cx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i1988 pc=L255                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 251
;;   new tail = 1988

;;   ======================================================
;;   -- basic block 14 from 260 to 261 -- after reload
;;   ======================================================

;;	  0--> b  0: i 260 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 261 pc={(flags!=0)?L1990:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 260
;;   new tail = 261

;;   ======================================================
;;   -- basic block 15 from 266 to 267 -- after reload
;;   ======================================================

;;	  0--> b  0: i 266 flags=cmp(r11,0)                        :athlon-direct,athlon-ieu
;;	  1--> b  0: i 267 pc={(flags!=0)?L1991:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 266
;;   new tail = 267

;;   ======================================================
;;   -- basic block 16 from 274 to 274 -- after reload
;;   ======================================================

;;	  0--> b  0: i 274 dx=sxn([cx*0x2+`_ZL9yy_accept'])        :athlon-direct,athlon-load,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 274
;;   new tail = 274

;;   ======================================================
;;   -- basic block 17 from 280 to 286 -- after reload
;;   ======================================================

;;	  0--> b  0: i 280 loc r12                                 :nothing
;;	  0--> b  0: i 281 loc bx                                  :nothing
;;	  0--> b  0: i 282 loc clobber                             :nothing
;;	  0--> b  0: i 284 loc dx                                  :nothing
;;	  0--> b  0: i 285 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 286 pc={(flags!=0)?L296:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 280
;;   new tail = 286

;;   ======================================================
;;   -- basic block 18 from 288 to 295 -- after reload
;;   ======================================================

;;	  0--> b  0: i 293 ax=sxn([`_ZL23yy_last_accepting_state']):athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 288 bx=[`_ZL22yy_last_accepting_cpos']      :athlon-direct,athlon-load
;;	  0--> b  0: i 289 loc bx                                  :nothing
;;	  0--> b  0: i 290 loc [`_ZL23yy_last_accepting_state']    :nothing
;;	  4--> b  0: i 294 dx=sxn([ax*0x2+`_ZL9yy_accept'])        :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 295 loc dx                                  :nothing
;;	Ready list (final):  
;;   total time = 4
;;   new head = 293
;;   new tail = 295

;;   ======================================================
;;   -- basic block 19 from 298 to 309 -- after reload
;;   ======================================================

;;	  0--> b  0: i 298 loc dx                                  :nothing
;;	  0--> b  0: i 299 loc bx                                  :nothing
;;	  0--> b  0: i1665 ax=bx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 300 [`yytext']=r12                          :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 307 [`_ZL10yy_c_buf_p']=bx                  :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 302 {ax=ax-r12;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 308 flags=cmp(dx,0x2e)                      :athlon-direct,athlon-ieu
;;	  2--> b  0: i 303 [`yyleng']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 304 ax=[bx]                                 :athlon-direct,athlon-load,athlon-ieu
;;	  3--> b  0: i 306 [bx]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 305 [`_ZL12yy_hold_char']=ax                :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 309 pc={(flags==0)?L347:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 298
;;   new tail = 309

;;   ======================================================
;;   -- basic block 20 from 312 to 314 -- after reload
;;   ======================================================

;;	  0--> b  0: i 312 ax=sxn(dx)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i1970 r10=[ax*0x4+`_ZL21yy_rule_can_match_eol']:athlon-direct,athlon-load
;;	  4--> b  0: i1971 flags=cmp(r10,0)                        :athlon-direct,athlon-ieu
;;	  5--> b  0: i 314 pc={(flags==0)?L347:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 312
;;   new tail = 314

;;   ======================================================
;;   -- basic block 21 from 316 to 319 -- after reload
;;   ======================================================

;;	  0--> b  0: i 316 loc 0                                   :nothing
;;	  0--> b  0: i 317 si=[`yyleng']                           :athlon-direct,athlon-load
;;	  0--> b  0: i 326 ax=[`yytext']                           :athlon-direct,athlon-load
;;	  3--> b  0: i 318 flags=cmp(si,0)                         :athlon-direct,athlon-ieu
;;	  3--> b  0: i1724 cx=ax+si                                :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 319 pc={(flags!=0)?L1472:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 316
;;   new tail = 319

;;   ======================================================
;;   -- basic block 22 from 1993 to 1993 -- after reload
;;   ======================================================

;;	  0--> b  0: i1993 pc=L347                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1993
;;   new tail = 1993

;;   ======================================================
;;   -- basic block 23 from 337 to 342 -- after reload
;;   ======================================================

;;	  0--> b  0: i 337 loc ax-D#21+0x1                         :nothing
;;	  0--> b  0: i 339 loc D#19                                :nothing
;;	  0--> b  0: i 340 {ax=ax+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 341 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	  2--> b  0: i 342 pc={(flags==0)?L347:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 337
;;   new tail = 342

;;   ======================================================
;;   -- basic block 24 from 330 to 332 -- after reload
;;   ======================================================

;;	  0--> b  0: i 330 loc ax-D#21                             :nothing
;;	  0--> b  0: i 331 flags=cmp([ax],0xa)                     :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 332 pc={(flags!=0)?L335:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 330
;;   new tail = 332

;;   ======================================================
;;   -- basic block 25 from 334 to 1983 -- after reload
;;   ======================================================

;;	  0--> b  0: i1981 {ax=ax+0x1;clobber flags;}              :athlon-direct,athlon-ieu
rescanning insn with uid = 1979.
;;	  0--> b  0: i 334 {[`yylineno']=[`yylineno']+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  0--> b  0: i1979 loc clobber                             :nothing
;;	  0--> b  0: i1980 loc D#19                                :nothing
;;	  1--> b  0: i1982 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	  2--> b  0: i1983 pc={(flags!=0)?L1472:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 1981
;;   new tail = 1983

;;   ======================================================
;;   -- basic block 26 from 349 to 351 -- after reload
;;   ======================================================

;;	  0--> b  0: i 349 loc dx                                  :nothing
;;	  0--> b  0: i 350 flags=cmp(dx,0x31)                      :athlon-direct,athlon-ieu
;;	  1--> b  0: i 351 pc={(gtu(flags,0))?L1218:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 349
;;   new tail = 351

;;   ======================================================
;;   -- basic block 27 from 352 to 355 -- after reload
;;   ======================================================

;;	  0--> b  0: i 352 dx=zxn(dx)                              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 355 {pc=[dx*0x8+L357];use L357;}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 352
;;   new tail = 355

;;   ======================================================
;;   -- basic block 28 from 80 to 82 -- after reload
;;   ======================================================

;;	  0--> b  0: i1974 r11=[`_ZL8yy_start']                    :athlon-direct,athlon-load
;;	  0--> b  0: i  80 [`_ZL7yy_init']=0x1                     :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i1975 flags=cmp(r11,0)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i  82 pc={(flags!=0)?L85:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 1974
;;   new tail = 82

;;   ======================================================
;;   -- basic block 29 from 84 to 84 -- after reload
;;   ======================================================

;;	  0--> b  0: i  84 [`_ZL8yy_start']=0x1                    :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 84
;;   new tail = 84

;;   ======================================================
;;   -- basic block 30 from 87 to 88 -- after reload
;;   ======================================================

;;	  0--> b  0: i  87 flags=cmp([`yyin'],0)                   :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i  88 pc={(flags==0)?L1995:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 87
;;   new tail = 88

;;   ======================================================
;;   -- basic block 31 from 94 to 95 -- after reload
;;   ======================================================

;;	  0--> b  0: i  94 flags=cmp([`yyout'],0)                  :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i  95 pc={(flags==0)?L1996:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 94
;;   new tail = 95

;;   ======================================================
;;   -- basic block 32 from 101 to 103 -- after reload
;;   ======================================================

;;	  0--> b  0: i 101 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  3--> b  0: i 102 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 103 pc={(flags==0)?L111:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 101
;;   new tail = 103

;;   ======================================================
;;   -- basic block 33 from 1663 to 110 -- after reload
;;   ======================================================

;;	  0--> b  0: i1663 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i 107 dx=dx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i 108 ax=[dx]                                 :athlon-direct,athlon-load
;;	  8--> b  0: i 109 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  9--> b  0: i 110 pc={(flags==0)?L111:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 1663
;;   new tail = 110

;;   ======================================================
;;   -- basic block 34 from 130 to 1997 -- after reload
;;   ======================================================

;;	  0--> b  0: i 132 bx=[ax+0x10]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 130 cx=[ax+0x20]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 134 [`yytext']=bx                           :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 135 ax=[dx]                                 :athlon-direct,athlon-load
;;	  4--> b  0: i 131 [`_ZL10yy_n_chars']=cx                  :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 133 [`_ZL10yy_c_buf_p']=bx                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 136 ax=[ax]                                 :athlon-direct,athlon-load
;;	  9--> b  0: i 137 [`yyin']=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 138 si=zxn([bx])                            :athlon-direct,athlon-load,athlon-ieu
;;	 13--> b  0: i 139 [`_ZL12yy_hold_char']=si                :athlon-direct,athlon-agu,athlon-store
;;	 13--> b  0: i1997 pc=L140                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 132
;;   new tail = 1997

;;   ======================================================
;;   -- basic block 35 from 90 to 1999 -- after reload
;;   ======================================================

;;	  0--> b  0: i  90 ax=[`stdin']                            :athlon-direct,athlon-load
;;	  3--> b  0: i  91 [`yyin']=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i1999 pc=L92                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 90
;;   new tail = 1999

;;   ======================================================
;;   -- basic block 36 from 97 to 2001 -- after reload
;;   ======================================================

;;	  0--> b  0: i  97 ax=[`stdout']                           :athlon-direct,athlon-load
;;	  3--> b  0: i  98 [`yyout']=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i2001 pc=L99                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 97
;;   new tail = 2001

;;   ======================================================
;;   -- basic block 37 from 113 to 2003 -- after reload
;;   ======================================================

;;	  0--> b  0: i 113 call [`_ZL21yyensure_buffer_stackv']    :athlon-vector,athlon-ieu
;;	  1--> b  0: i1662 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  1--> b  0: i 116 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  1--> b  0: i 118 si=0x4000                               :athlon-direct,athlon-ieu
;;	  2--> b  0: i 119 di=[`yyin']                             :athlon-direct,athlon-load
;;	  4--> b  0: i 117 bx=dx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i 120 ax=call [`_Z16yy_create_bufferP8_IO_FILEi']:athlon-vector,athlon-ieu
;;	  6--> b  0: i1661 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  6--> b  0: i 122 [bx]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 125 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	 10--> b  0: i 126 dx=dx*0x8+ax                            :athlon-direct,athlon-agu,nothing
;;	 12--> b  0: i 127 ax=[dx]                                 :athlon-direct,athlon-load
;;	 12--> b  0: i2003 pc=L128                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 113
;;   new tail = 2003

;;   ======================================================
;;   -- basic block 38 from 423 to 433 -- after reload
;;   ======================================================

;;	  0--> b  0: i 424 di=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i 423 si=`*.LC14'                             :athlon-direct,athlon-ieu
;;	  3--> b  0: i 425 ax=call [`fopen']                       :athlon-vector,athlon-ieu
;;	  4--> b  0: i 428 si=0x4000                               :athlon-direct,athlon-ieu
;;	  4--> b  0: i 429 di=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 427 [`yyin']=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 430 ax=call [`_Z16yy_create_bufferP8_IO_FILEi']:athlon-vector,athlon-ieu
;;	  6--> b  0: i 432 di=ax                                   :athlon-direct,athlon-ieu
;;	  7--> b  0: i 433 call [`_Z19yypush_buffer_stateP15yy_buffer_state']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 424
;;   new tail = 433

;;   ======================================================
;;   -- basic block 39 from 434 to 15 -- after reload
;;   ======================================================

;;	  0--> b  0: i 434 [`_ZL8yy_start']=0x1                    :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1968 {dx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1969 {cx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  15 ax=0x1                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 434
;;   new tail = 15

;;   ======================================================
;;   -- basic block 40 from 160 to 2005 -- after reload
;;   ======================================================

;;	  0--> b  0: i 160 bx=[`_ZL10yy_c_buf_p']                  :athlon-direct,athlon-load
;;	  0--> b  0: i 161 si=zxn([`_ZL12yy_hold_char'])           :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i2005 pc=L376                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 160
;;   new tail = 2005

;;   ======================================================
;;   -- basic block 41 from 366 to 2007 -- after reload
;;   ======================================================

;;	  0--> b  0: i 367 dx=sxn([`_ZL8yy_start'])                :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 366 si=zxn([`_ZL12yy_hold_char'])           :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 374 bx=[`_ZL10yy_c_buf_p']                  :athlon-direct,athlon-load
;;	  4--> b  0: i1741 ax=dx                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 370 cx=[dx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 373 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i2007 pc=L376                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 367
;;   new tail = 2007

;;   ======================================================
;;   -- basic block 42 from 64 to 64 -- after reload
;;   ======================================================

;;	  0--> b  0: i  64 bx=0x7d                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 64
;;   new tail = 64

;;   ======================================================
;;   -- basic block 43 from 1319 to 1321 -- after reload
;;   ======================================================

;;	  0--> b  0: i1320 {flags=unspec[[sp+0x18],0x28] 80;clobber di;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  1--> b  0: i1319 ax=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i1321 pc={(flags!=0)?L2009:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 1320
;;   new tail = 1321

;;   ======================================================
;;   -- basic block 44 from 1325 to 1764 -- after reload
;;   ======================================================

;;	  0--> b  0: i1757 {sp=sp+0x28;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i1325 use ax                                  :nothing
;;	  1--> b  0: i1758 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i1759 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i1760 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i1761 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i1762 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i1763 r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i1764 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 2142
;;   new tail = 1764

;;   ======================================================
;;   -- basic block 45 from 63 to 2010 -- after reload
;;   ======================================================

;;	  0--> b  0: i  63 bx=0x7b                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i2010 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 63
;;   new tail = 2010

;;   ======================================================
;;   -- basic block 46 from 62 to 2012 -- after reload
;;   ======================================================

;;	  0--> b  0: i  62 bx=0x128                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2012 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 62
;;   new tail = 2012

;;   ======================================================
;;   -- basic block 47 from 61 to 2014 -- after reload
;;   ======================================================

;;	  0--> b  0: i  61 bx=0x127                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2014 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 61
;;   new tail = 2014

;;   ======================================================
;;   -- basic block 48 from 60 to 2016 -- after reload
;;   ======================================================

;;	  0--> b  0: i  60 bx=0x126                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2016 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 60
;;   new tail = 2016

;;   ======================================================
;;   -- basic block 49 from 59 to 2018 -- after reload
;;   ======================================================

;;	  0--> b  0: i  59 bx=0x125                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2018 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 59
;;   new tail = 2018

;;   ======================================================
;;   -- basic block 50 from 58 to 2020 -- after reload
;;   ======================================================

;;	  0--> b  0: i  58 bx=0x124                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2020 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 58
;;   new tail = 2020

;;   ======================================================
;;   -- basic block 51 from 57 to 2022 -- after reload
;;   ======================================================

;;	  0--> b  0: i  57 bx=0x123                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2022 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 57
;;   new tail = 2022

;;   ======================================================
;;   -- basic block 52 from 56 to 2024 -- after reload
;;   ======================================================

;;	  0--> b  0: i  56 bx=0x122                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2024 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 56
;;   new tail = 2024

;;   ======================================================
;;   -- basic block 53 from 55 to 2026 -- after reload
;;   ======================================================

;;	  0--> b  0: i  55 bx=0x121                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2026 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 55
;;   new tail = 2026

;;   ======================================================
;;   -- basic block 54 from 54 to 2028 -- after reload
;;   ======================================================

;;	  0--> b  0: i  54 bx=0x120                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2028 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 54
;;   new tail = 2028

;;   ======================================================
;;   -- basic block 55 from 53 to 2030 -- after reload
;;   ======================================================

;;	  0--> b  0: i  53 bx=0x11f                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2030 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 53
;;   new tail = 2030

;;   ======================================================
;;   -- basic block 56 from 52 to 2032 -- after reload
;;   ======================================================

;;	  0--> b  0: i  52 bx=0x11e                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2032 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 52
;;   new tail = 2032

;;   ======================================================
;;   -- basic block 57 from 51 to 2034 -- after reload
;;   ======================================================

;;	  0--> b  0: i  51 bx=0x11d                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2034 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 51
;;   new tail = 2034

;;   ======================================================
;;   -- basic block 58 from 50 to 2036 -- after reload
;;   ======================================================

;;	  0--> b  0: i  50 bx=0x11c                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2036 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 50
;;   new tail = 2036

;;   ======================================================
;;   -- basic block 59 from 49 to 2038 -- after reload
;;   ======================================================

;;	  0--> b  0: i  49 bx=0x11b                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2038 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 49
;;   new tail = 2038

;;   ======================================================
;;   -- basic block 60 from 48 to 2040 -- after reload
;;   ======================================================

;;	  0--> b  0: i  48 bx=0x11a                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2040 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 48
;;   new tail = 2040

;;   ======================================================
;;   -- basic block 61 from 47 to 2042 -- after reload
;;   ======================================================

;;	  0--> b  0: i  47 bx=0x119                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2042 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 47
;;   new tail = 2042

;;   ======================================================
;;   -- basic block 62 from 46 to 2044 -- after reload
;;   ======================================================

;;	  0--> b  0: i  46 bx=0x118                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2044 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 46
;;   new tail = 2044

;;   ======================================================
;;   -- basic block 63 from 45 to 2046 -- after reload
;;   ======================================================

;;	  0--> b  0: i  45 bx=0x117                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2046 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 45
;;   new tail = 2046

;;   ======================================================
;;   -- basic block 64 from 44 to 2048 -- after reload
;;   ======================================================

;;	  0--> b  0: i  44 bx=0x116                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2048 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 44
;;   new tail = 2048

;;   ======================================================
;;   -- basic block 65 from 43 to 2050 -- after reload
;;   ======================================================

;;	  0--> b  0: i  43 bx=0x115                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2050 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 43
;;   new tail = 2050

;;   ======================================================
;;   -- basic block 66 from 42 to 2052 -- after reload
;;   ======================================================

;;	  0--> b  0: i  42 bx=0x114                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2052 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 42
;;   new tail = 2052

;;   ======================================================
;;   -- basic block 67 from 562 to 570 -- after reload
;;   ======================================================

;;	  0--> b  0: i 562 bp=[`yyleng']                           :athlon-direct,athlon-load
;;	  0--> b  0: i  38 bx=0x107                                :athlon-direct,athlon-ieu
;;	  3--> b  0: i1721 di=bp-0x1                               :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i 565 ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  6--> b  0: i 569 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  6--> b  0: i 566 dx=ax                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 568 [`yylval']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i 570 pc={(flags==0)?L1225:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 562
;;   new tail = 570

;;   ======================================================
;;   -- basic block 68 from 572 to 2054 -- after reload
;;   ======================================================

;;	  0--> b  0: i 572 loc dx                                  :nothing
;;	  0--> b  0: i 573 loc [`yytext']+0x1                      :nothing
;;	  0--> b  0: i1669 ax=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i 577 di=dx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i1720 si=ax+0x1                               :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i 578 ax=call [`strcpy']                      :athlon-vector,athlon-ieu
;;	  5--> b  0: i 579 loc clobber                             :nothing
;;	  5--> b  0: i 580 loc clobber                             :nothing
;;	  6--> b  0: i 581 [ax+bp-0x2]=0                           :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i2054 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 572
;;   new tail = 2054

;;   ======================================================
;;   -- basic block 69 from 553 to 2056 -- after reload
;;   ======================================================

;;	  0--> b  0: i 555 di=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i 553 dx=`yylval'                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 554 si=`*.LC19'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i1965 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  40 bx=0x106                                :athlon-direct,athlon-ieu
;;	  3--> b  0: i 557 ax=call [`sscanf']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i2056 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 555
;;   new tail = 2056

;;   ======================================================
;;   -- basic block 70 from 1667 to 547 -- after reload
;;   ======================================================

;;	  0--> b  0: i1667 ax=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i1668 dx=sp+0x17                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 541 si=`*.LC18'                             :athlon-direct,athlon-ieu
;;	  3--> b  0: i1722 di=ax+0x1                               :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i1966 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i 544 ax=call [`sscanf']                      :athlon-vector,athlon-ieu
;;	  6--> b  0: i 546 ax=sxn([sp+0x17])                       :athlon-direct,athlon-load,athlon-ieu
;;	 10--> b  0: i 547 [`yylval']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 10
;;   new head = 1667
;;   new tail = 547

;;   ======================================================
;;   -- basic block 71 from 548 to 2058 -- after reload
;;   ======================================================

;;	  0--> b  0: i 548 loc clobber                             :nothing
;;	  0--> b  0: i  39 bx=0x103                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2058 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 548
;;   new tail = 2058

;;   ======================================================
;;   -- basic block 72 from 520 to 521 -- after reload
;;   ======================================================

;;	  0--> b  0: i 520 dx=`yylval'                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 521 si=`*.LC17'                             :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 520
;;   new tail = 521

;;   ======================================================
;;   -- basic block 73 from 503 to 510 -- after reload
;;   ======================================================

;;	  0--> b  0: i 503 di=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i1967 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 505 ax=call [`sscanf']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i 507 ax=[`yylval']                           :athlon-direct,athlon-load
;;	  7--> b  0: i 509 flags=cmp(ax,0x7f)                      :athlon-direct,athlon-ieu
;;	  8--> b  0: i 510 pc={(leu(flags,0))?L1786:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 503
;;   new tail = 510

;;   ======================================================
;;   -- basic block 74 from 36 to 491 -- after reload
;;   ======================================================

;;	  0--> b  0: i 490 flags=cmp(ax,0x7e6f)                    :athlon-direct,athlon-ieu
;;	  0--> b  0: i  36 bx=0x104                                :athlon-direct,athlon-ieu
;;	  1--> b  0: i 491 pc={(leu(flags,0))?L1225:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 490
;;   new tail = 491

;;   ======================================================
;;   -- basic block 75 from 35 to 2060 -- after reload
;;   ======================================================

;;	  0--> b  0: i  35 bx=0x105                                :athlon-direct,athlon-ieu
;;	  0--> b  0: i2060 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 35
;;   new tail = 2060

;;   ======================================================
;;   -- basic block 76 from 501 to 2062 -- after reload
;;   ======================================================

;;	  0--> b  0: i 501 dx=`yylval'                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 502 si=`*.LC16'                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i2062 pc=L1794                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 501
;;   new tail = 2062

;;   ======================================================
;;   -- basic block 77 from 476 to 2064 -- after reload
;;   ======================================================

;;	  0--> b  0: i 476 dx=`yylval'                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 477 si=`*.LC15'                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i2064 pc=L1794                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 476
;;   new tail = 2064

;;   ======================================================
;;   -- basic block 78 from 453 to 458 -- after reload
;;   ======================================================

;;	  0--> b  0: i 453 di=[`yytext']                           :athlon-direct,athlon-load
;;	  3--> b  0: i 454 ax=call [`_Z6lookupPKc']                :athlon-vector,athlon-ieu
;;	  4--> b  0: i 457 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 456 [`yylval']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i 458 pc={(flags==0)?L2066:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 453
;;   new tail = 458

;;   ======================================================
;;   -- basic block 79 from 471 to 2067 -- after reload
;;   ======================================================

;;	  0--> b  0: i 471 bx=[ax+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i2067 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 471
;;   new tail = 2067

;;   ======================================================
;;   -- basic block 80 from 401 to 2069 -- after reload
;;   ======================================================

;;	  0--> b  0: i 402 dx=sxn([`_ZL8yy_start'])                :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 401 {[`_ZL8line_num']=[`_ZL8line_num']+0x1;clobber flags;}:athlon-direct,athlon-load,athlon-ieu,athlon-store,athlon-store
;;	  4--> b  0: i1742 ax=dx                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 405 cx=[dx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 408 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i2069 pc=L396                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 402
;;   new tail = 2069

;;   ======================================================
;;   -- basic block 81 from 709 to 721 -- after reload
;;   ======================================================

;;	  0--> b  0: i 709 loc 0x2e                                :nothing
;;	  0--> b  0: i1670 r14=bx                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 710 {r14=r14-[`yytext'];clobber flags;}     :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 715 si=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  1--> b  0: i 717 cx=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  4--> b  0: i1719 ax=r14-0x1                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i 718 r15=si*0x8+cx                           :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i1672 [sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 712 loc [sp+0x8]                            :nothing
;;	  6--> b  0: i 713 ax=[`_ZL12yy_hold_char']                :athlon-direct,athlon-load,athlon-ieu
;;	 10--> b  0: i 714 [bx]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i 719 r14=[r15]                               :athlon-direct,athlon-load
;;	 11--> b  0: i 723 ax=[`_ZL10yy_n_chars']                  :athlon-direct,athlon-load
;;	 13--> b  0: i1963 r9=[r14+0x3c]                           :athlon-direct,athlon-load
;;	 16--> b  0: i1964 flags=cmp(r9,0)                         :athlon-direct,athlon-ieu
;;	 17--> b  0: i 721 pc={(flags!=0)?L734:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 17
;;   new head = 709
;;   new tail = 721

;;   ======================================================
;;   -- basic block 82 from 728 to 733 -- after reload
;;   ======================================================

;;	  0--> b  0: i 730 di=[`yyin']                             :athlon-direct,athlon-load
;;	  0--> b  0: i 728 ax=[r14+0x20]                           :athlon-direct,athlon-load
;;	  3--> b  0: i 731 [r14]=di                                :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 732 r14=[r15]                               :athlon-direct,athlon-load
;;	  4--> b  0: i 729 [`_ZL10yy_n_chars']=ax                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 733 [r14+0x3c]=0x1                          :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 6
;;   new head = 730
;;   new tail = 733

;;   ======================================================
;;   -- basic block 83 from 736 to 741 -- after reload
;;   ======================================================

;;	  0--> b  0: i 736 r11=[r14+0x8]                           :athlon-direct,athlon-load
;;	  0--> b  0: i 737 r10=sxn(ax)                             :athlon-direct,athlon-ieu
;;	  0--> b  0: i 739 ax=[`_ZL10yy_c_buf_p']                  :athlon-direct,athlon-load
;;	  3--> b  0: i1718 bp=r11+r10                              :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i 740 flags=cmp(bp,ax)                        :athlon-direct,athlon-ieu
;;	  6--> b  0: i 741 pc={(geu(flags,0))?L2071:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 736
;;   new tail = 741

;;   ======================================================
;;   -- basic block 84 from 827 to 833 -- after reload
;;   ======================================================

;;	  0--> b  0: i 827 loc r11                                 :nothing
;;	  0--> b  0: i 831 r10=r11+r10+0x1                         :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 828 di=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i 829 loc di                                  :nothing
;;	  2--> b  0: i 832 flags=cmp(ax,r10)                       :athlon-direct,athlon-ieu
;;	  3--> b  0: i 833 pc={(gtu(flags,0))?L2072:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 827
;;   new tail = 833

;;   ======================================================
;;   -- basic block 85 from 1961 to 841 -- after reload
;;   ======================================================

;;	  0--> b  0: i1961 r8=[r14+0x38]                           :athlon-direct,athlon-load
;;	  3--> b  0: i1962 flags=cmp(r8,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 841 pc={(flags!=0)?L849:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 1961
;;   new tail = 841

;;   ======================================================
;;   -- basic block 86 from 843 to 845 -- after reload
;;   ======================================================

;;	  0--> b  0: i 843 {ax=ax-di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i 844 flags=cmp(ax,0x1)                       :athlon-direct,athlon-ieu
;;	  2--> b  0: i 845 pc={(flags==0)?L1344:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 843
;;   new tail = 845

;;   ======================================================
;;   -- basic block 87 from 34 to 34 -- after reload
;;   ======================================================

;;	  0--> b  0: i  34 bx=bp                                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 34
;;   new tail = 34

;;   ======================================================
;;   -- basic block 88 from 1186 to 2073 -- after reload
;;   ======================================================

;;	  0--> b  0: i1186 loc clobber                             :nothing
;;	  0--> b  0: i1187 loc clobber                             :nothing
;;	  0--> b  0: i1188 loc clobber                             :nothing
;;	  0--> b  0: i1189 loc clobber                             :nothing
;;	  0--> b  0: i1190 loc clobber                             :nothing
;;	  0--> b  0: i1191 loc clobber                             :nothing
;;	  0--> b  0: i1192 loc clobber                             :nothing
;;	  0--> b  0: i1193 loc clobber                             :nothing
;;	  0--> b  0: i1194 loc clobber                             :nothing
;;	  0--> b  0: i1195 loc clobber                             :nothing
;;	  0--> b  0: i1196 loc clobber                             :nothing
;;	  0--> b  0: i1197 loc clobber                             :nothing
;;	  0--> b  0: i1198 loc [`_ZL15yy_buffer_stack']            :nothing
;;	  0--> b  0: i1199 loc [`_ZL19yy_buffer_stack_top']        :nothing
;;	  0--> b  0: i1200 loc D#8<<0x3                            :nothing
;;	  0--> b  0: i1201 loc D#9+D#7                             :nothing
;;	  0--> b  0: i1202 loc [D#6]                               :nothing
;;	  0--> b  0: i1203 loc [D#5+0x8]                           :nothing
;;	  0--> b  0: i1204 loc [`_ZL10yy_n_chars']                 :nothing
;;	  0--> b  0: i1205 loc sxn(D#3)                            :nothing
;;	  0--> b  0: i1206 [`_ZL10yy_c_buf_p']=bx                  :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1207 ax=call [`_ZL21yy_get_previous_statev'] :athlon-vector,athlon-ieu
;;	  1--> b  0: i1209 loc ax                                  :nothing
;;	  1--> b  0: i1210 loc D#4+D#2                             :nothing
;;	  2--> b  0: i1214 ax=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  2--> b  0: i1211 r12=[`yytext']                          :athlon-direct,athlon-load
;;	  2--> b  0: i1212 loc r12                                 :nothing
;;	  3--> b  0: i1215 dx=sxn([ax*0x2+`_ZL9yy_accept'])        :athlon-direct,athlon-load,athlon-ieu
;;	  3--> b  0: i2073 pc=L278                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1186
;;   new tail = 2073

;;   ======================================================
;;   -- basic block 89 from 66 to 2075 -- after reload
;;   ======================================================

;;	  0--> b  0: i  66 bx=0x5d                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i2075 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 66
;;   new tail = 2075

;;   ======================================================
;;   -- basic block 90 from 65 to 2077 -- after reload
;;   ======================================================

;;	  0--> b  0: i  65 bx=0x5b                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i2077 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 65
;;   new tail = 2077

;;   ======================================================
;;   -- basic block 91 from 395 to 2079 -- after reload
;;   ======================================================

;;	  0--> b  0: i 395 [`_ZL8yy_start']=0x5                    :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   4 dx=0x28                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i   5 cx=0x2                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i   6 ax=0x5                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i2079 pc=L396                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 395
;;   new tail = 2079

;;   ======================================================
;;   -- basic block 92 from 381 to 2081 -- after reload
;;   ======================================================

;;	  0--> b  0: i 381 ax=[`_ZL12yy_hold_char']                :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 382 [bx]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 388 ax=sxn([`_ZL23yy_last_accepting_state']):athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 383 bx=[`_ZL22yy_last_accepting_cpos']      :athlon-direct,athlon-load
;;	  5--> b  0: i 384 loc bx                                  :nothing
;;	  5--> b  0: i 385 loc [`_ZL23yy_last_accepting_state']    :nothing
;;	  8--> b  0: i 389 dx=sxn([ax*0x2+`_ZL9yy_accept'])        :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i2081 pc=L278                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 381
;;   new tail = 2081

;;   ======================================================
;;   -- basic block 93 from 674 to 2083 -- after reload
;;   ======================================================

;;	  0--> b  0: i 674 ax=[`yytext']                           :athlon-direct,athlon-load
;;	  3--> b  0: i 675 bx=sxn([ax])                            :athlon-direct,athlon-load,athlon-ieu
;;	  3--> b  0: i2083 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 674
;;   new tail = 2083

;;   ======================================================
;;   -- basic block 94 from 418 to 2085 -- after reload
;;   ======================================================

;;	  0--> b  0: i 418 [`_ZL8yy_start']=0x3                    :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  10 dx=0x25                                 :athlon-direct,athlon-ieu
;;	  0--> b  0: i  11 cx=0x7                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i  12 ax=0x3                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i2085 pc=L396                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 418
;;   new tail = 2085

;;   ======================================================
;;   -- basic block 95 from 680 to 2087 -- after reload
;;   ======================================================

;;	  0--> b  0: i 680 di=`*.LC20'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i 681 ax=call [`_Z7yyerrorPKc']               :athlon-vector,athlon-ieu
;;	  2--> b  0: i 682 dx=sxn([`_ZL8yy_start'])                :athlon-direct,athlon-load,athlon-ieu
;;	  6--> b  0: i1743 ax=dx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i 685 cx=[dx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  6--> b  0: i 688 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i2087 pc=L396                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 680
;;   new tail = 2087

;;   ======================================================
;;   -- basic block 96 from 693 to 2089 -- after reload
;;   ======================================================

;;	  0--> b  0: i 693 cx=[`yyout']                            :athlon-direct,athlon-load
;;	  0--> b  0: i 695 si=[`yyleng']                           :athlon-direct,athlon-load
;;	  0--> b  0: i 694 dx=0x1                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 696 di=[`yytext']                           :athlon-direct,athlon-load
;;	  4--> b  0: i 697 ax=call [`fwrite']                      :athlon-vector,athlon-ieu
;;	  5--> b  0: i 698 dx=sxn([`_ZL8yy_start'])                :athlon-direct,athlon-load,athlon-ieu
;;	  9--> b  0: i1744 ax=dx                                   :athlon-direct,athlon-ieu
;;	  9--> b  0: i 701 cx=[dx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  9--> b  0: i 704 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	 10--> b  0: i2089 pc=L396                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 693
;;   new tail = 2089

;;   ======================================================
;;   -- basic block 97 from 439 to 442 -- after reload
;;   ======================================================

;;	  0--> b  0: i 439 call [`_Z18yypop_buffer_statev']        :athlon-vector,athlon-ieu
;;	  1--> b  0: i 440 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  4--> b  0: i 441 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i 442 pc={(flags==0)?L1338:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 439
;;   new tail = 442

;;   ======================================================
;;   -- basic block 98 from 444 to 446 -- after reload
;;   ======================================================

;;	  0--> b  0: i 444 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i 445 flags=cmp([dx*0x8+ax],0)                :athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i 446 pc={(flags==0)?L1338:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 444
;;   new tail = 446

;;   ======================================================
;;   -- basic block 99 from 152 to 2091 -- after reload
;;   ======================================================

;;	  0--> b  0: i 152 dx=sxn([`_ZL8yy_start'])                :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i1739 ax=dx                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 155 cx=[dx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 158 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i2091 pc=L396                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 152
;;   new tail = 2091

;;   ======================================================
;;   -- basic block 100 from 1220 to 1221 -- after reload
;;   ======================================================

;;	  0--> b  0: i1220 di=`*.LC25'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i1221 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1220
;;   new tail = 1221

;;   ======================================================
;;   -- basic block 101 from 1674 to 859 -- after reload
;;   ======================================================

;;	  0--> b  0: i1674 bp=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 851 {bp=bp-di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i 853 loc bp-0x1                              :nothing
;;	  1--> b  0: i 855 loc 0                                   :nothing
;;	  1--> b  0: i 856 loc di                                  :nothing
;;	  1--> b  0: i 857 loc r11                                 :nothing
;;	  2--> b  0: i 858 {flags=cmp(bp-0x1,0);bp=bp-0x1;}        :athlon-direct,athlon-ieu
;;	  3--> b  0: i 859 pc={(flags==0)?L880:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1674
;;   new tail = 859

;;   ======================================================
;;   -- basic block 102 from 1960 to 1960 -- after reload
;;   ======================================================

;;	  0--> b  0: i1960 {dx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1960
;;   new tail = 1960

;;   ======================================================
;;   -- basic block 103 from 861 to 877 -- after reload
;;   ======================================================

;;	  0--> b  0: i 861 loc dx                                  :nothing
;;	  0--> b  0: i 864 loc r11+dx+0x1                          :nothing
;;	  0--> b  0: i 865 loc D#17                                :nothing
;;	  0--> b  0: i 866 loc di+dx+0x1                           :nothing
;;	  0--> b  0: i 867 loc D#18                                :nothing
;;	  0--> b  0: i 868 r10=[di+dx]                             :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 869 [r11+dx]=r10                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 870 {dx=dx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i 872 loc dx                                  :nothing
;;	  4--> b  0: i 873 loc D#18                                :nothing
;;	  4--> b  0: i 874 loc D#17                                :nothing
;;	  5--> b  0: i 876 flags=cmp(bp,dx)                        :athlon-direct,athlon-ieu
;;	  6--> b  0: i 877 pc={(flags!=0)?L875:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 861
;;   new tail = 877

;;   ======================================================
;;   -- basic block 104 from 879 to 879 -- after reload
;;   ======================================================

;;	  0--> b  0: i 879 r14=[r15]                               :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 879
;;   new tail = 879

;;   ======================================================
;;   -- basic block 105 from 882 to 883 -- after reload
;;   ======================================================

;;	  0--> b  0: i 882 flags=cmp([r14+0x3c],0x2)               :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 883 pc={(flags!=0)?L1781:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 882
;;   new tail = 883

;;   ======================================================
;;   -- basic block 106 from 2095 to 2095 -- after reload
;;   ======================================================

;;	  0--> b  0: i2095 pc=L2094                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 2095
;;   new tail = 2095

;;   ======================================================
;;   -- basic block 107 from 914 to 918 -- after reload
;;   ======================================================

;;	  0--> b  0: i 914 cx=[r14+0x18]                           :athlon-direct,athlon-load
;;	  0--> b  0: i 916 loc cx<<0x1                             :nothing
;;	  3--> b  0: i1680 ax=cx                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 917 {flags=cmp(ax<<0x1,0);ax=ax<<0x1;}      :athlon-direct,athlon-ieu
;;	  5--> b  0: i 918 pc={(flags!=0)?L925:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 914
;;   new tail = 918

;;   ======================================================
;;   -- basic block 108 from 1682 to 922 -- after reload
;;   ======================================================

;;	  0--> b  0: i1682 ax=cx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 920 {ax=ax 0>>0x3;clobber flags;}           :athlon-direct,athlon-ieu
;;	  2--> b  0: i 921 {ax=ax+cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  3--> b  0: i 922 [r14+0x18]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1682
;;   new tail = 922

;;   ======================================================
;;   -- basic block 109 from 930 to 941 -- after reload
;;   ======================================================

;;	  0--> b  0: i 930 loc di                                  :nothing
;;	  0--> b  0: i 931 loc ax+0x2                              :nothing
;;	  0--> b  0: i1714 si=ax+0x2                               :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i 935 ax=call [`realloc']                     :athlon-vector,athlon-ieu
;;	  2--> b  0: i 937 loc clobber                             :nothing
;;	  2--> b  0: i 938 loc clobber                             :nothing
;;	  3--> b  0: i 940 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  3--> b  0: i 939 [r14+0x8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 941 pc={(flags==0)?L948:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 930
;;   new tail = 941

;;   ======================================================
;;   -- basic block 110 from 955 to 958 -- after reload
;;   ======================================================

;;	  0--> b  0: i 955 dx=sxn([sp])                            :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 958 r14=[r15]                               :athlon-direct,athlon-load
;;	  4--> b  0: i 956 {ax=ax+dx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  5--> b  0: i 957 [`_ZL10yy_c_buf_p']=ax                  :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 5
;;   new head = 955
;;   new tail = 957

;;   ======================================================
;;   -- basic block 111 from 1684 to 966 -- after reload
;;   ======================================================

;;	  0--> b  0: i1684 dx=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 960 dx=!dx                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 963 loc dx+[r14+0x18]                       :nothing
;;	  1--> b  0: i 965 {flags=cmp(dx+[r14+0x18],0);dx=dx+[r14+0x18];}:athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 966 pc={(flags!=0)?L2097:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 1684
;;   new tail = 966

;;   ======================================================
;;   -- basic block 112 from 900 to 912 -- after reload
;;   ======================================================

;;	  0--> b  0: i 900 loc 0                                   :nothing
;;	  0--> b  0: i 901 loc [`_ZL15yy_buffer_stack']            :nothing
;;	  0--> b  0: i 902 loc [`_ZL19yy_buffer_stack_top']        :nothing
;;	  0--> b  0: i 903 loc D#13<<0x3                           :nothing
;;	  0--> b  0: i 904 loc D#14+D#12                           :nothing
;;	  0--> b  0: i 905 loc [D#11]                              :nothing
;;	  0--> b  0: i 906 loc D#10                                :nothing
;;	  0--> b  0: i 907 di=[r14+0x8]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1958 dx=[r14+0x24]                           :athlon-direct,athlon-load
;;	  3--> b  0: i 908 {ax=ax-di;clobber flags;}               :athlon-direct,athlon-ieu
;;	  3--> b  0: i1959 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i1679 [sp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 910 loc [sp]                                :nothing
;;	  4--> b  0: i 912 pc={(flags!=0)?L2098:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 900
;;   new tail = 912

;;   ======================================================
;;   -- basic block 113 from 947 to 947 -- after reload
;;   ======================================================

;;	  0--> b  0: i 947 [r14+0x8]=0                             :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 947
;;   new tail = 947

;;   ======================================================
;;   -- basic block 114 from 950 to 951 -- after reload
;;   ======================================================

;;	  0--> b  0: i 950 di=`*.LC22'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i 951 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 950
;;   new tail = 951

;;   ======================================================
;;   -- basic block 115 from 927 to 2099 -- after reload
;;   ======================================================

;;	  0--> b  0: i 927 [r14+0x18]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i2099 pc=L928                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 927
;;   new tail = 2099

;;   ======================================================
;;   -- basic block 116 from 969 to 974 -- after reload
;;   ======================================================

;;	  0--> b  0: i 969 flags=cmp(dx,0x2000)                    :athlon-direct,athlon-ieu
;;	  0--> b  0: i1688 ax=0x2000                               :athlon-direct,athlon-ieu
;;	  1--> b  0: i 971 dx={(leu(flags,0))?dx:ax}               :athlon-direct,athlon-ieu
;;	  1--> b  0: i1956 ax=[r14+0x28]                           :athlon-direct,athlon-load
;;	  2--> b  0: i1687 [sp]=dx                                 :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 972 loc [sp]                                :nothing
;;	  4--> b  0: i1957 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i 974 pc={(flags!=0)?L2101:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 969
;;   new tail = 974

;;   ======================================================
;;   -- basic block 117 from 1002 to 1004 -- after reload
;;   ======================================================

;;	  0--> b  0: i1002 ax=call [`__errno_location']            :athlon-vector,athlon-ieu
;;	  1--> b  0: i1003 r15=ax                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i1004 [ax]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1002
;;   new tail = 1004

;;   ======================================================
;;   -- basic block 118 from 1006 to 1025 -- after reload
;;   ======================================================

;;	  0--> b  0: i1006 loc [r14+0x8]+bp                        :nothing
;;	  0--> b  0: i1007 loc 0x1                                 :nothing
;;	  0--> b  0: i1008 loc [sp]                                :nothing
;;	  0--> b  0: i1009 loc [`yyin']                            :nothing
;;	  0--> b  0: i1689 di=bp                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1011 {di=di+[r14+0x8];clobber flags;}        :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i1013 dx=[sp]                                 :athlon-direct,athlon-load
;;	  1--> b  0: i1012 cx=[`yyin']                             :athlon-direct,athlon-load
;;	  1--> b  0: i1014 si=0x1                                  :athlon-direct,athlon-ieu
;;	  4--> b  0: i1016 ax=call [`*fread']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i1018 loc clobber                             :nothing
;;	  4--> b  0: i1019 loc clobber                             :nothing
;;	  4--> b  0: i1020 loc clobber                             :nothing
;;	  4--> b  0: i1021 loc clobber                             :nothing
;;	  5--> b  0: i1024 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i1022 dx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i1023 [`_ZL10yy_n_chars']=ax                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i1025 pc={(flags==0)?L2102:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 1006
;;   new tail = 1025

;;   ======================================================
;;   -- basic block 119 from 1265 to 1268 -- after reload
;;   ======================================================

;;	  0--> b  0: i1265 si=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  0--> b  0: i1267 cx=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  3--> b  0: i1268 r15=si*0x8+cx                           :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1265
;;   new tail = 1268

;;   ======================================================
;;   -- basic block 120 from 1048 to 1051 -- after reload
;;   ======================================================

;;	  0--> b  0: i1048 r10=[r15]                               :athlon-direct,athlon-load
;;	  0--> b  0: i1954 {r14=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i1050 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	  3--> b  0: i1049 [r10+0x20]=dx                           :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i1051 pc={(flags!=0)?L1078:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1048
;;   new tail = 1051

;;   ======================================================
;;   -- basic block 121 from 1054 to 1055 -- after reload
;;   ======================================================

;;	  0--> b  0: i1054 flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i1055 pc={(flags==0)?L2103:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1054
;;   new tail = 1055

;;   ======================================================
;;   -- basic block 122 from 1070 to 31 -- after reload
;;   ======================================================

;;	  0--> b  0: i1070 loc 0x2                                 :nothing
;;	  0--> b  0: i1074 r15=si*0x8+cx                           :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i1077 dx=[`_ZL10yy_n_chars']                  :athlon-direct,athlon-load
;;	  0--> b  0: i  31 r14=0x2                                 :athlon-direct,athlon-ieu
;;	  2--> b  0: i1075 r10=[r15]                               :athlon-direct,athlon-load
;;	  5--> b  0: i1076 [r10+0x3c]=0x2                          :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 5
;;   new head = 1070
;;   new tail = 1076

;;   ======================================================
;;   -- basic block 123 from 1080 to 1085 -- after reload
;;   ======================================================

;;	  0--> b  0: i1080 loc r14                                 :nothing
;;	  0--> b  0: i1713 cx=dx+bp                                :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i1083 bp=sxn(cx)                              :athlon-direct,athlon-ieu
;;	  2--> b  0: i1084 flags=cmp(bp,[r10+0x18])                :athlon-direct,athlon-load,athlon-ieu
;;	  6--> b  0: i1085 pc={(gtu(flags,0))?L2104:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 1080
;;   new tail = 1085

;;   ======================================================
;;   -- basic block 124 from 1111 to 1111 -- after reload
;;   ======================================================

;;	  0--> b  0: i1111 ax=[r10+0x8]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1111
;;   new tail = 1111

;;   ======================================================
;;   -- basic block 125 from 1114 to 1135 -- after reload
;;   ======================================================

;;	  0--> b  0: i1115 [ax+bp]=0                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1116 ax=[r15]                                :athlon-direct,athlon-load
;;	  0--> b  0: i1134 flags=cmp(r14,0x1)                      :athlon-direct,athlon-ieu
;;	  1--> b  0: i1114 [`_ZL10yy_n_chars']=cx                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i1117 ax=[ax+0x8]                             :athlon-direct,athlon-load
;;	  6--> b  0: i1118 [ax+bp+0x1]=0                           :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i1119 ax=[r15]                                :athlon-direct,athlon-load
;;	  9--> b  0: i1120 ax=[ax+0x8]                             :athlon-direct,athlon-load
;;	 12--> b  0: i1121 [`yytext']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i1122 loc clobber                             :nothing
;;	 12--> b  0: i1123 loc clobber                             :nothing
;;	 12--> b  0: i1124 loc clobber                             :nothing
;;	 12--> b  0: i1125 loc clobber                             :nothing
;;	 12--> b  0: i1126 loc clobber                             :nothing
;;	 12--> b  0: i1127 loc clobber                             :nothing
;;	 12--> b  0: i1128 loc clobber                             :nothing
;;	 12--> b  0: i1129 loc clobber                             :nothing
;;	 12--> b  0: i1130 loc clobber                             :nothing
;;	 12--> b  0: i1131 loc clobber                             :nothing
;;	 12--> b  0: i1132 loc clobber                             :nothing
;;	 12--> b  0: i1133 loc clobber                             :nothing
;;	 12--> b  0: i1135 pc={(flags!=0)?L2105:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 1115
;;   new tail = 1135

;;   ======================================================
;;   -- basic block 126 from 1149 to 2106 -- after reload
;;   ======================================================

;;	  0--> b  0: i1149 loc clobber                             :nothing
;;	  0--> b  0: i1150 loc clobber                             :nothing
;;	  0--> b  0: i1151 loc clobber                             :nothing
;;	  0--> b  0: i1152 loc clobber                             :nothing
;;	  0--> b  0: i1153 loc clobber                             :nothing
;;	  0--> b  0: i1154 loc clobber                             :nothing
;;	  0--> b  0: i1155 loc clobber                             :nothing
;;	  0--> b  0: i1156 loc clobber                             :nothing
;;	  0--> b  0: i1157 loc clobber                             :nothing
;;	  0--> b  0: i1158 loc clobber                             :nothing
;;	  0--> b  0: i1159 loc clobber                             :nothing
;;	  0--> b  0: i1160 loc clobber                             :nothing
;;	  0--> b  0: i1161 [`_ZL10yy_c_buf_p']=ax                  :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1695 ax=[`_ZL8yy_start']                     :athlon-direct,athlon-load
;;	  3--> b  0: i1163 {ax=ax-0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i1696 dx=ax                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i1164 {dx=dx 0>>0x1f;clobber flags;}          :athlon-direct,athlon-ieu
;;	  6--> b  0: i1165 {dx=dx+ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  7--> b  0: i1166 {dx=dx>>0x1;clobber flags;}             :athlon-direct,athlon-ieu
;;	  8--> b  0: i1167 {dx=dx+0x2f;clobber flags;}             :athlon-direct,athlon-ieu
;;	  8--> b  0: i1168 loc dx                                  :nothing
;;	  8--> b  0: i2106 pc=L347                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 1149
;;   new tail = 2106

;;   ======================================================
;;   -- basic block 127 from 1027 to 1031 -- after reload
;;   ======================================================

;;	  0--> b  0: i1027 di=[`yyin']                             :athlon-direct,athlon-load
;;	  3--> b  0: i1028 ax=call [`ferror']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i1030 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i1031 pc={(flags!=0)?L1271:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 1027
;;   new tail = 1031

;;   ======================================================
;;   -- basic block 128 from 1033 to 2108 -- after reload
;;   ======================================================

;;	  0--> b  0: i1033 dx=[`_ZL10yy_n_chars']                  :athlon-direct,athlon-load
;;	  0--> b  0: i2108 pc=L1263                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1033
;;   new tail = 2108

;;   ======================================================
;;   -- basic block 129 from 1274 to 1275 -- after reload
;;   ======================================================

;;	  0--> b  0: i1274 flags=cmp([r15],0x4)                    :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i1275 pc={(flags!=0)?L1273:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 1274
;;   new tail = 1275

;;   ======================================================
;;   -- basic block 130 from 1037 to 2110 -- after reload
;;   ======================================================

;;	  0--> b  0: i1038 di=[`yyin']                             :athlon-direct,athlon-load
;;	  0--> b  0: i1037 [r15]=0                                 :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i1039 call [`clearerr']                       :athlon-vector,athlon-ieu
;;	  4--> b  0: i1041 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  4--> b  0: i1660 dx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  7--> b  0: i1042 r14=[dx*0x8+ax]                         :athlon-direct,athlon-load
;;	  7--> b  0: i2110 pc=L1043                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 1038
;;   new tail = 2110

;;   ======================================================
;;   -- basic block 131 from 1955 to 2112 -- after reload
;;   ======================================================

;;	  0--> b  0: i1955 {r14=0;clobber flags;}                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i2112 pc=L1256                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1955
;;   new tail = 2112

;;   ======================================================
;;   -- basic block 132 from 986 to 987 -- after reload
;;   ======================================================

;;	  0--> b  0: i 986 flags=cmp(ax,0xa)                       :athlon-direct,athlon-ieu
;;	  1--> b  0: i 987 pc={(flags==0)?L2114:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 986
;;   new tail = 987

;;   ======================================================
;;   -- basic block 133 from 1242 to 1258 -- after reload
;;   ======================================================

;;	  0--> b  0: i1242 loc D#20                                :nothing
;;	  0--> b  0: i1243 si=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  0--> b  0: i1245 cx=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  0--> b  0: i1699 di=r14                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i1252 {r14=r14+0x1;clobber flags;}            :athlon-direct,athlon-ieu
;;	  1--> b  0: i1254 loc r14                                 :nothing
;;	  1--> b  0: i1255 loc D#20                                :nothing
;;	  3--> b  0: i1246 r15=si*0x8+cx                           :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i1247 dx=[r15]                                :athlon-direct,athlon-load
;;	  8--> b  0: i1249 {di=di+[dx+0x8];clobber flags;}         :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i1257 flags=cmp(r14,[sp])                     :athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i1251 [di+bp]=ax                              :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i1258 pc={(geu(flags,0))?L1260:pc}            :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 1242
;;   new tail = 1258

;;   ======================================================
;;   -- basic block 134 from 977 to 984 -- after reload
;;   ======================================================

;;	  0--> b  0: i 977 loc r14                                 :nothing
;;	  0--> b  0: i 978 loc 0x2a                                :nothing
;;	  0--> b  0: i 979 di=[`yyin']                             :athlon-direct,athlon-load
;;	  3--> b  0: i 980 ax=call [`_IO_getc']                    :athlon-vector,athlon-ieu
;;	  3--> b  0: i1355 loc ax                                  :nothing
;;	  3--> b  0: i 982 loc D#20                                :nothing
;;	  4--> b  0: i 983 flags=cmp(ax,0xffffffffffffffff)        :athlon-direct,athlon-ieu
;;	  5--> b  0: i 984 pc={(flags!=0)?L2115:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 977
;;   new tail = 984

;;   ======================================================
;;   -- basic block 135 from 1303 to 1309 -- after reload
;;   ======================================================

;;	  0--> b  0: i1303 loc 0xffffffffffffffff                  :nothing
;;	  0--> b  0: i1304 loc r14                                 :nothing
;;	  0--> b  0: i1305 di=[`yyin']                             :athlon-direct,athlon-load
;;	  3--> b  0: i1306 ax=call [`ferror']                      :athlon-vector,athlon-ieu
;;	  4--> b  0: i1308 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i1309 pc={(flags==0)?L2116:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 1303
;;   new tail = 1309

;;   ======================================================
;;   -- basic block 136 from 992 to 993 -- after reload
;;   ======================================================

;;	  0--> b  0: i 992 di=`*.LC23'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i 993 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 992
;;   new tail = 993

;;   ======================================================
;;   -- basic block 137 from 1311 to 1314 -- after reload
;;   ======================================================

;;	  0--> b  0: i1311 si=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  0--> b  0: i1313 cx=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  3--> b  0: i1314 r15=si*0x8+cx                           :athlon-direct,athlon-agu,nothing
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1311
;;   new tail = 1314

;;   ======================================================
;;   -- basic block 138 from 996 to 2117 -- after reload
;;   ======================================================

;;	  0--> b  0: i 996 dx=r14                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 997 [`_ZL10yy_n_chars']=r14                 :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i2117 pc=L1046                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 996
;;   new tail = 2117

;;   ======================================================
;;   -- basic block 139 from 1284 to 2119 -- after reload
;;   ======================================================

;;	  0--> b  0: i1284 loc 0xa                                 :nothing
;;	  0--> b  0: i1290 loc r14+0x1                             :nothing
;;	  0--> b  0: i1285 si=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  0--> b  0: i1287 cx=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  0--> b  0: i1702 di=r14                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i1952 {r14=r14+0x1;clobber flags;}            :athlon-direct,athlon-ieu
rescanning insn with uid = 1296.
;;	  3--> b  0: i1288 r15=si*0x8+cx                           :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i1291 ax=[r15]                                :athlon-direct,athlon-load
;;	  8--> b  0: i1293 {di=di+[ax+0x8];clobber flags;}         :athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i1295 [di+bp]=0xa                             :athlon-direct,athlon-agu,athlon-store
;;	 12--> b  0: i1296 loc clobber                             :nothing
;;	 12--> b  0: i2119 pc=L1260                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 1284
;;   new tail = 2119

;;   ======================================================
;;   -- basic block 140 from 885 to 2121 -- after reload
;;   ======================================================

;;	  0--> b  0: i 885 [`_ZL10yy_n_chars']=0                   :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 886 [r14+0x20]=0                            :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i2121 pc=L1052                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 885
;;   new tail = 2121

;;   ======================================================
;;   -- basic block 141 from 1057 to 2123 -- after reload
;;   ======================================================

;;	  0--> b  0: i1057 loc 0x1                                 :nothing
;;	  0--> b  0: i1058 di=[`yyin']                             :athlon-direct,athlon-load
;;	  0--> b  0: i  30 r14=0x1                                 :athlon-direct,athlon-ieu
;;	  3--> b  0: i1059 call [`_Z9yyrestartP8_IO_FILE']         :athlon-vector,athlon-ieu
;;	  4--> b  0: i1063 ax=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  4--> b  0: i1659 cx=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  5--> b  0: i1060 dx=[`_ZL10yy_n_chars']                  :athlon-direct,athlon-load
;;	  7--> b  0: i1064 r15=cx*0x8+ax                           :athlon-direct,athlon-agu,nothing
;;	  9--> b  0: i1065 r10=[r15]                               :athlon-direct,athlon-load
;;	  9--> b  0: i2123 pc=L1078                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 1057
;;   new tail = 2123

;;   ======================================================
;;   -- basic block 142 from 1136 to 1137 -- after reload
;;   ======================================================

;;	  0--> b  0: i1136 flags=cmp(r14,0x2)                      :athlon-direct,athlon-ieu
;;	  1--> b  0: i1137 pc={(flags==0)?L2125:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1136
;;   new tail = 1137

;;   ======================================================
;;   -- basic block 143 from 1173 to 1181 -- after reload
;;   ======================================================

;;	  0--> b  0: i1173 bx=sxn([sp+0x8])                        :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i1174 {bx=bx+ax;clobber flags;}               :athlon-direct,athlon-ieu
;;	  5--> b  0: i1175 [`_ZL10yy_c_buf_p']=bx                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i1176 ax=call [`_ZL21yy_get_previous_statev'] :athlon-vector,athlon-ieu
;;	  6--> b  0: i1178 loc ax                                  :nothing
;;	  6--> b  0: i1179 loc bx                                  :nothing
;;	  7--> b  0: i1180 r12=[`yytext']                          :athlon-direct,athlon-load
;;	  7--> b  0: i1181 loc r12                                 :nothing
;;	Ready list (final):  
;;   total time = 7
;;   new head = 1173
;;   new tail = 1181

;;   ======================================================
;;   -- basic block 144 from 174 to 2126 -- after reload
;;   ======================================================

;;	  0--> b  0: i 176 dx=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  0--> b  0: i 174 si=zxn([bx])                            :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 177 cx=[dx*0x2+`_ZL9yy_accept']             :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 180 dx=zxn([dx*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i2126 pc=L181                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 176
;;   new tail = 2126

;;   ======================================================
;;   -- basic block 145 from 1087 to 1104 -- after reload
;;   ======================================================

;;	  0--> b  0: i1087 loc dx>>0x1+cx                          :nothing
;;	  0--> b  0: i1088 loc [r10+0x8]                           :nothing
;;	  0--> b  0: i1089 loc sxn(dx>>0x1+cx)                     :nothing
;;	  0--> b  0: i1691 si=dx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1093 di=[r10+0x8]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1707 [sp+0xc]=cx                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1090 {si=si>>0x1;clobber flags;}             :athlon-direct,athlon-ieu
;;	  1--> b  0: i1705 [sp]=r10                                :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i1091 {si=si+cx;clobber flags;}               :athlon-direct,athlon-ieu
;;	  3--> b  0: i1092 si=sxn(si)                              :athlon-direct,athlon-ieu
;;	  4--> b  0: i1096 ax=call [`realloc']                     :athlon-vector,athlon-ieu
;;	  4--> b  0: i1098 loc clobber                             :nothing
;;	  4--> b  0: i1099 loc clobber                             :nothing
;;	  5--> b  0: i1706 r10=[sp]                                :athlon-direct,athlon-load
;;	  5--> b  0: i1708 cx=[sp+0xc]                             :athlon-direct,athlon-load
;;	  8--> b  0: i1100 [r10+0x8]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i1101 ax=[r15]                                :athlon-direct,athlon-load
;;	 11--> b  0: i1102 ax=[ax+0x8]                             :athlon-direct,athlon-load
;;	 14--> b  0: i1103 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	 15--> b  0: i1104 pc={(flags!=0)?L1112:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 15
;;   new head = 1087
;;   new tail = 1104

;;   ======================================================
;;   -- basic block 146 from 1106 to 1107 -- after reload
;;   ======================================================

;;	  0--> b  0: i1106 di=`*.LC24'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i1107 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1106
;;   new tail = 1107

;;   ======================================================
;;   -- basic block 147 from 1142 to 2128 -- after reload
;;   ======================================================

;;	  0--> b  0: i1142 ax=[r15]                                :athlon-direct,athlon-load
;;	  0--> b  0: i1693 bx=bp                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  33 {bx=bx+[ax+0x8];clobber flags;}         :athlon-direct,athlon-load,athlon-ieu
;;	  3--> b  0: i2128 pc=L1184                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1142
;;   new tail = 2128

;;   ======================================================
;;   -- basic block 148 from 460 to 2130 -- after reload
;;   ======================================================

;;	  0--> b  0: i 461 di=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i 460 si=0x102                                :athlon-direct,athlon-ieu
;;	  3--> b  0: i 462 ax=call [`_Z6insertPKci']               :athlon-vector,athlon-ieu
;;	  4--> b  0: i 465 dx=[`_ZL8localvar']                     :athlon-direct,athlon-load
;;	  4--> b  0: i 464 [`yylval']=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  7--> b  0: i1723 cx=dx+0x1                               :athlon-direct,athlon-agu,nothing
;;	  7--> b  0: i 468 [ax+0xc]=dx                             :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i 467 [`_ZL8localvar']=cx                     :athlon-direct,athlon-agu,athlon-store
;;	  9--> b  0: i2130 pc=L469                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 461
;;   new tail = 2130

;;   ======================================================
;;   -- basic block 149 from 32 to 2132 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32 ax=di                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i2132 pc=L1147                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 32
;;   new tail = 2132

;;   ======================================================
;;   -- basic block 150 from 835 to 836 -- after reload
;;   ======================================================

;;	  0--> b  0: i 835 di=`*.LC21'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i 836 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 835
;;   new tail = 836

;;   ======================================================
;;   -- basic block 151 from 743 to 757 -- after reload
;;   ======================================================

;;	  0--> b  0: i 743 bx=sxn([sp+0x8])                        :athlon-direct,athlon-load,athlon-ieu
;;	  1--> b  0: i 745 {bx=bx+[`yytext'];clobber flags;}       :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i 746 [`_ZL10yy_c_buf_p']=bx                  :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 747 ax=call [`_ZL21yy_get_previous_statev'] :athlon-vector,athlon-ieu
;;	  6--> b  0: i1407 loc ax                                  :nothing
;;	  6--> b  0: i 749 loc D#22                                :nothing
;;	  6--> b  0: i 750 loc D#22                                :nothing
;;	  6--> b  0: i 751 loc bx                                  :nothing
;;	  6--> b  0: i 752 loc 0x1                                 :nothing
;;	  7--> b  0: i 754 si=sxn(ax)                              :athlon-direct,athlon-ieu
;;	  8--> b  0: i 755 dx=sxn([si*0x2+`_ZL9yy_accept'])        :athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i 756 flags=cmp(dx,0)                         :athlon-direct,athlon-ieu
;;	 13--> b  0: i 757 pc={(flags==0)?L761:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 13
;;   new head = 743
;;   new tail = 757

;;   ======================================================
;;   -- basic block 152 from 759 to 760 -- after reload
;;   ======================================================

;;	  0--> b  0: i 759 [`_ZL23yy_last_accepting_state']=ax     :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 760 [`_ZL22yy_last_accepting_cpos']=bx      :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 759
;;   new tail = 760

;;   ======================================================
;;   -- basic block 153 from 763 to 774 -- after reload
;;   ======================================================

;;	  0--> b  0: i 763 loc 0x1                                 :nothing
;;	  0--> b  0: i 764 loc D#22                                :nothing
;;	  0--> b  0: i 769 cx=zxn([si*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i1717 di=cx+0x1                               :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i 771 di=sxn(di)                              :athlon-direct,athlon-ieu
;;	  7--> b  0: i 772 di=sxn([di*0x2+`_ZL6yy_chk'])           :athlon-direct,athlon-load,athlon-ieu
;;	 11--> b  0: i 773 flags=cmp(ax,di)                        :athlon-direct,athlon-ieu
;;	 12--> b  0: i 774 pc={(flags==0)?L797:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 763
;;   new tail = 774

;;   ======================================================
;;   -- basic block 154 from 777 to 796 -- after reload
;;   ======================================================

;;	  0--> b  0: i 777 loc 0x1                                 :nothing
;;	  0--> b  0: i 778 loc D#22                                :nothing
;;	  0--> b  0: i1406 loc sxn([si*0x2+`_ZL6yy_def'])          :nothing
;;	  0--> b  0: i 782 si=sxn([si*0x2+`_ZL6yy_def'])           :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 784 loc 0x1                                 :nothing
;;	  0--> b  0: i 785 loc D#22                                :nothing
;;	  4--> b  0: i 791 cx=zxn([si*0x2+`_ZL7yy_base'])          :athlon-direct,athlon-load,athlon-ieu
;;	  8--> b  0: i1716 di=cx+0x1                               :athlon-direct,athlon-agu,nothing
;;	 10--> b  0: i 793 di=sxn(di)                              :athlon-direct,athlon-ieu
;;	 11--> b  0: i 794 di=sxn([di*0x2+`_ZL6yy_chk'])           :athlon-direct,athlon-load,athlon-ieu
;;	 15--> b  0: i 795 flags=cmp(di,si)                        :athlon-direct,athlon-ieu
;;	 16--> b  0: i 796 pc={(flags!=0)?L789:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 16
;;   new head = 777
;;   new tail = 796

;;   ======================================================
;;   -- basic block 155 from 1715 to 808 -- after reload
;;   ======================================================

;;	  0--> b  0: i1715 ax=zxn(cx+0x1)                          :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i1235 r12=[`yytext']                          :athlon-direct,athlon-load
;;	  2--> b  0: i 803 ax=zxn([ax*0x2+`_ZL6yy_nxt'])           :athlon-direct,athlon-load,athlon-ieu
;;	  2--> b  0: i 804 loc ax                                  :nothing
;;	  2--> b  0: i 805 loc ax==0x65                            :nothing
;;	  2--> b  0: i 806 loc zxn(D#1)                            :nothing
;;	  6--> b  0: i 807 flags=cmp(ax,0x65)                      :athlon-direct,athlon-ieu
;;	  7--> b  0: i 808 pc={(flags==0)?L278:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 1715
;;   new tail = 808

;;   ======================================================
;;   -- basic block 156 from 810 to 816 -- after reload
;;   ======================================================

;;	  0--> b  0: i 810 loc clobber                             :nothing
;;	  0--> b  0: i 811 loc clobber                             :nothing
;;	  0--> b  0: i 812 loc clobber                             :nothing
;;	  0--> b  0: i 814 loc r12                                 :nothing
;;	  0--> b  0: i 815 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 816 pc={(flags==0)?L278:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 810
;;   new tail = 816

;;   ======================================================
;;   -- basic block 157 from 818 to 2134 -- after reload
;;   ======================================================

;;	  0--> b  0: i 818 {bx=bx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  1--> b  0: i 819 [`_ZL10yy_c_buf_p']=bx                  :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i 820 loc bx                                  :nothing
;;	  1--> b  0: i 821 loc ax                                  :nothing
;;	  1--> b  0: i2134 pc=L822                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 818
;;   new tail = 2134

;;   ======================================================
;;   -- basic block 158 from 269 to 2136 -- after reload
;;   ======================================================

;;	  0--> b  0: i 269 [`_ZL23yy_last_accepting_state']=r10    :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i2136 pc=L270                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 269
;;   new tail = 2136

;;   ======================================================
;;   -- basic block 159 from 263 to 2138 -- after reload
;;   ======================================================

;;	  0--> b  0: i 263 [`_ZL22yy_last_accepting_cpos']=bp      :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i2138 pc=L264                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 263
;;   new tail = 2138

;;   ======================================================
;;   -- basic block 160 from 1953 to 2140 -- after reload
;;   ======================================================

;;	  0--> b  0: i1953 {bx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i2140 pc=L1225                                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1953
;;   new tail = 2140

;;   ======================================================
;;   -- basic block 161 from 1322 to 1322 -- after reload
;;   ======================================================

;;	  0--> b  0: i1322 call [`__stack_chk_fail']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1322
;;   new tail = 1322



starting the processing of deferred insns
ending the processing of deferred insns


int yylex()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={108d,129u} r1={97d,83u} r2={64d,35u} r3={52d,39u} r4={67d,35u} r5={76d,49u} r6={10d,24u} r7={15d,230u} r8={33d} r9={33d} r10={33d} r11={33d} r12={33d} r13={33d} r14={33d} r15={33d} r17={137d,62u} r18={33d} r19={33d} r21={31d} r22={31d} r23={31d} r24={31d} r25={31d} r26={31d} r27={31d} r28={31d} r29={30d} r30={30d} r31={30d} r32={30d} r33={30d} r34={30d} r35={30d} r36={30d} r37={35d,1u} r38={35d,1u} r39={43d,15u,1e} r40={37d,9u} r41={6d,9u} r42={3d,4u} r43={15d,39u} r44={10d,17u,5e} r45={30d} r46={30d} r47={30d} r48={30d} r49={30d} r50={30d} r51={30d} r52={30d} r53={33d} r54={33d} r55={33d} r56={33d} r57={33d} r58={33d} r59={33d} r60={33d} r61={33d} r62={33d} r63={33d} r64={33d} r65={33d} r66={33d} r67={33d} r68={33d} r69={33d} r70={33d} r71={33d} r72={33d} r73={33d} r74={33d} r75={33d} r76={33d} r77={33d} r78={33d} r79={33d} r80={33d} 
;;    total ref usage 3579{2792d,781u,6e} in 811{778 regular + 33 call} insns.
(note 1 0 69 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 69 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 69 1746 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 1746 2 1747 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) lex.yy.c:787 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn/f 1747 1746 1748 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) lex.yy.c:787 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn/f:TI 1748 1747 1749 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) lex.yy.c:787 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f 1749 1748 1750 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) lex.yy.c:787 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f:TI 1750 1749 1751 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:787 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 1751 1750 1752 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:787 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 1752 1751 1753 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:787 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -40 [0xffffffffffffffd8])))
            (nil))))
(note 1753 1752 1976 2 NOTE_INSN_PROLOGUE_END)
(insn 1976 1753 3 2 (set (reg:SI 3 bx)
        (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])) lex.yy.c:792 90 {*movsi_internal}
     (nil))
(insn:TI 3 1976 1977 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [1 D.6797+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [576])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:787 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:DI 0 ax [576])
            (nil))))
(insn:TI 1977 3 72 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 3 bx)
            (const_int 0 [0]))) lex.yy.c:792 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 3 bx)
        (nil)))
(jump_insn:TI 72 1977 73 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) lex.yy.c:792 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 78)
;;  succ:       28 [50.0%]  (CAN_FALLTHRU)
;;              3 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx] 4 [si]
;; live  kill	
(note 73 72 75 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 75 73 74 3 (set (reg:DI 4 si)
        (zero_extend:DI (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 74 75 140 3 (set (reg/f:DI 3 bx [orig:318 D.6783 ] [318])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 64, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              34 [100.0%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 42 [r13]
;; live  in  	 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 42 [r13]
;; live  kill	
(code_label 140 74 141 4 117 "" [1 uses])
(note 141 140 142 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 142 141 1438 4 (set (reg:DI 1 dx)
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 1438 142 1738 4 (set (reg:QI 42 r13 [564])
        (const_int 1 [0x1])) lex.yy.c:844 93 {*movqi_internal}
     (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))
(insn:TI 1738 1438 145 4 (set (reg:DI 0 ax)
        (reg:DI 1 dx)) 89 {*movdi_internal}
     (nil))
(insn 145 1738 148 4 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:363 D.6777 ] [363])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 148 145 376 4 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:363 D.6777 ] [363])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 5, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       40 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              41 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 41 [r12]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 41 [r12]
;; live  kill	
(code_label 376 148 164 5 186 "" [2 uses])
(note 164 376 165 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(debug_insn 165 164 166 5 (var_location:DI D#16 (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:827 -1
     (nil))
(debug_insn 166 165 167 5 (var_location:DI yy_cp (debug_expr:DI D#16)) lex.yy.c:827 -1
     (nil))
(insn:TI 167 166 168 5 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_916+0 S1 A8])
        (reg:QI 4 si [orig:320 D.6789 ] [320])) lex.yy.c:830 93 {*movqi_internal}
     (nil))
(debug_insn 168 167 169 5 (var_location:DI yy_bp (debug_expr:DI D#16)) lex.yy.c:835 -1
     (nil))
(debug_insn 169 168 170 5 (var_location:SI D#15 (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:837 -1
     (nil))
(debug_insn 170 169 18 5 (var_location:SI yy_current_state (debug_expr:SI D#15)) lex.yy.c:837 -1
     (nil))
(insn 18 170 181 5 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:830 89 {*movdi_internal}
     (nil))
;;  succ:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]

;; basic block 6, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              144 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 5 [di] 6 [bp] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
(code_label 181 18 182 6 124 "" [1 uses])
(note 182 181 183 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 183 182 184 6 (set (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])
        (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 184 183 1972 6 (set (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1972 184 1973 6 (parallel [
            (set (reg:DI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:830 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1973 1972 255 6 (parallel [
            (set (reg:DI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:830 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              13 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 42 [r13]
;; lr  def 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 5 [di] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  kill	
(code_label 255 1973 185 7 130 "" [1 uses])
(note 185 255 190 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 190 185 192 7 NOTE_INSN_DELETED)
(note 192 190 186 7 NOTE_INSN_DELETED)
(debug_insn 186 192 187 7 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) -1
     (nil))
(debug_insn 187 186 188 7 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) -1
     (nil))
(debug_insn 188 187 1409 7 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) -1
     (nil))
(debug_insn 1409 188 193 7 (var_location:QI D#23 (mem/u/j:QI (plus:DI (reg:DI 4 si [orig:376 D.6785 ] [376])
            (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) [0 yy_ec S1 A8])) -1
     (nil))
(debug_insn 193 1409 1433 7 (var_location:QI yy_c (debug_expr:QI D#23)) lex.yy.c:841 -1
     (nil))
(insn:TI 1433 193 1389 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 2 cx [orig:343 D.6786 ] [343])
            (const_int 0 [0]))) lex.yy.c:844 2 {*cmphi_ccno_1}
     (expr_list:REG_DEAD (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (nil)))
(insn 1389 1433 1434 7 (set (reg:DI 2 cx)
        (zero_extend:DI (mem/u/j:QI (plus:DI (reg:DI 4 si [orig:376 D.6785 ] [376])
                    (symbol_ref:DI ("_ZL5yy_ec") [flags 0x2]  <var_decl 0x7f88bc080b40 yy_ec>)) [0 yy_ec S1 A8]))) 134 {zero_extendqidi2}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:376 D.6785 ] [376])
        (nil)))
(insn:TI 1434 1389 1436 7 (set (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])
        (if_then_else:SI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])
            (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) lex.yy.c:844 953 {*movsicc_noc}
     (nil))
(insn 1436 1434 1725 7 (set (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])
        (if_then_else:DI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])
            (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]))) lex.yy.c:844 954 {*movdicc_noc}
     (nil))
(insn 1725 1436 1726 7 (set (reg:SI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
        (if_then_else:SI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
            (reg:SI 42 r13 [564]))) lex.yy.c:844 953 {*movsicc_noc}
     (nil))
(insn:TI 1726 1725 1985 7 (set (reg:SI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
        (if_then_else:SI (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:SI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
            (reg:SI 42 r13 [564]))) lex.yy.c:844 953 {*movsicc_noc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
(jump_insn 1985 1726 1986 7 (set (pc)
        (label_ref 205)) 654 {jump}
     (nil)
 -> 205)
;;  succ:       11 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

(barrier 1986 1985 1987)
;; basic block 8, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [91.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 1987 1986 217 8 296 "" [1 uses])
(note 217 1987 220 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 220 217 219 8 NOTE_INSN_DELETED)
(insn:TI 219 220 221 8 (set (reg:DI 0 ax [orig:386 yy_current_state ] [386])
        (sign_extend:DI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) lex.yy.c:849 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 221 219 222 8 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:386 yy_current_state ] [386])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) lex.yy.c:849 146 {extendhisi2}
     (nil))
(debug_insn 222 221 224 8 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:849 -1
     (nil))
(insn:TI 224 222 225 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (const_int 101 [0x65]))) lex.yy.c:850 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 225 224 226 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) lex.yy.c:850 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 223)
;;  succ:       9 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              10 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 9, loop depth 0, count 0, freq 4550, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 2 [cx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx]
;; live  kill	
(note 226 225 230 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(note 230 226 1408 9 NOTE_INSN_DELETED)
(debug_insn 1408 230 231 9 (var_location:QI D#23 (mem/u/j:QI (plus:DI (reg:DI 2 cx [orig:388 D.6785 ] [388])
            (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) [0 yy_meta S1 A8])) -1
     (nil))
(debug_insn 231 1408 1390 9 (var_location:QI yy_c (debug_expr:QI D#23)) lex.yy.c:851 -1
     (nil))
(insn:TI 1390 231 223 9 (set (reg:DI 2 cx)
        (zero_extend:DI (mem/u/j:QI (plus:DI (reg:DI 2 cx [orig:388 D.6785 ] [388])
                    (symbol_ref:DI ("_ZL7yy_meta") [flags 0x2]  <var_decl 0x7f88bc080cf0 yy_meta>)) [0 yy_meta S1 A8]))) 134 {zero_extendqidi2}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 10, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       8 [50.0%]  (CAN_FALLTHRU)
;;              9 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 223 1390 201 10 128 "" [1 uses])
(note 201 223 203 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 203 201 204 10 (set (reg:DI 1 dx [orig:378 yy_current_state ] [378])
        (sign_extend:DI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 204 203 205 10 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:378 yy_current_state ] [378])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 11, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              7 [100.0%]  (CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 205 204 206 11 126 "" [1 uses])
(note 206 205 207 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(debug_insn 207 206 208 11 (var_location:QI yy_c (debug_expr:QI D#23)) -1
     (nil))
(debug_insn 208 207 212 11 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) -1
     (nil))
(insn:TI 212 208 213 11 (parallel [
            (set (reg:SI 1 dx [orig:382 D.6777 ] [382])
                (plus:SI (reg:SI 1 dx [orig:380 D.6777 ] [380])
                    (reg:SI 2 cx [orig:539 D.6777 ] [539])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:847 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 213 212 214 11 (set (reg:DI 4 si [orig:383 D.6777 ] [383])
        (sign_extend:DI (reg:SI 1 dx [orig:382 D.6777 ] [382]))) lex.yy.c:847 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 214 213 215 11 (set (reg:SI 4 si [orig:384 D.6777 ] [384])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:383 D.6777 ] [383])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:847 146 {extendhisi2}
     (nil))
(insn:TI 215 214 216 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (reg:SI 4 si [orig:384 D.6777 ] [384]))) lex.yy.c:847 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 4 si [orig:384 D.6777 ] [384])
        (nil)))
(jump_insn:TI 216 215 235 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1987)
            (pc))) lex.yy.c:847 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 1987)
;;  succ:       12 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              8 [91.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(note 235 216 240 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 240 235 243 12 (set (reg:DI 1 dx [orig:393 D.6785 ] [393])
        (zero_extend:DI (reg:SI 1 dx [orig:382 D.6777 ] [382]))) lex.yy.c:853 133 {*zero_extendsidi2}
     (nil))
(insn 243 240 241 12 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:854 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 241 243 247 12 (set (reg:DI 2 cx)
        (zero_extend:DI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:393 D.6785 ] [393])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) [3 yy_nxt S2 A16]))) lex.yy.c:853 135 {zero_extendhidi2}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:393 D.6785 ] [393])
        (nil)))
(insn:TI 247 241 1740 12 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 2 cx [orig:538 yy_current_state ] [538])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) lex.yy.c:856 139 {*zero_extendhisi2}
     (nil))
(insn 1740 247 242 12 (set (reg:DI 0 ax)
        (reg:DI 2 cx)) lex.yy.c:853 89 {*movdi_internal}
     (nil))
(debug_insn 242 1740 244 12 (var_location:SI yy_current_state (reg:SI 2 cx [orig:87 yy_current_state ] [87])) lex.yy.c:853 -1
     (nil))
(debug_insn 244 242 248 12 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:854 -1
     (nil))
(insn:TI 248 244 249 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 1 dx [orig:321 D.6787 ] [321])
            (const_int 190 [0xbe]))) lex.yy.c:856 6 {*cmphi_1}
     (nil))
(jump_insn:TI 249 248 250 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) lex.yy.c:856 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 258)
;;  succ:       14 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              13 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp]
;; lr  def 	 2 [cx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 4 [si]
;; live  kill	
(note 250 249 251 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 251 250 254 13 (set (reg:DI 4 si)
        (zero_extend:DI (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 MEM[base: yy_cp_82, offset: 0B]+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn 254 251 1988 13 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 2 cx [orig:538 yy_current_state ] [538])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(jump_insn 1988 254 1989 13 (set (pc)
        (label_ref 255)) 654 {jump}
     (nil)
 -> 255)
;;  succ:       7 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

(barrier 1989 1988 258)
;; basic block 14, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 258 1989 259 14 129 "" [1 uses])
(note 259 258 260 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 260 259 261 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 5 di [orig:315 yy_last_accepting_cpos_lsm.192 ] [315])
        (nil)))
(jump_insn:TI 261 260 264 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1990)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 1990)
;;  succ:       15 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              159 (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              159 [100.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 40 [r11]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 264 261 265 15 131 "" [1 uses])
(note 265 264 266 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn:TI 266 265 267 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
            (const_int 0 [0]))) 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 40 r11 [orig:313 yy_last_accepting_state_lsm.194 ] [313])
        (nil)))
(jump_insn:TI 267 266 270 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1991)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 1991)
;;  succ:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              158 (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]

;; basic block 16, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       15 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              158 [100.0%]  (CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 270 267 271 16 132 "" [1 uses])
(note 271 270 274 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 274 271 278 16 (set (reg:SI 1 dx)
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 2 cx [orig:538 yy_current_state ] [538])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16]))) 146 {extendhisi2}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:538 yy_current_state ] [538])
        (nil)))
;;  succ:       17 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 17, loop depth 0, count 0, freq 83, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              155 [28.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              88 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              156 [98.0%]  (DFS_BACK,CAN_FALLTHRU)
;;              92 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 278 274 279 17 133 "" [4 uses])
(note 279 278 280 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(debug_insn 280 279 281 17 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) -1
     (nil))
(debug_insn 281 280 282 17 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) -1
     (nil))
(debug_insn 282 281 284 17 (var_location:SI yy_current_state (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 284 282 285 17 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) lex.yy.c:859 -1
     (nil))
(insn:TI 285 284 286 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:90 yy_act ] [90])
            (const_int 0 [0]))) lex.yy.c:860 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 286 285 287 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) lex.yy.c:860 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 296)
;;  succ:       18 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 18, loop depth 0, count 0, freq 42, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       17 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(note 287 286 292 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 292 287 293 18 NOTE_INSN_DELETED)
(insn:TI 293 292 288 18 (set (reg:DI 0 ax [orig:401 yy_last_accepting_state ] [401])
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32]))) lex.yy.c:864 142 {*extendsidi2_rex64}
     (nil))
(insn 288 293 289 18 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) lex.yy.c:862 89 {*movdi_internal}
     (nil))
(debug_insn 289 288 290 18 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:862 -1
     (nil))
(debug_insn 290 289 294 18 (var_location:SI yy_current_state (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) lex.yy.c:863 -1
     (nil))
(insn:TI 294 290 295 18 (set (reg/v:SI 1 dx [orig:90 yy_act ] [90])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:401 yy_last_accepting_state ] [401])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16]))) lex.yy.c:864 146 {extendhisi2}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:401 yy_last_accepting_state ] [401])
        (nil)))
(debug_insn 295 294 296 18 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) lex.yy.c:864 -1
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 19, loop depth 0, count 0, freq 83, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [50.0%]  (CAN_FALLTHRU)
;;              18 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 296 295 297 19 134 "" [1 uses])
(note 297 296 298 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(debug_insn 298 297 299 19 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) -1
     (nil))
(debug_insn 299 298 1665 19 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) -1
     (nil))
(insn:TI 1665 299 300 19 (set (reg:DI 0 ax [403])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 300 1665 307 19 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn 307 300 302 19 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:867 89 {*movdi_internal}
     (nil))
(insn:TI 302 307 308 19 (parallel [
            (set (reg:DI 0 ax [403])
                (minus:DI (reg:DI 0 ax [403])
                    (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:867 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])
            (nil))))
(insn 308 302 303 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 1 dx [orig:90 yy_act ] [90])
            (const_int 46 [0x2e]))) lex.yy.c:869 7 {*cmpsi_1}
     (nil))
(insn:TI 303 308 304 19 (set (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])
        (reg:DI 0 ax [403])) lex.yy.c:867 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [403])
        (nil)))
(insn 304 303 306 19 (set (reg:QI 0 ax [orig:404 *yy_cp_6 ] [404])
        (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])) lex.yy.c:867 93 {*movqi_internal}
     (nil))
(insn:TI 306 304 305 19 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:867 93 {*movqi_internal}
     (nil))
(insn:TI 305 306 309 19 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 0 ax [orig:404 *yy_cp_6 ] [404])) lex.yy.c:867 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:404 *yy_cp_6 ] [404])
        (nil)))
(jump_insn 309 305 310 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 347)
            (pc))) lex.yy.c:869 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 347)
;;  succ:       20 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              26 [28.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 20, loop depth 0, count 0, freq 60, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 39 [r10]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags] 39 [r10]
;; live  kill	
(note 310 309 312 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn:TI 312 310 1970 20 (set (reg:DI 0 ax [orig:406 yy_act ] [406])
        (sign_extend:DI (reg/v:SI 1 dx [orig:90 yy_act ] [90]))) lex.yy.c:869 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 1970 312 1971 20 (set (reg:SI 39 r10)
        (mem/u:SI (plus:DI (mult:DI (reg:DI 0 ax [orig:406 yy_act ] [406])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("_ZL21yy_rule_can_match_eol") [flags 0x2]  <var_decl 0x7f88bc080750 yy_rule_can_match_eol>)) [2 yy_rule_can_match_eol S4 A32])) lex.yy.c:869 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:406 yy_act ] [406])
        (nil)))
(insn:TI 1971 1970 314 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 39 r10)
            (const_int 0 [0]))) lex.yy.c:869 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 39 r10)
        (nil)))
(jump_insn:TI 314 1971 315 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 347)
            (pc))) lex.yy.c:869 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 347)
;;  succ:       21 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              26 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 21, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 315 314 316 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(debug_insn 316 315 317 21 (var_location:DI yyl (const_int 0 [0])) -1
     (nil))
(insn:TI 317 316 326 21 (set (reg:DI 4 si [orig:307 D.6781 ] [307])
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) lex.yy.c:872 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])
        (nil)))
(insn 326 317 318 21 (set (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 318 326 1724 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 4 si [orig:307 D.6781 ] [307])
            (const_int 0 [0]))) lex.yy.c:872 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:307 D.6781 ] [307])
        (nil)))
(insn 1724 318 319 21 (set (reg:DI 2 cx [orig:327 D.6796 ] [327])
        (plus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
            (reg:DI 4 si [orig:307 D.6781 ] [307]))) 214 {*leadi}
     (nil))
(jump_insn:TI 319 1724 1992 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1472)
            (pc))) lex.yy.c:872 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 1472)
;;  succ:       22 [9.0%]  (FALLTHRU)
;;              24 [91.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 22, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 21, next block 23, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [9.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(note 1992 319 1993 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1993 1992 1994 22 (set (pc)
        (label_ref 347)) 654 {jump}
     (nil)
 -> 347)
;;  succ:       26 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 1994 1993 335)
;; basic block 23, loop depth 0, count 0, freq 218, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [72.0%]  (CAN_FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 335 1994 336 23 138 "" [1 uses])
(note 336 335 337 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(debug_insn 337 336 339 23 (var_location:DI D#19 (plus:DI (minus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
            (debug_expr:DI D#21))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 339 337 340 23 (var_location:DI yyl (debug_expr:DI D#19)) -1
     (nil))
(insn:TI 340 339 341 23 (parallel [
            (set (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
                (plus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 341 340 342 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
            (reg:DI 2 cx [orig:327 D.6796 ] [327]))) lex.yy.c:872 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 342 341 1472 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 347)
            (pc))) lex.yy.c:872 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 347)
;;  succ:       26 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              24 [91.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 24, loop depth 0, count 0, freq 303, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [91.0%]  (CAN_FALLTHRU)
;;              23 [91.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              25 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1472 342 1443 24 268 "" [2 uses])
(note 1443 1472 330 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(debug_insn 330 1443 331 24 (var_location:DI yyl (minus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
        (debug_expr:DI D#21))) -1
     (nil))
(insn:TI 331 330 332 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311]) [0 MEM[base: _324, offset: 0B]+0 S1 A8])
            (const_int 10 [0xa]))) lex.yy.c:873 5 {*cmpqi_1}
     (nil))
(jump_insn:TI 332 331 333 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 335)
            (pc))) lex.yy.c:873 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 335)
;;  succ:       25 [28.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              23 [72.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 25, loop depth 0, count 0, freq 85, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       24 [28.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(note 333 332 1981 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1981 333 334 25 (parallel [
            (set (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
                (plus:DI (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 334 1981 1979 25 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
                (plus:SI (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:875 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 1979 334 1980 25 (var_location:DI D#19 (clobber (const_int 0 [0]))) -1
     (nil))
(debug_insn 1980 1979 1982 25 (var_location:DI yyl (debug_expr:DI D#19)) -1
     (nil))
(insn:TI 1982 1980 1983 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:311 ivtmp.210 ] [311])
            (reg:DI 2 cx [orig:327 D.6796 ] [327]))) lex.yy.c:872 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 1983 1982 347 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1472)
            (pc))) lex.yy.c:872 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 1472)
;;  succ:       26 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              24 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 26, loop depth 0, count 0, freq 84, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [9.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              25 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              19 [28.0%]  (CAN_FALLTHRU)
;;              20 [50.0%]  (CAN_FALLTHRU)
;;              22 [100.0%]  (CAN_FALLTHRU)
;;              126 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 347 1983 348 26 137 "" [5 uses])
(note 348 347 349 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(debug_insn 349 348 350 26 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) -1
     (nil))
(insn:TI 350 349 351 26 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 1 dx [orig:90 yy_act ] [90])
            (const_int 49 [0x31]))) lex.yy.c:881 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 351 350 1350 26 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1218)
            (pc))) lex.yy.c:881 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 222 (nil)))
 -> 1218)
;;  succ:       100 [2.2%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              27 [97.8%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 27, loop depth 0, count 0, freq 82, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       26 [97.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 1 [dx] 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(note 1350 351 354 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(note 354 1350 352 27 NOTE_INSN_DELETED)
(insn:TI 352 354 355 27 (set (reg:DI 1 dx [orig:407 yy_act ] [407])
        (zero_extend:DI (reg/v:SI 1 dx [orig:90 yy_act ] [90]))) lex.yy.c:881 133 {*zero_extendsidi2}
     (nil))
(jump_insn:TI 355 352 356 27 (parallel [
            (set (pc)
                (mem/u/c:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:407 yy_act ] [407])
                            (const_int 8 [0x8]))
                        (label_ref:DI 357)) [0  S8 A8]))
            (use (label_ref 357))
        ]) lex.yy.c:881 658 {*tablejump_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:407 yy_act ] [407])
        (insn_list:REG_LABEL_OPERAND 357 (nil)))
 -> 357)
;;  succ:       93 [2.3%]  (LOOP_EXIT)
;;              92 [2.3%]  (LOOP_EXIT)
;;              91 [2.3%]  (LOOP_EXIT)
;;              41 [2.3%]  (LOOP_EXIT)
;;              97 [2.3%]  (LOOP_EXIT)
;;              80 [2.3%]  (LOOP_EXIT)
;;              39 [2.3%]  (LOOP_EXIT)
;;              94 [2.3%]  (LOOP_EXIT)
;;              81 [2.3%] 
;;              38 [2.3%]  (LOOP_EXIT)
;;              96 [2.3%]  (LOOP_EXIT)
;;              95 [2.3%]  (LOOP_EXIT)
;;              78 [2.3%]  (LOOP_EXIT)
;;              77 [2.3%]  (LOOP_EXIT)
;;              76 [2.3%]  (LOOP_EXIT)
;;              72 [2.3%]  (LOOP_EXIT)
;;              70 [2.3%]  (LOOP_EXIT)
;;              69 [2.3%]  (LOOP_EXIT)
;;              67 [2.3%]  (LOOP_EXIT)
;;              66 [2.3%]  (LOOP_EXIT)
;;              65 [2.3%]  (LOOP_EXIT)
;;              64 [2.3%]  (LOOP_EXIT)
;;              63 [2.3%]  (LOOP_EXIT)
;;              62 [2.3%]  (LOOP_EXIT)
;;              61 [2.3%]  (LOOP_EXIT)
;;              60 [2.3%]  (LOOP_EXIT)
;;              59 [2.3%]  (LOOP_EXIT)
;;              58 [2.3%]  (LOOP_EXIT)
;;              57 [2.3%]  (LOOP_EXIT)
;;              56 [2.3%]  (LOOP_EXIT)
;;              55 [2.3%]  (LOOP_EXIT)
;;              54 [2.3%]  (LOOP_EXIT)
;;              53 [2.3%]  (LOOP_EXIT)
;;              52 [2.3%]  (LOOP_EXIT)
;;              51 [2.3%]  (LOOP_EXIT)
;;              50 [2.3%]  (LOOP_EXIT)
;;              49 [2.3%]  (LOOP_EXIT)
;;              48 [2.3%]  (LOOP_EXIT)
;;              47 [2.3%]  (LOOP_EXIT)
;;              46 [2.3%]  (LOOP_EXIT)
;;              45 [2.3%]  (LOOP_EXIT)
;;              42 [2.3%]  (LOOP_EXIT)
;;              90 [2.3%]  (LOOP_EXIT)
;;              89 [2.3%]  (LOOP_EXIT)
;; lr  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 356 355 357)
;; Insn is not within a basic block
(code_label 357 356 358 142 "" [2 uses])
;; Insn is not within a basic block
(jump_table_data 358 357 359 (addr_vec:DI [
            (label_ref:DI 379)
            (label_ref:DI 393)
            (label_ref:DI 364)
            (label_ref:DI 364)
            (label_ref:DI 399)
            (label_ref:DI 1768)
            (label_ref:DI 416)
            (label_ref:DI 364)
            (label_ref:DI 421)
            (label_ref:DI 364)
            (label_ref:DI 364)
            (label_ref:DI 451)
            (label_ref:DI 474)
            (label_ref:DI 499)
            (label_ref:DI 518)
            (label_ref:DI 535)
            (label_ref:DI 551)
            (label_ref:DI 560)
            (label_ref:DI 1223)
            (label_ref:DI 1330)
            (label_ref:DI 360)
            (label_ref:DI 584)
            (label_ref:DI 588)
            (label_ref:DI 592)
            (label_ref:DI 596)
            (label_ref:DI 600)
            (label_ref:DI 604)
            (label_ref:DI 608)
            (label_ref:DI 612)
            (label_ref:DI 616)
            (label_ref:DI 620)
            (label_ref:DI 624)
            (label_ref:DI 628)
            (label_ref:DI 632)
            (label_ref:DI 636)
            (label_ref:DI 640)
            (label_ref:DI 644)
            (label_ref:DI 648)
            (label_ref:DI 652)
            (label_ref:DI 656)
            (label_ref:DI 660)
            (label_ref:DI 664)
            (label_ref:DI 668)
            (label_ref:DI 672)
            (label_ref:DI 678)
            (label_ref:DI 691)
            (label_ref:DI 707)
            (label_ref:DI 437)
            (label_ref:DI 437)
            (label_ref:DI 437)
        ]))
(barrier 359 358 78)
;; basic block 28, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [50.0%]  (CAN_FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 40 [r11]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags] 40 [r11]
;; live  kill	
(code_label 78 359 79 28 116 "" [1 uses])
(note 79 78 1974 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1974 79 80 28 (set (reg:SI 40 r11)
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:800 90 {*movsi_internal}
     (nil))
(insn 80 1974 1975 28 (set (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:794 90 {*movsi_internal}
     (nil))
(insn:TI 1975 80 82 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 40 r11)
            (const_int 0 [0]))) lex.yy.c:800 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 40 r11)
        (nil)))
(jump_insn:TI 82 1975 83 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) lex.yy.c:800 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 85)
;;  succ:       29 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              30 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 29, loop depth 0, count 0, freq 16, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       28 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 83 82 84 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn:TI 84 83 85 29 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:801 90 {*movsi_internal}
     (nil))
;;  succ:       30 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 30, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       28 [50.0%]  (CAN_FALLTHRU)
;;              29 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 85 84 86 30 118 "" [1 uses])
(note 86 85 87 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn:TI 87 86 88 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:803 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 88 87 92 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1995)
            (pc))) lex.yy.c:803 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 1995)
;;  succ:       35 [15.0%]  (CAN_FALLTHRU)
;;              31 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 31, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       30 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              35 [100.0%]  (CAN_FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 92 88 93 31 119 "" [1 uses])
(note 93 92 94 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn:TI 94 93 95 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
            (const_int 0 [0]))) lex.yy.c:806 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 95 94 99 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1996)
            (pc))) lex.yy.c:806 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 1996)
;;  succ:       36 [15.0%]  (CAN_FALLTHRU)
;;              32 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 32, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       31 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              36 [100.0%]  (CAN_FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 99 95 100 32 120 "" [1 uses])
(note 100 99 101 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn:TI 101 100 102 32 (set (reg/f:DI 0 ax [orig:99 D.6780 ] [99])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (nil))
(insn:TI 102 101 103 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:99 D.6780 ] [99])
            (const_int 0 [0]))) lex.yy.c:809 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 103 102 104 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) lex.yy.c:809 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 672 (nil)))
 -> 111)
;;  succ:       37 [6.7%]  (CAN_FALLTHRU)
;;              33 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 33, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       32 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(note 104 103 106 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(note 106 104 1663 33 NOTE_INSN_DELETED)
(insn:TI 1663 106 107 33 (set (reg:DI 1 dx [orig:352 yy_buffer_stack_top ] [352])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 107 1663 108 33 (set (reg/f:DI 1 dx [orig:102 D.6780 ] [102])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:352 yy_buffer_stack_top ] [352])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:99 D.6780 ] [99]))) lex.yy.c:809 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:99 D.6780 ] [99])
        (nil)))
(insn:TI 108 107 109 33 (set (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6780 ] [102]) [1 *_42+0 S8 A64])) lex.yy.c:809 89 {*movdi_internal}
     (nil))
(insn:TI 109 108 110 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
            (const_int 0 [0]))) lex.yy.c:809 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 110 109 128 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 111)
            (pc))) lex.yy.c:809 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 111)
;;  succ:       37 [15.0%]  (CAN_FALLTHRU)
;;              34 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

;; basic block 34, loop depth 0, count 0, freq 32, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       33 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              37 [100.0%]  (CAN_FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si]
;; live  kill	
(code_label 128 110 129 34 122 "" [1 uses])
(note 129 128 132 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn:TI 132 129 130 34 (set (reg/f:DI 3 bx [orig:318 D.6783 ] [318])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
                (const_int 16 [0x10])) [1 _1033->yy_buf_pos+0 S8 A64])) lex.yy.c:1643 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
        (nil)))
(insn 130 132 134 34 (set (reg:SI 2 cx [orig:359 _1033->yy_n_chars ] [359])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
                (const_int 32 [0x20])) [2 _1033->yy_n_chars+0 S4 A64])) lex.yy.c:1642 90 {*movsi_internal}
     (nil))
(insn:TI 134 130 135 34 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 3 bx [orig:318 D.6783 ] [318])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn 135 134 131 34 (set (reg/f:DI 0 ax [orig:360 *_1031 ] [360])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6780 ] [102]) [1 *_1031+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:102 D.6780 ] [102])
        (nil)))
(insn:TI 131 135 133 34 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:359 _1033->yy_n_chars ] [359])) lex.yy.c:1642 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:359 _1033->yy_n_chars ] [359])
        (nil)))
(insn 133 131 136 34 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 3 bx [orig:318 D.6783 ] [318])) lex.yy.c:1643 89 {*movdi_internal}
     (nil))
(insn:TI 136 133 137 34 (set (reg/f:DI 0 ax [orig:361 _249->yy_input_file ] [361])
        (mem/f:DI (reg/f:DI 0 ax [orig:360 *_1031 ] [360]) [1 _249->yy_input_file+0 S8 A64])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn:TI 137 136 138 34 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:361 _249->yy_input_file ] [361])) lex.yy.c:1644 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:361 _249->yy_input_file ] [361])
        (nil)))
(insn 138 137 139 34 (set (reg:DI 4 si)
        (zero_extend:DI (mem:QI (reg/f:DI 3 bx [orig:318 D.6783 ] [318]) [0 *_248+0 S1 A8]))) lex.yy.c:1645 134 {zero_extendqidi2}
     (nil))
(insn:TI 139 138 1997 34 (set (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (reg:QI 4 si [orig:320 D.6789 ] [320])) lex.yy.c:1645 93 {*movqi_internal}
     (nil))
(jump_insn 1997 139 1998 34 (set (pc)
        (label_ref 140)) 654 {jump}
     (nil)
 -> 140)
;;  succ:       4 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 7 [sp]
;; live  out 	 3 [bx] 4 [si] 7 [sp]

(barrier 1998 1997 1995)
;; basic block 35, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       30 [15.0%]  (CAN_FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1995 1998 89 35 299 "" [1 uses])
(note 89 1995 90 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn:TI 90 89 91 35 (set (reg/f:DI 0 ax [orig:349 stdin ] [349])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f88bc3c9d80 stdin>) [1 stdin+0 S8 A64])) lex.yy.c:804 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f88bc3c9d80 stdin>) [1 stdin+0 S8 A64])
        (nil)))
(insn:TI 91 90 1999 35 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:349 stdin ] [349])) lex.yy.c:804 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:349 stdin ] [349])
        (nil)))
(jump_insn 1999 91 2000 35 (set (pc)
        (label_ref 92)) 654 {jump}
     (nil)
 -> 92)
;;  succ:       31 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 2000 1999 1996)
;; basic block 36, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 35, next block 37, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       31 [15.0%]  (CAN_FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1996 2000 96 36 300 "" [1 uses])
(note 96 1996 97 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn:TI 97 96 98 36 (set (reg/f:DI 0 ax [orig:350 stdout ] [350])
        (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f88bc3c9e10 stdout>) [1 stdout+0 S8 A64])) lex.yy.c:807 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f88bc3c9e10 stdout>) [1 stdout+0 S8 A64])
        (nil)))
(insn:TI 98 97 2001 36 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (reg/f:DI 0 ax [orig:350 stdout ] [350])) lex.yy.c:807 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:350 stdout ] [350])
        (nil)))
(jump_insn 2001 98 2002 36 (set (pc)
        (label_ref 99)) 654 {jump}
     (nil)
 -> 99)
;;  succ:       32 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 2002 2001 111)
;; basic block 37, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 36, next block 38, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       33 [15.0%]  (CAN_FALLTHRU)
;;              32 [6.7%]  (CAN_FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di]
;; live  kill	
(code_label 111 2002 112 37 121 "" [2 uses])
(note 112 111 115 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(note 115 112 124 37 NOTE_INSN_DELETED)
(note 124 115 113 37 NOTE_INSN_DELETED)
(call_insn:TI 113 124 1662 37 (call (mem:QI (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>) [0 yyensure_buffer_stack S1 A8])
        (const_int 0 [0])) lex.yy.c:810 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yyensure_buffer_stackv") [flags 0x3]  <function_decl 0x7f88bc07c798 yyensure_buffer_stack>)
        (nil))
    (nil))
(insn:TI 1662 113 116 37 (set (reg:DI 1 dx [orig:354 yy_buffer_stack_top ] [354])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:811 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 116 1662 118 37 (set (reg/f:DI 0 ax [orig:355 yy_buffer_stack ] [355])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:811 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 118 116 119 37 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) lex.yy.c:812 90 {*movsi_internal}
     (nil))
(insn:TI 119 118 117 37 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:812 89 {*movdi_internal}
     (nil))
(insn:TI 117 119 120 37 (set (reg/f:DI 3 bx [orig:107 D.6780 ] [107])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:354 yy_buffer_stack_top ] [354])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:355 yy_buffer_stack ] [355]))) lex.yy.c:811 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:354 yy_buffer_stack_top ] [354])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:355 yy_buffer_stack ] [355])
            (nil))))
(call_insn:TI 120 117 1661 37 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:812 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn:TI 1661 120 122 37 (set (reg:DI 1 dx [orig:357 yy_buffer_stack_top ] [357])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn 122 1661 125 37 (set (mem/f:DI (reg/f:DI 3 bx [orig:107 D.6780 ] [107]) [1 *_48+0 S8 A64])
        (reg/f:DI 0 ax [orig:109 D.6782 ] [109])) lex.yy.c:812 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:107 D.6780 ] [107])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.6782 ] [109])
            (nil))))
(insn:TI 125 122 126 37 (set (reg/f:DI 0 ax [orig:358 yy_buffer_stack ] [358])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn:TI 126 125 127 37 (set (reg/f:DI 1 dx [orig:102 D.6780 ] [102])
        (plus:DI (mult:DI (reg:DI 1 dx [orig:357 yy_buffer_stack_top ] [357])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:358 yy_buffer_stack ] [358]))) 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:358 yy_buffer_stack ] [358])
        (nil)))
(insn:TI 127 126 2003 37 (set (reg/f:DI 0 ax [orig:103 D.6782 ] [103])
        (mem/f:DI (reg/f:DI 1 dx [orig:102 D.6780 ] [102]) [1 *_1030+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 2003 127 2004 37 (set (pc)
        (label_ref 128)) 654 {jump}
     (nil)
 -> 128)
;;  succ:       34 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 7 [sp]

(barrier 2004 2003 421)
;; basic block 38, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 37, next block 39, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(code_label 421 2004 422 38 148 "" [1 uses])
(note 422 421 424 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn:TI 424 422 423 38 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:52 89 {*movdi_internal}
     (nil))
(insn 423 424 425 38 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f88bbbf2750 *.LC14>)) mycc.l:52 89 {*movdi_internal}
     (nil))
(call_insn:TI 425 423 428 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f88bbf7aca8 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) mycc.l:52 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f88bbf7aca8 fopen>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn:TI 428 425 429 38 (set (reg:SI 4 si)
        (const_int 16384 [0x4000])) mycc.l:53 90 {*movsi_internal}
     (nil))
(insn 429 428 427 38 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:136 D.6778 ] [136])) mycc.l:53 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:136 D.6778 ] [136])
        (nil)))
(insn 427 429 430 38 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/f:DI 0 ax [orig:136 D.6778 ] [136])) mycc.l:52 89 {*movdi_internal}
     (nil))
(call_insn:TI 430 427 432 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>) [0 yy_create_buffer S1 A8])
            (const_int 0 [0]))) mycc.l:53 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_create_bufferP8_IO_FILEi") [flags 0x3]  <function_decl 0x7f88bc07c360 yy_create_buffer>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn:TI 432 430 433 38 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:137 D.6782 ] [137])) mycc.l:53 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:137 D.6782 ] [137])
        (nil)))
(call_insn:TI 433 432 1768 38 (call (mem:QI (symbol_ref:DI ("_Z19yypush_buffer_stateP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c5e8 yypush_buffer_state>) [0 yypush_buffer_state S1 A8])
        (const_int 0 [0])) mycc.l:53 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z19yypush_buffer_stateP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c5e8 yypush_buffer_state>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       39 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp] 42 [r13]
;; live  out 	 7 [sp] 42 [r13]

;; basic block 39, loop depth 0, count 0, freq 4, maybe hot
;;  prev block 38, next block 40, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       38 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              27 [2.3%]  (LOOP_EXIT)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
(code_label 1768 433 1766 39 287 "" [1 uses])
(note 1766 1768 434 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn:TI 434 1766 1968 39 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 1 [0x1])) mycc.l:54 90 {*movsi_internal}
     (nil))
(insn 1968 434 1969 39 (parallel [
            (set (reg:DI 1 dx)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:56 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1969 1968 15 39 (parallel [
            (set (reg:DI 2 cx [orig:343 D.6786 ] [343])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:56 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 15 1969 396 39 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (const_int 1 [0x1])) mycc.l:56 90 {*movsi_internal}
     (nil))
;;  succ:       40 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

;; basic block 40, loop depth 0, count 0, freq 17, maybe hot
;;  prev block 39, next block 41, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       91 [100.0%]  (CAN_FALLTHRU)
;;              80 [100.0%]  (CAN_FALLTHRU)
;;              96 [100.0%]  (CAN_FALLTHRU)
;;              94 [100.0%]  (CAN_FALLTHRU)
;;              39 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              95 [100.0%]  (CAN_FALLTHRU)
;;              99 [100.0%]  (CAN_FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 4 [si]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  gen 	 3 [bx] 4 [si]
;; live  kill	
(code_label 396 15 159 40 188 "" [6 uses])
(note 159 396 970 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(note 970 159 160 40 NOTE_INSN_DELETED)
(insn:TI 160 970 161 40 (set (reg/f:DI 3 bx [orig:318 D.6783 ] [318])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 161 160 2005 40 (set (reg:DI 4 si)
        (zero_extend:DI (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(jump_insn 2005 161 2006 40 (set (pc)
        (label_ref 376)) 654 {jump}
     (nil)
 -> 376)
;;  succ:       5 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

(barrier 2006 2005 364)
;; basic block 41, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 40, next block 42, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si]
;; live  kill	
(code_label 364 2006 365 41 144 "" [5 uses])
(note 365 364 367 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn:TI 367 365 366 41 (set (reg:DI 1 dx)
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 366 367 374 41 (set (reg:DI 4 si)
        (zero_extend:DI (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 374 366 1741 41 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 1741 374 370 41 (set (reg:DI 0 ax)
        (reg:DI 1 dx)) 89 {*movdi_internal}
     (nil))
(insn 370 1741 373 41 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:411 D.6777 ] [411])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 373 370 2007 41 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:411 D.6777 ] [411])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
(jump_insn:TI 2007 373 2008 41 (set (pc)
        (label_ref 376)) 654 {jump}
     (nil)
 -> 376)
;;  succ:       5 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

(barrier 2008 2007 660)
;; basic block 42, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 41, next block 43, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 660 2008 661 42 178 "" [1 uses])
(note 661 660 64 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn:TI 64 661 1225 42 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 125 [0x7d])) mycc.l:97 90 {*movsi_internal}
     (nil))
;;  succ:       43 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 43, loop depth 0, count 0, freq 61, maybe hot
;;  prev block 42, next block 44, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       75 [100.0%]  (CAN_FALLTHRU)
;;              89 [100.0%]  (CAN_FALLTHRU)
;;              65 [100.0%]  (CAN_FALLTHRU)
;;              63 [100.0%]  (CAN_FALLTHRU)
;;              67 [21.6%]  (CAN_FALLTHRU)
;;              74 [39.0%]  (CAN_FALLTHRU)
;;              71 [100.0%]  (CAN_FALLTHRU)
;;              69 [100.0%]  (CAN_FALLTHRU)
;;              90 [100.0%]  (CAN_FALLTHRU)
;;              79 [100.0%]  (CAN_FALLTHRU)
;;              93 [100.0%]  (CAN_FALLTHRU)
;;              68 [100.0%]  (CAN_FALLTHRU)
;;              66 [100.0%]  (CAN_FALLTHRU)
;;              62 [100.0%]  (CAN_FALLTHRU)
;;              61 [100.0%]  (CAN_FALLTHRU)
;;              60 [100.0%]  (CAN_FALLTHRU)
;;              59 [100.0%]  (CAN_FALLTHRU)
;;              58 [100.0%]  (CAN_FALLTHRU)
;;              57 [100.0%]  (CAN_FALLTHRU)
;;              56 [100.0%]  (CAN_FALLTHRU)
;;              55 [100.0%]  (CAN_FALLTHRU)
;;              54 [100.0%]  (CAN_FALLTHRU)
;;              53 [100.0%]  (CAN_FALLTHRU)
;;              52 [100.0%]  (CAN_FALLTHRU)
;;              51 [100.0%]  (CAN_FALLTHRU)
;;              50 [100.0%]  (CAN_FALLTHRU)
;;              49 [100.0%]  (CAN_FALLTHRU)
;;              48 [100.0%]  (CAN_FALLTHRU)
;;              47 [100.0%]  (CAN_FALLTHRU)
;;              46 [100.0%]  (CAN_FALLTHRU)
;;              45 [100.0%]  (CAN_FALLTHRU)
;;              64 [100.0%]  (CAN_FALLTHRU)
;;              42 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              160 [100.0%]  (CAN_FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 5 [di]
(code_label 1225 64 1226 43 157 "" [33 uses])
(note 1226 1225 1320 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1320 1226 1319 43 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 24 [0x18])) [1 D.6797+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 5 di [577]))
        ]) lex.yy.c:1265 990 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 5 di [577])
        (nil)))
(insn:TI 1319 1320 1321 43 (set (reg/i:SI 0 ax)
        (reg:SI 3 bx [orig:92 D.6777 ] [92])) lex.yy.c:1265 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (nil)))
(jump_insn:TI 1321 1319 1354 43 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2009)
            (pc))) lex.yy.c:1265 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 2009)
;;  succ:       44 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              161 [0.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 44, loop depth 0, count 0, freq 63, maybe hot
;;  prev block 43, next block 45, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       43 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 1354 1321 2142 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(note 2142 1354 1757 44 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 1757 2142 1325 44 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:1265 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 40 [0x28])))
            (nil))))
(insn 1325 1757 1758 44 (use (reg/i:SI 0 ax)) lex.yy.c:1265 -1
     (nil))
(insn/f:TI 1758 1325 1759 44 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1265 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1759 1758 1760 44 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1265 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1760 1759 1761 44 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1265 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1761 1760 1762 44 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1265 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1762 1761 1763 44 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1265 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1763 1762 1764 44 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1265 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 1764 1763 1765 44 (simple_return) lex.yy.c:1265 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1765 1764 656)
;; basic block 45, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 44, next block 46, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 656 1765 657 45 177 "" [1 uses])
(note 657 656 63 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn:TI 63 657 2010 45 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 123 [0x7b])) mycc.l:96 90 {*movsi_internal}
     (nil))
(jump_insn 2010 63 2011 45 (set (pc)
        (label_ref 1225)) mycc.l:96 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2011 2010 652)
;; basic block 46, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 45, next block 47, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 652 2011 653 46 176 "" [1 uses])
(note 653 652 62 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn:TI 62 653 2012 46 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 296 [0x128])) mycc.l:95 90 {*movsi_internal}
     (nil))
(jump_insn 2012 62 2013 46 (set (pc)
        (label_ref 1225)) mycc.l:95 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2013 2012 648)
;; basic block 47, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 46, next block 48, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 648 2013 649 47 175 "" [1 uses])
(note 649 648 61 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn:TI 61 649 2014 47 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 295 [0x127])) mycc.l:94 90 {*movsi_internal}
     (nil))
(jump_insn 2014 61 2015 47 (set (pc)
        (label_ref 1225)) mycc.l:94 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2015 2014 644)
;; basic block 48, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 47, next block 49, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 644 2015 645 48 174 "" [1 uses])
(note 645 644 60 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn:TI 60 645 2016 48 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 294 [0x126])) mycc.l:93 90 {*movsi_internal}
     (nil))
(jump_insn 2016 60 2017 48 (set (pc)
        (label_ref 1225)) mycc.l:93 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2017 2016 640)
;; basic block 49, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 48, next block 50, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 640 2017 641 49 173 "" [1 uses])
(note 641 640 59 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn:TI 59 641 2018 49 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 293 [0x125])) mycc.l:92 90 {*movsi_internal}
     (nil))
(jump_insn 2018 59 2019 49 (set (pc)
        (label_ref 1225)) mycc.l:92 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2019 2018 636)
;; basic block 50, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 49, next block 51, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 636 2019 637 50 172 "" [1 uses])
(note 637 636 58 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn:TI 58 637 2020 50 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 292 [0x124])) mycc.l:91 90 {*movsi_internal}
     (nil))
(jump_insn 2020 58 2021 50 (set (pc)
        (label_ref 1225)) mycc.l:91 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2021 2020 632)
;; basic block 51, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 50, next block 52, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 632 2021 633 51 171 "" [1 uses])
(note 633 632 57 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn:TI 57 633 2022 51 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 291 [0x123])) mycc.l:90 90 {*movsi_internal}
     (nil))
(jump_insn 2022 57 2023 51 (set (pc)
        (label_ref 1225)) mycc.l:90 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2023 2022 628)
;; basic block 52, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 51, next block 53, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 628 2023 629 52 170 "" [1 uses])
(note 629 628 56 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn:TI 56 629 2024 52 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 290 [0x122])) mycc.l:89 90 {*movsi_internal}
     (nil))
(jump_insn 2024 56 2025 52 (set (pc)
        (label_ref 1225)) mycc.l:89 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2025 2024 624)
;; basic block 53, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 52, next block 54, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 624 2025 625 53 169 "" [1 uses])
(note 625 624 55 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn:TI 55 625 2026 53 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 289 [0x121])) mycc.l:88 90 {*movsi_internal}
     (nil))
(jump_insn 2026 55 2027 53 (set (pc)
        (label_ref 1225)) mycc.l:88 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2027 2026 620)
;; basic block 54, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 53, next block 55, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 620 2027 621 54 168 "" [1 uses])
(note 621 620 54 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn:TI 54 621 2028 54 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 288 [0x120])) mycc.l:87 90 {*movsi_internal}
     (nil))
(jump_insn 2028 54 2029 54 (set (pc)
        (label_ref 1225)) mycc.l:87 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2029 2028 616)
;; basic block 55, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 54, next block 56, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 616 2029 617 55 167 "" [1 uses])
(note 617 616 53 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn:TI 53 617 2030 55 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 287 [0x11f])) mycc.l:86 90 {*movsi_internal}
     (nil))
(jump_insn 2030 53 2031 55 (set (pc)
        (label_ref 1225)) mycc.l:86 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2031 2030 612)
;; basic block 56, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 55, next block 57, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 612 2031 613 56 166 "" [1 uses])
(note 613 612 52 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn:TI 52 613 2032 56 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 286 [0x11e])) mycc.l:85 90 {*movsi_internal}
     (nil))
(jump_insn 2032 52 2033 56 (set (pc)
        (label_ref 1225)) mycc.l:85 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2033 2032 608)
;; basic block 57, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 56, next block 58, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 608 2033 609 57 165 "" [1 uses])
(note 609 608 51 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn:TI 51 609 2034 57 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 285 [0x11d])) mycc.l:84 90 {*movsi_internal}
     (nil))
(jump_insn 2034 51 2035 57 (set (pc)
        (label_ref 1225)) mycc.l:84 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2035 2034 604)
;; basic block 58, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 57, next block 59, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 604 2035 605 58 164 "" [1 uses])
(note 605 604 50 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn:TI 50 605 2036 58 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 284 [0x11c])) mycc.l:83 90 {*movsi_internal}
     (nil))
(jump_insn 2036 50 2037 58 (set (pc)
        (label_ref 1225)) mycc.l:83 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2037 2036 600)
;; basic block 59, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 58, next block 60, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 600 2037 601 59 163 "" [1 uses])
(note 601 600 49 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn:TI 49 601 2038 59 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 283 [0x11b])) mycc.l:82 90 {*movsi_internal}
     (nil))
(jump_insn 2038 49 2039 59 (set (pc)
        (label_ref 1225)) mycc.l:82 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2039 2038 596)
;; basic block 60, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 59, next block 61, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 596 2039 597 60 162 "" [1 uses])
(note 597 596 48 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn:TI 48 597 2040 60 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 282 [0x11a])) mycc.l:81 90 {*movsi_internal}
     (nil))
(jump_insn 2040 48 2041 60 (set (pc)
        (label_ref 1225)) mycc.l:81 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2041 2040 592)
;; basic block 61, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 60, next block 62, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 592 2041 593 61 161 "" [1 uses])
(note 593 592 47 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn:TI 47 593 2042 61 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 281 [0x119])) mycc.l:80 90 {*movsi_internal}
     (nil))
(jump_insn 2042 47 2043 61 (set (pc)
        (label_ref 1225)) mycc.l:80 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2043 2042 588)
;; basic block 62, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 61, next block 63, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 588 2043 589 62 160 "" [1 uses])
(note 589 588 46 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn:TI 46 589 2044 62 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 280 [0x118])) mycc.l:79 90 {*movsi_internal}
     (nil))
(jump_insn 2044 46 2045 62 (set (pc)
        (label_ref 1225)) mycc.l:79 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2045 2044 584)
;; basic block 63, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 62, next block 64, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 584 2045 585 63 159 "" [1 uses])
(note 585 584 45 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn:TI 45 585 2046 63 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 279 [0x117])) mycc.l:78 90 {*movsi_internal}
     (nil))
(jump_insn 2046 45 2047 63 (set (pc)
        (label_ref 1225)) mycc.l:78 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2047 2046 360)
;; basic block 64, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 63, next block 65, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 360 2047 361 64 158 "" [1 uses])
(note 361 360 44 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn:TI 44 361 2048 64 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 278 [0x116])) mycc.l:77 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 278 [0x116])
        (nil)))
(jump_insn 2048 44 2049 64 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2049 2048 1330)
;; basic block 65, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 64, next block 66, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 1330 2049 1329 65 238 "" [1 uses])
(note 1329 1330 43 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn:TI 43 1329 2050 65 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 277 [0x115])) mycc.l:76 90 {*movsi_internal}
     (nil))
(jump_insn 2050 43 2051 65 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2051 2050 1223)
;; basic block 66, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 65, next block 67, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 1223 2051 1224 66 156 "" [1 uses])
(note 1224 1223 42 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn:TI 42 1224 2052 66 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 276 [0x114])) mycc.l:75 90 {*movsi_internal}
     (nil))
(jump_insn 2052 42 2053 66 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2053 2052 560)
;; basic block 67, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 66, next block 68, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label 560 2053 561 67 155 "" [1 uses])
(note 561 560 562 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn:TI 562 561 38 67 (set (reg:DI 6 bp [orig:176 D.6781 ] [176])
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) mycc.l:184 89 {*movdi_internal}
     (nil))
(insn 38 562 1721 67 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 263 [0x107])) mycc.l:74 90 {*movsi_internal}
     (nil))
(insn:TI 1721 38 565 67 (set (reg:DI 5 di [orig:432 D.6781 ] [432])
        (plus:DI (reg:DI 6 bp [orig:176 D.6781 ] [176])
            (const_int -1 [0xffffffffffffffff]))) mycc.l:184 214 {*leadi}
     (nil))
(call_insn:TI 565 1721 569 67 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) mycc.l:184 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 569 565 566 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [433])
            (const_int 0 [0]))) mycc.l:186 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [433])
        (nil)))
(insn 566 569 568 67 (set (reg/f:DI 1 dx [433])
        (reg:DI 0 ax)) mycc.l:184 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 1 dx [433])
        (nil)))
(insn 568 566 570 67 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.str+0 S8 A64])
        (reg/f:DI 0 ax [433])) mycc.l:184 89 {*movdi_internal}
     (nil))
(jump_insn:TI 570 568 571 67 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1225)
            (pc))) mycc.l:186 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2165 (nil)))
 -> 1225)
;;  succ:       68 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              43 [21.6%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp]

;; basic block 68, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 67, next block 69, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       67 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 571 570 574 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(note 574 571 1712 68 NOTE_INSN_DELETED)
(note 1712 574 572 68 NOTE_INSN_DELETED)
(debug_insn 572 1712 573 68 (var_location:DI __dest (reg/f:DI 1 dx [433])) mycc.l:188 -1
     (nil))
(debug_insn 573 572 1669 68 (var_location:DI __src (plus:DI (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (const_int 1 [0x1]))) mycc.l:188 -1
     (nil))
(insn:TI 1669 573 577 68 (set (reg:DI 0 ax [581])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (nil))
(insn 577 1669 1720 68 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [433])) /usr/include/x86_64-linux-gnu/bits/string3.h:110 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [433])
        (nil)))
(insn:TI 1720 577 578 68 (set (reg/f:DI 4 si [orig:434 D.6791 ] [434])
        (plus:DI (reg:DI 0 ax [581])
            (const_int 1 [0x1]))) /usr/include/x86_64-linux-gnu/bits/string3.h:110 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [581])
        (nil)))
(call_insn:TI 578 1720 579 68 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f88bc2f4510 __builtin_strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/string3.h:110 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_RETURNED (reg/f:DI 1 dx [433])
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f88bc2f4510 __builtin_strcpy>)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(debug_insn 579 578 580 68 (var_location:DI __dest (clobber (const_int 0 [0]))) mycc.l:188 -1
     (nil))
(debug_insn 580 579 581 68 (var_location:DI __src (clobber (const_int 0 [0]))) mycc.l:188 -1
     (nil))
(insn:TI 581 580 2054 68 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 0 ax [433])
                    (reg:DI 6 bp [orig:176 D.6781 ] [176]))
                (const_int -2 [0xfffffffffffffffe])) [0 *_301+0 S1 A8])
        (const_int 0 [0])) mycc.l:189 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:176 D.6781 ] [176])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [433])
            (nil))))
(jump_insn 2054 581 2055 68 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2055 2054 551)
;; basic block 69, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 68, next block 70, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(code_label 551 2055 552 69 154 "" [1 uses])
(note 552 551 555 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn:TI 555 552 553 69 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 553 555 554 69 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn 554 553 1965 69 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f88bbbf2a20 *.LC19>)) mycc.l:176 89 {*movdi_internal}
     (nil))
(insn:TI 1965 554 40 69 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:176 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 40 1965 557 69 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 262 [0x106])) mycc.l:73 90 {*movsi_internal}
     (nil))
(call_insn:TI 557 40 2056 69 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:176 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn:TI 2056 557 2057 69 (set (pc)
        (label_ref 1225)) mycc.l:73 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2057 2056 535)
;; basic block 70, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 69, next block 71, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(code_label 535 2057 536 70 153 "" [1 uses])
(note 536 535 537 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(note 537 536 538 70 NOTE_INSN_DELETED)
(note 538 537 1667 70 NOTE_INSN_DELETED)
(insn:TI 1667 538 1668 70 (set (reg:DI 0 ax [579])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn 1668 1667 541 70 (set (reg:DI 1 dx [580])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 23 [0x17]))) mycc.l:167 214 {*leadi}
     (nil))
(insn 541 1668 1722 70 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f88bbbf2990 *.LC18>)) mycc.l:167 89 {*movdi_internal}
     (nil))
(insn:TI 1722 541 1966 70 (set (reg/f:DI 5 di [orig:428 D.6791 ] [428])
        (plus:DI (reg:DI 0 ax [579])
            (const_int 1 [0x1]))) mycc.l:167 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [579])
        (nil)))
(insn 1966 1722 544 70 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:167 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 544 1966 546 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:167 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn:TI 546 544 547 70 (set (reg:SI 0 ax [orig:431 c ] [431])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                    (const_int 23 [0x17])) [0 c+0 S1 A8]))) mycc.l:168 148 {extendqisi2}
     (expr_list:REG_EQUIV (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])
        (nil)))
(insn:TI 547 546 1786 70 (set (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])
        (reg:SI 0 ax [orig:431 c ] [431])) mycc.l:168 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:431 c ] [431])
        (nil)))
;;  succ:       71 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 71, loop depth 0, count 0, freq 5, maybe hot
;;  prev block 70, next block 72, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       70 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              73 [39.0%]  (CAN_FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 1786 547 1784 71 291 "" [1 uses])
(note 1784 1786 548 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(debug_insn 548 1784 39 71 (var_location:QI c (clobber (const_int 0 [0]))) mycc.l:72 -1
     (nil))
(insn:TI 39 548 2058 71 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 259 [0x103])) mycc.l:72 90 {*movsi_internal}
     (nil))
(jump_insn 2058 39 2059 71 (set (pc)
        (label_ref 1225)) mycc.l:72 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2059 2058 518)
;; basic block 72, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 71, next block 73, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 4 [si]
;; live  kill	
(code_label 518 2059 519 72 152 "" [1 uses])
(note 519 518 520 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn:TI 520 519 521 72 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:123 89 {*movdi_internal}
     (nil))
(insn 521 520 1794 72 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f88bbbf2900 *.LC17>)) mycc.l:123 89 {*movdi_internal}
     (nil))
;;  succ:       73 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 4 [si] 7 [sp]

;; basic block 73, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 72, next block 74, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       72 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              76 [100.0%]  (CAN_FALLTHRU)
;;              77 [100.0%]  (CAN_FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 1794 521 1792 73 292 "" [2 uses])
(note 1792 1794 503 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn:TI 503 1792 1967 73 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 1967 503 505 73 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:151 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 505 1967 507 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) mycc.l:151 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f88bc300d80 sscanf>)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn:TI 507 505 509 73 (set (reg:SI 0 ax [orig:203 D.6785 ] [203])
        (mem/c:SI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.num+0 S4 A64])) mycc.l:153 90 {*movsi_internal}
     (nil))
(insn:TI 509 507 510 73 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:203 D.6785 ] [203])
            (const_int 127 [0x7f]))) mycc.l:153 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 510 509 489 73 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1786)
            (pc))) mycc.l:153 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 3900 (nil)))
 -> 1786)
;;  succ:       71 [39.0%]  (CAN_FALLTHRU)
;;              74 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 74, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 73, next block 75, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       73 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	
(note 489 510 490 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn:TI 490 489 36 74 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:202 D.6785 ] [202])
            (const_int 32367 [0x7e6f]))) mycc.l:142 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:202 D.6785 ] [202])
        (nil)))
(insn 36 490 491 74 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 260 [0x104])) mycc.l:143 90 {*movsi_internal}
     (nil))
(jump_insn:TI 491 36 496 74 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1225)
            (pc))) mycc.l:142 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 3900 (nil)))
 -> 1225)
;;  succ:       75 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              43 [39.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 75, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 74, next block 76, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       74 [61.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(note 496 491 35 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn:TI 35 496 2060 75 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 261 [0x105])) mycc.l:145 90 {*movsi_internal}
     (nil))
(jump_insn 2060 35 2061 75 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2061 2060 499)
;; basic block 76, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 75, next block 77, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 4 [si]
;; live  kill	
(code_label 499 2061 500 76 151 "" [1 uses])
(note 500 499 501 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn:TI 501 500 502 76 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:151 89 {*movdi_internal}
     (nil))
(insn 502 501 2062 76 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f88bbbf2870 *.LC16>)) mycc.l:151 89 {*movdi_internal}
     (nil))
(jump_insn 2062 502 2063 76 (set (pc)
        (label_ref 1794)) 654 {jump}
     (nil)
 -> 1794)
;;  succ:       73 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 4 [si] 7 [sp]

(barrier 2063 2062 474)
;; basic block 77, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 76, next block 78, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 4 [si]
;; live  in  	 7 [sp]
;; live  gen 	 1 [dx] 4 [si]
;; live  kill	
(code_label 474 2063 475 77 150 "" [1 uses])
(note 475 474 476 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn:TI 476 475 477 77 (set (reg:DI 1 dx)
        (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>)) mycc.l:137 89 {*movdi_internal}
     (nil))
(insn 477 476 2064 77 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f88bbbf27e0 *.LC15>)) mycc.l:137 89 {*movdi_internal}
     (nil))
(jump_insn 2064 477 2065 77 (set (pc)
        (label_ref 1794)) 654 {jump}
     (nil)
 -> 1794)
;;  succ:       73 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 4 [si] 7 [sp]
;; live  out 	 1 [dx] 4 [si] 7 [sp]

(barrier 2065 2064 451)
;; basic block 78, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 77, next block 79, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 451 2065 452 78 149 "" [1 uses])
(note 452 451 453 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn:TI 453 452 454 78 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:109 89 {*movdi_internal}
     (nil))
(call_insn:TI 454 453 457 78 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6lookupPKc") [flags 0x41]  <function_decl 0x7f88bc12e798 lookup>) [0 lookup S1 A8])
            (const_int 0 [0]))) mycc.l:109 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z6lookupPKc") [flags 0x41]  <function_decl 0x7f88bc12e798 lookup>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 457 454 456 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
            (const_int 0 [0]))) mycc.l:111 4 {*cmpdi_ccno_1}
     (nil))
(insn 456 457 458 78 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.sym+0 S8 A64])
        (reg/f:DI 0 ax [orig:198 D.6792 ] [198])) mycc.l:109 89 {*movdi_internal}
     (nil))
(jump_insn:TI 458 456 469 78 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2066)
            (pc))) mycc.l:111 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1013 (nil)))
 -> 2066)
;;  succ:       148 [10.1%]  (CAN_FALLTHRU)
;;              79 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 79, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 78, next block 80, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       78 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              148 [100.0%]  (CAN_FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 469 458 470 79 190 "" [1 uses])
(note 470 469 471 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn:TI 471 470 2067 79 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
                (const_int 8 [0x8])) [2 _991->token+0 S4 A64])) mycc.l:117 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
        (nil)))
(jump_insn 2067 471 2068 79 (set (pc)
        (label_ref 1225)) mycc.l:68 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2068 2067 399)
;; basic block 80, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 79, next block 81, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	 17 [flags]
(code_label 399 2068 400 80 145 "" [1 uses])
(note 400 399 402 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn:TI 402 400 401 80 (set (reg:DI 1 dx)
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 401 402 1742 80 (parallel [
            (set (mem/c:SI (symbol_ref:DI ("_ZL8line_num") [flags 0x2]  <var_decl 0x7f88bc119b40 line_num>) [2 line_num+0 S4 A32])
                (plus:SI (mem/c:SI (symbol_ref:DI ("_ZL8line_num") [flags 0x2]  <var_decl 0x7f88bc119b40 line_num>) [2 line_num+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:46 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1742 401 405 80 (set (reg:DI 0 ax)
        (reg:DI 1 dx)) 89 {*movdi_internal}
     (nil))
(insn 405 1742 408 80 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:419 D.6777 ] [419])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn:TI 408 405 2069 80 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:419 D.6777 ] [419])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
(jump_insn 2069 408 2070 80 (set (pc)
        (label_ref 396)) mycc.l:47 654 {jump}
     (nil)
 -> 396)
;;  succ:       40 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 2070 2069 707)
;; basic block 81, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 80, next block 82, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%] 
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 17 [flags] 38 [r9] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 17 [flags] 38 [r9] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 707 2070 708 81 184 "" [1 uses])
(note 708 707 716 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(note 716 708 709 81 NOTE_INSN_DELETED)
(debug_insn 709 716 1670 81 (var_location:SI yy_act (const_int 46 [0x2e])) -1
     (nil))
(insn:TI 1670 709 710 81 (set (reg:DI 43 r14 [orig:445 D.6788 ] [445])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1140 89 {*movdi_internal}
     (nil))
(insn 710 1670 715 81 (parallel [
            (set (reg:DI 43 r14 [orig:445 D.6788 ] [445])
                (minus:DI (reg:DI 43 r14 [orig:445 D.6788 ] [445])
                    (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1140 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 715 710 717 81 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn:TI 717 715 1719 81 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn:TI 1719 717 718 81 (set (reg/v:SI 0 ax [orig:147 yy_amount_of_matched_text ] [147])
        (plus:SI (reg:SI 43 r14 [orig:445 D.6788 ] [445])
            (const_int -1 [0xffffffffffffffff]))) lex.yy.c:1140 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:445 D.6788 ] [445])
        (nil)))
(insn 718 1719 1672 81 (set (reg/f:DI 44 r15 [orig:152 D.6780 ] [152])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1146 214 {*leadi}
     (nil))
(insn:TI 1672 718 712 81 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [9 %sfp+-24 S4 A32])
        (reg/v:SI 0 ax [orig:147 yy_amount_of_matched_text ] [147])) lex.yy.c:1140 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 0 ax [orig:147 yy_amount_of_matched_text ] [147])
        (nil)))
(debug_insn 712 1672 713 81 (var_location:SI yy_amount_of_matched_text (mem/c:SI (plus:DI (reg/f:DI 7 sp)
            (const_int 8 [0x8])) [9 %sfp+-24 S4 A32])) lex.yy.c:1140 -1
     (nil))
(insn 713 712 714 81 (set (reg:QI 0 ax [orig:446 yy_hold_char ] [446])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:1143 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn:TI 714 713 719 81 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])
        (reg:QI 0 ax [orig:446 yy_hold_char ] [446])) lex.yy.c:1143 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:446 yy_hold_char ] [446])
        (nil)))
(insn 719 714 723 81 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) lex.yy.c:1146 89 {*movdi_internal}
     (nil))
(insn:TI 723 719 1963 81 (set (reg:SI 0 ax [orig:154 D.6777 ] [154])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 1963 723 1964 81 (set (reg:SI 38 r9)
        (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 60 [0x3c])) [2 _143->yy_buffer_status+0 S4 A32])) lex.yy.c:1146 90 {*movsi_internal}
     (nil))
(insn:TI 1964 1963 721 81 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 38 r9)
            (const_int 0 [0]))) lex.yy.c:1146 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 38 r9)
        (nil)))
(jump_insn:TI 721 1964 727 81 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 734)
            (pc))) lex.yy.c:1146 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 734)
;;  succ:       83 [50.0%]  (CAN_FALLTHRU)
;;              82 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 82, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 81, next block 83, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       81 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 5 [di] 43 [r14]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 43 [r14]
;; live  kill	
(note 727 721 730 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn:TI 730 727 728 82 (set (reg/f:DI 5 di [orig:450 yyin ] [450])
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1158 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (nil)))
(insn 728 730 731 82 (set (reg:SI 0 ax [orig:154 D.6777 ] [154])
        (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 32 [0x20])) [2 _143->yy_n_chars+0 S4 A64])) lex.yy.c:1157 90 {*movsi_internal}
     (nil))
(insn:TI 731 728 732 82 (set (mem/f:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245]) [1 _143->yy_input_file+0 S8 A64])
        (reg/f:DI 5 di [orig:450 yyin ] [450])) lex.yy.c:1158 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (expr_list:REG_DEAD (reg/f:DI 5 di [orig:450 yyin ] [450])
            (nil))))
(insn 732 731 729 82 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) lex.yy.c:1159 89 {*movdi_internal}
     (nil))
(insn:TI 729 732 733 82 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 0 ax [orig:154 D.6777 ] [154])) lex.yy.c:1157 90 {*movsi_internal}
     (nil))
(insn:TI 733 729 734 82 (set (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 60 [0x3c])) [2 _162->yy_buffer_status+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1159 90 {*movsi_internal}
     (nil))
;;  succ:       83 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 83, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 82, next block 84, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       82 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              81 [50.0%]  (CAN_FALLTHRU)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags] 39 [r10] 40 [r11]
;; live  kill	
(code_label 734 733 735 83 196 "" [1 uses])
(note 735 734 736 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn:TI 736 735 737 83 (set (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
        (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _927->yy_ch_buf+0 S8 A64])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
(insn 737 736 739 83 (set (reg:DI 39 r10 [orig:157 D.6790 ] [157])
        (sign_extend:DI (reg:SI 0 ax [orig:154 D.6777 ] [154]))) lex.yy.c:1169 142 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:154 D.6777 ] [154])
        (nil)))
(insn 739 737 1718 83 (set (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
        (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])) lex.yy.c:1169 89 {*movdi_internal}
     (nil))
(insn:TI 1718 739 740 83 (set (reg/f:DI 6 bp [orig:158 D.6783 ] [158])
        (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
            (reg:DI 39 r10 [orig:157 D.6790 ] [157]))) lex.yy.c:1169 214 {*leadi}
     (nil))
(insn:TI 740 1718 741 83 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 6 bp [orig:158 D.6783 ] [158])
            (reg/f:DI 0 ax [orig:244 D.6783 ] [244]))) lex.yy.c:1169 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 741 740 826 83 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2071)
            (pc))) lex.yy.c:1169 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 200 (nil)))
 -> 2071)
;;  succ:       151 [2.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              84 [98.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 84, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 83, next block 85, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       83 [98.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 39 [r10] 40 [r11]
;; lr  def 	 5 [di] 17 [flags] 39 [r10]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags] 39 [r10]
;; live  kill	
(note 826 741 830 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(note 830 826 827 84 NOTE_INSN_DELETED)
(debug_insn 827 830 831 84 (var_location:DI dest (reg/v/f:DI 40 r11 [orig:156 dest ] [156])) lex.yy.c:1276 -1
     (nil))
(insn:TI 831 827 828 84 (set (reg:DI 39 r10 [orig:476 D.6783 ] [476])
        (plus:DI (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
                (reg:DI 39 r10 [orig:157 D.6790 ] [157]))
            (const_int 1 [0x1]))) lex.yy.c:1281 214 {*leadi}
     (nil))
(insn 828 831 829 84 (set (reg/v/f:DI 5 di [orig:213 source ] [213])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1277 89 {*movdi_internal}
     (nil))
(debug_insn 829 828 832 84 (var_location:DI source (reg/v/f:DI 5 di [orig:213 source ] [213])) lex.yy.c:1277 -1
     (nil))
(insn:TI 832 829 833 84 (set (reg:CC 17 flags)
        (compare:CC (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
            (reg:DI 39 r10 [orig:476 D.6783 ] [476]))) lex.yy.c:1281 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 39 r10 [orig:476 D.6783 ] [476])
        (nil)))
(jump_insn:TI 833 832 839 84 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2072)
            (pc))) lex.yy.c:1281 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 2072)
;;  succ:       150 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              85 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 85, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 84, next block 86, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       84 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags] 37 [r8]
;; live  kill	
(note 839 833 1961 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1961 839 1962 85 (set (reg:SI 37 r8)
        (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 56 [0x38])) [2 _927->yy_fill_buffer+0 S4 A64])) lex.yy.c:1285 90 {*movsi_internal}
     (nil))
(insn:TI 1962 1961 841 85 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 37 r8)
            (const_int 0 [0]))) lex.yy.c:1285 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 37 r8)
        (nil)))
(jump_insn:TI 841 1962 842 85 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 849)
            (pc))) lex.yy.c:1285 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 849)
;;  succ:       86 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              101 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 86, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 85, next block 87, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       85 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(note 842 841 843 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn:TI 843 842 844 86 (parallel [
            (set (reg:DI 0 ax [orig:477 D.6788 ] [477])
                (minus:DI (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
                    (reg/v/f:DI 5 di [orig:213 source ] [213])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1287 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 844 843 845 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:477 D.6788 ] [477])
            (const_int 1 [0x1]))) lex.yy.c:1287 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:477 D.6788 ] [477])
        (nil)))
(jump_insn:TI 845 844 848 86 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1344)
            (pc))) lex.yy.c:1287 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1608 (nil)))
 -> 1344)
;;  succ:       149 [16.1%]  (CAN_FALLTHRU)
;;              87 [83.9%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 87, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 86, next block 88, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       86 [83.9%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	 3 [bx]
;; live  kill	
(note 848 845 34 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn:TI 34 848 1184 87 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (reg/f:DI 6 bp [orig:158 D.6783 ] [158])) lex.yy.c:1169 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:158 D.6783 ] [158])
        (nil)))
;;  succ:       88 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 42 [r13]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       87 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              147 [100.0%]  (CAN_FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 41 [r12]
;; live  kill	
(code_label 1184 34 1185 88 206 "" [1 uses])
(note 1185 1184 1186 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1186 1185 1187 88 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1187 1186 1188 88 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1188 1187 1189 88 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1189 1188 1190 88 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1190 1189 1191 88 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1191 1190 1192 88 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1192 1191 1193 88 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1193 1192 1194 88 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1194 1193 1195 88 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1195 1194 1196 88 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1196 1195 1197 88 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1197 1196 1198 88 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1198 1197 1199 88 (var_location:DI D#9 (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1199 1198 1200 88 (var_location:DI D#8 (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1200 1199 1201 88 (var_location:DI D#7 (ashift:DI (debug_expr:DI D#8)
        (const_int 3 [0x3]))) lex.yy.c:1248 -1
     (nil))
(debug_insn 1201 1200 1202 88 (var_location:DI D#6 (plus:DI (debug_expr:DI D#9)
        (debug_expr:DI D#7))) lex.yy.c:1248 -1
     (nil))
(debug_insn 1202 1201 1203 88 (var_location:DI D#5 (mem/f:DI (debug_expr:DI D#6) [0 +0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1203 1202 1204 88 (var_location:DI D#4 (mem/f/j:DI (plus:DI (debug_expr:DI D#5)
            (const_int 8 [0x8])) [0 D#5->yy_ch_buf+0 S8 A64])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1204 1203 1205 88 (var_location:SI D#3 (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) lex.yy.c:1248 -1
     (nil))
(debug_insn 1205 1204 1206 88 (var_location:DI D#2 (sign_extend:DI (debug_expr:SI D#3))) lex.yy.c:1248 -1
     (nil))
(insn:TI 1206 1205 1207 88 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1248 89 {*movdi_internal}
     (nil))
(call_insn:TI 1207 1206 1209 88 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1250 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(debug_insn 1209 1207 1210 88 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:160 yy_current_state ] [160])) lex.yy.c:1250 -1
     (nil))
(debug_insn 1210 1209 1214 88 (var_location:DI yy_cp (plus:DI (debug_expr:DI D#4)
        (debug_expr:DI D#2))) lex.yy.c:1252 -1
     (nil))
(insn:TI 1214 1210 1211 88 (set (reg:DI 0 ax [orig:516 yy_current_state ] [516])
        (sign_extend:DI (reg/v:SI 0 ax [orig:160 yy_current_state ] [160]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 1211 1214 1212 88 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1253 89 {*movdi_internal}
     (nil))
(debug_insn 1212 1211 1215 88 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:1253 -1
     (nil))
(insn:TI 1215 1212 2073 88 (set (reg:SI 1 dx)
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:516 yy_current_state ] [516])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16]))) 146 {extendhisi2}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:516 yy_current_state ] [516])
        (nil)))
(jump_insn 2073 1215 2074 88 (set (pc)
        (label_ref 278)) lex.yy.c:1254 654 {jump}
     (nil)
 -> 278)
;;  succ:       17 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 2074 2073 668)
;; basic block 89, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 88, next block 90, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 668 2074 669 89 180 "" [1 uses])
(note 669 668 66 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn:TI 66 669 2075 89 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 93 [0x5d])) mycc.l:99 90 {*movsi_internal}
     (nil))
(jump_insn 2075 66 2076 89 (set (pc)
        (label_ref 1225)) mycc.l:99 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2076 2075 664)
;; basic block 90, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 89, next block 91, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	
(code_label 664 2076 665 90 179 "" [1 uses])
(note 665 664 65 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn:TI 65 665 2077 90 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (const_int 91 [0x5b])) mycc.l:98 90 {*movsi_internal}
     (nil))
(jump_insn 2077 65 2078 90 (set (pc)
        (label_ref 1225)) mycc.l:98 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2078 2077 393)
;; basic block 91, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 90, next block 92, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 393 2078 394 91 143 "" [1 uses])
(note 394 393 395 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn:TI 395 394 4 91 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 5 [0x5])) mycc.l:43 90 {*movsi_internal}
     (nil))
(insn 4 395 5 91 (set (reg:SI 1 dx)
        (const_int 40 [0x28])) mycc.l:44 90 {*movsi_internal}
     (nil))
(insn 5 4 6 91 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (const_int 2 [0x2])) mycc.l:44 92 {*movhi_internal}
     (nil))
(insn:TI 6 5 2079 91 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (const_int 5 [0x5])) mycc.l:44 90 {*movsi_internal}
     (nil))
(jump_insn 2079 6 2080 91 (set (pc)
        (label_ref 396)) mycc.l:44 654 {jump}
     (nil)
 -> 396)
;;  succ:       40 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 2080 2079 379)
;; basic block 92, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 91, next block 93, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(code_label 379 2080 380 92 141 "" [1 uses])
(note 380 379 387 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(note 387 380 381 92 NOTE_INSN_DELETED)
(insn:TI 381 387 382 92 (set (reg:QI 0 ax [orig:414 yy_hold_char ] [414])
        (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])) lex.yy.c:885 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (symbol_ref:DI ("_ZL12yy_hold_char") [flags 0x2]  <var_decl 0x7f88bc0802d0 yy_hold_char>) [0 yy_hold_char+0 S1 A8])
        (nil)))
(insn:TI 382 381 388 92 (set (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_6+0 S1 A8])
        (reg:QI 0 ax [orig:414 yy_hold_char ] [414])) lex.yy.c:885 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (expr_list:REG_DEAD (reg:QI 0 ax [orig:414 yy_hold_char ] [414])
            (nil))))
(insn 388 382 383 92 (set (reg:DI 0 ax [orig:416 yy_last_accepting_state ] [416])
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 383 388 384 92 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])) lex.yy.c:886 89 {*movdi_internal}
     (nil))
(debug_insn 384 383 385 92 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:886 -1
     (nil))
(debug_insn 385 384 389 92 (var_location:SI yy_current_state (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])) lex.yy.c:887 -1
     (nil))
(insn:TI 389 385 2081 92 (set (reg:SI 1 dx)
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:416 yy_last_accepting_state ] [416])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16]))) 146 {extendhisi2}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:416 yy_last_accepting_state ] [416])
        (nil)))
(jump_insn 2081 389 2082 92 (set (pc)
        (label_ref 278)) lex.yy.c:888 654 {jump}
     (nil)
 -> 278)
;;  succ:       17 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 2082 2081 672)
;; basic block 93, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 92, next block 94, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	
(code_label 672 2082 673 93 181 "" [1 uses])
(note 673 672 674 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn:TI 674 673 675 93 (set (reg/f:DI 0 ax [orig:436 yytext ] [436])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:100 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (nil)))
(insn:TI 675 674 2083 93 (set (reg:SI 3 bx [orig:92 D.6777 ] [92])
        (sign_extend:SI (mem:QI (reg/f:DI 0 ax [orig:436 yytext ] [436]) [0 *_238+0 S1 A8]))) mycc.l:100 148 {extendqisi2}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:436 yytext ] [436])
        (nil)))
(jump_insn 2083 675 2084 93 (set (pc)
        (label_ref 1225)) mycc.l:100 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2084 2083 416)
;; basic block 94, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 93, next block 95, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(code_label 416 2084 417 94 147 "" [1 uses])
(note 417 416 418 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn:TI 418 417 10 94 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 3 [0x3])) mycc.l:49 90 {*movsi_internal}
     (nil))
(insn 10 418 11 94 (set (reg:SI 1 dx)
        (const_int 37 [0x25])) mycc.l:50 90 {*movsi_internal}
     (nil))
(insn 11 10 12 94 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (const_int 7 [0x7])) mycc.l:50 92 {*movhi_internal}
     (nil))
(insn:TI 12 11 2085 94 (set (reg:SI 0 ax [orig:341 D.6777 ] [341])
        (const_int 3 [0x3])) mycc.l:50 90 {*movsi_internal}
     (nil))
(jump_insn 2085 12 2086 94 (set (pc)
        (label_ref 396)) mycc.l:50 654 {jump}
     (nil)
 -> 396)
;;  succ:       40 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 2086 2085 678)
;; basic block 95, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 94, next block 96, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di]
;; live  kill	
(code_label 678 2086 679 95 182 "" [1 uses])
(note 679 678 680 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn:TI 680 679 681 95 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f88bbbf2ab0 *.LC20>)) mycc.l:101 89 {*movdi_internal}
     (nil))
(call_insn:TI 681 680 682 95 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7yyerrorPKc") [flags 0x41]  <function_decl 0x7f88bc13b0d8 yyerror>) [0 yyerror S1 A8])
            (const_int 0 [0]))) mycc.l:101 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z7yyerrorPKc") [flags 0x41]  <function_decl 0x7f88bc13b0d8 yyerror>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 682 681 1743 95 (set (reg:DI 1 dx)
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 1743 682 685 95 (set (reg:DI 0 ax)
        (reg:DI 1 dx)) 89 {*movdi_internal}
     (nil))
(insn 685 1743 688 95 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:438 D.6777 ] [438])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 688 685 2087 95 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:438 D.6777 ] [438])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
(jump_insn:TI 2087 688 2088 95 (set (pc)
        (label_ref 396)) mycc.l:102 654 {jump}
     (nil)
 -> 396)
;;  succ:       40 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 2088 2087 691)
;; basic block 96, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 95, next block 97, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(code_label 691 2088 692 96 183 "" [1 uses])
(note 692 691 693 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn:TI 693 692 695 96 (set (reg:DI 2 cx)
        (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 695 693 694 96 (set (reg:DI 4 si)
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn 694 695 696 96 (set (reg:DI 1 dx)
        (const_int 1 [0x1])) mycc.l:103 89 {*movdi_internal}
     (nil))
(insn:TI 696 694 697 96 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:103 89 {*movdi_internal}
     (nil))
(call_insn:TI 697 696 698 96 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f88bc2ff0d8 fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) mycc.l:103 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (expr_list:REG_CALL_DECL (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f88bc2ff0d8 fwrite>)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn:TI 698 697 1744 96 (set (reg:DI 1 dx)
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 1744 698 701 96 (set (reg:DI 0 ax)
        (reg:DI 1 dx)) 89 {*movdi_internal}
     (nil))
(insn 701 1744 704 96 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.6777 ] [442])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 704 701 2089 96 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:442 D.6777 ] [442])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
(jump_insn:TI 2089 704 2090 96 (set (pc)
        (label_ref 396)) 654 {jump}
     (nil)
 -> 396)
;;  succ:       40 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 2090 2089 437)
;; basic block 97, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 96, next block 98, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       27 [2.3%]  (LOOP_EXIT)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 437 2090 438 97 185 "" [3 uses])
(note 438 437 439 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 439 438 440 97 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) mycc.l:58 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn:TI 440 439 441 97 (set (reg/f:DI 0 ax [orig:168 D.6780 ] [168])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) mycc.l:60 89 {*movdi_internal}
     (nil))
(insn:TI 441 440 442 97 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:168 D.6780 ] [168])
            (const_int 0 [0]))) mycc.l:60 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 442 441 443 97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1338)
            (pc))) mycc.l:60 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 200 (nil)))
 -> 1338)
;;  succ:       160 [2.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              98 [98.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 7 [sp] 42 [r13]

;; basic block 98, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 97, next block 99, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       97 [98.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp] 42 [r13]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(note 443 442 444 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn:TI 444 443 445 98 (set (reg:DI 1 dx [orig:422 yy_buffer_stack_top ] [422])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) mycc.l:60 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 445 444 446 98 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:422 yy_buffer_stack_top ] [422])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [orig:168 D.6780 ] [168])) [1 *_224+0 S8 A64])
            (const_int 0 [0]))) mycc.l:60 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:422 yy_buffer_stack_top ] [422])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:168 D.6780 ] [168])
            (nil))))
(jump_insn:TI 446 445 151 98 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1338)
            (pc))) mycc.l:60 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 200 (nil)))
 -> 1338)
;;  succ:       160 [2.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              99 [98.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp] 42 [r13]
;; live  out 	 7 [sp] 42 [r13]

;; basic block 99, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 98, next block 100, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       98 [98.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx]
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx]
;; live  kill	
(note 151 446 152 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn:TI 152 151 1739 99 (set (reg:DI 1 dx)
        (sign_extend:DI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32]))) 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 1739 152 155 99 (set (reg:DI 0 ax)
        (reg:DI 1 dx)) 89 {*movdi_internal}
     (nil))
(insn 155 1739 158 99 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:367 D.6777 ] [367])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 158 155 2091 99 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:367 D.6777 ] [367])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
(jump_insn:TI 2091 158 2092 99 (set (pc)
        (label_ref 396)) 654 {jump}
     (nil)
 -> 396)
;;  succ:       40 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 42 [r13]

(barrier 2092 2091 1218)
;; basic block 100, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 99, next block 101, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       26 [2.2%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 1218 2092 1219 100 140 "" [1 uses])
(note 1219 1218 1220 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1220 1219 1221 100 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f88bbbf2d80 *.LC25>)) lex.yy.c:1261 89 {*movdi_internal}
     (nil))
(call_insn:TI 1221 1220 1222 100 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1261 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1222 1221 849)
;; basic block 101, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 100, next block 102, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       85 [50.0%]  (CAN_FALLTHRU)
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label 849 1222 850 101 204 "" [1 uses])
(note 850 849 852 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(note 852 850 1674 101 NOTE_INSN_DELETED)
(insn:TI 1674 852 851 101 (set (reg:DI 6 bp [orig:478 D.6788 ] [478])
        (reg/f:DI 0 ax [orig:244 D.6783 ] [244])) lex.yy.c:1307 89 {*movdi_internal}
     (nil))
(insn:TI 851 1674 853 101 (parallel [
            (set (reg:DI 6 bp [orig:478 D.6788 ] [478])
                (minus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
                    (reg/v/f:DI 5 di [orig:213 source ] [213])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1307 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 853 851 855 101 (var_location:DI number_to_move (plus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
        (const_int -1 [0xffffffffffffffff]))) lex.yy.c:1307 -1
     (nil))
(debug_insn 855 853 856 101 (var_location:DI i (const_int 0 [0])) -1
     (nil))
(debug_insn 856 855 857 101 (var_location:DI source (reg/v/f:DI 5 di [orig:213 source ] [213])) -1
     (nil))
(debug_insn 857 856 858 101 (var_location:DI dest (reg/v/f:DI 40 r11 [orig:156 dest ] [156])) -1
     (nil))
(insn:TI 858 857 859 101 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
                        (const_int -1 [0xffffffffffffffff]))
                    (const_int 0 [0])))
            (set (reg/v:DI 6 bp [orig:224 number_to_move ] [224])
                (plus:DI (reg:DI 6 bp [orig:478 D.6788 ] [478])
                    (const_int -1 [0xffffffffffffffff])))
        ]) lex.yy.c:1309 226 {*adddi_2}
     (nil))
(jump_insn:TI 859 858 1345 101 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 880)
            (pc))) lex.yy.c:1309 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 880)
;;  succ:       105 [9.0%]  (CAN_FALLTHRU)
;;              102 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 102, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 101, next block 103, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       101 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx]
;; live  kill	 17 [flags]
(note 1345 859 1960 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1960 1345 875 102 (parallel [
            (set (reg/v:DI 1 dx [orig:227 i ] [227])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1309 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       103 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]

;; basic block 103, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 102, next block 104, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       102 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              103 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 1 [dx] 5 [di] 6 [bp] 7 [sp] 40 [r11]
;; lr  def 	 1 [dx] 17 [flags] 39 [r10]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(code_label 875 1960 860 103 208 "" [1 uses])
(note 860 875 861 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(debug_insn 861 860 864 103 (var_location:DI i (reg/v:DI 1 dx [orig:227 i ] [227])) -1
     (nil))
(debug_insn 864 861 865 103 (var_location:DI D#17 (plus:DI (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
            (reg/v:DI 1 dx [orig:227 i ] [227]))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 865 864 866 103 (var_location:DI dest (debug_expr:DI D#17)) lex.yy.c:1310 -1
     (nil))
(debug_insn 866 865 867 103 (var_location:DI D#18 (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:213 source ] [213])
            (reg/v:DI 1 dx [orig:227 i ] [227]))
        (const_int 1 [0x1]))) -1
     (nil))
(debug_insn 867 866 868 103 (var_location:DI source (debug_expr:DI D#18)) lex.yy.c:1310 -1
     (nil))
(insn:TI 868 867 869 103 (set (reg:QI 39 r10 [orig:226 D.6789 ] [226])
        (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:213 source ] [213])
                (reg/v:DI 1 dx [orig:227 i ] [227])) [0 MEM[base: source_307, index: i_563, offset: 0B]+0 S1 A8])) lex.yy.c:1310 93 {*movqi_internal}
     (nil))
(insn:TI 869 868 870 103 (set (mem:QI (plus:DI (reg/v/f:DI 40 r11 [orig:156 dest ] [156])
                (reg/v:DI 1 dx [orig:227 i ] [227])) [0 MEM[base: dest_168, index: i_563, offset: 0B]+0 S1 A8])
        (reg:QI 39 r10 [orig:226 D.6789 ] [226])) lex.yy.c:1310 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 39 r10 [orig:226 D.6789 ] [226])
        (nil)))
(insn 870 869 872 103 (parallel [
            (set (reg/v:DI 1 dx [orig:227 i ] [227])
                (plus:DI (reg/v:DI 1 dx [orig:227 i ] [227])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1309 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 872 870 873 103 (var_location:DI i (reg/v:DI 1 dx [orig:227 i ] [227])) -1
     (nil))
(debug_insn 873 872 874 103 (var_location:DI source (debug_expr:DI D#18)) -1
     (nil))
(debug_insn 874 873 876 103 (var_location:DI dest (debug_expr:DI D#17)) -1
     (nil))
(insn:TI 876 874 877 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 6 bp [orig:224 number_to_move ] [224])
            (reg/v:DI 1 dx [orig:227 i ] [227]))) lex.yy.c:1309 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 877 876 878 103 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 875)
            (pc))) lex.yy.c:1309 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 875)
;;  succ:       104 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              103 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 40 [r11] 41 [r12] 42 [r13] 44 [r15]

;; basic block 104, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 103, next block 105, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       103 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 43 [r14]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 43 [r14]
;; live  kill	
(note 878 877 879 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn:TI 879 878 880 104 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       105 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 105, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 104, next block 106, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       104 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              101 [9.0%]  (CAN_FALLTHRU)
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 880 879 881 105 207 "" [1 uses])
(note 881 880 882 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn:TI 882 881 883 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                    (const_int 60 [0x3c])) [2 _944->yy_buffer_status+0 S4 A32])
            (const_int 2 [0x2]))) lex.yy.c:1312 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 883 882 2093 105 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1781)
            (pc))) lex.yy.c:1312 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7200 (nil)))
 -> 1781)
;;  succ:       106 [28.0%]  (FALLTHRU)
;;              111 [72.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       105 [28.0%]  (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	
(note 2093 883 2095 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 2095 2093 2096 106 (set (pc)
        (label_ref 2094)) 654 {jump}
     (nil)
 -> 2094)
;;  succ:       140 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 2096 2095 2098)
;; basic block 107, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 106, next block 108, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       112 [50.0%]  (CAN_FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 2 [cx] 17 [flags]
;; live  kill	
(code_label 2098 2096 913 107 307 "" [1 uses])
(note 913 2098 915 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(note 915 913 914 107 NOTE_INSN_DELETED)
(insn:TI 914 915 916 107 (set (reg:DI 2 cx [orig:237 D.6781 ] [237])
        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])) lex.yy.c:1334 89 {*movdi_internal}
     (nil))
(debug_insn 916 914 1680 107 (var_location:DI new_size (ashift:DI (reg:DI 2 cx [orig:237 D.6781 ] [237])
        (const_int 1 [0x1]))) lex.yy.c:1334 -1
     (nil))
(insn:TI 1680 916 917 107 (set (reg/v:DI 0 ax [orig:238 new_size ] [238])
        (reg:DI 2 cx [orig:237 D.6781 ] [237])) lex.yy.c:1336 89 {*movdi_internal}
     (nil))
(insn:TI 917 1680 918 107 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (ashift:DI (reg/v:DI 0 ax [orig:238 new_size ] [238])
                        (const_int 1 [0x1]))
                    (const_int 0 [0])))
            (set (reg/v:DI 0 ax [orig:238 new_size ] [238])
                (ashift:DI (reg/v:DI 0 ax [orig:238 new_size ] [238])
                    (const_int 1 [0x1])))
        ]) lex.yy.c:1336 521 {*ashldi3_cmp}
     (nil))
(jump_insn:TI 918 917 919 107 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 925)
            (pc))) lex.yy.c:1336 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 925)
;;  succ:       108 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              115 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 108, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 107, next block 109, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       107 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(note 919 918 1682 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1682 919 920 108 (set (reg:DI 0 ax [orig:482 D.6781 ] [482])
        (reg:DI 2 cx [orig:237 D.6781 ] [237])) lex.yy.c:1337 89 {*movdi_internal}
     (nil))
(insn:TI 920 1682 921 108 (parallel [
            (set (reg:DI 0 ax [orig:482 D.6781 ] [482])
                (lshiftrt:DI (reg:DI 0 ax [orig:482 D.6781 ] [482])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1337 546 {*lshrdi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 921 920 922 108 (parallel [
            (set (reg:DI 0 ax [orig:240 D.6781 ] [240])
                (plus:DI (reg:DI 0 ax [orig:482 D.6781 ] [482])
                    (reg:DI 2 cx [orig:237 D.6781 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1337 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:237 D.6781 ] [237])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 922 921 928 108 (set (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])
        (reg:DI 0 ax [orig:240 D.6781 ] [240])) lex.yy.c:1337 89 {*movdi_internal}
     (nil))
;;  succ:       109 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 109, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 108, next block 110, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       108 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              115 [100.0%]  (CAN_FALLTHRU)
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 5 [di] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(code_label 928 922 929 109 214 "" [1 uses])
(note 929 928 930 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(debug_insn 930 929 931 109 (var_location:DI ptr (reg/f:DI 5 di [orig:232 D.6783 ] [232])) lex.yy.c:1343 -1
     (nil))
(debug_insn 931 930 1714 109 (var_location:DI size (plus:DI (reg:DI 0 ax [orig:240 D.6781 ] [240])
        (const_int 2 [0x2]))) lex.yy.c:1343 -1
     (nil))
(insn:TI 1714 931 935 109 (set (reg:DI 4 si [orig:483 D.6781 ] [483])
        (plus:DI (reg:DI 0 ax [orig:240 D.6781 ] [240])
            (const_int 2 [0x2]))) lex.yy.c:2136 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:240 D.6781 ] [240])
        (nil)))
(call_insn:TI 935 1714 937 109 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(debug_insn 937 935 938 109 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1343 -1
     (nil))
(debug_insn 938 937 940 109 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1343 -1
     (nil))
(insn:TI 940 938 939 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:242 D.6793 ] [242])
            (const_int 0 [0]))) lex.yy.c:1349 4 {*cmpdi_ccno_1}
     (nil))
(insn 939 940 941 109 (set (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])
        (reg/f:DI 0 ax [orig:242 D.6793 ] [242])) lex.yy.c:1343 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (nil)))
(jump_insn:TI 941 939 954 109 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 948)
            (pc))) lex.yy.c:1349 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 948)
;;  succ:       114 (CAN_FALLTHRU,LOOP_EXIT)
;;              110 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 110, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 109, next block 111, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       109 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags] 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 43 [r14]
;; live  kill	 17 [flags]
(note 954 941 955 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn:TI 955 954 958 110 (set (reg:DI 1 dx [orig:484 D.6790 ] [484])
        (sign_extend:DI (mem/c:SI (reg/f:DI 7 sp) [9 %sfp+-32 S4 A64]))) lex.yy.c:1353 142 {*extendsidi2_rex64}
     (nil))
(insn 958 955 956 110 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (reg/f:DI 44 r15 [orig:152 D.6780 ] [152]) [1 *_142+0 S8 A64])) lex.yy.c:1355 89 {*movdi_internal}
     (nil))
(insn:TI 956 958 957 110 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.6783 ] [244])
                (plus:DI (reg/f:DI 0 ax [orig:242 D.6793 ] [242])
                    (reg:DI 1 dx [orig:484 D.6790 ] [484])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1353 218 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:484 D.6790 ] [484])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 957 956 1781 110 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:244 D.6783 ] [244])) lex.yy.c:1353 89 {*movdi_internal}
     (nil))
;;  succ:       111 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 111, loop depth 0, count 0, freq 15, maybe hot
;;  prev block 110, next block 112, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       110 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              105 [72.0%]  (CAN_FALLTHRU)
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	
(code_label 1781 957 1779 111 290 "" [1 uses])
(note 1779 1781 959 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(note 959 1779 961 111 NOTE_INSN_DELETED)
(note 961 959 1684 111 NOTE_INSN_DELETED)
(insn:TI 1684 961 960 111 (set (reg:DI 1 dx [orig:485 D.6781 ] [485])
        (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) lex.yy.c:1356 89 {*movdi_internal}
     (nil))
(insn:TI 960 1684 963 111 (set (reg:DI 1 dx [orig:485 D.6781 ] [485])
        (not:DI (reg:DI 1 dx [orig:485 D.6781 ] [485]))) lex.yy.c:1356 494 {*one_cmpldi2_1}
     (nil))
(debug_insn 963 960 965 111 (var_location:DI num_to_read (plus:DI (reg:DI 1 dx [orig:485 D.6781 ] [485])
        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _361->yy_buf_size+0 S8 A64]))) -1
     (nil))
(insn 965 963 966 111 (parallel [
            (set (reg:CCZ 17 flags)
                (compare:CCZ (plus:DI (reg:DI 1 dx [orig:485 D.6781 ] [485])
                        (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                                (const_int 24 [0x18])) [4  S8 A64]))
                    (const_int 0 [0])))
            (set (reg/v:DI 1 dx [orig:230 num_to_read ] [230])
                (plus:DI (reg:DI 1 dx [orig:485 D.6781 ] [485])
                    (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                            (const_int 24 [0x18])) [4  S8 A64])))
        ]) lex.yy.c:1323 226 {*adddi_2}
     (nil))
(jump_insn:TI 966 965 899 111 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2097)
            (pc))) lex.yy.c:1323 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 450 (nil)))
 -> 2097)
;;  succ:       116 [4.5%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              112 [95.5%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 112, loop depth 0, count 0, freq 14, maybe hot
;;  prev block 111, next block 113, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       111 [95.5%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(note 899 966 900 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(debug_insn 900 899 901 112 (var_location:DI num_to_read (const_int 0 [0])) -1
     (nil))
(debug_insn 901 900 902 112 (var_location:DI D#14 (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 902 901 903 112 (var_location:DI D#13 (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 903 902 904 112 (var_location:DI D#12 (ashift:DI (debug_expr:DI D#13)
        (const_int 3 [0x3]))) lex.yy.c:1327 -1
     (nil))
(debug_insn 904 903 905 112 (var_location:DI D#11 (plus:DI (debug_expr:DI D#14)
        (debug_expr:DI D#12))) lex.yy.c:1327 -1
     (nil))
(debug_insn 905 904 906 112 (var_location:DI D#10 (mem/f:DI (debug_expr:DI D#11) [0 +0 S8 A64])) lex.yy.c:1327 -1
     (nil))
(debug_insn 906 905 907 112 (var_location:DI b (debug_expr:DI D#10)) lex.yy.c:1327 -1
     (nil))
(insn:TI 907 906 1958 112 (set (reg/f:DI 5 di [orig:232 D.6783 ] [232])
        (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])) lex.yy.c:1330 89 {*movdi_internal}
     (nil))
(insn 1958 907 908 112 (set (reg:SI 1 dx)
        (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 36 [0x24])) [2 _986->yy_is_our_buffer+0 S4 A32])) lex.yy.c:1332 90 {*movsi_internal}
     (nil))
(insn:TI 908 1958 1959 112 (parallel [
            (set (reg:DI 0 ax [orig:481 D.6788 ] [481])
                (minus:DI (reg:DI 0 ax [orig:481 D.6788 ] [481])
                    (reg/f:DI 5 di [orig:232 D.6783 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1330 261 {*subdi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1959 908 1679 112 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx)
            (const_int 0 [0]))) lex.yy.c:1332 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 1 dx)
        (nil)))
(insn:TI 1679 1959 910 112 (set (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])
        (reg:DI 0 ax [orig:481 D.6788 ] [481])) lex.yy.c:1330 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:481 D.6788 ] [481])
        (nil)))
(debug_insn 910 1679 912 112 (var_location:SI yy_c_buf_p_offset (mem/c:SI (reg/f:DI 7 sp) [9 %sfp+-32 S4 A64])) lex.yy.c:1330 -1
     (nil))
(jump_insn 912 910 946 112 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2098)
            (pc))) lex.yy.c:1332 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 2098)
;;  succ:       107 [50.0%]  (CAN_FALLTHRU)
;;              113 [50.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 113, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 112, next block 114, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       112 [50.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 7 [sp] 43 [r14]
;; live  gen 	
;; live  kill	
(note 946 912 947 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn:TI 947 946 948 113 (set (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [1 _986->yy_ch_buf+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1347 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (nil)))
;;  succ:       114 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 114, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 113, next block 115, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       113 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              109 (CAN_FALLTHRU,LOOP_EXIT)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 948 947 949 114 215 "" [1 uses])
(note 949 948 950 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn:TI 950 949 951 114 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f88bbbf2bd0 *.LC22>)) lex.yy.c:1351 89 {*movdi_internal}
     (nil))
(call_insn:TI 951 950 952 114 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1351 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 952 951 925)
;; basic block 115, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 114, next block 116, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       107 [50.0%]  (CAN_FALLTHRU)
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 925 952 926 115 213 "" [1 uses])
(note 926 925 927 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn:TI 927 926 2099 115 (set (mem:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 24 [0x18])) [4 _986->yy_buf_size+0 S8 A64])
        (reg/v:DI 0 ax [orig:238 new_size ] [238])) lex.yy.c:1339 89 {*movdi_internal}
     (nil))
(jump_insn 2099 927 2100 115 (set (pc)
        (label_ref 928)) 654 {jump}
     (nil)
 -> 928)
;;  succ:       109 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 2100 2099 2097)
;; basic block 116, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 115, next block 117, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       111 [4.5%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 1 [dx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 1 [dx] 17 [flags]
;; live  kill	
(code_label 2097 2100 968 116 306 "" [1 uses])
(note 968 2097 969 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn:TI 969 968 1688 116 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 1 dx [orig:230 num_to_read ] [230])
            (const_int 8192 [0x2000]))) 8 {*cmpdi_1}
     (nil))
(insn 1688 969 971 116 (set (reg:DI 0 ax [592])
        (const_int 8192 [0x2000])) 89 {*movdi_internal}
     (nil))
(insn:TI 971 1688 1956 116 (set (reg/v:DI 1 dx [orig:309 num_to_read ] [309])
        (if_then_else:DI (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (reg/v:DI 1 dx [orig:309 num_to_read ] [309])
            (reg:DI 0 ax [592]))) 954 {*movdicc_noc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:DI 0 ax [592])
            (nil))))
(insn 1956 971 1687 116 (set (reg:SI 0 ax)
        (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 40 [0x28])) [2 _961->yy_is_interactive+0 S4 A64])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn:TI 1687 1956 972 116 (set (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])
        (reg/v:DI 1 dx [orig:309 num_to_read ] [309])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 1 dx [orig:309 num_to_read ] [309])
        (nil)))
(debug_insn 972 1687 1957 116 (var_location:DI num_to_read (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) -1
     (nil))
(insn:TI 1957 972 974 116 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax)
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn:TI 974 1957 1001 116 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2101)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 2101)
;;  succ:       131 [50.0%]  (CAN_FALLTHRU)
;;              117 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 117, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 116, next block 118, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       116 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 44 [r15]
;; live  kill	
(note 1001 974 1002 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(call_insn/u:TI 1002 1001 1003 117 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f88bbffbca8 __errno_location>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(insn:TI 1003 1002 1004 117 (set (reg/f:DI 44 r15 [orig:270 D.6794 ] [270])
        (reg:DI 0 ax)) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1004 1003 1043 117 (set (mem:SI (reg/f:DI 0 ax [orig:270 D.6794 ] [270]) [2 *_402+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1364 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:270 D.6794 ] [270])
        (nil)))
;;  succ:       118 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 118, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 117, next block 119, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       117 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              130 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 1043 1004 1005 118 225 "" [1 uses])
(note 1005 1043 1010 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(note 1010 1005 1006 118 NOTE_INSN_DELETED)
(debug_insn 1006 1010 1007 118 (var_location:DI __ptr (plus:DI (mem/f/j:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 8 [0x8])) [0 _971->yy_ch_buf+0 S8 A64])
        (reg/v:DI 6 bp [orig:224 number_to_move ] [224]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1007 1006 1008 118 (var_location:DI __size (const_int 1 [0x1])) lex.yy.c:1364 -1
     (nil))
(debug_insn 1008 1007 1009 118 (var_location:DI __n (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) lex.yy.c:1364 -1
     (nil))
(debug_insn 1009 1008 1689 118 (var_location:DI __stream (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 -1
     (nil))
(insn:TI 1689 1009 1011 118 (set (reg:DI 5 di [orig:488 D.6783 ] [488])
        (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1011 1689 1013 118 (parallel [
            (set (reg:DI 5 di [orig:488 D.6783 ] [488])
                (plus:DI (reg:DI 5 di [orig:488 D.6783 ] [488])
                    (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                            (const_int 8 [0x8])) [1 _971->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1013 1011 1012 118 (set (reg:DI 1 dx)
        (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn:TI 1012 1013 1014 118 (set (reg:DI 2 cx)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(insn 1014 1012 1016 118 (set (reg:DI 4 si)
        (const_int 1 [0x1])) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 89 {*movdi_internal}
     (nil))
(call_insn:TI 1016 1014 1018 118 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*fread") [flags 0x41]  <function_decl 0x7f88bbfb8870 __fread_alias>) [0 __fread_alias S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/stdio2.h:295 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("*fread") [flags 0x41]  <function_decl 0x7f88bbfb8870 __fread_alias>)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(debug_insn 1018 1016 1019 118 (var_location:DI __ptr (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1019 1018 1020 118 (var_location:DI __size (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1020 1019 1021 118 (var_location:DI __n (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(debug_insn 1021 1020 1024 118 (var_location:DI __stream (clobber (const_int 0 [0]))) lex.yy.c:1364 -1
     (nil))
(insn:TI 1024 1021 1022 118 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:274 D.6781 ] [274])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:274 D.6781 ] [274])
        (nil)))
(insn 1022 1024 1023 118 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (reg:SI 0 ax [orig:274 D.6781 ] [274])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 1023 1022 1025 118 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 0 ax [orig:274 D.6781 ] [274])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(jump_insn:TI 1025 1023 1263 118 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2102)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 2102)
;;  succ:       127 [29.0%]  (CAN_FALLTHRU)
;;              119 [71.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 119, loop depth 0, count 0, freq 6, maybe hot
;;  prev block 118, next block 120, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       118 [71.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              128 [100.0%]  (CAN_FALLTHRU)
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 44 [r15]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx] 4 [si] 44 [r15]
;; live  kill	
(code_label 1263 1025 1264 119 223 "" [1 uses])
(note 1264 1263 1266 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(note 1266 1264 1265 119 NOTE_INSN_DELETED)
(insn:TI 1265 1266 1267 119 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1267 1265 1268 119 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 1268 1267 1046 119 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) 214 {*leadi}
     (nil))
;;  succ:       120 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 120, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 119, next block 121, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       119 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              138 [100.0%]  (CAN_FALLTHRU)
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 1 [dx] 7 [sp] 44 [r15]
;; lr  def 	 17 [flags] 39 [r10] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags] 39 [r10] 43 [r14]
;; live  kill	 17 [flags]
(code_label 1046 1268 1047 120 222 "" [1 uses])
(note 1047 1046 1048 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1048 1047 1954 120 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_1064+0 S8 A64])) lex.yy.c:1367 89 {*movdi_internal}
     (nil))
(insn 1954 1048 1050 120 (parallel [
            (set (reg:DI 43 r14 [orig:308 ret_val ] [308])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1387 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1050 1954 1049 120 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:275 D.6777 ] [275])
            (const_int 0 [0]))) lex.yy.c:1370 3 {*cmpsi_ccno_1}
     (nil))
(insn:TI 1049 1050 1051 120 (set (mem:SI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 32 [0x20])) [2 _429->yy_n_chars+0 S4 A64])
        (reg:SI 1 dx [orig:275 D.6777 ] [275])) lex.yy.c:1367 90 {*movsi_internal}
     (nil))
(jump_insn 1051 1049 1052 120 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1078)
            (pc))) lex.yy.c:1370 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1078)
;;  succ:       121 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              123 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 121, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 120, next block 122, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       120 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              140 [100.0%]  (CAN_FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1052 1051 1053 121 210 "" [1 uses])
(note 1053 1052 1054 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1054 1053 1055 121 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 6 bp [orig:224 number_to_move ] [224])
            (const_int 0 [0]))) lex.yy.c:1372 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 1055 1054 1069 121 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2103)
            (pc))) lex.yy.c:1372 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 2103)
;;  succ:       141 [29.0%]  (CAN_FALLTHRU)
;;              122 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 122, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 121, next block 123, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       121 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 39 [r10] 43 [r14] 44 [r15]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
(note 1069 1055 1072 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(note 1072 1069 1070 122 NOTE_INSN_DELETED)
(debug_insn 1070 1072 1074 122 (var_location:SI ret_val (const_int 2 [0x2])) lex.yy.c:1380 -1
     (nil))
(insn:TI 1074 1070 1077 122 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1381 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
            (nil))))
(insn 1077 1074 31 122 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn 31 1077 1075 122 (set (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
        (const_int 2 [0x2])) lex.yy.c:1380 90 {*movsi_internal}
     (nil))
(insn:TI 1075 31 1076 122 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_436+0 S8 A64])) lex.yy.c:1381 89 {*movdi_internal}
     (nil))
(insn:TI 1076 1075 1078 122 (set (mem:SI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 60 [0x3c])) [2 _437->yy_buffer_status+0 S4 A32])
        (const_int 2 [0x2])) lex.yy.c:1382 90 {*movsi_internal}
     (nil))
;;  succ:       123 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 123, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 122, next block 124, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       120 [50.0%]  (CAN_FALLTHRU)
;;              122 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              141 [100.0%]  (CAN_FALLTHRU)
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 6 [bp] 7 [sp] 39 [r10]
;; lr  def 	 2 [cx] 6 [bp] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 6 [bp] 17 [flags]
;; live  kill	
(code_label 1078 1076 1079 123 226 "" [2 uses])
(note 1079 1078 1080 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1080 1079 1713 123 (var_location:SI ret_val (reg/v:SI 43 r14 [orig:308 ret_val ] [308])) -1
     (nil))
(insn:TI 1713 1080 1083 123 (set (reg:SI 2 cx [orig:287 D.6795 ] [287])
        (plus:SI (reg:SI 1 dx [orig:275 D.6777 ] [275])
            (reg:SI 6 bp [orig:224 number_to_move ] [224]))) lex.yy.c:1389 213 {*leasi}
     (expr_list:REG_DEAD (reg:SI 6 bp [orig:224 number_to_move ] [224])
        (nil)))
(insn:TI 1083 1713 1084 123 (set (reg:DI 6 bp [orig:289 D.6781 ] [289])
        (sign_extend:DI (reg:SI 2 cx [orig:287 D.6795 ] [287]))) lex.yy.c:1389 142 {*extendsidi2_rex64}
     (nil))
(insn 1084 1083 1085 123 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 6 bp [orig:289 D.6781 ] [289])
            (mem:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                    (const_int 24 [0x18])) [4 _957->yy_buf_size+0 S8 A64]))) lex.yy.c:1389 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 1085 1084 1110 123 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2104)
            (pc))) lex.yy.c:1389 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 2104)
;;  succ:       145 [29.0%]  (CAN_FALLTHRU)
;;              124 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 124, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 123, next block 125, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       123 [71.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	 0 [ax]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 1110 1085 1111 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1111 1110 1112 124 (set (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
        (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (nil)))
;;  succ:       125 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 125, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 124, next block 126, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       124 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              145 [100.0%]  (CAN_FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 2 [cx] 6 [bp] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 1112 1111 1113 125 229 "" [1 uses])
(note 1113 1112 1115 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1115 1113 1116 125 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
                (reg:DI 6 bp [orig:289 D.6781 ] [289])) [0 *_461+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1398 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
        (nil)))
(insn 1116 1115 1134 125 (set (reg/f:DI 0 ax [orig:503 *_955 ] [503])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) lex.yy.c:1399 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])
        (nil)))
(insn 1134 1116 1114 125 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
            (const_int 1 [0x1]))) lex.yy.c:1205 7 {*cmpsi_1}
     (nil))
(insn:TI 1114 1134 1117 125 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 2 cx [orig:287 D.6795 ] [287])) lex.yy.c:1397 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:287 D.6795 ] [287])
        (nil)))
(insn:TI 1117 1114 1118 125 (set (reg/f:DI 0 ax [orig:504 _462->yy_ch_buf ] [504])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:503 *_955 ] [503])
                (const_int 8 [0x8])) [1 _462->yy_ch_buf+0 S8 A64])) lex.yy.c:1399 89 {*movdi_internal}
     (nil))
(insn:TI 1118 1117 1119 125 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 0 ax [orig:504 _462->yy_ch_buf ] [504])
                    (reg:DI 6 bp [orig:289 D.6781 ] [289]))
                (const_int 1 [0x1])) [0 *_465+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1399 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:504 _462->yy_ch_buf ] [504])
        (nil)))
(insn 1119 1118 1120 125 (set (reg/f:DI 0 ax [orig:505 *_955 ] [505])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) lex.yy.c:1401 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])
        (nil)))
(insn:TI 1120 1119 1121 125 (set (reg/f:DI 0 ax [orig:306 D.6783 ] [306])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:505 *_955 ] [505])
                (const_int 8 [0x8])) [1 _466->yy_ch_buf+0 S8 A64])) lex.yy.c:1401 89 {*movdi_internal}
     (nil))
(insn:TI 1121 1120 1122 125 (set (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])
        (reg/f:DI 0 ax [orig:306 D.6783 ] [306])) lex.yy.c:1401 89 {*movdi_internal}
     (nil))
(debug_insn 1122 1121 1123 125 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1123 1122 1124 125 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1124 1123 1125 125 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1125 1124 1126 125 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1126 1125 1127 125 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1127 1126 1128 125 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1128 1127 1129 125 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1129 1128 1130 125 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1130 1129 1131 125 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1131 1130 1132 125 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1132 1131 1133 125 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1133 1132 1135 125 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(jump_insn 1135 1133 1147 125 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2105)
            (pc))) lex.yy.c:1205 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 2105)
;;  succ:       126 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              142 (CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 126, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 125, next block 127, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       125 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              149 [100.0%]  (CAN_FALLTHRU)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	 17 [flags]
(code_label 1147 1135 1148 126 205 "" [1 uses])
(note 1148 1147 1162 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(note 1162 1148 1149 126 NOTE_INSN_DELETED)
(debug_insn 1149 1162 1150 126 (var_location:SI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1150 1149 1151 126 (var_location:DI n (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1151 1150 1152 126 (var_location:SI c (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1152 1151 1153 126 (var_location:DI new_size (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1153 1152 1154 126 (var_location:SI yy_c_buf_p_offset (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1154 1153 1155 126 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1155 1154 1156 126 (var_location:DI num_to_read (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1156 1155 1157 126 (var_location:SI ret_val (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1157 1156 1158 126 (var_location:DI i (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1158 1157 1159 126 (var_location:DI number_to_move (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1159 1158 1160 126 (var_location:DI source (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(debug_insn 1160 1159 1161 126 (var_location:DI dest (clobber (const_int 0 [0]))) lex.yy.c:1205 -1
     (nil))
(insn:TI 1161 1160 1695 126 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/f:DI 0 ax [orig:306 D.6783 ] [306])) lex.yy.c:1222 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:306 D.6783 ] [306])
        (nil)))
(insn 1695 1161 1163 126 (set (reg:SI 0 ax [596])
        (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])) lex.yy.c:1224 90 {*movsi_internal}
     (nil))
(insn:TI 1163 1695 1696 126 (parallel [
            (set (reg:SI 0 ax [orig:508 D.6777 ] [508])
                (plus:SI (reg:SI 0 ax [596])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUAL (plus:SI (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn:TI 1696 1163 1164 126 (set (reg:SI 1 dx [511])
        (reg:SI 0 ax [orig:508 D.6777 ] [508])) lex.yy.c:1224 90 {*movsi_internal}
     (nil))
(insn:TI 1164 1696 1165 126 (parallel [
            (set (reg:SI 1 dx [511])
                (lshiftrt:SI (reg:SI 1 dx [511])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 544 {*lshrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1165 1164 1166 126 (parallel [
            (set (reg:SI 1 dx [512])
                (plus:SI (reg:SI 1 dx [511])
                    (reg:SI 0 ax [orig:508 D.6777 ] [508])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:508 D.6777 ] [508])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 1166 1165 1167 126 (parallel [
            (set (reg:SI 1 dx [orig:513 D.6777 ] [513])
                (ashiftrt:SI (reg:SI 1 dx [512])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 545 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1167 1166 1168 126 (parallel [
            (set (reg/v:SI 1 dx [orig:90 yy_act ] [90])
                (plus:SI (reg:SI 1 dx [orig:513 D.6777 ] [513])
                    (const_int 47 [0x2f])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1224 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 1168 1167 2106 126 (var_location:SI yy_act (reg/v:SI 1 dx [orig:90 yy_act ] [90])) lex.yy.c:1224 -1
     (nil))
(jump_insn 2106 1168 2107 126 (set (pc)
        (label_ref 347)) lex.yy.c:1225 654 {jump}
     (nil)
 -> 347)
;;  succ:       26 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 2107 2106 2102)
;; basic block 127, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 126, next block 128, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       118 [29.0%]  (CAN_FALLTHRU)
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 2102 2107 1026 127 309 "" [1 uses])
(note 1026 2102 1027 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1027 1026 1028 127 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn:TI 1028 1027 1030 127 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 1030 1028 1031 127 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:277 D.6777 ] [277])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:277 D.6777 ] [277])
        (nil)))
(jump_insn:TI 1031 1030 1032 127 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1271)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 1271)
;;  succ:       129 [50.0%]  (CAN_FALLTHRU)
;;              128 [50.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 128, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 127, next block 129, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       127 [50.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 1 [dx]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx]
;; live  kill	
(note 1032 1031 1033 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1033 1032 2108 128 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(jump_insn 2108 1033 2109 128 (set (pc)
        (label_ref 1263)) 654 {jump}
     (nil)
 -> 1263)
;;  succ:       119 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 2109 2108 1271)
;; basic block 129, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 128, next block 130, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       127 [50.0%]  (CAN_FALLTHRU)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1271 2109 1272 129 224 "" [1 uses])
(note 1272 1271 1274 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1274 1272 1275 129 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (reg/f:DI 44 r15 [orig:270 D.6794 ] [270]) [2 *_402+0 S4 A32])
            (const_int 4 [0x4]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 1275 1274 1036 129 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1273)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1273)
;;  succ:       136 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              130 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 130, loop depth 0, count 0, freq 7, maybe hot
;;  prev block 129, next block 131, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       129 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 43 [r14]
;; live  kill	
(note 1036 1275 1038 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1038 1036 1037 130 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1037 1038 1039 130 (set (mem:SI (reg/f:DI 44 r15 [orig:270 D.6794 ] [270]) [2 *_402+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(call_insn:TI 1039 1037 1041 130 (call (mem:QI (symbol_ref:DI ("clearerr") [flags 0x41]  <function_decl 0x7f88bbf95510 clearerr>) [0 clearerr S1 A8])
        (const_int 0 [0])) lex.yy.c:1364 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("clearerr") [flags 0x41]  <function_decl 0x7f88bbf95510 clearerr>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 1041 1039 1660 130 (set (reg/f:DI 0 ax [orig:491 yy_buffer_stack ] [491])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 1660 1041 1042 130 (set (reg:DI 1 dx [orig:490 yy_buffer_stack_top ] [490])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 1042 1660 2110 130 (set (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:490 yy_buffer_stack_top ] [490])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:491 yy_buffer_stack ] [491])) [1 *_969+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [orig:490 yy_buffer_stack_top ] [490])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:491 yy_buffer_stack ] [491])
            (nil))))
(jump_insn 2110 1042 2111 130 (set (pc)
        (label_ref 1043)) 654 {jump}
     (nil)
 -> 1043)
;;  succ:       118 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 2111 2110 2101)
;; basic block 131, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 130, next block 132, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       116 [50.0%]  (CAN_FALLTHRU)
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 17 [flags] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 43 [r14]
;; live  kill	 17 [flags]
(code_label 2101 2111 975 131 308 "" [1 uses])
(note 975 2101 1955 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1955 975 2112 131 (parallel [
            (set (reg/v:DI 43 r14 [orig:212 n ] [212])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 2112 1955 2113 131 (set (pc)
        (label_ref 1256)) 654 {jump}
     (nil)
 -> 1256)
;;  succ:       134 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

(barrier 2113 2112 2115)
;; basic block 132, loop depth 0, count 0, freq 2, maybe hot
;;  prev block 131, next block 133, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       134 [72.0%]  (CAN_FALLTHRU)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 2115 2113 985 132 314 "" [1 uses])
(note 985 2115 986 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn:TI 986 985 987 132 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:251 c ] [251])
            (const_int 10 [0xa]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 987 986 1240 132 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2114)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 2114)
;;  succ:       133 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              139 [28.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 133, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 132, next block 134, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       132 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 1240 987 1244 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(note 1244 1240 1248 133 NOTE_INSN_DELETED)
(note 1248 1244 1250 133 NOTE_INSN_DELETED)
(note 1250 1248 1701 133 NOTE_INSN_DELETED)
(note 1701 1250 1709 133 NOTE_INSN_DELETED)
(note 1709 1701 1242 133 NOTE_INSN_DELETED)
(debug_insn 1242 1709 1243 133 (var_location:SI c (debug_expr:SI D#20)) -1
     (nil))
(insn:TI 1243 1242 1245 133 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1245 1243 1699 133 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1699 1245 1252 133 (set (reg:DI 5 di [523])
        (reg/v:DI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn:TI 1252 1699 1254 133 (parallel [
            (set (reg/v:DI 43 r14 [orig:212 n ] [212])
                (plus:DI (reg/v:DI 43 r14 [orig:212 n ] [212])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 1254 1252 1255 133 (var_location:DI n (reg/v:DI 43 r14 [orig:212 n ] [212])) -1
     (nil))
(debug_insn 1255 1254 1246 133 (var_location:SI c (debug_expr:SI D#20)) -1
     (nil))
(insn:TI 1246 1255 1247 133 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1364 214 {*leadi}
     (nil))
(insn:TI 1247 1246 1249 133 (set (reg/f:DI 1 dx [orig:521 *_379 ] [521])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_379+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_379+0 S8 A64])
        (nil)))
(insn:TI 1249 1247 1257 133 (parallel [
            (set (reg:DI 5 di [523])
                (plus:DI (reg:DI 5 di [523])
                    (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:521 *_379 ] [521])
                            (const_int 8 [0x8])) [1 _380->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:521 *_379 ] [521])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 1257 1249 1251 133 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 43 r14 [orig:212 n ] [212])
            (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64]))) lex.yy.c:1364 8 {*cmpdi_1}
     (nil))
(insn:TI 1251 1257 1258 133 (set (mem:QI (plus:DI (reg:DI 5 di [523])
                (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) [0 *_383+0 S1 A8])
        (reg:QI 0 ax [orig:251 c ] [251])) lex.yy.c:1364 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [523])
        (expr_list:REG_DEAD (reg:QI 0 ax [orig:251 c ] [251])
            (nil))))
(jump_insn 1258 1251 1256 133 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1260)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 1200 (nil)))
 -> 1260)
;;  succ:       134 [88.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              138 [12.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 134, loop depth 0, count 0, freq 3, maybe hot
;;  prev block 133, next block 135, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       133 [88.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              131 [100.0%]  (CAN_FALLTHRU)
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 1256 1258 976 134 232 "" [1 uses])
(note 976 1256 977 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(debug_insn 977 976 978 134 (var_location:DI n (reg/v:DI 43 r14 [orig:212 n ] [212])) -1
     (nil))
(debug_insn 978 977 979 134 (var_location:SI c (const_int 42 [0x2a])) -1
     (nil))
(insn:TI 979 978 980 134 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn:TI 980 979 1355 134 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f88bbf40510 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f88bbf40510 _IO_getc>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 1355 980 982 134 (var_location:SI D#20 (reg:SI 0 ax)) -1
     (nil))
(debug_insn 982 1355 983 134 (var_location:SI c (debug_expr:SI D#20)) lex.yy.c:1364 -1
     (nil))
(insn:TI 983 982 984 134 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:251 c ] [251])
            (const_int -1 [0xffffffffffffffff]))) lex.yy.c:1364 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 984 983 1300 134 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2115)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 7201 (nil)))
 -> 2115)
;;  succ:       132 [72.0%]  (CAN_FALLTHRU)
;;              135 [28.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 135, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 134, next block 136, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       134 [28.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(note 1300 984 1303 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1303 1300 1304 135 (var_location:SI c (const_int -1 [0xffffffffffffffff])) -1
     (nil))
(debug_insn 1304 1303 1305 135 (var_location:DI n (reg/v:DI 43 r14 [orig:212 n ] [212])) -1
     (nil))
(insn:TI 1305 1304 1306 135 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn:TI 1306 1305 1308 135 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) lex.yy.c:1364 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f88bbf956c0 ferror>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 1308 1306 1309 135 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:268 D.6777 ] [268])
            (const_int 0 [0]))) lex.yy.c:1364 3 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 0 ax [orig:268 D.6777 ] [268])
        (nil)))
(jump_insn:TI 1309 1308 1273 135 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2116)
            (pc))) lex.yy.c:1364 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 2116)
;;  succ:       136 [50.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              137 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 136, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 135, next block 137, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       135 [50.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              129 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 1273 1309 991 136 234 "" [1 uses])
(note 991 1273 992 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(insn:TI 992 991 993 136 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f88bbbf2c60 *.LC23>)) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(call_insn:TI 993 992 994 136 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1364 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 994 993 2116)
;; basic block 137, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 136, next block 138, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       135 [50.0%]  (CAN_FALLTHRU)
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 2 [cx] 4 [si] 44 [r15]
;; live  kill	
(code_label 2116 994 1310 137 315 "" [1 uses])
(note 1310 2116 1312 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(note 1312 1310 1311 137 NOTE_INSN_DELETED)
(insn:TI 1311 1312 1313 137 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 1313 1311 1314 137 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn:TI 1314 1313 1260 137 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) 214 {*leadi}
     (nil))
;;  succ:       138 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 138, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 137, next block 139, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       137 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              133 [12.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              139 [100.0%]  (CAN_FALLTHRU)
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 1 [dx]
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx]
;; live  kill	
(code_label 1260 1314 995 138 233 "" [2 uses])
(note 995 1260 996 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(insn:TI 996 995 997 138 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (reg:SI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 90 {*movsi_internal}
     (nil))
(insn 997 996 2117 138 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (reg:SI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 43 r14 [orig:212 n ] [212])
        (nil)))
(jump_insn 2117 997 2118 138 (set (pc)
        (label_ref 1046)) 654 {jump}
     (nil)
 -> 1046)
;;  succ:       120 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

(barrier 2118 2117 2114)
;; basic block 139, loop depth 0, count 0, freq 1, maybe hot
;;  prev block 138, next block 140, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       132 [28.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 43 [r14] 44 [r15]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(code_label 2114 2118 1281 139 313 "" [1 uses])
(note 1281 2114 1286 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(note 1286 1281 1289 139 NOTE_INSN_DELETED)
(note 1289 1286 1292 139 NOTE_INSN_DELETED)
(note 1292 1289 1294 139 NOTE_INSN_DELETED)
(note 1294 1292 1284 139 NOTE_INSN_DELETED)
(debug_insn 1284 1294 1290 139 (var_location:SI c (const_int 10 [0xa])) -1
     (nil))
(debug_insn 1290 1284 1285 139 (var_location:DI n (plus:DI (reg/v:DI 43 r14 [orig:212 n ] [212])
        (const_int 1 [0x1]))) lex.yy.c:1364 -1
     (nil))
(insn:TI 1285 1290 1287 139 (set (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1287 1285 1702 139 (set (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn 1702 1287 1952 139 (set (reg:DI 5 di [533])
        (reg/v:DI 43 r14 [orig:212 n ] [212])) lex.yy.c:1364 89 {*movdi_internal}
     (nil))
(insn:TI 1952 1702 1288 139 (parallel [
            (set (reg/v:DI 43 r14 [orig:212 n ] [212])
                (plus:DI (reg/v:DI 43 r14 [orig:212 n ] [212])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1288 1952 1291 139 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 4 si [orig:540 yy_buffer_stack_top ] [540])
                (const_int 8 [0x8]))
            (reg/f:DI 2 cx [orig:541 yy_buffer_stack ] [541]))) lex.yy.c:1364 214 {*leadi}
     (nil))
(insn:TI 1291 1288 1293 139 (set (reg/f:DI 0 ax [orig:531 *_390 ] [531])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_390+0 S8 A64])) lex.yy.c:1364 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_390+0 S8 A64])
        (nil)))
(insn:TI 1293 1291 1295 139 (parallel [
            (set (reg:DI 5 di [533])
                (plus:DI (reg:DI 5 di [533])
                    (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:531 *_390 ] [531])
                            (const_int 8 [0x8])) [1 _391->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1364 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:531 *_390 ] [531])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 1295 1293 1296 139 (set (mem:QI (plus:DI (reg:DI 5 di [533])
                (reg/v:DI 6 bp [orig:224 number_to_move ] [224])) [0 *_395+0 S1 A8])
        (const_int 10 [0xa])) lex.yy.c:1364 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [533])
        (nil)))
(debug_insn 1296 1295 2119 139 (var_location:DI n (clobber (const_int 0 [0]))) -1
     (nil))
(jump_insn 2119 1296 2120 139 (set (pc)
        (label_ref 1260)) 654 {jump}
     (nil)
 -> 1260)
;;  succ:       138 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 2120 2119 2094)
;; basic block 140, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 139, next block 141, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       106 [100.0%]  (CAN_FALLTHRU)
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	
;; live  kill	
(code_label 2094 2120 884 140 305 "" [1 uses])
(note 884 2094 885 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(insn:TI 885 884 886 140 (set (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1316 90 {*movsi_internal}
     (nil))
(insn 886 885 2121 140 (set (mem:SI (plus:DI (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
                (const_int 32 [0x20])) [2 _944->yy_n_chars+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1316 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 43 r14 [orig:245 D.6782 ] [245])
        (nil)))
(jump_insn 2121 886 2122 140 (set (pc)
        (label_ref 1052)) 654 {jump}
     (nil)
 -> 1052)
;;  succ:       121 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 2122 2121 2103)
;; basic block 141, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 140, next block 142, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       121 [29.0%]  (CAN_FALLTHRU)
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 39 [r10] 43 [r14] 44 [r15]
;; live  kill	
(code_label 2103 2122 1056 141 310 "" [1 uses])
(note 1056 2103 1062 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(note 1062 1056 1057 141 NOTE_INSN_DELETED)
(debug_insn 1057 1062 1058 141 (var_location:SI ret_val (const_int 1 [0x1])) lex.yy.c:1374 -1
     (nil))
(insn:TI 1058 1057 30 141 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1375 89 {*movdi_internal}
     (nil))
(insn 30 1058 1059 141 (set (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
        (const_int 1 [0x1])) lex.yy.c:1374 90 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(call_insn:TI 1059 30 1063 141 (call (mem:QI (symbol_ref:DI ("_Z9yyrestartP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c1b0 yyrestart>) [0 yyrestart S1 A8])
        (const_int 0 [0])) lex.yy.c:1375 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z9yyrestartP8_IO_FILE") [flags 0x3]  <function_decl 0x7f88bc07c1b0 yyrestart>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 1063 1059 1659 141 (set (reg/f:DI 0 ax [orig:494 yy_buffer_stack ] [494])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (nil)))
(insn 1659 1063 1060 141 (set (reg:DI 2 cx [orig:493 yy_buffer_stack_top ] [493])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 1060 1659 1064 141 (set (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (mem/c:SI (symbol_ref:DI ("_ZL10yy_n_chars") [flags 0x2]  <var_decl 0x7f88bc080360 yy_n_chars>) [2 yy_n_chars+0 S4 A32])) 90 {*movsi_internal}
     (nil))
(insn:TI 1064 1060 1065 141 (set (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (plus:DI (mult:DI (reg:DI 2 cx [orig:493 yy_buffer_stack_top ] [493])
                (const_int 8 [0x8]))
            (reg/f:DI 0 ax [orig:494 yy_buffer_stack ] [494]))) 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 2 cx [orig:493 yy_buffer_stack_top ] [493])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:494 yy_buffer_stack ] [494])
            (nil))))
(insn:TI 1065 1064 2123 141 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_954+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 2123 1065 2124 141 (set (pc)
        (label_ref 1078)) 654 {jump}
     (nil)
 -> 1078)
;;  succ:       123 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 2124 2123 2105)
;; basic block 142, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 141, next block 143, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       125 (CAN_FALLTHRU,LOOP_EXIT)
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 2105 2124 1351 142 312 "" [1 uses])
(note 1351 2105 1136 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1136 1351 1137 142 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
            (const_int 2 [0x2]))) lex.yy.c:1205 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 43 r14 [orig:308 ret_val ] [308])
        (nil)))
(jump_insn:TI 1137 1136 1172 142 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 2125)
            (pc))) lex.yy.c:1205 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2900 (nil)))
 -> 2125)
;;  succ:       147 [29.0%]  (CAN_FALLTHRU)
;;              143 [71.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]

;; basic block 143, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 142, next block 144, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       142 [71.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 3 [bx] 41 [r12]
;; live  kill	 17 [flags]
(note 1172 1137 1698 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(note 1698 1172 1710 143 NOTE_INSN_DELETED)
(note 1710 1698 1173 143 NOTE_INSN_DELETED)
(insn:TI 1173 1710 1174 143 (set (reg:DI 3 bx [orig:514 D.6790 ] [514])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [9 %sfp+-24 S4 A32]))) lex.yy.c:1238 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 1174 1173 1175 143 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg:DI 3 bx [orig:514 D.6790 ] [514])
                    (reg/f:DI 0 ax [orig:306 D.6783 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1238 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:306 D.6783 ] [306])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn:TI 1175 1174 1176 143 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1238 89 {*movdi_internal}
     (nil))
(call_insn:TI 1176 1175 1178 143 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1240 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(debug_insn 1178 1176 1179 143 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:1240 -1
     (nil))
(debug_insn 1179 1178 1180 143 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1242 -1
     (nil))
(insn:TI 1180 1179 1181 143 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1243 89 {*movdi_internal}
     (nil))
(debug_insn 1181 1180 822 143 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:1243 -1
     (nil))
;;  succ:       144 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 144, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 143, next block 145, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       143 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              157 [100.0%]  (CAN_FALLTHRU)
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 2 [cx] 4 [si]
;; live  kill	
(code_label 822 1181 173 144 202 "" [1 uses])
(note 173 822 176 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(insn:TI 176 173 174 144 (set (reg:DI 1 dx [orig:371 yy_current_state ] [371])
        (sign_extend:DI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87]))) 142 {*extendsidi2_rex64}
     (nil))
(insn 174 176 177 144 (set (reg:DI 4 si)
        (zero_extend:DI (mem:QI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88]) [0 *yy_cp_147+0 S1 A8]))) 134 {zero_extendqidi2}
     (nil))
(insn:TI 177 174 180 144 (set (reg:HI 2 cx [orig:343 D.6786 ] [343])
        (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:371 yy_current_state ] [371])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16])) 92 {*movhi_internal}
     (nil))
(insn 180 177 2126 144 (set (reg:SI 1 dx)
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 1 dx [orig:371 yy_current_state ] [371])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) 139 {*zero_extendhisi2}
     (nil))
(jump_insn 2126 180 2127 144 (set (pc)
        (label_ref 181)) 654 {jump}
     (nil)
 -> 181)
;;  succ:       6 [100.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 41 [r12] 42 [r13]

(barrier 2127 2126 2104)
;; basic block 145, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 144, next block 146, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       123 [29.0%]  (CAN_FALLTHRU)
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 7 [sp] 39 [r10] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 2 [cx] 4 [si] 5 [di] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(code_label 2104 2127 1086 145 311 "" [1 uses])
(note 1086 2104 1087 145 [bb 145] NOTE_INSN_BASIC_BLOCK)
(debug_insn 1087 1086 1088 145 (var_location:SI new_size (plus:SI (ashiftrt:SI (reg:SI 1 dx [orig:275 D.6777 ] [275])
            (const_int 1 [0x1]))
        (reg:SI 2 cx [orig:287 D.6795 ] [287]))) lex.yy.c:1391 -1
     (nil))
(debug_insn 1088 1087 1089 145 (var_location:DI ptr (mem/f/j:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
            (const_int 8 [0x8])) [0 _957->yy_ch_buf+0 S8 A64])) lex.yy.c:1392 -1
     (nil))
(debug_insn 1089 1088 1691 145 (var_location:DI size (sign_extend:DI (plus:SI (ashiftrt:SI (reg:SI 1 dx [orig:275 D.6777 ] [275])
                (const_int 1 [0x1]))
            (reg:SI 2 cx [orig:287 D.6795 ] [287])))) lex.yy.c:1392 -1
     (nil))
(insn:TI 1691 1089 1093 145 (set (reg:SI 4 si [orig:498 D.6777 ] [498])
        (reg:SI 1 dx [orig:275 D.6777 ] [275])) lex.yy.c:2136 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:275 D.6777 ] [275])
        (nil)))
(insn 1093 1691 1707 145 (set (reg/f:DI 5 di [orig:501 _957->yy_ch_buf ] [501])
        (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])) lex.yy.c:2136 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])
        (nil)))
(insn 1707 1093 1090 145 (set (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [9 %sfp+-20 S4 A32])
        (reg:SI 2 cx [orig:287 D.6795 ] [287])) lex.yy.c:2136 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:287 D.6795 ] [287])
        (nil)))
(insn:TI 1090 1707 1705 145 (parallel [
            (set (reg:SI 4 si [orig:498 D.6777 ] [498])
                (ashiftrt:SI (reg:SI 4 si [orig:498 D.6777 ] [498])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 545 {*ashrsi3_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 1705 1090 1091 145 (set (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])
        (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])) lex.yy.c:2136 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (nil)))
(insn:TI 1091 1705 1092 145 (parallel [
            (set (reg:SI 4 si [orig:499 D.6795 ] [499])
                (plus:SI (reg:SI 4 si [orig:498 D.6777 ] [498])
                    (reg:SI 2 cx [orig:287 D.6795 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2136 217 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 1092 1091 1096 145 (set (reg:DI 4 si [orig:500 D.6781 ] [500])
        (sign_extend:DI (reg:SI 4 si [orig:499 D.6795 ] [499]))) lex.yy.c:2136 142 {*extendsidi2_rex64}
     (nil))
(call_insn:TI 1096 1092 1098 145 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(debug_insn 1098 1096 1099 145 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:1392 -1
     (nil))
(debug_insn 1099 1098 1706 145 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1392 -1
     (nil))
(insn:TI 1706 1099 1708 145 (set (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (mem/c:DI (reg/f:DI 7 sp) [9 %sfp+-32 S8 A64])) lex.yy.c:1392 89 {*movdi_internal}
     (nil))
(insn 1708 1706 1100 145 (set (reg:SI 2 cx [orig:287 D.6795 ] [287])
        (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                (const_int 12 [0xc])) [9 %sfp+-20 S4 A32])) lex.yy.c:1393 90 {*movsi_internal}
     (nil))
(insn:TI 1100 1708 1101 145 (set (mem/f:DI (plus:DI (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
                (const_int 8 [0x8])) [1 _957->yy_ch_buf+0 S8 A64])
        (reg/f:DI 0 ax [orig:297 D.6793 ] [297])) lex.yy.c:1392 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 39 r10 [orig:280 D.6782 ] [280])
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:297 D.6793 ] [297])
            (nil))))
(insn 1101 1100 1102 145 (set (reg/f:DI 0 ax [orig:502 *_955 ] [502])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) lex.yy.c:1393 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])
        (nil)))
(insn:TI 1102 1101 1103 145 (set (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:502 *_955 ] [502])
                (const_int 8 [0x8])) [1 _457->yy_ch_buf+0 S8 A64])) lex.yy.c:1393 89 {*movdi_internal}
     (nil))
(insn:TI 1103 1102 1104 145 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:299 D.6783 ] [299])
            (const_int 0 [0]))) lex.yy.c:1393 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 1104 1103 1105 145 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1112)
            (pc))) lex.yy.c:1393 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9996 (nil)))
 -> 1112)
;;  succ:       146 [0.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              125 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 146, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 145, next block 147, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       145 [0.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(note 1105 1104 1106 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1106 1105 1107 146 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f88bbbf2cf0 *.LC24>)) lex.yy.c:1394 89 {*movdi_internal}
     (nil))
(call_insn:TI 1107 1106 1108 146 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1394 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1108 1107 2125)
;; basic block 147, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 146, next block 148, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       142 [29.0%]  (CAN_FALLTHRU)
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx]
;; live  kill	 17 [flags]
(code_label 2125 1108 1141 147 316 "" [1 uses])
(note 1141 2125 1143 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(note 1143 1141 1144 147 NOTE_INSN_DELETED)
(note 1144 1143 1142 147 NOTE_INSN_DELETED)
(insn:TI 1142 1144 1693 147 (set (reg/f:DI 0 ax [orig:506 *_955 ] [506])
        (mem/f:DI (reg/f:DI 44 r15 [orig:347 D.6780 ] [347]) [1 *_955+0 S8 A64])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 44 r15 [orig:347 D.6780 ] [347])
        (nil)))
(insn 1693 1142 33 147 (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
        (reg:DI 6 bp [orig:289 D.6781 ] [289])) lex.yy.c:1205 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 6 bp [orig:289 D.6781 ] [289])
        (nil)))
(insn:TI 33 1693 2128 147 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                    (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:506 *_955 ] [506])
                            (const_int 8 [0x8])) [1 _934->yy_ch_buf+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1205 218 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:506 *_955 ] [506])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 2128 33 2129 147 (set (pc)
        (label_ref 1184)) 654 {jump}
     (nil)
 -> 1184)
;;  succ:       88 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 42 [r13]
;; live  out 	 3 [bx] 7 [sp] 42 [r13]

(barrier 2129 2128 2066)
;; basic block 148, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 147, next block 149, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       78 [10.1%]  (CAN_FALLTHRU)
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	
(code_label 2066 2129 459 148 302 "" [1 uses])
(note 459 2066 461 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn:TI 461 459 460 148 (set (reg:DI 5 di)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) mycc.l:113 89 {*movdi_internal}
     (nil))
(insn 460 461 462 148 (set (reg:SI 4 si)
        (const_int 258 [0x102])) mycc.l:113 90 {*movsi_internal}
     (nil))
(call_insn:TI 462 460 465 148 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6insertPKci") [flags 0x41]  <function_decl 0x7f88bc12e870 insert>) [0 insert S1 A8])
            (const_int 0 [0]))) mycc.l:113 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z6insertPKci") [flags 0x41]  <function_decl 0x7f88bc12e870 insert>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn:TI 465 462 464 148 (set (reg:SI 1 dx [orig:200 D.6777 ] [200])
        (mem/c:SI (symbol_ref:DI ("_ZL8localvar") [flags 0x2]  <var_decl 0x7f88bc119ab0 localvar>) [2 localvar+0 S4 A32])) mycc.l:114 90 {*movsi_internal}
     (nil))
(insn 464 465 1723 148 (set (mem/f/c:DI (symbol_ref:DI ("yylval") [flags 0x40]  <var_decl 0x7f88bc119a20 yylval>) [0 yylval.sym+0 S8 A64])
        (reg/f:DI 0 ax [orig:198 D.6792 ] [198])) mycc.l:113 89 {*movdi_internal}
     (nil))
(insn:TI 1723 464 468 148 (set (reg:SI 2 cx [423])
        (plus:SI (reg:SI 1 dx [orig:200 D.6777 ] [200])
            (const_int 1 [0x1]))) mycc.l:114 213 {*leasi}
     (nil))
(insn 468 1723 467 148 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.6792 ] [198])
                (const_int 12 [0xc])) [2 _284->localvar+0 S4 A32])
        (reg:SI 1 dx [orig:200 D.6777 ] [200])) mycc.l:114 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [orig:200 D.6777 ] [200])
        (nil)))
(insn:TI 467 468 2130 148 (set (mem/c:SI (symbol_ref:DI ("_ZL8localvar") [flags 0x2]  <var_decl 0x7f88bc119ab0 localvar>) [2 localvar+0 S4 A32])
        (reg:SI 2 cx [423])) mycc.l:114 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [423])
        (nil)))
(jump_insn 2130 467 2131 148 (set (pc)
        (label_ref 469)) 654 {jump}
     (nil)
 -> 469)
;;  succ:       79 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 2131 2130 1344)
;; basic block 149, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 148, next block 150, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       86 [16.1%]  (CAN_FALLTHRU)
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 1344 2131 1343 149 242 "" [1 uses])
(note 1343 1344 32 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(insn:TI 32 1343 2132 149 (set (reg/f:DI 0 ax [orig:306 D.6783 ] [306])
        (reg/v/f:DI 5 di [orig:213 source ] [213])) lex.yy.c:1277 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 5 di [orig:213 source ] [213])
        (nil)))
(jump_insn 2132 32 2133 149 (set (pc)
        (label_ref 1147)) 654 {jump}
     (nil)
 -> 1147)
;;  succ:       126 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 2133 2132 2072)
;; basic block 150, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 149, next block 151, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       84 [0.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 2072 2133 834 150 304 "" [1 uses])
(note 834 2072 835 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(insn:TI 835 834 836 150 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f88bbbf2b40 *.LC21>)) lex.yy.c:1283 89 {*movdi_internal}
     (nil))
(call_insn:TI 836 835 837 150 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1283 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 837 836 2071)
;; basic block 151, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 150, next block 152, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       83 [2.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 17 [flags]
;; live  kill	 17 [flags]
(code_label 2071 837 742 151 303 "" [1 uses])
(note 742 2071 1673 151 [bb 151] NOTE_INSN_BASIC_BLOCK)
(note 1673 742 1711 151 NOTE_INSN_DELETED)
(note 1711 1673 744 151 NOTE_INSN_DELETED)
(note 744 1711 743 151 NOTE_INSN_DELETED)
(insn:TI 743 744 745 151 (set (reg:DI 3 bx [orig:451 D.6790 ] [451])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])) [9 %sfp+-24 S4 A32]))) lex.yy.c:1173 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 745 743 746 151 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg:DI 3 bx [orig:451 D.6790 ] [451])
                    (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1173 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 746 745 747 151 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1173 89 {*movdi_internal}
     (nil))
(call_insn:TI 747 746 1407 151 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>) [0 yy_get_previous_state S1 A8])
            (const_int 0 [0]))) lex.yy.c:1175 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL21yy_get_previous_statev") [flags 0x3]  <function_decl 0x7f88bc07c000 yy_get_previous_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(debug_insn 1407 747 749 151 (var_location:SI D#22 (reg:SI 0 ax)) -1
     (nil))
(debug_insn 749 1407 750 151 (var_location:SI yy_current_state (debug_expr:SI D#22)) lex.yy.c:1175 -1
     (nil))
(debug_insn 750 749 751 151 (var_location:SI yy_current_state (debug_expr:SI D#22)) lex.yy.c:1175 -1
     (nil))
(debug_insn 751 750 752 151 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1443 -1
     (nil))
(debug_insn 752 751 754 151 (var_location:QI yy_c (const_int 1 [0x1])) lex.yy.c:1445 -1
     (nil))
(insn:TI 754 752 755 151 (set (reg:DI 4 si [orig:543 yy_current_state ] [543])
        (sign_extend:DI (reg/v:SI 0 ax [orig:193 yy_current_state ] [193]))) lex.yy.c:1446 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 755 754 756 151 (set (reg:SI 1 dx)
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL9yy_accept") [flags 0x2]  <var_decl 0x7f88bc080990 yy_accept>)) [3 yy_accept S2 A16]))) lex.yy.c:1446 146 {extendhisi2}
     (nil))
(insn:TI 756 755 757 151 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 1 dx [orig:186 D.6786 ] [186])
            (const_int 0 [0]))) lex.yy.c:1446 2 {*cmphi_ccno_1}
     (nil))
(jump_insn:TI 757 756 758 151 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 761)
            (pc))) lex.yy.c:1446 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 761)
;;  succ:       152 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              153 [50.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 152, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 151, next block 153, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       151 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	
;; live  kill	
(note 758 757 759 152 [bb 152] NOTE_INSN_BASIC_BLOCK)
(insn:TI 759 758 760 152 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg/v:SI 0 ax [orig:193 yy_current_state ] [193])) lex.yy.c:1448 90 {*movsi_internal}
     (nil))
(insn 760 759 761 152 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1449 89 {*movdi_internal}
     (nil))
;;  succ:       153 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 153, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 152, next block 154, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       151 [50.0%]  (CAN_FALLTHRU)
;;              152 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 153 artificial_defs: { }
;; bb 153 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 5 [di] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 2 [cx] 5 [di] 17 [flags]
;; live  kill	
(code_label 761 760 762 153 198 "" [1 uses])
(note 762 761 767 153 [bb 153] NOTE_INSN_BASIC_BLOCK)
(note 767 762 763 153 NOTE_INSN_DELETED)
(debug_insn 763 767 764 153 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 764 763 769 153 (var_location:SI yy_current_state (debug_expr:SI D#22)) -1
     (nil))
(insn:TI 769 764 1717 153 (set (reg:SI 2 cx [orig:542 D.6785 ] [542])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) lex.yy.c:1451 139 {*zero_extendhisi2}
     (nil))
(insn:TI 1717 769 771 153 (set (reg:SI 5 di [orig:459 D.6777 ] [459])
        (plus:SI (reg:SI 2 cx [orig:542 D.6785 ] [542])
            (const_int 1 [0x1]))) lex.yy.c:1451 213 {*leasi}
     (nil))
(insn:TI 771 1717 772 153 (set (reg:DI 5 di [orig:460 D.6777 ] [460])
        (sign_extend:DI (reg:SI 5 di [orig:459 D.6777 ] [459]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 772 771 773 153 (set (reg:SI 5 di [orig:461 D.6777 ] [461])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 5 di [orig:460 D.6777 ] [460])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:1451 146 {extendhisi2}
     (nil))
(insn:TI 773 772 774 153 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:193 yy_current_state ] [193])
            (reg:SI 5 di [orig:461 D.6777 ] [461]))) lex.yy.c:1451 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:461 D.6777 ] [461])
        (expr_list:REG_DEAD (reg/v:SI 0 ax [orig:193 yy_current_state ] [193])
            (nil))))
(jump_insn:TI 774 773 789 153 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 797)
            (pc))) lex.yy.c:1451 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 797)
;;  succ:       155 [9.0%]  (CAN_FALLTHRU)
;;              154 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 154, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 153, next block 155, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       153 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              154 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  gen 	 2 [cx] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 789 774 776 154 200 "" [1 uses])
(note 776 789 781 154 [bb 154] NOTE_INSN_BASIC_BLOCK)
(note 781 776 788 154 NOTE_INSN_DELETED)
(note 788 781 777 154 NOTE_INSN_DELETED)
(debug_insn 777 788 778 154 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 778 777 1406 154 (var_location:SI yy_current_state (debug_expr:SI D#22)) -1
     (nil))
(debug_insn 1406 778 782 154 (var_location:SI D#22 (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                    (const_int 2 [0x2]))
                (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) -1
     (nil))
(insn:TI 782 1406 784 154 (set (reg:DI 4 si)
        (sign_extend:DI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_def") [flags 0x2]  <var_decl 0x7f88bc080090 yy_def>)) [3 yy_def S2 A16]))) lex.yy.c:1453 145 {extendhidi2}
     (nil))
(debug_insn 784 782 785 154 (var_location:QI yy_c (const_int 1 [0x1])) -1
     (nil))
(debug_insn 785 784 791 154 (var_location:SI yy_current_state (debug_expr:SI D#22)) -1
     (nil))
(insn:TI 791 785 1716 154 (set (reg:SI 2 cx [orig:542 D.6785 ] [542])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 4 si [orig:543 yy_current_state ] [543])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL7yy_base") [flags 0x2]  <var_decl 0x7f88bc080ea0 yy_base>)) [3 yy_base S2 A16]))) lex.yy.c:1451 139 {*zero_extendhisi2}
     (nil))
(insn:TI 1716 791 793 154 (set (reg:SI 5 di [orig:468 D.6777 ] [468])
        (plus:SI (reg:SI 2 cx [orig:542 D.6785 ] [542])
            (const_int 1 [0x1]))) lex.yy.c:1451 213 {*leasi}
     (nil))
(insn:TI 793 1716 794 154 (set (reg:DI 5 di [orig:469 D.6777 ] [469])
        (sign_extend:DI (reg:SI 5 di [orig:468 D.6777 ] [468]))) lex.yy.c:1451 142 {*extendsidi2_rex64}
     (nil))
(insn:TI 794 793 795 154 (set (reg:SI 5 di [orig:470 D.6777 ] [470])
        (sign_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 5 di [orig:469 D.6777 ] [469])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_chk") [flags 0x2]  <var_decl 0x7f88bc0806c0 yy_chk>)) [3 yy_chk S2 A16]))) lex.yy.c:1451 146 {extendhisi2}
     (nil))
(insn:TI 795 794 796 154 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 5 di [orig:470 D.6777 ] [470])
            (reg:SI 4 si [orig:193 yy_current_state ] [193]))) lex.yy.c:1451 7 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 5 di [orig:470 D.6777 ] [470])
        (nil)))
(jump_insn:TI 796 795 797 154 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 789)
            (pc))) lex.yy.c:1451 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 789)
;;  succ:       155 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              154 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 42 [r13]

;; basic block 155, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 154, next block 156, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       154 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              153 [9.0%]  (CAN_FALLTHRU)
;; bb 155 artificial_defs: { }
;; bb 155 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 42 [r13]
;; lr  use 	 2 [cx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags] 41 [r12]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 17 [flags] 41 [r12]
;; live  kill	
(code_label 797 796 798 155 199 "" [1 uses])
(note 798 797 1715 155 [bb 155] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1715 798 1235 155 (set (reg:DI 0 ax)
        (zero_extend:DI (plus:SI (reg:SI 2 cx [orig:542 D.6785 ] [542])
                (const_int 1 [0x1])))) lex.yy.c:1457 214 {*leadi}
     (expr_list:REG_DEAD (reg:SI 2 cx [orig:542 D.6785 ] [542])
        (nil)))
(insn 1235 1715 803 155 (set (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:1188 89 {*movdi_internal}
     (nil))
(insn:TI 803 1235 804 155 (set (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (zero_extend:SI (mem/u:HI (plus:DI (mult:DI (reg:DI 0 ax [orig:474 D.6785 ] [474])
                        (const_int 2 [0x2]))
                    (symbol_ref:DI ("_ZL6yy_nxt") [flags 0x2]  <var_decl 0x7f88bc0803f0 yy_nxt>)) [3 yy_nxt S2 A16]))) lex.yy.c:1457 139 {*zero_extendhisi2}
     (nil))
(debug_insn 804 803 805 155 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:1457 -1
     (nil))
(debug_insn 805 804 806 155 (var_location:QI D#1 (eq:QI (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
        (const_int 101 [0x65]))) lex.yy.c:1458 -1
     (nil))
(debug_insn 806 805 807 155 (var_location:SI yy_is_jam (zero_extend:SI (debug_expr:QI D#1))) lex.yy.c:1458 -1
     (nil))
(insn:TI 807 806 808 155 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (const_int 101 [0x65]))) lex.yy.c:1460 7 {*cmpsi_1}
     (nil))
(jump_insn:TI 808 807 809 155 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 278)
            (pc))) lex.yy.c:1460 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2800 (nil)))
 -> 278)
;;  succ:       156 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              17 [28.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 156, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 155, next block 157, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       155 [72.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 156 artificial_defs: { }
;; bb 156 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(note 809 808 810 156 [bb 156] NOTE_INSN_BASIC_BLOCK)
(debug_insn 810 809 811 156 (var_location:SI yy_current_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 811 810 812 156 (var_location:DI yy_cp (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 812 811 814 156 (var_location:SI yy_next_state (clobber (const_int 0 [0]))) lex.yy.c:1186 -1
     (nil))
(debug_insn 814 812 815 156 (var_location:DI yy_bp (reg/v/f:DI 41 r12 [orig:89 yy_cp ] [89])) lex.yy.c:1188 -1
     (nil))
(insn:TI 815 814 816 156 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])
            (const_int 0 [0]))) lex.yy.c:1190 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn:TI 816 815 817 156 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 278)
            (pc))) lex.yy.c:1190 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9800 (nil)))
 -> 278)
;;  succ:       157 [2.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              17 [98.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

;; basic block 157, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 156, next block 158, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       156 [2.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 157 artificial_defs: { }
;; bb 157 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
(note 817 816 818 157 [bb 157] NOTE_INSN_BASIC_BLOCK)
(insn:TI 818 817 819 157 (parallel [
            (set (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                (plus:DI (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1193 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 819 818 820 157 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1193 89 {*movdi_internal}
     (nil))
(debug_insn 820 819 821 157 (var_location:DI yy_cp (reg/v/f:DI 3 bx [orig:88 yy_cp ] [88])) lex.yy.c:1193 -1
     (nil))
(debug_insn 821 820 2134 157 (var_location:SI yy_current_state (reg/v:SI 0 ax [orig:87 yy_current_state ] [87])) lex.yy.c:1194 -1
     (nil))
(jump_insn 2134 821 2135 157 (set (pc)
        (label_ref 822)) lex.yy.c:1195 654 {jump}
     (nil)
 -> 822)
;;  succ:       144 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 2135 2134 1991)
;; basic block 158, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 157, next block 159, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 (CAN_FALLTHRU)
;; bb 158 artificial_defs: { }
;; bb 158 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 39 [r10]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(code_label 1991 2135 268 158 298 "" [1 uses])
(note 268 1991 269 158 [bb 158] NOTE_INSN_BASIC_BLOCK)
(insn:TI 269 268 2136 158 (set (mem/c:SI (symbol_ref:DI ("_ZL23yy_last_accepting_state") [flags 0x2]  <var_decl 0x7f88bc080870 yy_last_accepting_state>) [2 yy_last_accepting_state+0 S4 A32])
        (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])) 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 39 r10 [orig:314 yy_last_accepting_state_lsm.193 ] [314])
        (nil)))
(jump_insn 2136 269 2137 158 (set (pc)
        (label_ref 270)) 654 {jump}
     (nil)
 -> 270)
;;  succ:       16 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 42 [r13]

(barrier 2137 2136 1990)
;; basic block 159, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 158, next block 160, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 (CAN_FALLTHRU)
;; bb 159 artificial_defs: { }
;; bb 159 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  gen 	
;; live  kill	
(code_label 1990 2137 262 159 297 "" [1 uses])
(note 262 1990 263 159 [bb 159] NOTE_INSN_BASIC_BLOCK)
(insn:TI 263 262 2138 159 (set (mem/f/c:DI (symbol_ref:DI ("_ZL22yy_last_accepting_cpos") [flags 0x2]  <var_decl 0x7f88bc080a20 yy_last_accepting_cpos>) [1 yy_last_accepting_cpos+0 S8 A64])
        (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:316 yy_last_accepting_cpos_lsm.191 ] [316])
        (nil)))
(jump_insn 2138 263 2139 159 (set (pc)
        (label_ref 264)) 654 {jump}
     (nil)
 -> 264)
;;  succ:       15 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 39 [r10] 40 [r11] 41 [r12] 42 [r13]

(barrier 2139 2138 1338)
;; basic block 160, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 159, next block 161, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       97 [2.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;;              98 [2.0%]  (CAN_FALLTHRU,LOOP_EXIT)
;; bb 160 artificial_defs: { }
;; bb 160 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 3 [bx]
;; live  kill	 17 [flags]
(code_label 1338 2139 1337 160 240 "" [2 uses])
(note 1337 1338 1953 160 [bb 160] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1953 1337 2140 160 (parallel [
            (set (reg:DI 3 bx [orig:92 D.6777 ] [92])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) mycc.l:62 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 2140 1953 2141 160 (set (pc)
        (label_ref 1225)) 654 {jump}
     (nil)
 -> 1225)
;;  succ:       43 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 2141 2140 2009)
;; basic block 161, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 160, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       43 [0.0%]  (CAN_FALLTHRU)
;; bb 161 artificial_defs: { }
;; bb 161 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 2009 2141 1353 161 301 "" [1 uses])
(note 1353 2009 1322 161 [bb 161] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 1322 1353 1323 161 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f88bbdacaf8 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) lex.yy.c:1265 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f88bbdacaf8 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 1323 1322 1664)
(note 1664 1323 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_scan_buffer(char*, yy_size_t) (_Z14yy_scan_bufferPcm, funcdef_no=101, decl_uid=4272, cgraph_uid=101, symbol_order=128)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)


yy_buffer_state* yy_scan_buffer(char*, yy_size_t)

Dataflow summary:
def_info->table_size = 246, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={7d,17u} r1={4d} r2={4d} r3={4d,3u} r4={4d,4u} r5={7d,6u} r6={4d,4u} r7={10d,21u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r41={4d,4u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 328{265d,63u,0e} in 48{45 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 0 )->[2]->( 8 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 2 )->[3]->( 7 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; live  out 	 4 [si] 5 [di] 7 [sp] 41 [r12]

( 3 )->[4]->( 7 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 5 [di] 7 [sp] 41 [r12]
;; live  out 	 5 [di] 7 [sp] 41 [r12]

( 4 )->[5]->( 9 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 41 [r12]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 5 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 7 [sp]

( 4 3 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 7 [sp]

( 2 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 5 )->[9]->( )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 6 8 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 12 to worklist
  Adding insn 16 to worklist
  Adding insn 80 to worklist
  Adding insn 79 to worklist
  Adding insn 78 to worklist
  Adding insn 19 to worklist
  Adding insn 29 to worklist
  Adding insn 23 to worklist
  Adding insn 93 to worklist
  Adding insn 55 to worklist
  Adding insn 47 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
  Adding insn 39 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 109 to worklist
  Adding insn 104 to worklist
  Adding insn 95 to worklist
  Adding insn 88 to worklist
  Adding insn 32 to worklist
Finished finding needed instructions:
processing block 8 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 102 to worklist
processing block 7 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 108 to worklist
  Adding insn 107 to worklist
  Adding insn 106 to worklist
  Adding insn 101 to worklist
processing block 9 lr out =  7 [sp]
  Adding insn 31 to worklist
processing block 6 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 92 to worklist
  Adding insn 91 to worklist
  Adding insn 90 to worklist
  Adding insn 6 to worklist
  Adding insn 46 to worklist
processing block 5 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 28 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 75 to worklist
processing block 4 lr out =  5 [di] 7 [sp] 41 [r12]
  Adding insn 18 to worklist
processing block 3 lr out =  4 [si] 5 [di] 7 [sp] 41 [r12]
  Adding insn 15 to worklist
  Adding insn 77 to worklist
processing block 2 lr out =  3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 11 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
;;   ======================================================
;;   -- basic block 2 from 11 to 12 -- after reload
;;   ======================================================

;;	  0--> b  0: i  11 flags=cmp(si,0x1)                       :athlon-direct,athlon-ieu
;;	  1--> b  0: i  12 pc={(leu(flags,0))?L60:pc}              :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 11
;;   new tail = 12

;;   ======================================================
;;   -- basic block 3 from 78 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  78 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  79 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  77 r12=si-0x2                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  80 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  15 flags=cmp([di+si-0x2],0)                :athlon-direct,athlon-load,athlon-ieu
;;	  5--> b  0: i  16 pc={(flags!=0)?L68:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 78
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 18 to 19 -- after reload
;;   ======================================================

;;	  0--> b  0: i  18 flags=cmp([di+si-0x1],0)                :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i  19 pc={(flags!=0)?L68:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 18
;;   new tail = 19

;;   ======================================================
;;   -- basic block 5 from 75 to 29 -- after reload
;;   ======================================================

;;	  0--> b  0: i  75 bp=di                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  21 loc 0x40                                :nothing
;;	  0--> b  0: i  22 di=0x40                                 :athlon-direct,athlon-ieu
;;	  1--> b  0: i  23 ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  2--> b  0: i  28 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  2--> b  0: i  24 bx=ax                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  26 loc clobber                             :nothing
;;	  2--> b  0: i  27 loc clobber                             :nothing
;;	  3--> b  0: i  29 pc={(flags==0)?L113:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 75
;;   new tail = 29

;;   ======================================================
;;   -- basic block 6 from 36 to 93 -- after reload
;;   ======================================================

;;	  0--> b  0: i  36 [ax+0x18]=r12                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  37 [ax+0x8]=bp                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  46 di=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  38 [ax+0x10]=bp                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  41 [ax+0x20]=r12                           :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  39 [ax+0x24]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  40 [ax]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  42 [ax+0x28]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  43 [ax+0x2c]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  44 [ax+0x38]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  45 [ax+0x3c]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  47 call [`_Z19yy_switch_to_bufferP15yy_buffer_state']:athlon-vector,athlon-ieu
;;	  6--> b  0: i   6 ax=bx                                   :athlon-direct,athlon-ieu
;;	  6--> b  0: i  55 use ax                                  :nothing
;;	  7--> b  0: i  90 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i  91 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i  92 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	 10--> b  0: i  93 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 36
;;   new tail = 93

;;   ======================================================
;;   -- basic block 7 from 101 to 109 -- after reload
;;   ======================================================

;;	  0--> b  0: i 106 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  1--> b  0: i 101 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 104 use ax                                  :nothing
;;	  2--> b  0: i 107 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i 108 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i 109 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 115
;;   new tail = 109

;;   ======================================================
;;   -- basic block 8 from 102 to 95 -- after reload
;;   ======================================================

;;	  0--> b  0: i 102 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  88 use ax                                  :nothing
;;	  1--> b  0: i  95 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 102
;;   new tail = 95

;;   ======================================================
;;   -- basic block 9 from 31 to 32 -- after reload
;;   ======================================================

;;	  0--> b  0: i  31 di=`*.LC27'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i  32 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 31
;;   new tail = 32



starting the processing of deferred insns
ending the processing of deferred insns


yy_buffer_state* yy_scan_buffer(char*, yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={7d,17u} r1={4d} r2={4d} r3={4d,3u} r4={4d,4u} r5={7d,6u} r6={4d,4u} r7={10d,21u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={9d,4u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r41={4d,4u} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 328{265d,63u,0e} in 48{45 regular + 3 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 9 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 9 11 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 11 4 12 2 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 4 si [orig:98 size ] [98])
            (const_int 1 [0x1]))) lex.yy.c:1860 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 12 11 13 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 60)
            (pc))) lex.yy.c:1860 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 395 (nil)))
 -> 60)
;;  succ:       8 [4.0%]  (CAN_FALLTHRU)
;;              3 [96.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 9605, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [96.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
(note 13 12 78 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn/f:TI 78 13 79 3 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) lex.yy.c:1857 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn/f 79 78 77 3 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1857 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 77 79 80 3 (set (reg:DI 41 r12 [orig:88 D.6819 ] [88])
        (plus:DI (reg/v:DI 4 si [orig:98 size ] [98])
            (const_int -2 [0xfffffffffffffffe]))) lex.yy.c:1861 214 {*leadi}
     (nil))
(insn/f:TI 80 77 81 3 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1857 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 81 80 15 3 NOTE_INSN_PROLOGUE_END)
(insn 15 81 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:97 base ] [97])
                        (reg/v:DI 4 si [orig:98 size ] [98]))
                    (const_int -2 [0xfffffffffffffffe])) [0 *_6+0 S1 A8])
            (const_int 0 [0]))) lex.yy.c:1860 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn:TI 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) lex.yy.c:1860 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1000 (nil)))
 -> 68)
;;  succ:       7 [10.0%]  (CAN_FALLTHRU)
;;              4 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; live  out 	 4 [si] 5 [di] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 8644, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [90.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (plus:DI (reg/v/f:DI 5 di [orig:97 base ] [97])
                        (reg/v:DI 4 si [orig:98 size ] [98]))
                    (const_int -1 [0xffffffffffffffff])) [0 *_10+0 S1 A8])
            (const_int 0 [0]))) lex.yy.c:1861 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg/v:DI 4 si [orig:98 size ] [98])
        (nil)))
(jump_insn:TI 19 18 20 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 68)
            (pc))) lex.yy.c:1861 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2139 (nil)))
 -> 68)
;;  succ:       7 [21.4%]  (CAN_FALLTHRU)
;;              5 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 5 [di] 7 [sp] 41 [r12]
;; live  out 	 5 [di] 7 [sp] 41 [r12]

;; basic block 5, loop depth 0, count 0, freq 6795, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [78.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp] 41 [r12]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(note 20 19 75 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 75 20 21 5 (set (reg/v/f:DI 6 bp [orig:97 base ] [97])
        (reg/v/f:DI 5 di [orig:97 base ] [97])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 5 di [orig:97 base ] [97])
        (nil)))
(debug_insn 21 75 22 5 (var_location:DI size (const_int 64 [0x40])) -1
     (nil))
(insn 22 21 23 5 (set (reg:DI 5 di)
        (const_int 64 [0x40])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn:TI 23 22 28 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 28 23 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [99])
            (const_int 0 [0]))) lex.yy.c:1867 4 {*cmpdi_ccno_1}
     (nil))
(insn 24 28 26 5 (set (reg/f:DI 3 bx [99])
        (reg:DI 0 ax)) lex.yy.c:2123 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [99])
        (nil)))
(debug_insn 26 24 27 5 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1866 -1
     (nil))
(debug_insn 27 26 29 5 (var_location:DI b (clobber (const_int 0 [0]))) lex.yy.c:1866 -1
     (nil))
(jump_insn:TI 29 27 35 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 113)
            (pc))) lex.yy.c:1867 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 113)
;;  succ:       9 [0.0%]  (CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 6, loop depth 0, count 0, freq 6793, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
(note 35 29 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 36 35 37 6 (set (mem:DI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 24 [0x18])) [4 MEM[(struct yy_buffer_state *)_26].yy_buf_size+0 S8 A64])
        (reg:DI 41 r12 [orig:88 D.6819 ] [88])) lex.yy.c:1870 89 {*movdi_internal}
     (nil))
(insn 37 36 46 6 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 8 [0x8])) [1 MEM[(struct yy_buffer_state *)_26].yy_ch_buf+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:97 base ] [97])) lex.yy.c:1871 89 {*movdi_internal}
     (nil))
(insn 46 37 38 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [99])) lex.yy.c:1880 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [99])
        (nil)))
(insn:TI 38 46 41 6 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 16 [0x10])) [1 MEM[(struct yy_buffer_state *)_26].yy_buf_pos+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:97 base ] [97])) lex.yy.c:1871 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 6 bp [orig:97 base ] [97])
        (nil)))
(insn 41 38 39 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 32 [0x20])) [2 MEM[(struct yy_buffer_state *)_26].yy_n_chars+0 S4 A64])
        (reg:SI 41 r12 [orig:88 D.6819 ] [88])) lex.yy.c:1874 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 41 r12 [orig:88 D.6819 ] [88])
        (nil)))
(insn:TI 39 41 40 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 36 [0x24])) [2 MEM[(struct yy_buffer_state *)_26].yy_is_our_buffer+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1872 90 {*movsi_internal}
     (nil))
(insn 40 39 42 6 (set (mem/f:DI (reg/f:DI 0 ax [99]) [1 MEM[(struct yy_buffer_state *)_26].yy_input_file+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:1873 89 {*movdi_internal}
     (nil))
(insn:TI 42 40 43 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 40 [0x28])) [2 MEM[(struct yy_buffer_state *)_26].yy_is_interactive+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1875 90 {*movsi_internal}
     (nil))
(insn 43 42 44 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 44 [0x2c])) [2 MEM[(struct yy_buffer_state *)_26].yy_at_bol+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1876 90 {*movsi_internal}
     (nil))
(insn:TI 44 43 45 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 56 [0x38])) [2 MEM[(struct yy_buffer_state *)_26].yy_fill_buffer+0 S4 A64])
        (const_int 0 [0])) lex.yy.c:1877 90 {*movsi_internal}
     (nil))
(insn 45 44 47 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [99])
                (const_int 60 [0x3c])) [2 MEM[(struct yy_buffer_state *)_26].yy_buffer_status+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:1878 90 {*movsi_internal}
     (nil))
(call_insn:TI 47 45 6 6 (call (mem:QI (symbol_ref:DI ("_Z19yy_switch_to_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c288 yy_switch_to_buffer>) [0 yy_switch_to_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:1880 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z19yy_switch_to_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c288 yy_switch_to_buffer>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 6 47 55 6 (set (reg/f:DI 0 ax [orig:87 D.6818 ] [87])
        (reg/f:DI 3 bx [99])) lex.yy.c:1882 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [99])
        (nil)))
(insn 55 6 114 6 (use (reg/i:DI 0 ax)) lex.yy.c:1883 -1
     (nil))
(note 114 55 90 6 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 90 114 91 6 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1883 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
            (nil))))
(insn/f:TI 91 90 92 6 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1883 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
            (nil))))
(insn/f:TI 92 91 93 6 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1883 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
            (nil))))
(jump_insn:TI 93 92 94 6 (simple_return) lex.yy.c:1883 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 94 93 68)
;; basic block 7, loop depth 0, count 0, freq 2810, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [21.4%]  (CAN_FALLTHRU)
;;              3 [10.0%]  (CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	 17 [flags]
(code_label 68 94 67 7 322 "" [2 uses])
(note 67 68 115 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 115 67 106 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 106 115 101 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1883 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 3 bx)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn:TI 101 106 104 7 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.6818 ] [87])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1864 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 104 101 107 7 (use (reg/i:DI 0 ax)) lex.yy.c:1883 -1
     (nil))
(insn/f:TI 107 104 108 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1883 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 6 bp)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 108 107 109 7 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1883 75 {*popdi1}
     (expr_list:REG_CFA_RESTORE (reg:DI 41 r12)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(jump_insn:TI 109 108 112 7 (simple_return) lex.yy.c:1883 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 112 109 60)
;; basic block 8, loop depth 0, count 0, freq 395, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [4.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 60 112 59 8 320 "" [1 uses])
(note 59 60 102 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 102 59 88 8 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.6818 ] [87])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1864 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 88 102 95 8 (use (reg/i:DI 0 ax)) lex.yy.c:1883 -1
     (nil))
(jump_insn:TI 95 88 86 8 (simple_return) lex.yy.c:1883 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 86 95 113)
;; basic block 9, loop depth 0, count 0, freq 3
;;  prev block 8, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [0.0%]  (CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 113 86 30 9 324 "" [1 uses])
(note 30 113 31 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 31 30 32 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f88bbca4bd0 *.LC27>)) lex.yy.c:1868 89 {*movdi_internal}
     (nil))
(call_insn:TI 32 31 33 9 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1868 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 33 32 76)
(note 76 33 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_scan_bytes(const char*, yy_size_t) (_Z13yy_scan_bytesPKcm, funcdef_no=103, decl_uid=4277, cgraph_uid=103, symbol_order=130)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 10 (  1.1)


yy_buffer_state* yy_scan_bytes(const char*, yy_size_t)

Dataflow summary:
def_info->table_size = 320, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={5d,10u} r1={7d,6u,1e} r2={6d,1u} r3={3d,6u} r4={6d,3u} r5={9d,5u} r6={3d,3u,1e} r7={7d,18u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={10d,4u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={3d,6u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 397{333d,62u,2e} in 43{39 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]

( 0 )->[2]->( 7 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 2 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 3 4 )->[4]->( 5 4 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 3 4 )->[5]->( 8 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 5 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

( 2 )->[7]->( )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 5 )->[8]->( )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 18 to worklist
  Adding insn 12 to worklist
  Adding insn 88 to worklist
  Adding insn 87 to worklist
  Adding insn 86 to worklist
  Adding insn 22 to worklist
  Adding insn 52 to worklist
  Adding insn 46 to worklist
  Adding insn 32 to worklist
  Adding insn 28 to worklist
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 96 to worklist
  Adding insn 70 to worklist
  Adding insn 64 to worklist
  Adding insn 39 to worklist
  Adding insn 60 to worklist
Finished finding needed instructions:
processing block 7 lr out =  7 [sp]
  Adding insn 38 to worklist
processing block 8 lr out =  7 [sp]
  Adding insn 59 to worklist
processing block 6 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 95 to worklist
  Adding insn 94 to worklist
  Adding insn 93 to worklist
processing block 5 lr out =  0 [ax] 7 [sp]
  Adding insn 31 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
processing block 4 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 51 to worklist
  Adding insn 47 to worklist
  Adding insn 45 to worklist
processing block 3 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 21 to worklist
  Adding insn 105 to worklist
processing block 2 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
  Adding insn 17 to worklist
  Adding insn 11 to worklist
  Adding insn 85 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 10 (  1.1)
;;   ======================================================
;;   -- basic block 2 from 86 to 18 -- after reload
;;   ======================================================

;;	  0--> b  0: i  86 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  85 r12=si+0x2                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i   9 loc r12                                 :nothing
;;	  0--> b  0: i  10 loc r12                                 :nothing
;;	  0--> b  0: i  87 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  88 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i   2 bp=di                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i   3 bx=si                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  11 di=r12                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  12 ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	  3--> b  0: i  15 loc clobber                             :nothing
;;	  3--> b  0: i  16 loc clobber                             :nothing
;;	  4--> b  0: i  17 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  5--> b  0: i  18 pc={(flags==0)?L36:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 86
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 20 to 22 -- after reload
;;   ======================================================

;;	  0--> b  0: i  20 loc 0                                   :nothing
;;	  0--> b  0: i 105 {dx=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i  21 flags=cmp(bx,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i  22 pc={(flags==0)?L50:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 4 from 44 to 52 -- after reload
;;   ======================================================

;;	  0--> b  0: i  44 loc dx                                  :nothing
;;	  0--> b  0: i  45 cx=[bp+dx]                              :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i  46 [ax+dx]=cx                              :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  47 {dx=dx+0x1;clobber flags;}              :athlon-direct,athlon-ieu
;;	  4--> b  0: i  49 loc dx                                  :nothing
;;	  5--> b  0: i  51 flags=cmp(bx,dx)                        :athlon-direct,athlon-ieu
;;	  6--> b  0: i  52 pc={(flags!=0)?L75:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 44
;;   new tail = 52

;;   ======================================================
;;   -- basic block 5 from 24 to 32 -- after reload
;;   ======================================================

;;	  0--> b  0: i  24 [ax+bx+0x1]=0                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  25 [ax+bx]=0                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  26 si=r12                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i  27 di=ax                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i  28 ax=call [`_Z14yy_scan_bufferPcm']       :athlon-vector,athlon-ieu
;;	  2--> b  0: i  30 loc ax                                  :nothing
;;	  3--> b  0: i  31 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i  32 pc={(flags==0)?L106:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 24
;;   new tail = 32

;;   ======================================================
;;   -- basic block 6 from 64 to 96 -- after reload
;;   ======================================================

;;	  0--> b  0: i  64 [ax+0x24]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  70 use ax                                  :nothing
;;	  1--> b  0: i  93 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i  94 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i  95 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i  96 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 64
;;   new tail = 96

;;   ======================================================
;;   -- basic block 7 from 38 to 39 -- after reload
;;   ======================================================

;;	  0--> b  0: i  38 di=`*.LC29'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i  39 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 38
;;   new tail = 39

;;   ======================================================
;;   -- basic block 8 from 59 to 60 -- after reload
;;   ======================================================

;;	  0--> b  0: i  59 di=`*.LC30'                             :athlon-direct,athlon-ieu
;;	  1--> b  0: i  60 call [`_ZL14yy_fatal_errorPKc']         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 59
;;   new tail = 60



starting the processing of deferred insns
ending the processing of deferred insns


yy_buffer_state* yy_scan_bytes(const char*, yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={5d,10u} r1={7d,6u,1e} r2={6d,1u} r3={3d,6u} r4={6d,3u} r5={9d,5u} r6={3d,3u,1e} r7={7d,18u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={10d,4u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r41={3d,6u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 397{333d,62u,2e} in 43{39 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 17 [flags] 41 [r12]
;; live  kill	
(note 6 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 6 86 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 86 4 85 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) lex.yy.c:1907 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 85 86 9 2 (set (reg/v:DI 41 r12 [orig:87 n ] [87])
        (plus:DI (reg:DI 4 si [orig:97 _yybytes_len ] [97])
            (const_int 2 [0x2]))) lex.yy.c:1914 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 4 si [orig:97 _yybytes_len ] [97])
        (nil)))
(debug_insn 9 85 10 2 (var_location:DI n (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:1914 -1
     (nil))
(debug_insn 10 9 87 2 (var_location:DI size (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:1914 -1
     (nil))
(insn/f 87 10 88 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:1907 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f:TI 88 87 89 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1907 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 89 88 2 2 NOTE_INSN_PROLOGUE_END)
(insn 2 89 3 2 (set (reg/v/f:DI 6 bp [orig:96 yybytes ] [96])
        (reg:DI 5 di [ yybytes ])) lex.yy.c:1907 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ yybytes ])
        (nil)))
(insn 3 2 11 2 (set (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
        (reg:DI 4 si [ _yybytes_len ])) lex.yy.c:1907 89 {*movdi_internal}
     (nil))
(insn:TI 11 3 12 2 (set (reg:DI 5 di)
        (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:2123 89 {*movdi_internal}
     (nil))
(call_insn:TI 12 11 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 15 12 16 2 (var_location:DI size (clobber (const_int 0 [0]))) lex.yy.c:1915 -1
     (nil))
(debug_insn 16 15 17 2 (var_location:DI buf (clobber (const_int 0 [0]))) lex.yy.c:1915 -1
     (nil))
(insn:TI 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
            (const_int 0 [0]))) lex.yy.c:1916 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 18 17 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) lex.yy.c:1916 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 36)
;;  succ:       7 [0.0%]  (CAN_FALLTHRU)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 17 [flags]
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(debug_insn 20 19 105 3 (var_location:DI i (const_int 0 [0])) -1
     (nil))
(insn:TI 105 20 21 3 (parallel [
            (set (reg/v:DI 1 dx [orig:89 i ] [89])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1919 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 21 105 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
            (const_int 0 [0]))) lex.yy.c:1919 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 22 21 75 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 50)
            (pc))) lex.yy.c:1919 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 900 (nil)))
 -> 50)
;;  succ:       5 [9.0%]  (CAN_FALLTHRU)
;;              4 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [91.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              4 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 75 22 74 4 332 "" [1 uses])
(note 74 75 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(debug_insn 44 74 45 4 (var_location:DI i (reg/v:DI 1 dx [orig:89 i ] [89])) -1
     (nil))
(insn:TI 45 44 46 4 (set (reg:QI 2 cx [orig:99 MEM[base: yybytes_9(D), index: i_27, offset: 0B] ] [99])
        (mem:QI (plus:DI (reg/v/f:DI 6 bp [orig:96 yybytes ] [96])
                (reg/v:DI 1 dx [orig:89 i ] [89])) [0 MEM[base: yybytes_9(D), index: i_27, offset: 0B]+0 S1 A8])) lex.yy.c:1920 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem:QI (plus:DI (reg/v/f:DI 6 bp [orig:96 yybytes ] [96])
                (reg/v:DI 1 dx [orig:89 i ] [89])) [0 MEM[base: yybytes_9(D), index: i_27, offset: 0B]+0 S1 A8])
        (nil)))
(insn:TI 46 45 47 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
                (reg/v:DI 1 dx [orig:89 i ] [89])) [0 MEM[base: _24, index: i_27, offset: 0B]+0 S1 A8])
        (reg:QI 2 cx [orig:99 MEM[base: yybytes_9(D), index: i_27, offset: 0B] ] [99])) lex.yy.c:1920 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 2 cx [orig:99 MEM[base: yybytes_9(D), index: i_27, offset: 0B] ] [99])
        (nil)))
(insn 47 46 49 4 (parallel [
            (set (reg/v:DI 1 dx [orig:89 i ] [89])
                (plus:DI (reg/v:DI 1 dx [orig:89 i ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:1919 218 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(debug_insn 49 47 51 4 (var_location:DI i (reg/v:DI 1 dx [orig:89 i ] [89])) -1
     (nil))
(insn:TI 51 49 52 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
            (reg/v:DI 1 dx [orig:89 i ] [89]))) lex.yy.c:1919 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 52 51 50 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 75)
            (pc))) lex.yy.c:1919 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9100 (nil)))
 -> 75)
;;  succ:       5 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              4 [91.0%]  (DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [9.0%]  (CAN_FALLTHRU)
;;              4 [9.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	
(code_label 50 52 23 5 330 "" [1 uses])
(note 23 50 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 24 23 25 5 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
                    (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97]))
                (const_int 1 [0x1])) [0 *_16+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1922 93 {*movqi_internal}
     (nil))
(insn 25 24 26 5 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
                (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])) [0 *_14+0 S1 A8])
        (const_int 0 [0])) lex.yy.c:1922 93 {*movqi_internal}
     (expr_list:REG_DEAD (reg/v:DI 3 bx [orig:97 _yybytes_len ] [97])
        (nil)))
(insn 26 25 27 5 (set (reg:DI 4 si)
        (reg/v:DI 41 r12 [orig:87 n ] [87])) lex.yy.c:1924 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v:DI 41 r12 [orig:87 n ] [87])
        (nil)))
(insn:TI 27 26 28 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 D.6837 ] [94])) lex.yy.c:1924 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:94 D.6837 ] [94])
        (nil)))
(call_insn:TI 28 27 30 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z14yy_scan_bufferPcm") [flags 0x3]  <function_decl 0x7f88bc07ca20 yy_scan_buffer>) [0 yy_scan_buffer S1 A8])
            (const_int 0 [0]))) lex.yy.c:1924 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z14yy_scan_bufferPcm") [flags 0x3]  <function_decl 0x7f88bc07ca20 yy_scan_buffer>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(debug_insn 30 28 31 5 (var_location:DI b (reg/v/f:DI 0 ax [orig:93 b ] [93])) lex.yy.c:1924 -1
     (nil))
(insn:TI 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 0 ax [orig:93 b ] [93])
            (const_int 0 [0]))) lex.yy.c:1925 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 32 31 63 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 106)
            (pc))) lex.yy.c:1925 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 106)
;;  succ:       8 [0.0%]  (CAN_FALLTHRU)
;;              6 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  kill	
(note 63 32 64 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 64 63 70 6 (set (mem:SI (plus:DI (reg/v/f:DI 0 ax [orig:93 b ] [93])
                (const_int 36 [0x24])) [2 b_20->yy_is_our_buffer+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:1931 90 {*movsi_internal}
     (nil))
(insn 70 64 107 6 (use (reg/i:DI 0 ax)) lex.yy.c:1934 -1
     (nil))
(note 107 70 93 6 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 93 107 94 6 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1934 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 94 93 95 6 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1934 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 95 94 96 6 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1934 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 96 95 97 6 (simple_return) lex.yy.c:1934 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 97 96 36)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       2 [0.0%]  (CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 36 97 37 7 326 "" [1 uses])
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 38 37 39 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f88bbcc7a20 *.LC29>)) lex.yy.c:1917 89 {*movdi_internal}
     (nil))
(call_insn:TI 39 38 40 7 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1917 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 40 39 106)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       5 [0.0%]  (CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 106 40 58 8 336 "" [1 uses])
(note 58 106 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 59 58 60 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f88bbcc7ab0 *.LC30>)) lex.yy.c:1926 89 {*movdi_internal}
     (nil))
(call_insn:TI 60 59 61 8 (call (mem:QI (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>) [0 yy_fatal_error S1 A8])
        (const_int 0 [0])) lex.yy.c:1926 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZL14yy_fatal_errorPKc") [flags 0x3]  <function_decl 0x7f88bc0861b0 yy_fatal_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 61 60 84)
(note 84 61 0 NOTE_INSN_DELETED)

;; Function yy_buffer_state* yy_scan_string(const char*) (_Z14yy_scan_stringPKc, funcdef_no=102, decl_uid=4274, cgraph_uid=102, symbol_order=129)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


yy_buffer_state* yy_scan_string(const char*)

Dataflow summary:
def_info->table_size = 164, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={3d,2u} r1={3d} r2={3d} r3={3d,3u} r4={4d,1u} r5={4d,3u} r7={3d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 182{167d,15u,0e} in 7{5 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 7 to worklist
  Adding insn 21 to worklist
Finished finding needed instructions:
processing block 2 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 25 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
;;   ======================================================
;;   -- basic block 2 from 21 to 13 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2 bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i   7 ax=call [`strlen']                      :athlon-vector,athlon-ieu
;;	  3--> b  0: i  12 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  11 si=ax                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i  25 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i  13 ax=call [`_Z13yy_scan_bytesPKcm']       :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 8
;;   new head = 21
;;   new tail = 13



starting the processing of deferred insns
ending the processing of deferred insns


yy_buffer_state* yy_scan_string(const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={3d,2u} r1={3d} r2={3d} r3={3d,3u} r4={4d,1u} r5={4d,3u} r7={3d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 182{167d,15u,0e} in 7{5 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 21 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 21 3 22 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:1894 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 22 21 2 2 NOTE_INSN_PROLOGUE_END)
(insn 2 22 7 2 (set (reg/v/f:DI 3 bx [orig:90 yystr ] [90])
        (reg:DI 5 di [ yystr ])) lex.yy.c:1894 89 {*movdi_internal}
     (nil))
(call_insn/i:TI 7 2 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f88bc2f60d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) lex.yy.c:1896 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f88bc2f60d8 strlen>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 12 7 11 2 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:90 yystr ] [90])) lex.yy.c:1896 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:90 yystr ] [90])
        (nil)))
(insn 11 12 27 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [92])) lex.yy.c:1896 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [92])
        (nil)))
(note 27 11 25 2 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 25 27 13 2 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:1897 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(call_insn/j:TI 13 25 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z13yy_scan_bytesPKcm") [flags 0x3]  <function_decl 0x7f88bc07cbd0 yy_scan_bytes>) [0 yy_scan_bytes S1 A8])
            (const_int 0 [0]))) lex.yy.c:1896 671 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z13yy_scan_bytesPKcm") [flags 0x3]  <function_decl 0x7f88bc07cbd0 yy_scan_bytes>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 14 13 20)
(note 20 14 0 NOTE_INSN_DELETED)

;; Function int yyget_lineno() (_Z12yyget_linenov, funcdef_no=105, decl_uid=5475, cgraph_uid=105, symbol_order=132)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 10 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  10 ax=[`yylineno']                         :athlon-direct,athlon-load
;;	  0--> b  0: i  11 use ax                                  :nothing
;;	  1--> b  0: i  16 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 10
;;   new tail = 16



starting the processing of deferred insns
ending the processing of deferred insns


int yyget_lineno()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 14 10 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 10 2 11 2 (set (reg/i:SI 0 ax)
        (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])) lex.yy.c:1972 90 {*movsi_internal}
     (nil))
(insn 11 10 16 2 (use (reg/i:SI 0 ax)) lex.yy.c:1972 -1
     (nil))
(jump_insn:TI 16 11 15 2 (simple_return) lex.yy.c:1972 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 16 13)
(note 13 15 0 NOTE_INSN_DELETED)

;; Function FILE* yyget_in() (_Z8yyget_inv, funcdef_no=106, decl_uid=5467, cgraph_uid=106, symbol_order=133)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 10 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  10 ax=[`yyin']                             :athlon-direct,athlon-load
;;	  0--> b  0: i  11 use ax                                  :nothing
;;	  1--> b  0: i  16 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 10
;;   new tail = 16



starting the processing of deferred insns
ending the processing of deferred insns


FILE* yyget_in()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 14 10 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])) lex.yy.c:1980 89 {*movdi_internal}
     (nil))
(insn 11 10 16 2 (use (reg/i:DI 0 ax)) lex.yy.c:1980 -1
     (nil))
(jump_insn:TI 16 11 15 2 (simple_return) lex.yy.c:1980 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 16 13)
(note 13 15 0 NOTE_INSN_DELETED)

;; Function FILE* yyget_out() (_Z9yyget_outv, funcdef_no=107, decl_uid=5470, cgraph_uid=107, symbol_order=134)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 10 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  10 ax=[`yyout']                            :athlon-direct,athlon-load
;;	  0--> b  0: i  11 use ax                                  :nothing
;;	  1--> b  0: i  16 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 10
;;   new tail = 16



starting the processing of deferred insns
ending the processing of deferred insns


FILE* yyget_out()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 14 10 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])) lex.yy.c:1988 89 {*movdi_internal}
     (nil))
(insn 11 10 16 2 (use (reg/i:DI 0 ax)) lex.yy.c:1988 -1
     (nil))
(jump_insn:TI 16 11 15 2 (simple_return) lex.yy.c:1988 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 16 13)
(note 13 15 0 NOTE_INSN_DELETED)

;; Function yy_size_t yyget_leng() (_Z10yyget_lengv, funcdef_no=108, decl_uid=5473, cgraph_uid=108, symbol_order=135)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 10 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  10 ax=[`yyleng']                           :athlon-direct,athlon-load
;;	  0--> b  0: i  11 use ax                                  :nothing
;;	  1--> b  0: i  16 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 10
;;   new tail = 16



starting the processing of deferred insns
ending the processing of deferred insns


yy_size_t yyget_leng()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 14 10 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/c:DI (symbol_ref:DI ("yyleng") [flags 0x2]  <var_decl 0x7f88bc02e510 yyleng>) [4 yyleng+0 S8 A64])) lex.yy.c:1996 89 {*movdi_internal}
     (nil))
(insn 11 10 16 2 (use (reg/i:DI 0 ax)) lex.yy.c:1996 -1
     (nil))
(jump_insn:TI 16 11 15 2 (simple_return) lex.yy.c:1996 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 16 13)
(note 13 15 0 NOTE_INSN_DELETED)

;; Function char* yyget_text() (_Z10yyget_textv, funcdef_no=109, decl_uid=5474, cgraph_uid=109, symbol_order=136)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 10 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  10 ax=[`yytext']                           :athlon-direct,athlon-load
;;	  0--> b  0: i  11 use ax                                  :nothing
;;	  1--> b  0: i  16 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 10
;;   new tail = 16



starting the processing of deferred insns
ending the processing of deferred insns


char* yyget_text()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 14 10 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 10 2 11 2 (set (reg/i:DI 0 ax)
        (mem/f/c:DI (symbol_ref:DI ("yytext") [flags 0x2]  <var_decl 0x7f88bc080900 yytext>) [1 yytext+0 S8 A64])) lex.yy.c:2005 89 {*movdi_internal}
     (nil))
(insn 11 10 16 2 (use (reg/i:DI 0 ax)) lex.yy.c:2005 -1
     (nil))
(jump_insn:TI 16 11 15 2 (simple_return) lex.yy.c:2005 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 16 13)
(note 13 15 0 NOTE_INSN_DELETED)

;; Function void yyset_lineno(int) (_Z12yyset_linenoi, funcdef_no=110, decl_uid=5477, cgraph_uid=110, symbol_order=137)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 12 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 [`yylineno']=di                         :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  12 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 6
;;   new tail = 12



starting the processing of deferred insns
ending the processing of deferred insns


void yyset_lineno(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 10 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 10 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 10 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 12 2 (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
        (reg/v:SI 5 di [orig:87 _line_number ] [87])) lex.yy.c:2014 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 5 di [orig:87 _line_number ] [87])
        (nil)))
(jump_insn:TI 12 6 11 2 (simple_return) lex.yy.c:2014 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 12 9)
(note 9 11 0 NOTE_INSN_DELETED)

;; Function void yyset_in(FILE*) (_Z8yyset_inP8_IO_FILE, funcdef_no=111, decl_uid=5469, cgraph_uid=111, symbol_order=138)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 12 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 [`yyin']=di                             :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  12 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 6
;;   new tail = 12



starting the processing of deferred insns
ending the processing of deferred insns


void yyset_in(FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 10 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 10 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 10 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 12 2 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (reg/v/f:DI 5 di [orig:87 _in_str ] [87])) lex.yy.c:2025 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 5 di [orig:87 _in_str ] [87])
        (nil)))
(jump_insn:TI 12 6 11 2 (simple_return) lex.yy.c:2025 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 12 9)
(note 9 11 0 NOTE_INSN_DELETED)

;; Function void yyset_out(FILE*) (_Z9yyset_outP8_IO_FILE, funcdef_no=112, decl_uid=5472, cgraph_uid=112, symbol_order=139)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 12 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 [`yyout']=di                            :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  12 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 6
;;   new tail = 12



starting the processing of deferred insns
ending the processing of deferred insns


void yyset_out(FILE*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 10 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 10 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 10 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 12 2 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (reg/v/f:DI 5 di [orig:87 _out_str ] [87])) lex.yy.c:2030 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 5 di [orig:87 _out_str ] [87])
        (nil)))
(jump_insn:TI 12 6 11 2 (simple_return) lex.yy.c:2030 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 12 9)
(note 9 11 0 NOTE_INSN_DELETED)

;; Function int yyget_debug() (_Z11yyget_debugv, funcdef_no=113, decl_uid=5461, cgraph_uid=113, symbol_order=140)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 10 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i  10 ax=[`yy_flex_debug']                    :athlon-direct,athlon-load
;;	  0--> b  0: i  11 use ax                                  :nothing
;;	  1--> b  0: i  16 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 10
;;   new tail = 16



starting the processing of deferred insns
ending the processing of deferred insns


int yyget_debug()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 14 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 14 3 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 14 10 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 10 2 11 2 (set (reg/i:SI 0 ax)
        (mem/c:SI (symbol_ref:DI ("yy_flex_debug") [flags 0x2]  <var_decl 0x7f88bc080ab0 yy_flex_debug>) [2 yy_flex_debug+0 S4 A32])) lex.yy.c:2036 90 {*movsi_internal}
     (nil))
(insn 11 10 16 2 (use (reg/i:SI 0 ax)) lex.yy.c:2036 -1
     (nil))
(jump_insn:TI 16 11 15 2 (simple_return) lex.yy.c:2036 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 16 13)
(note 13 15 0 NOTE_INSN_DELETED)

;; Function void yyset_debug(int) (_Z11yyset_debugi, funcdef_no=114, decl_uid=5463, cgraph_uid=114, symbol_order=141)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 6 to 12 -- after reload
;;   ======================================================

;;	  0--> b  0: i   6 [`yy_flex_debug']=di                    :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i  12 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 6
;;   new tail = 12



starting the processing of deferred insns
ending the processing of deferred insns


void yyset_debug(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 19{16d,3u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 10 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 10 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 10 6 2 NOTE_INSN_FUNCTION_BEG)
(insn:TI 6 3 12 2 (set (mem/c:SI (symbol_ref:DI ("yy_flex_debug") [flags 0x2]  <var_decl 0x7f88bc080ab0 yy_flex_debug>) [2 yy_flex_debug+0 S4 A32])
        (reg/v:SI 5 di [orig:87 _bdebug ] [87])) lex.yy.c:2040 90 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 5 di [orig:87 _bdebug ] [87])
        (nil)))
(jump_insn:TI 12 6 11 2 (simple_return) lex.yy.c:2040 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 12 9)
(note 9 11 0 NOTE_INSN_DELETED)

;; Function int yylex_destroy() (_Z13yylex_destroyv, funcdef_no=116, decl_uid=5460, cgraph_uid=116, symbol_order=143)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)


int yylex_destroy()

Dataflow summary:
def_info->table_size = 388, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={6d,3u} r1={4d} r2={4d} r3={3d,4u} r4={4d} r5={6d,3u} r6={3d,6u} r7={7d,17u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={8d,2u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 288{253d,35u,0e} in 34{31 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 0 )->[2]->( 3 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 6 [bp] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 2 )->[3]->( 6 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	

( 5 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 2 4 )->[5]->( 6 4 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

( 5 3 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

( 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 7 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
  Adding insn 118 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
  Adding insn 24 to worklist
  Adding insn 106 to worklist
  Adding insn 62 to worklist
  Adding insn 39 to worklist
  Adding insn 38 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 29 to worklist
Finished finding needed instructions:
processing block 6 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp]
  Adding insn 105 to worklist
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 116 to worklist
  Adding insn 28 to worklist
processing block 3 lr out =  6 [bp] 7 [sp]
processing block 4 lr out =  6 [bp] 7 [sp]
processing block 5 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp]
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 21 to worklist
  Adding insn 90 to worklist
processing block 2 lr out =  6 [bp] 7 [sp]
  Adding insn 6 to worklist
  Adding insn 5 to worklist
  Adding insn 98 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 9 (  1.3)
;;   ======================================================
;;   -- basic block 2 from 96 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i  96 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i  97 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  98 {sp=sp-0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  2--> b  0: i   5 bp=[`_ZL15yy_buffer_stack']             :athlon-direct,athlon-load
;;	  5--> b  0: i   6 flags=cmp(bp,0)                         :athlon-direct,athlon-ieu
;;	  6--> b  0: i   7 pc={(flags!=0)?L49:pc}                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 96
;;   new tail = 7

;;   ======================================================
;;   -- basic block 3 from 118 to 118 -- after reload
;;   ======================================================

;;	  0--> b  0: i 118 pc=L25                                  :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 118
;;   new tail = 118

;;   ======================================================
;;   -- basic block 4 from 55 to 57 -- after reload
;;   ======================================================

;;	  0--> b  0: i  55 call [`_Z16yy_delete_bufferP15yy_buffer_state']:athlon-vector,athlon-ieu
;;	  1--> b  0: i  56 [bx]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  57 call [`_Z18yypop_buffer_statev']        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 55
;;   new tail = 57

;;   ======================================================
;;   -- basic block 5 from 90 to 24 -- after reload
;;   ======================================================

;;	  0--> b  0: i  90 ax=[`_ZL19yy_buffer_stack_top']         :athlon-direct,athlon-load
;;	  3--> b  0: i  21 bx=ax*0x8+bp                            :athlon-direct,athlon-agu,nothing
;;	  5--> b  0: i  22 di=[bx]                                 :athlon-direct,athlon-load
;;	  8--> b  0: i  23 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  9--> b  0: i  24 pc={(flags!=0)?L120:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 90
;;   new tail = 24

;;   ======================================================
;;   -- basic block 6 from 27 to 106 -- after reload
;;   ======================================================

;;	  0--> b  0: i  27 loc bp                                  :nothing
;;	  0--> b  0: i  28 di=bp                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i  29 call [`free']                           :athlon-vector,athlon-ieu
;;	  1--> b  0: i  30 loc clobber                             :nothing
;;	  2--> b  0: i  31 [`_ZL15yy_buffer_stack']=0              :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i  32 [`yylineno']=0x1                        :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 116 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  33 [`_ZL19yy_buffer_stack_top']=0          :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  34 [`_ZL19yy_buffer_stack_max']=0          :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i  62 use ax                                  :nothing
;;	  4--> b  0: i  35 [`_ZL10yy_c_buf_p']=0                   :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  36 [`_ZL7yy_init']=0                       :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  37 [`_ZL8yy_start']=0                      :athlon-direct,athlon-agu,athlon-store
;;	  5--> b  0: i  38 [`yyin']=0                              :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  39 [`yyout']=0                             :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i 103 {sp=sp+0x8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  7--> b  0: i 104 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  8--> b  0: i 105 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  9--> b  0: i 106 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 9
;;   new head = 27
;;   new tail = 106



starting the processing of deferred insns
ending the processing of deferred insns


int yylex_destroy()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={6d,3u} r1={4d} r2={4d} r3={3d,4u} r4={4d} r5={6d,3u} r6={3d,6u} r7={7d,17u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={8d,2u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 288{253d,35u,0e} in 34{31 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 6 [bp] 7 [sp] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 6 [bp] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 96 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 96 2 97 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) lex.yy.c:2076 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 97 96 98 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) lex.yy.c:2076 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn/f:TI 98 97 99 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:2076 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (nil))))
(note 99 98 5 2 NOTE_INSN_PROLOGUE_END)
(insn 5 99 6 2 (set (reg/f:DI 6 bp [orig:91 D.6873 ] [91])
        (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn:TI 6 5 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 6 bp [orig:91 D.6873 ] [91])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 7 6 117 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 49)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9550 (nil)))
 -> 49)
;;  succ:       3 [4.5%]  (FALLTHRU)
;;              5 [95.5%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 40, maybe hot
;;  prev block 2, next block 4, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [4.5%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 117 7 118 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 118 117 119 3 (set (pc)
        (label_ref 25)) 654 {jump}
     (nil)
 -> 25)
;;  succ:       6 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

(barrier 119 118 120)
;; basic block 4, loop depth 0, count 0, freq 9120, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [95.5%]  (CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 120 119 53 4 363 "" [1 uses])
(note 53 120 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 55 53 56 4 (call (mem:QI (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>) [0 yy_delete_buffer S1 A8])
        (const_int 0 [0])) lex.yy.c:2080 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z16yy_delete_bufferP15yy_buffer_state") [flags 0x3]  <function_decl 0x7f88bc07c438 yy_delete_buffer>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 56 55 57 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:92 D.6873 ] [92]) [1  S8 A64])
        (const_int 0 [0])) lex.yy.c:2081 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:92 D.6873 ] [92])
        (nil)))
(call_insn:TI 57 56 49 4 (call (mem:QI (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>) [0 yypop_buffer_state S1 A8])
        (const_int 0 [0])) lex.yy.c:2082 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Z18yypop_buffer_statev") [flags 0x3]  <function_decl 0x7f88bc07c6c0 yypop_buffer_state>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;;  succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 9550, maybe hot
;; Invalid sum of incoming frequencies 9960, should be 9550
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [95.5%]  (CAN_FALLTHRU)
;;              4 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label 49 57 18 5 353 "" [1 uses])
(note 18 49 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 20 18 90 5 NOTE_INSN_DELETED)
(insn:TI 90 20 21 5 (set (reg:DI 0 ax [orig:100 yy_buffer_stack_top ] [100])
        (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (nil)))
(insn:TI 21 90 22 5 (set (reg/f:DI 3 bx [orig:89 D.6873 ] [89])
        (plus:DI (mult:DI (reg:DI 0 ax [orig:100 yy_buffer_stack_top ] [100])
                (const_int 8 [0x8]))
            (reg/f:DI 6 bp [orig:91 D.6873 ] [91]))) lex.yy.c:2079 214 {*leadi}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:100 yy_buffer_stack_top ] [100])
        (nil)))
(insn:TI 22 21 23 5 (set (reg/f:DI 5 di [orig:90 D.6874 ] [90])
        (mem/f:DI (reg/f:DI 3 bx [orig:89 D.6873 ] [89]) [1  S8 A64])) lex.yy.c:2079 89 {*movdi_internal}
     (nil))
(insn:TI 23 22 24 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:90 D.6874 ] [90])
            (const_int 0 [0]))) lex.yy.c:2079 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 24 23 25 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 120)
            (pc))) lex.yy.c:2079 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9550 (nil)))
 -> 120)
;;  succ:       6 [4.5%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              4 [95.5%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 880, maybe hot
;; Invalid sum of incoming frequencies 470, should be 880
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [4.5%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;;              3 [100.0%]  (CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  kill	 17 [flags]
(code_label 25 24 26 6 350 "" [1 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(debug_insn 27 26 28 6 (var_location:DI ptr (reg/f:DI 6 bp [orig:91 D.6873 ] [91])) lex.yy.c:2086 -1
     (nil))
(insn:TI 28 27 29 6 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [orig:91 D.6873 ] [91])) lex.yy.c:2141 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:91 D.6873 ] [91])
        (nil)))
(call_insn:TI 29 28 30 6 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(debug_insn 30 29 31 6 (var_location:DI ptr (clobber (const_int 0 [0]))) lex.yy.c:2086 -1
     (nil))
(insn:TI 31 30 32 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL15yy_buffer_stack") [flags 0x2]  <var_decl 0x7f88bc080240 yy_buffer_stack>) [1 yy_buffer_stack+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2087 89 {*movdi_internal}
     (nil))
(insn 32 31 116 6 (set (mem/c:SI (symbol_ref:DI ("yylineno") [flags 0x2]  <var_decl 0x7f88bc0807e0 yylineno>) [2 yylineno+0 S4 A32])
        (const_int 1 [0x1])) lex.yy.c:2050 90 {*movsi_internal}
     (nil))
(insn 116 32 33 6 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) lex.yy.c:2094 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 33 116 34 6 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_top") [flags 0x2]  <var_decl 0x7f88bc080120 yy_buffer_stack_top>) [4 yy_buffer_stack_top+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2053 89 {*movdi_internal}
     (nil))
(insn 34 33 62 6 (set (mem/c:DI (symbol_ref:DI ("_ZL19yy_buffer_stack_max") [flags 0x2]  <var_decl 0x7f88bc0801b0 yy_buffer_stack_max>) [4 yy_buffer_stack_max+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2054 89 {*movdi_internal}
     (nil))
(insn 62 34 35 6 (use (reg/i:SI 0 ax)) lex.yy.c:2094 -1
     (nil))
(insn:TI 35 62 36 6 (set (mem/f/c:DI (symbol_ref:DI ("_ZL10yy_c_buf_p") [flags 0x2]  <var_decl 0x7f88bc080480 yy_c_buf_p>) [1 yy_c_buf_p+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2055 89 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (mem/c:SI (symbol_ref:DI ("_ZL7yy_init") [flags 0x2]  <var_decl 0x7f88bc080510 yy_init>) [2 yy_init+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:2056 90 {*movsi_internal}
     (nil))
(insn:TI 37 36 38 6 (set (mem/c:SI (symbol_ref:DI ("_ZL8yy_start") [flags 0x2]  <var_decl 0x7f88bc0805a0 yy_start>) [2 yy_start+0 S4 A32])
        (const_int 0 [0])) lex.yy.c:2057 90 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (mem/f/c:DI (symbol_ref:DI ("yyin") [flags 0x2]  <var_decl 0x7f88bc02e5a0 yyin>) [1 yyin+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2064 89 {*movdi_internal}
     (nil))
(insn:TI 39 38 121 6 (set (mem/f/c:DI (symbol_ref:DI ("yyout") [flags 0x2]  <var_decl 0x7f88bc080000 yyout>) [1 yyout+0 S8 A64])
        (const_int 0 [0])) lex.yy.c:2065 89 {*movdi_internal}
     (nil))
(note 121 39 103 6 NOTE_INSN_EPILOGUE_BEG)
(insn/f 103 121 104 6 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) lex.yy.c:2094 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 8 [0x8])))
            (nil))))
(insn/f:TI 104 103 105 6 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:2094 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 105 104 106 6 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) lex.yy.c:2094 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 106 105 107 6 (simple_return) lex.yy.c:2094 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]

(barrier 107 106 92)
(note 92 107 0 NOTE_INSN_DELETED)

;; Function void* yyalloc(yy_size_t) (_Z7yyallocm, funcdef_no=117, decl_uid=4279, cgraph_uid=117, symbol_order=144)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i   7 ax=call [`malloc']                      :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 7
;;   new tail = 7



starting the processing of deferred insns
ending the processing of deferred insns


void* yyalloc(yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={2d,1u} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 93{88d,5u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 4 1 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 15 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 15 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j:TI 7 3 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2123 671 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f88bc32aa20 malloc>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 8 7 14)
(note 14 8 0 NOTE_INSN_DELETED)

;; Function void* yyrealloc(void*, yy_size_t) (_Z9yyreallocPvm, funcdef_no=118, decl_uid=4282, cgraph_uid=118, symbol_order=145)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 9 to 9 -- after reload
;;   ======================================================

;;	  0--> b  0: i   9 ax=call [`realloc']                     :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 9
;;   new tail = 9



starting the processing of deferred insns
ending the processing of deferred insns


void* yyrealloc(void*, yy_size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={2d,1u} r1={2d} r2={2d} r4={2d,1u} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 94{88d,6u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 5 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 17 5 4 2 NOTE_INSN_PROLOGUE_END)
(note 4 17 9 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j:TI 9 4 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) lex.yy.c:2136 671 {*sibcall_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f88bc32c870 realloc>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 10 9 16)
(note 16 10 0 NOTE_INSN_DELETED)

;; Function void yyfree(void*) (_Z6yyfreePv, funcdef_no=119, decl_uid=4284, cgraph_uid=119, symbol_order=146)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 7 -- after reload
;;   ======================================================

;;	  0--> b  0: i   7 call [`free']                           :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 7
;;   new tail = 7



starting the processing of deferred insns
ending the processing of deferred insns


void yyfree(void*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 92{88d,4u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 12 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 12 4 3 2 NOTE_INSN_PROLOGUE_END)
(note 3 12 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j:TI 7 3 8 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) lex.yy.c:2141 662 {*sibcall}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f88bc3201b0 free>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)
